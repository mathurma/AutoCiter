<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN" "http://jats.nlm.nih.gov/publishing/1.1d3/JATS-journalpublishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="1.1d3" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id>
<journal-title-group>
<journal-title>PLOS Computational Biology</journal-title>
</journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-17-01370</article-id>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1005944</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Research Article</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Database and informatics methods</subject><subj-group><subject>Bioinformatics</subject><subj-group><subject>Sequence analysis</subject><subj-group><subject>Sequence alignment</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Genomics</subject><subj-group><subject>Plant genomics</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Biotechnology</subject><subj-group><subject>Plant biotechnology</subject><subj-group><subject>Plant genomics</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Plant science</subject><subj-group><subject>Plant biotechnology</subject><subj-group><subject>Plant genomics</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Plant genetics</subject><subj-group><subject>Plant genomics</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Plant science</subject><subj-group><subject>Plant genetics</subject><subj-group><subject>Plant genomics</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Computational techniques</subject><subj-group><subject>Split-decomposition method</subject><subj-group><subject>Multiple alignment calculation</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Genomics</subject><subj-group><subject>Human genomics</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Experimental organism systems</subject><subj-group><subject>Model organisms</subject><subj-group><subject>Arabidopsis thaliana</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Model organisms</subject><subj-group><subject>Arabidopsis thaliana</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Organisms</subject><subj-group><subject>Eukaryota</subject><subj-group><subject>Plants</subject><subj-group><subject>Brassica</subject><subj-group><subject>Arabidopsis thaliana</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Experimental organism systems</subject><subj-group><subject>Plant and algal models</subject><subj-group><subject>Arabidopsis thaliana</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Computer software</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Genomics</subject><subj-group><subject>Animal genomics</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Organisms</subject><subj-group><subject>Eukaryota</subject><subj-group><subject>Animals</subject><subj-group><subject>Vertebrates</subject><subj-group><subject>Amniotes</subject><subj-group><subject>Mammals</subject><subj-group><subject>Primates</subject><subj-group><subject>Apes</subject><subj-group><subject>Chimpanzees</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>MUMmer4: A fast and versatile genome alignment system</article-title>
<alt-title alt-title-type="running-head">MUMmer4 genome alignment system</alt-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-5083-5925</contrib-id>
<name name-style="western">
<surname>Marçais</surname> <given-names>Guillaume</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Data curation</role>
<role content-type="http://credit.casrai.org/">Investigation</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Validation</role>
<role content-type="http://credit.casrai.org/">Writing – original draft</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Delcher</surname> <given-names>Arthur L.</given-names></name>
<role content-type="http://credit.casrai.org/">Data curation</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Validation</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Phillippy</surname> <given-names>Adam M.</given-names></name>
<role content-type="http://credit.casrai.org/">Data curation</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Validation</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff004"><sup>4</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Coston</surname> <given-names>Rachel</given-names></name>
<role content-type="http://credit.casrai.org/">Formal analysis</role>
<role content-type="http://credit.casrai.org/">Validation</role>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Salzberg</surname> <given-names>Steven L.</given-names></name>
<role content-type="http://credit.casrai.org/">Funding acquisition</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Validation</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
<xref ref-type="aff" rid="aff005"><sup>5</sup></xref>
</contrib>
<contrib contrib-type="author" corresp="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0001-5091-3092</contrib-id>
<name name-style="western">
<surname>Zimin</surname> <given-names>Aleksey</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Data curation</role>
<role content-type="http://credit.casrai.org/">Funding acquisition</role>
<role content-type="http://credit.casrai.org/">Investigation</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Project administration</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Supervision</role>
<role content-type="http://credit.casrai.org/">Validation</role>
<role content-type="http://credit.casrai.org/">Visualization</role>
<role content-type="http://credit.casrai.org/">Writing – original draft</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
</contrib-group>
<aff id="aff001">
<label>1</label>
<addr-line>Institute for Physical Science and Technology, University of Maryland, College Park, Maryland, United States of America</addr-line>
</aff>
<aff id="aff002">
<label>2</label>
<addr-line>Computational Biology Department, Carnegie Mellon University, Pittsburgh, Pennsylvania, United States of America</addr-line>
</aff>
<aff id="aff003">
<label>3</label>
<addr-line>Center for Computational Biology, Johns Hopkins School of Medicine, Baltimore, Maryland, United States of America</addr-line>
</aff>
<aff id="aff004">
<label>4</label>
<addr-line>National Human Genome Research Institute, Bethesda, Maryland, United States of America</addr-line>
</aff>
<aff id="aff005">
<label>5</label>
<addr-line>Departments of Biomedical Engineering, Computer Science, and Biostatistics, Johns Hopkins University, Baltimore, Maryland, United States of America</addr-line>
</aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>Darling</surname> <given-names>Aaron E.</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1">
<addr-line>University of Technology Sydney, AUSTRALIA</addr-line>
</aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>The authors have declared that no competing interests exist.</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">gmarcais@cs.cmu.edu</email> (GM); <email xlink:type="simple">alekseyz@ipst.umd.edu</email> (AZ)</corresp>
</author-notes>
<pub-date pub-type="collection">
<month>1</month>
<year>2018</year>
</pub-date>
<pub-date pub-type="epub">
<day>26</day>
<month>1</month>
<year>2018</year>
</pub-date>
<volume>14</volume>
<issue>1</issue>
<elocation-id>e1005944</elocation-id>
<history>
<date date-type="received">
<day>15</day>
<month>8</month>
<year>2017</year>
</date>
<date date-type="accepted">
<day>1</day>
<month>1</month>
<year>2018</year>
</date>
</history>
<permissions>
<license xlink:href="https://creativecommons.org/publicdomain/zero/1.0/" xlink:type="simple">
<license-p>This is an open access article, free of all copyright, and may be freely reproduced, distributed, transmitted, modified, built upon, or otherwise used by anyone for any lawful purpose. The work is made available under the <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/" xlink:type="simple">Creative Commons CC0</ext-link> public domain dedication.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pcbi.1005944"/>
<abstract>
<p>The MUMmer system and the genome sequence aligner <monospace>nucmer</monospace> included within it are among the most widely used alignment packages in genomics. Since the last major release of MUMmer version 3 in 2004, it has been applied to many types of problems including aligning whole genome sequences, aligning reads to a reference genome, and comparing different assemblies of the same genome. Despite its broad utility, MUMmer3 has limitations that can make it difficult to use for large genomes and for the very large sequence data sets that are common today. In this paper we describe MUMmer4, a substantially improved version of MUMmer that addresses genome size constraints by changing the 32-bit suffix tree data structure at the core of MUMmer to a 48-bit suffix array, and that offers improved speed through parallel processing of input query sequences. With a theoretical limit on the input size of 141Tbp, MUMmer4 can now work with input sequences of any biologically realistic length. We show that as a result of these enhancements, the <monospace>nucmer</monospace> program in MUMmer4 is easily able to handle alignments of large genomes; we illustrate this with an alignment of the human and chimpanzee genomes, which allows us to compute that the two species are 98% identical across 96% of their length. With the enhancements described here, MUMmer4 can also be used to efficiently align reads to reference genomes, although it is less sensitive and accurate than the dedicated read aligners. The nucmer aligner in MUMmer4 can now be called from scripting languages such as Perl, Python and Ruby. These improvements make MUMer4 one the most versatile genome alignment packages available.</p>
</abstract>
<funding-group>
<award-group id="award001">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/100000002</institution-id>
<institution>National Institutes of Health</institution>
</institution-wrap>
</funding-source>
<award-id>R01 GM083873</award-id>
<principal-award-recipient>
<name name-style="western">
<surname>Salzberg</surname> <given-names>Steven L</given-names></name>
</principal-award-recipient>
</award-group>
<award-group id="award002">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/100000936</institution-id>
<institution>Gordon and Betty Moore Foundation</institution>
</institution-wrap>
</funding-source>
<award-id>GBMF4554</award-id>
<principal-award-recipient>
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-5083-5925</contrib-id>
<name name-style="western">
<surname>Marçais</surname> <given-names>Guillaume</given-names></name>
</principal-award-recipient>
</award-group>
<award-group id="award003">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/100000001</institution-id>
<institution>National Science Foundation</institution>
</institution-wrap>
</funding-source>
<award-id>IOS-1238231</award-id>
<principal-award-recipient>
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0001-5091-3092</contrib-id>
<name name-style="western">
<surname>Zimin</surname> <given-names>Aleksey V</given-names></name>
</principal-award-recipient>
</award-group>
<award-group id="award004">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/100000001</institution-id>
<institution>National Science Foundation</institution>
</institution-wrap>
</funding-source>
<award-id>ABR-PG-144893</award-id>
<principal-award-recipient>
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0001-5091-3092</contrib-id>
<name name-style="western">
<surname>Zimin</surname> <given-names>Aleksey V</given-names></name>
</principal-award-recipient>
</award-group>
<funding-statement>This research was supported in part by the U.S. National Institutes of Health under grant R01 GM083873 to Steven Salzberg, in part by the Gordon and Betty Moore Foundation’s Data-Driven Discovery Initiative through Grant GBMF4554 to Carl Kingsford, and in part by National Science Foundation Grants IOS-1238231 to Jan Dvorak, IOS-144893 to Herbert Aldwinckle, Keithanne Mockaitis, Aleksey Zimin, James Yorke and Marcela Yepes. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
</funding-group>
<counts>
<fig-count count="1"/>
<table-count count="6"/>
<page-count count="14"/>
</counts>
<custom-meta-group>
<custom-meta>
<meta-name>PLOS Publication Stage</meta-name>
<meta-value>vor-update-to-uncorrected-proof</meta-value>
</custom-meta>
<custom-meta>
<meta-name>Publication Update</meta-name>
<meta-value>2018-02-07</meta-value>
</custom-meta><custom-meta id="data-availability">
<meta-name>Data Availability</meta-name>
<meta-value>The data used for this paper is available from the NCBI SRA <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/sra" xlink:type="simple">https://www.ncbi.nlm.nih.gov/sra</ext-link>, and from the Cold Spring Harbor Laboratory web site <ext-link ext-link-type="uri" xlink:href="http://schatzlab.cshl.edu/data/ectools/" xlink:type="simple">http://schatzlab.cshl.edu/data/ectools/</ext-link>.</meta-value>
</custom-meta>
</custom-meta-group>
</article-meta>
</front>
<body>
<disp-quote>
<p>This is a <italic>PLOS Computational Biology</italic> Software paper.</p>
</disp-quote>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<p>Since the 2004 publication of the MUMmer3 sequence alignment package [<xref ref-type="bibr" rid="pcbi.1005944.ref001">1</xref>], the bioinformatics landscape has changed dramatically. The cost of generating sequence data has decreased rapidly, leading to an exponential increase in the number of assembled genomes and a proliferation of sequencing-based assays. Along with these increases came a corresponding increase in the demand for efficient sequence alignment algorithms. Applications of alignment include resequencing humans to discover single nucleotide polymorphisms (SNPs), sequencing and comparison of different species to detect evolutionarily conserved elements, alignment to detect large-scale chromosomal rearrangements, and more. Alignment algorithms are also used to create and validate genome assemblies and to compare them from one version of a genome to the next. These and other applications motivate the need for fast and reliable sequence alignment techniques that are capable of handling large genomes and large volumes of sequence data. Although raw computing speed has not kept pace with improvements in sequencing efficiency, improvements in memory capacity and parallel processing can be used to compensate; in particular, algorithms can demand larger amounts of random-access memory (RAM) and multiple cores to handle the challenges of larger genomes and data sets.</p>
<p>Many DNA and protein sequence alignment software packages are available today, including BLAST [<xref ref-type="bibr" rid="pcbi.1005944.ref002">2</xref>], Bowtie [<xref ref-type="bibr" rid="pcbi.1005944.ref003">3</xref>], BWA [<xref ref-type="bibr" rid="pcbi.1005944.ref004">4</xref>], Blat [<xref ref-type="bibr" rid="pcbi.1005944.ref005">5</xref>], Mauve [<xref ref-type="bibr" rid="pcbi.1005944.ref006">6</xref>], LASTZ [<xref ref-type="bibr" rid="pcbi.1005944.ref007">7</xref>], and BLASR [<xref ref-type="bibr" rid="pcbi.1005944.ref008">8</xref>]. Some of these systems target a particular type of alignment problem, <italic>e.g.</italic>, BWA and Bowtie2 are best suited for aligning large numbers of relatively short sequences (50-300 bp) to a reference genome; and BLASR is designed to align long high-error-rate (15-20%) sequences to a reference. MUMmer and its sequence alignment component <monospace>nucmer</monospace> were originally developed [<xref ref-type="bibr" rid="pcbi.1005944.ref009">9</xref>] for alignment of whole bacterial genomes to other genomes, but they have evolved into general purpose aligners that remain very widely used. In addition to aligning whole genomes, MUMmer3 is capable of aligning short and long reads with variable error rates to a reference genome, but it is inefficient in doing so. It is not restricted to DNA and can also align protein sequences. MUMmer produces only pairwise genome alignments; i.e., it is designed to compute alignments of pairs of DNA sequences as opposed to multi-alignments of many genome sequences. The very large data sets produced by current sequencing technology, though, sometimes exceed MUMmer3’s limitations on the maximum length of its input sequences, and the scope of these data also require ever-longer run times. To address the runtime challenge, one can use wrapper scripts to break long sequences into smaller ones and run multiple, parallel MUMmer3 jobs in batches. However, such <italic>ad hoc</italic> parallelization is both inefficient and inconvenient, requiring additional steps to combine and process the resulting multiple outputs.</p>
<p>In this paper, we describe MUMmer4, a major new release that has been re-engineered and extended based on MUMmer3, providing full backward compatibility of inputs, outputs and options. The biggest changes affect the <monospace>nucmer</monospace> sequence aligner that is part of MUMmer4, and most of our discussion will focus on these. Although the executables in both MUMmer3 and MUMmer4 are called “<monospace>nucmer</monospace>”, for clarity we will use nucmer3 to refer to the <monospace>nucmer</monospace> program in MUMmer3, and nucmer4 to refer to the MUMmer4 version. Unlike nucmer3, which has limits of ∼500 Mb on the reference sequence size and ∼4 Gb on the query sequence size, nucmer4 can process sequences of essentially any size, with a theoretical limit of 141 trillion bases (Tbp), due to its use of a new 48-bit long suffix array instead of a 32-bit suffix tree. It is unlikely that this limit, which is 1000 times larger than the largest known genome, will be exceeded in any current practical scenario. Furthermore, nucmer4 can use multiple cores on the same computer, resulting in much faster run times. In addition, while nucmer3 computes the suffix tree on the fly–at the time the program is invoked–and discards it after each use, nucmer4 offers a more efficient two-step mode of operation, similar to short read aligners, where the suffix array of the reference can be created and saved to disk, and then loaded repeatedly to align sets of query sequences. Nucmer4 produces output that is identical to nucmer3, except for the order in which the alignments are output. In the results below, we demonstrate nucmer4’s improvements in speed by comparing it to nucmer3 and to other aligners, showing that this multi-purpose sequence aligner compares favorably even with aligners that have been optimized to handle more specialized alignment tasks.</p>
<p>The input and output formats of nucmer4 have also been changed to make it compatible (optionally) with software pipelines that are designed to operate on next-generation sequencing (NGS) reads. On the input side, nucmer4 now accepts both FASTA and FASTQ sequence formats. On the output side, nucmer3 only provided output in a custom format known as a delta file, which can be used by other MUMmer utilities to produce alignments, SNP reports, and plots. Nucmer4 can now produce either a delta file or a SAM file, the most common output format for short read aligners. SAM output is compatible with many other packages, including SAMtools [<xref ref-type="bibr" rid="pcbi.1005944.ref010">10</xref>].</p>
</sec>
<sec id="sec002" sec-type="materials|methods">
<title>Design and implementation</title>
<sec id="sec003">
<title>MUMmer3 implementation</title>
<p>The main pipeline of MUMmer is NUCmer, to align nucleotide sequences. The NUCmer pipeline consists of 4 main programs driven by the <monospace>nucmer</monospace> Perl program: (1) preprocessing of the input sequences (the <monospace>prenuc</monospace> program), (2) finding exact seed matches (the <monospace>mummer</monospace> program), (3) clustering of matches (the <monospace>mgaps</monospace> program), and (4) extending and joining matches (the <monospace>postnuc</monospace> program).</p>
<p>The <monospace>prenuc</monospace> program transforms the multi-fasta file of the reference sequence into a valid format for the <monospace>mummer</monospace> program: a single string using <monospace>x</monospace> characters as a separators.</p>
<p>The <monospace>mummer</monospace> program finds exact matches between pair of sequences that are maximal in length and at <italic>l</italic> bases long. By default, <monospace>mummer</monospace> finds all matches between a query sequence and a reference sequence that are unique in the reference, called Maximal Unique Matches (MUMs). A command-line option allows <monospace>mummer</monospace> to instead find all matches that are unique in both the query and the reference, or to find all Maximal Exact Matches (MEMs) regardless of uniqueness. The “MEM” option should be used with care, as it can produce very large amounts of output when the input sequences contain numerous repeats. In MUMmer3 and earlier versions, this exact match step is accomplished using a suffix tree data structure [<xref ref-type="bibr" rid="pcbi.1005944.ref009">9</xref>].</p>
<p>The MUMs or MEMs are then piped into the <monospace>mgaps</monospace> program which groups the exact matches into clusters based on their proximity to one another. In a typical alignment run, many of these exact matches will become part of longer inexact matches, which will be computed in the next step. <monospace>mgaps</monospace> writes its output to a file.</p>
<p>Finally, the <monospace>postnuc</monospace> program computes longer alignments from the clustered exact matches. It first re-reads the reference sequence to record the names as well as the beginning and ending positions of the original reference subsequences in <italic>S</italic>.</p>
<p>Then the <monospace>postnuc</monospace> program uses a banded Smith-Waterman alignment algorithm [<xref ref-type="bibr" rid="pcbi.1005944.ref011">11</xref>] to find alignments between consecutive exact matches within each cluster and to extend the ends of the first and last matches of each cluster. It writes the resulting alignments to disk, after translating the coordinates from positions in the string <italic>S</italic> back to positions in the reference subsequences.</p>
<p>If this implementation has the advantage of being modular, it suffers from a number of inefficiencies and limitations: (1) the reference sequence is read twice, which creates more I/O, duplicated work, and prevents streaming in the reference; (2) multiple intermediary steps write their results to disk, creating extra I/O; (3) the pipeline is hard to use from another program, written in C or script language.</p>
</sec>
<sec id="sec004">
<title>MUMmer4 implementation</title>
<p>We have designed the nucmer4 program to overcome many of the limitations of the nucmer3 pipeline. It avoids the redundant work done by both <monospace>prenuc</monospace> and <monospace>postnuc</monospace>, parsing the reference sequence only once, thus allowing it to take input from a pipe. It also avoids the use of the file system or pipes to pass information between stages by instead passing C++ objects representing the matches and clusters. This re-design not only provides speed advantages, but it makes it far easier to incorporate nucmer4 into other software packages.</p>
<p>In nucmer4, we implemented the primary computational steps of each component program into a C++ library, named <monospace>libumdmummer</monospace>. Each step in the original nucmer3 pipeline is now represented by a C++ class. Although the individual programs from the pipeline are still available in the MUMmer4 software distribution, the <monospace>nucmer</monospace> program is now a unified, multi-threaded C++ binary that uses the MUMmer library.</p>
<p>The biggest internal change to MUMmer4 is the use of a suffix array instead of a suffix tree to index the reference sequences. Although both suffix trees and suffix arrays require a linear amount of memory to represent the reference sequences, the constant factors are smaller with (carefully implemented) suffix arrays, reducing the total memory requirement. To make the switch, we utilized the <monospace>essaMEM</monospace> program [<xref ref-type="bibr" rid="pcbi.1005944.ref012">12</xref>], which was designed as a drop-in replacement for MUMmer. The MUMmer4 code includes a wrapper around the essaMEM code that replaces the original suffix tree-building code.</p>
<p>In addition, we replaced the <monospace>qsufsort</monospace> [<xref ref-type="bibr" rid="pcbi.1005944.ref013">13</xref>] suffix array construction code in <monospace>essaMEM</monospace> by the faster library <monospace>divsufsort</monospace> [<xref ref-type="bibr" rid="pcbi.1005944.ref014">14</xref>]. After building the suffix array, we then parse the query sequences (nucmer allows the query to be a multi-fasta or multi-fastq file containing any number of sequences) and pass them one by one to worker threads using a lock-free first-in first-out (FIFO) queue. Each worker thread computes the exact alignments, clusters them, and runs the banded Smith-Waterman alignment routine (performed by <monospace>postnuc</monospace> in nucmer3) for its single query sequence.</p>
<p>The results are output to disk or to <monospace>stdout</monospace>, again using a lock-free FIFO queue to synchronize writing by the different threads. The default output appears in delta format and is designed to be identical to the output of Nucmer3. Because of the multi-threaded operation, the order of the sequences in the output file is not strictly preserved, and may be different from run to run. Thus, although the alignments of nucmer4 and nucmer3 are identical, the order in which they appear in the output files might differ.</p>
</sec>
<sec id="sec005">
<title>Query parallelism</title>
<p>One of the most common alignment tasks today is to align many sequences against a reference genome; <italic>e.g.</italic>, aligning a large set of reads to the human genome. In MUMmer4, we introduce parallelism at the level of these query sequences, allowing many of them to be aligned simultaneously against a reference. When aligning large numbers of query sequences, <monospace>nucmer</monospace> can achieve a high level of concurrency, limited only by the number of processing cores. On the other hand, if the query contains a small number of large sequences (<italic>e.g.</italic>, entire chromosomes), the concurrency is limited by the number of sequences in the query. In the limiting case of aligning a single query to the reference, query parallelism provides no benefit.</p>
</sec>
<sec id="sec006">
<title>Changes to built-in size limits</title>
<p>One of the built-in limitations in MUMmer3 is a strict upper bound on the lengths of the input sequences. The implementation limits the total reference sequence—<italic>i.e.</italic>, the length of the concatenated string <italic>S</italic>—to ∼536 Mb. This is large enough for all bacterial genomes and for some small eukaryotes, such as <italic>Drosophila melanogaster</italic>; however, it is not sufficient for larger plant and animal genomes, which often exceed 1 Gb and can be as large as 32 Gb as seen, for example, in the sugar pine, <italic>Pinus lambertiana</italic> [<xref ref-type="bibr" rid="pcbi.1005944.ref015">15</xref>]. MUMmer3 also limits the total size of the query sequences to 2<sup>32</sup> − 1 ≈ 4 Gb.</p>
<p>MUMmer4 significantly raises these size limits, making it possible to align even the largest genomes. The length of the reference sequence for each alignment job is limited in principle to 2<sup>47</sup> − 1 ≈ 141 Tb. The available computer hardware provides a more practical limit; MUMmer4 uses 15 bytes per base of the reference sequence to store the index. Thus for example, if the reference sequence were 66 Gb (equal to 22 human genomes), the suffix array would require about 1Tb of computer RAM. To accommodate computers with limited RAM, MUMmer4 includes a new “<monospace>--batch X</monospace>” option that automatically splits long reference sequences and processes them in smaller batches. Specifically, it loads X bases of reference sequence, matches all query sequences against the first batch, then loads the next X bases of reference and so on. In practice this eliminates any restrictions on the size of the input reference sequence and also allows the user to tune the alignment runs to the total available computer memory. MUMmer4 has no absolute limit on the total query sequence size. Also, as a minor improvement, MUMmer4 removes the previous 128-character limit on the length of the names of reference and query sequences.</p>
</sec>
<sec id="sec007">
<title>Saving a large index to disk</title>
<p>MUMmer4 now includes options to save and load the suffix array for a given reference. The most popular systems for aligning reads to a reference genome, Bowtie2 [<xref ref-type="bibr" rid="pcbi.1005944.ref016">16</xref>] and BWA [<xref ref-type="bibr" rid="pcbi.1005944.ref004">4</xref>], both assume that their index (a Burrows-Wheeler transform using the FM index) has been pre-computed and stored in a file, which allows the alignment step to run much faster. Suffix array construction is primarily a single-threaded task that can take about 36 minutes for a 3 Gb genome. Many large genomes—<italic>e.g.</italic>, the human genome, the mouse genome, and other model organisms—are essentially static, with periodic updates and controlled versions. Thus there is no need to build the suffix array on the fly (at the time of alignment) if one intends to use the same reference repeatedly, <italic>e.g.</italic>, to align Illumina data to a human reference genome. Using the new MUMmer4 option, the suffix array can be built once, saved and then loaded for each run.</p>
<p>For a large reference genome, MUMmer4 uses approximately 13-14 bytes/base for the index (6 bytes per base for the suffix array, another 6 for the inverse suffix array, and 1 byte for the LCP array). For example, the size of the suffix array for the human genome is approximately 39 GB. Loading the suffix array from memory is much faster than constructing it from scratch, and on a typical server with 200 MB/sec input speed, a 39 GB suffix array will load in approximately 3 minutes.</p>
<p>Nucmer4 requires additional memory in scenarios when running with multiple threads on query sequences that are large. Our parallelization routine distributes multiple query sequences into multiple threads, one sequence per thread, and query sequences have to be loaded into memory. The step of loading multiple query sequences into memory at the same time increases peak memory usage in such scenarios, proportional to the number of threads used. With only one thread, memory usage is similar between nucmer3 and nucmer4.</p>
<p>The original output format of <monospace>nucmer</monospace>, the delta format, contains only the minimum information necessary to quickly recreate the alignment. It contains the name of the matching sequences, the length of the match, number of errors and positions of indels. An important addition in MUMmer4 is option to produce output in <monospace>SAM</monospace> format, one of the most widely used formats for alignments of NGS data [<xref ref-type="bibr" rid="pcbi.1005944.ref010">10</xref>]. This also allows the MUMmer4 output to be used in any of the numerous tools that require SAM files as input. Nucmer4 supports two different options for SAM format output. With <monospace>--sam-short</monospace>, nucmer4 reports only the name of the matching sequence, length, and CIGAR string (which reports the indel positions). With <monospace>--sam-long</monospace>, it additionally reports the MD string (which specifies the mismatching positions), the sequence and, if applicable, the quality values of the matching sequence. The long format is more expensive to compute and it generates larger output files, but this option allows nucmer4 to match the behavior of other aligners such as Bowtie2 or BWA.</p>
<p>We transformed the global variables in the original code to object instance variables. As a result, it is possible for an application using <monospace>libumdmummer</monospace> to instantiate multiple aligner objects concurrently, for example in a multi-threaded program. The new library is also usable from the scripting languages Python, Perl or Ruby, making MUMmer4 much more flexible. We used the <monospace>SWIG</monospace> [<xref ref-type="bibr" rid="pcbi.1005944.ref017">17</xref>] tool to generate the script bindings, allowing developers to create bindings to the many other languages supported by SWIG with little extra work. This binding allows a user to align a pair of sequences directly from the scripting languages, returning an array of the alignments. Examples of how to use the library in a C++ program or in a script are provided in the supplementary material (<xref ref-type="supplementary-material" rid="pcbi.1005944.s001">S1 File</xref>).</p>
</sec>
</sec>
<sec id="sec008" sec-type="results">
<title>Results</title>
<p>The enhancements in MUMmer4 allow it to align (1) a pair of genomes to each other, (2) two large sets of sequences to one another, or (3) a set of reads to a reference genome. This functionality stands in contrast to specialized NGS alignment tools such as Bowtie2, BWA or BLASR, which are designed for aligning reads to a reference genome. BWA and Bowtie2 are designed primarily for alignment of short Illumina sequences, while BLASR is designed for alignment of long high-error-rate sequences, such as those produced by the Pacific Biosciences SMRT and Oxford Nanopore MinION technologies. MUMmer4’s suffix array data structure ensures that alignment time is a linear function of the read length and is independent of the size of the reference genome, similar to NGS aligners that use the Burrows-Wheeler transform as their principal data structure.</p>
<p>Although specialized read aligners are more accurate and sensitive (and thus likely preferable) for that task, we show below that when run with default settings, the speed of MUMmer4 is comparable to Bowtie2, BWA and BLASR for the alignment of both short low-error-rate (Illumina) and long high-error-read (PacBio) sequences to a reference genome. MUMmer4 is much faster than Mauve [<xref ref-type="bibr" rid="pcbi.1005944.ref006">6</xref>] and LASTZ [<xref ref-type="bibr" rid="pcbi.1005944.ref007">7</xref>] aligners, built using similar data structures. <xref ref-type="table" rid="pcbi.1005944.t001">Table 1</xref> shows detailed feature comparison between MUMmer4 and the other aligners. MUMmer4 is a significant upgrade over MUMmer3 in terms of features. MUMmer4 is the only aligner that can be called from Perl, Python or C++. Unlike Mauve, LASTZ or Blat, it is multi-threaded. It is only available for Linux and users looking for Windows-compatible aligner with a nice GUI (Graphical User Interface) may be better off using Mauve. MUMmer4 does not compute P-values or E-values for its alignments, and thus Blast, LASTZ or BLASR are preferred over MUMmer4 if they are needed.</p>
<table-wrap id="pcbi.1005944.t001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005944.t001</object-id>
<label>Table 1</label>
<caption>
<title>Comparison of aligner features.</title>
<p>A checkmark means the feature is present and usable, otherwise the feature is absent or its use is impractical. Features that are absent by design are marked with a dash.</p>
</caption>
<alternatives>
<graphic id="pcbi.1005944.t001g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005944.t001" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left">Aligner</th>
<th align="center">Graphical User Interface</th>
<th align="center">Multi-platform Windows/Linux</th>
<th align="center">Multi-threaded</th>
<th align="center">Callable from C++, scripting languages</th>
<th align="center">Whole genome aln.</th>
<th align="center">Short read aln.</th>
<th align="center">Long read aln.</th>
<th align="center">SAM format output</th>
<th align="center">P-value output</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">MUMmer4</td>
<td align="center"/>
<td align="center"/>
<td align="center">✔</td>
<td align="center">✔</td>
<td align="center">✔</td>
<td align="center">✔</td>
<td align="center">✔</td>
<td align="center">✔</td>
<td align="center"/>
</tr>
<tr>
<td align="left">MUMmer3</td>
<td align="center"/>
<td align="center"/>
<td align="center"/>
<td align="center"/>
<td align="center">✔</td>
<td align="center"/>
<td align="center"/>
<td align="center"/>
<td align="center"/>
</tr>
<tr>
<td align="left">Blast</td>
<td align="center">✔</td>
<td align="center">✔</td>
<td align="center">✔</td>
<td align="center"/>
<td align="center">✔</td>
<td align="center"/>
<td align="center"/>
<td align="center"/>
<td align="center">✔</td>
</tr>
<tr>
<td align="left">Blat</td>
<td align="center"/>
<td align="center"/>
<td align="center"/>
<td align="center"/>
<td align="center">✔</td>
<td align="center"/>
<td align="center"/>
<td align="center"/>
<td align="center">✔</td>
</tr>
<tr>
<td align="left">Mauve</td>
<td align="center">✔</td>
<td align="center">✔</td>
<td align="center"/>
<td align="center"/>
<td align="center">✔</td>
<td align="center"/>
<td align="center"/>
<td align="center"/>
<td align="center"/>
</tr>
<tr>
<td align="left">LASTZ</td>
<td align="center"/>
<td align="center"/>
<td align="center"/>
<td align="center"/>
<td align="center">✔</td>
<td align="center"/>
<td align="center"/>
<td align="center">✔</td>
<td align="center">✔</td>
</tr>
<tr>
<td align="left">bwa-mem</td>
<td align="center"/>
<td align="center"/>
<td align="center">✔</td>
<td align="center"/>
<td align="center">-</td>
<td align="center">✔</td>
<td align="center">✔</td>
<td align="center">✔</td>
<td align="center"/>
</tr>
<tr>
<td align="left">Bowtie2</td>
<td align="center"/>
<td align="center"/>
<td align="center">✔</td>
<td align="center"/>
<td align="center">-</td>
<td align="center">✔</td>
<td align="center">-</td>
<td align="center">✔</td>
<td align="center"/>
</tr>
<tr>
<td align="left">BLASR</td>
<td align="center"/>
<td align="center"/>
<td align="center">✔</td>
<td align="center"/>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">✔</td>
<td align="center">✔</td>
<td align="center">✔</td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
<p>We also show substantial improvements in speed and versatility compared to the MUMmer3 package. In the Supplementary material, we report all settings and command line parameters used for generating the results shown here. All timings were measured on a dual-CPU, 32-core AMD Opteron 6276 computer with 256 GB of DDR3 PC3-12800 RAM.</p>
<sec id="sec009">
<title>Data used</title>
<p>For the comparisons shown here, we used two different organisms as reference genomes. For mapping reads to a genome, we used the <italic>Arabidopsis thaliana</italic> Col-0 reference genome [<xref ref-type="bibr" rid="pcbi.1005944.ref018">18</xref>] and the human reference genome, version GRCh38.p7 [<xref ref-type="bibr" rid="pcbi.1005944.ref019">19</xref>]. We removed all alt sequences from the human reference sequence, because they could skew our human—chimpanzee genome to genome comparison statistics.</p>
<p>As a test of MUMmer’s performance on aligning large genomes, we aligned the reference assemblies of the human genome and the chimpanzee (<italic>Pan troglodytes</italic>) genome [<xref ref-type="bibr" rid="pcbi.1005944.ref020">20</xref>] (release PanTro4, GenBank accession GCF_000001515.6) to one another. To compare MUMmer4’s performance to MUMmer3 on aligning whole genomes, we provide the timing results for aligning the <italic>Arabidopsis lyrata</italic> assembly 1.0 [<xref ref-type="bibr" rid="pcbi.1005944.ref021">21</xref>] to the <italic>A. thaliana</italic> reference. Below we describe MUMmer4’s performance statistics on these tasks as well as summaries of the resulting alignments.</p>
<p>To benchmark MUMmer4’s performance on aligning reads to a reference genome, we performed two sets of experiments. First, we aligned PacBio SMRT and Illumina reads from <italic>A. thaliana</italic> Ler-0 [<xref ref-type="bibr" rid="pcbi.1005944.ref022">22</xref>], data available from [<xref ref-type="bibr" rid="pcbi.1005944.ref023">23</xref>], to the <italic>A. thaliana</italic> Col-0 reference [<xref ref-type="bibr" rid="pcbi.1005944.ref018">18</xref>]. Second, we aligned a subset of about 20x coverage Illumina and a subset of 10x coverage PacBio reads from the publicly available Ashkenazi data set (available from the Genome in a Bottle project [<xref ref-type="bibr" rid="pcbi.1005944.ref024">24</xref>], NCBI SRA accession SRX847862) to the human genome reference GRCh38.p7. Detailed information about these data sets is shown in <xref ref-type="table" rid="pcbi.1005944.t002">Table 2</xref>.</p>
<table-wrap id="pcbi.1005944.t002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005944.t002</object-id>
<label>Table 2</label>
<caption>
<title>Description of the data sets used for aligner comparisons.</title>
<p>The Illumina and PacBio data for <italic>A. thaliana</italic> is available from [<xref ref-type="bibr" rid="pcbi.1005944.ref023">23</xref>]; the human Illumina and PacBio reads are from the Ashkenazi child data set (available from the Genome in a Bottle project [<xref ref-type="bibr" rid="pcbi.1005944.ref024">24</xref>], NCBI SRA accession SRX847862). The reference genomes are the <italic>Arabidopsis thaliana</italic> Col-0 reference genome [<xref ref-type="bibr" rid="pcbi.1005944.ref018">18</xref>], the human reference genome version GRCh38.p7 [<xref ref-type="bibr" rid="pcbi.1005944.ref019">19</xref>], and the chimpanzee (<italic>Pan troglodytes</italic>) genome [<xref ref-type="bibr" rid="pcbi.1005944.ref020">20</xref>] (release PanTro4, GenBank accession GCF00001515.6).</p>
</caption>
<alternatives>
<graphic id="pcbi.1005944.t002g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005944.t002" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left" rowspan="2">Reference</th>
<th align="center" rowspan="2">Genome size</th>
<th align="center" colspan="3">Illumina</th>
<th align="center" colspan="3">PacBio</th>
</tr>
<tr>
<th align="center">number of reads</th>
<th align="center">bases in reads</th>
<th align="center">average read size</th>
<th align="center">number of reads</th>
<th align="center">bases in reads</th>
<th align="center">average read size</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Arabidopsis</td>
<td align="center">120 Mb</td>
<td align="center">23 M</td>
<td align="center">6919 M</td>
<td align="center">300 bp</td>
<td align="center">481 K</td>
<td align="center">2748 M</td>
<td align="center">5713 bp</td>
</tr>
<tr>
<td align="left">Human</td>
<td align="center">3.09 Gb</td>
<td align="center">264 M</td>
<td align="center">39.1 G</td>
<td align="center">300 bp</td>
<td align="center">3.9 M</td>
<td align="center">30.5 G</td>
<td align="center">7821 bp</td>
</tr>
<tr>
<td align="left">Chimp</td>
<td align="center">3.31 Gb</td>
<td align="center" colspan="6"/>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
</sec>
<sec id="sec010">
<title>Genome-to-genome alignment</title>
<p>The primary usage scenario for nucmer3 was to align two genome assemblies or two reference genomes. In this section we demonstrate improvements in timings for such alignments due to parallelization in nucmer4. We use several pairs of plant and animal genomes. <xref ref-type="table" rid="pcbi.1005944.t003">Table 3</xref> summarizes the timings and memory usage for the alignments that we ran. In addition to nucmer version 3 &amp; 4, we ran the Mauve [<xref ref-type="bibr" rid="pcbi.1005944.ref006">6</xref>] and LASTZ [<xref ref-type="bibr" rid="pcbi.1005944.ref007">7</xref>] whole genome aligners that utilize data structures similar to MUMmer. We aborted all runs after 2 days, and if an aligner took longer, we list the run time as &gt; 2 days. Since it is not straightforward to measure aligner’s accuracy in whole genome alignment, we instead measured sensitivity, which is computed as the proportion of the sequence in the alignments between reference and query, not counting the indels. We found that when using default settings, LASTZ is more sensitive than Nucmer4, but runs much more slowly (“LASTZ default” in the table). Thus, in a second experiment, we adjusted the parameters of LASTZ to approximately match the sensitivity of Nucmer4 with default settings (“LASTZ match”). Nucmer3 was unable to align the chimp reference to the human reference due to limitation in the size of the reference sequence (max 500 Mbp). Nucmer4 peak memory usage is higher both due to its 48-bit index, and due to loading 32 large query sequences at a time for parallel processing, but it runs significantly faster than Nucmer3. Below we provide details on the nucmer4 alignments.</p>
<table-wrap id="pcbi.1005944.t003" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005944.t003</object-id>
<label>Table 3</label>
<caption>
<title>Timing and memory usage to align two genome sequences for nucmer3 and nucmer4 compared to Mauve and Lastz aligners built using similar data structures.</title>
<p>We list both wall clock time and CPU time to show how effective is the code in utilizing multiple cores. Nucmer 4 is the fastest, but not the most memory efficient aligner. Nucmer3 failed to align human to chimp assembly due to the restriction on the size of the reference sequence. LASTZ and Mauve runs on human to chimp alignments took over two days, and we stopped them after that. LASTZ defaults are optimized for high sensitivity, resulting in slow performance. Thus for fairness of timing comparisons we ran LASTZ twice: once with default settings and once with parameters that result in sensitivity matching that of nucmer4 with default settings. We list the parameters in the supplement.</p>
</caption>
<alternatives>
<graphic id="pcbi.1005944.t003g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005944.t003" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left"/>
<th align="left"/>
<th align="center">Arabidopsis</th>
<th align="center">Tardigrade</th>
<th align="center">Human/Chimp</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left" rowspan="3">nucmer3</td>
<td align="left">Wall time (min)</td>
<td align="center">17.5</td>
<td align="center">19.6</td>
<td align="center">fail</td>
</tr>
<tr>
<td align="left">CPU time (min)</td>
<td align="center">17.1</td>
<td align="center">19.2</td>
<td align="center">fail</td>
</tr>
<tr>
<td align="left">Memory (GB)</td>
<td align="center">2.1</td>
<td align="center">2.3</td>
<td align="center">fail</td>
</tr>
<tr>
<td align="left" rowspan="3">nucmer4</td>
<td align="left">Wall time (min)</td>
<td align="center">3.7</td>
<td align="center">4.0</td>
<td align="center">207</td>
</tr>
<tr>
<td align="left">CPU time (min)</td>
<td align="center">22</td>
<td align="center">26</td>
<td align="center">2897</td>
</tr>
<tr>
<td align="left">Memory (GB)</td>
<td align="center">4.6</td>
<td align="center">4.9</td>
<td align="center">66</td>
</tr>
<tr>
<td align="left" rowspan="3">Mauve</td>
<td align="left">Wall time (min)</td>
<td align="center">41</td>
<td align="center">273</td>
<td align="center">&gt; 2 days</td>
</tr>
<tr>
<td align="left">CPU time (min)</td>
<td align="center">38.6</td>
<td align="center">268</td>
<td align="center">&gt; 2 days</td>
</tr>
<tr>
<td align="left">Memory (GB)</td>
<td align="center">3.3</td>
<td align="center">4.0</td>
<td align="center">&gt; 2 days</td>
</tr>
<tr>
<td align="left" rowspan="3">LASTZ default</td>
<td align="left">Wall time (min)</td>
<td align="center">1122</td>
<td align="center">&gt; 2 days</td>
<td align="center">&gt; 2 days</td>
</tr>
<tr>
<td align="left">CPU time (min)</td>
<td align="center">1113</td>
<td align="center">&gt; 2 days</td>
<td align="center">&gt; 2 days</td>
</tr>
<tr>
<td align="left">Memory (GB)</td>
<td align="center">1.3</td>
<td align="center"/>
<td align="center"/>
</tr>
<tr>
<td align="left" rowspan="3">LASTZ match</td>
<td align="left">Wall time (min)</td>
<td align="center">66</td>
<td align="center">77</td>
<td align="center">&gt; 2 days</td>
</tr>
<tr>
<td align="left">CPU time (min)</td>
<td align="center">66</td>
<td align="center">76</td>
<td align="center">&gt; 2 days</td>
</tr>
<tr>
<td align="left">Memory (GB)</td>
<td align="center">0.6</td>
<td align="center">0.4</td>
<td align="center"/>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
<sec id="sec011">
<title>Human versus chimp</title>
<p>First we aligned the current assemblies of human and chimpanzee, using the default nucmer4 options with 32 parallel threads. The alignment took 3 hours and 6 minutes on our 32-core Opteron system, and it used a maximum of 66 GB of RAM. Note that Nucmer3 cannot perform an alignment this large unless one first breaks both genomes into smaller pieces. We used human as the reference and chimpanzee as the query sequence. The human GRCh38 assembly contains 3.088 Gb of sequence while chimpanzee assembly, with 3.31 Gb, contains 7% more DNA. (Note that the chimpanzee genome is far less polished than human, and much of the extra DNA might be explained by haplotype variants or incompletely merged regions; thus the two genomes might be much closer in size than these numbers indicate.)</p>
<p>MUMmer had 2.782 Gb of the sequence in mutual best alignments, where each location in the chimp was aligned to its best hit in human and vice versa, with an average identity of 98.07%. The 1.93% nucleotide-level divergence found here is higher than the 1.23% reported in the original chimpanzee genome paper [<xref ref-type="bibr" rid="pcbi.1005944.ref025">25</xref>]. Our higher divergence is likely due to two factors: first, the 2005 report was based on 2.4 Gb of aligned sequence from older versions of both genomes, while ours is based on 2.782 Gb (16% more sequence) aligned between the current, more-complete versions of both genomes. Second, the original report used different methods, and may have counted fewer small indels than were counted in our alignments. Approximately 306 Mb (9.91%) of the human sequence did not align to the chimpanzee sequence, while 138 Mb (4.15%) of the chimpanzee sequence did not align to human. We detected 390 Mb in alignments where multiple sequences from chimpanzee aligned to the same location in human sequence and thus only one was chosen as the best alignment based on alignment identity. The genomes are very similar across all chromosomes, with the percent identity varying only slightly, from 97.5% to 98.2% for chromosomes 1-22 and X. Chromosome Y was an outlier at 96.6% identity over 84.6% of its length; however this is likely due to the fact that the chimpanzee Y chromosome is much less complete than the human Y.</p>
</sec>
<sec id="sec012">
<title>Two <italic>Arabidopsis</italic> species</title>
<p>The alignment of the 207 Mb <italic>A. lyrata</italic> genome to the 120 Mb <italic>A. thaliana</italic> reference genome with nucmer4 took 3m43s on our test system with default parameters using 32 threads. The same alignment performed with nucmer3—which is single threaded— took 17m32s, about 4.7 times slower. These times include the time taken to build the suffix tree or array. We checked the alignments and they were identical between the two programs, as expected. The alignment determined that there are 68.3 Mb in 48,852 1-to-1 best alignments between these two genome sequences with average identity of 88.2%. Overall there are 83 Mb of sequence in 70,044 many-to-many alignments with the same average identity of 88.2%.</p>
</sec>
<sec id="sec013">
<title>Two assemblies of a tardigrade genome</title>
<p>A pair of recent studies [<xref ref-type="bibr" rid="pcbi.1005944.ref026">26</xref>, <xref ref-type="bibr" rid="pcbi.1005944.ref027">27</xref>] described the assembly of a microscopic animal, the tardigrade (<italic>Hypsibius dujardini</italic>). The first study described a 212 Mb assembly (here designed Hd-Boothby) and used the results to argue for extensive horizontal gene transfer from unrelated species [<xref ref-type="bibr" rid="pcbi.1005944.ref026">26</xref>]. The second study, which appeared a few months later, contradicted the first and described a 135 Mb assembly (Hd-Blaxter) that showed little or no evidence for horizontal gene transfer. We aligned the two assemblies using nucmer4, which took 4 minutes, and compared the results using the <monospace>dnadiff</monospace> program, which is part of the MUMmer package (see <xref ref-type="table" rid="pcbi.1005944.t003">Table 3</xref>).</p>
<p>The alignment results showed that 66.5 Mb in Hd-Boothby, the larger assembly, failed to align to Hd-Blaxter. Conversely, 15.9 Mb in Hd-Blaxter failed to align to Hd-Boothby. Given that contamination was an issue of concern for both assemblies, as explained in detail in [<xref ref-type="bibr" rid="pcbi.1005944.ref027">27</xref>], the nucmer4 output immediately points out which contigs deserve further scrutiny. The results here are consistent with the hypothesis from [<xref ref-type="bibr" rid="pcbi.1005944.ref027">27</xref>] that Hd-Boothby has far more contamination than Hd-Blaxter. Nucmer also revealed that 109 Mb from Hd-Blaxter aligned to 167 Mb from Hd-Boothby, suggesting that the larger assembly contains many duplicated sequences as compared to the smaller one. While the nucmer alignments do not prove that one assembly is superior to the other, they do allow investigators to quickly identify the regions where assemblies disagree, which enables further analyses to determine which one is correct.</p>
</sec>
</sec>
<sec id="sec014">
<title>Alignment of reads to a reference</title>
<p>We can also use nucmer4 to align raw reads to a genome, by providing the genome as a reference and building the suffix array index on that. For optimal speed, one can build the index once and save it as a file (explained above), a new feature in MUMmer4. The suffix array is considerably larger than the compressed Burrows-Wheeler transform used by Bowtie2 and BWA, but the alignment speed is comparable and sometimes faster.</p>
<p><xref ref-type="table" rid="pcbi.1005944.t004">Table 4</xref> compares nucmer4’s performance to several state-of-the-art NGS aligners on the task of aligning both Illumina and PacBio reads to the 120 Mb <italic>Arabidopsis thaliana</italic> genome. Timings were measured on the 32-core AMD Opteron system mentioned above. Default parameters were used for most alignments, except that “<monospace>-x pacbio</monospace>” was used for BWA mem with PacBio data (as instructed by the BWA-MEM documentation), and “<monospace>-l 15 -c 31</monospace>” was used for nucmer4. We recommend these modifications to the default nucmer4 parameters for long reads with error rates above 10%.</p>
<table-wrap id="pcbi.1005944.t004" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005944.t004</object-id>
<label>Table 4</label>
<caption>
<title>Timing and memory usage to align PacBio and Illumina reads to the <italic>Arabidopsis thaliana</italic> reference genome.</title>
<p>Timings reported here include the time used to build the genome index. The alignments reported by nucmer3 and nucmer4 for the Illumina data were identical. Nucmer3 experienced a reproducible crash when aligning PacBio reads to the <italic>A. thaliana</italic> reference.</p>
</caption>
<alternatives>
<graphic id="pcbi.1005944.t004g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005944.t004" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left" rowspan="2"/>
<th align="center" colspan="4">PacBio</th>
<th align="center" colspan="4">Illumina</th>
</tr>
<tr>
<th align="center">time (min)</th>
<th align="center">memory (MB)</th>
<th align="center">aligned (Mbp)</th>
<th align="center">aligned reads</th>
<th align="center">time (min)</th>
<th align="right">memory (MB)</th>
<th align="center">aligned (Mbp)</th>
<th align="center">aligned reads</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">blasr</td>
<td align="center">95</td>
<td align="center">4065</td>
<td align="center">1780</td>
<td align="center">435888</td>
<td align="center"/>
<td align="right"/>
<td align="center"/>
<td align="center"/>
</tr>
<tr>
<td align="left">bwa-mem</td>
<td align="center">49</td>
<td align="center">2162</td>
<td align="center">1944</td>
<td align="center">420912</td>
<td align="right">30</td>
<td align="right">3360</td>
<td align="center">6112</td>
<td align="center">21874366</td>
</tr>
<tr>
<td align="left">bowtie2</td>
<td align="center"/>
<td align="center"/>
<td align="center"/>
<td align="center"/>
<td align="right">24</td>
<td align="right">686</td>
<td align="center">5580</td>
<td align="center">18716070</td>
</tr>
<tr>
<td align="left">nucmer3</td>
<td align="center">fail</td>
<td align="center">fail</td>
<td align="center">fail</td>
<td align="center">fail</td>
<td align="right">334</td>
<td align="right">4688</td>
<td align="center">5651</td>
<td align="center">19873013</td>
</tr>
<tr>
<td align="left">nucmer4</td>
<td align="center">24</td>
<td align="center">5743</td>
<td align="center">1713</td>
<td align="center">424271</td>
<td align="right">29</td>
<td align="right">1283</td>
<td align="center">5651</td>
<td align="center">19873013</td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
<p>To align 481,000 PacBio reads to the Arabidopsis genome, nucmer4 took 24 minutes versus 49 minutes for BWA-MEM and 95 minutes for BLASR (<xref ref-type="table" rid="pcbi.1005944.t004">Table 4</xref>), although nucmer4 required more memory, 5.7 GB versus 4.1 GB (BLASR) and 2.1 GB (BWA-MEM). Nucmer4 aligns about 4% fewer bases than BLASR and about 12% fewer than BWA-MEM, suggesting that BWA-MEM and BLASR are slightly more sensitive, although for this data set we cannot evaluate the correctness of these alignments. To verify the correctness of the alignments, we had to rely on simulated data, in which we know precisely where each read originated. In <xref ref-type="table" rid="pcbi.1005944.t005">Table 5</xref> we show results on simulated 1x human genome coverage and 10x Arabidopsis thaliana genome coverage, both generated using the pbsim software [<xref ref-type="bibr" rid="pcbi.1005944.ref028">28</xref>]. We list the command line that we used to simulate the reads in the Supplementary material. We aligned the faux reads with BLASR, nucmer4 and BWA to the corresponding reference genomes. We found nucmer4 is indeed less sensitive, primarily due to its default behavior of using only unique seeds in the reference. This behavior can be modified with the “<monospace>--maxmatch</monospace>” switch at the expense of run time. Nucmer4 also has marginally higher false alignment rate. The sensitivity numbers are consistent with the results on real data.</p>
<table-wrap id="pcbi.1005944.t005" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005944.t005</object-id>
<label>Table 5</label>
<caption>
<title>Performance of Nucmer4, BLASR and BWA MEM on data simulated by pbsim from human and Arabidopsis reference genomes.</title>
<p>All numbers are percentages from the total of bases that are in the reads aligned correctly, missed, or aligned incorrectly. The numbers may not add to exactly 100 due to rounding.</p>
</caption>
<alternatives>
<graphic id="pcbi.1005944.t005g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005944.t005" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left" rowspan="2"/>
<th align="center" colspan="3">Arabidopsis</th>
<th align="center" colspan="3">Human</th>
</tr>
<tr>
<th align="center">Aligned Correctly</th>
<th align="center">Missed</th>
<th align="center">Aligned Incorrectly</th>
<th align="center">Aligned Correctly</th>
<th align="center">Missed</th>
<th align="right">Aligned Incorrectly</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">nucmer4</td>
<td align="char" char=".">94.0</td>
<td align="char" char=".">3.5</td>
<td align="char" char=".">2.5</td>
<td align="char" char=".">84.4</td>
<td align="char" char=".">10.9</td>
<td align="char" char=".">4.6</td>
</tr>
<tr>
<td align="left">blasr</td>
<td align="char" char=".">98.2</td>
<td align="char" char=".">0.2</td>
<td align="char" char=".">1.7</td>
<td align="char" char=".">91.8</td>
<td align="char" char=".">5.0</td>
<td align="char" char=".">3.2</td>
</tr>
<tr>
<td align="left">bwa-mem</td>
<td align="char" char=".">98.7</td>
<td align="char" char=".">0.5</td>
<td align="char" char=".">0.8</td>
<td align="char" char=".">91.6</td>
<td align="char" char=".">5.9</td>
<td align="char" char=".">2.5</td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
<p>For aligning Illumina reads to Arabidopsis (<xref ref-type="table" rid="pcbi.1005944.t004">Table 4</xref>), nucmer4 was about 30 times faster than Nucmer3 and slightly faster than BWA, but about 20% slower than Bowtie2. Nucmer4 aligned more reads and more sequence than Bowtie2 but about 10% fewer than BWA. For each program, the time reported in <xref ref-type="table" rid="pcbi.1005944.t004">Table 4</xref> is the sum of the time to create the index and to align the reads. Because this is a small reference genome (∼120 Mbp) with about 100x Illumina coverage, the amount of time to create the suffix array or the Burrows-Wheeler index was negligible compared to the time to create the alignments. Nucmer4 used about twice as much memory (1.3 GB) as Bowtie2 (0.69 GB), but less than half as much as BWA (3.4 GB).</p>
<p>The creation of a Burrows-Wheeler index or a suffix array is costly for a large genome such as the 3 Gb human genome. Thus it is common practice to precompute the index and simply load it into memory at the time of alignment. For alignments of reads to the human genome, therefore, we report separately the time to create the index and to align the reads.</p>
<p><xref ref-type="table" rid="pcbi.1005944.t006">Table 6</xref> shows, not surprisingly, that nucmer4 uses much more memory (45.1 GB) than either BWA-MEM (11.2 GB) or Bowtie2 (4.0 GB). However, the 45 GB required for nucmer4 is readily available on contemporary server-class computers. For these data sets (264 M Illumina reads and 3.9 M PacBio reads), Nucmer4 was the fastest program for aligning both Illumina and Pacbio reads, about 10% faster than Bowtie2 and 30% faster than BWA-MEM. Thus by using more memory, nucmer4 makes a trade-off that results in substantially increased speed. Nucmer4 is less sensitive, it aligns 3-5% fewer reads than BWA or Bowtie2, likely due to two reasons. First, it uses relatively long exact matches to seed its alignments. With its default setting used here, nucmer4 used 20-base (or longer) exact matches to seed the alignments, while Bowtie2 and BWA-MEM use shorter seed lengths. Second, by default, the seeds must be unique in the reference sequence, thus no seeds will be found in sub-sections of the reference sequence longer than the seed length, that are present in multiple copies. This behavior can be changed with the “<monospace>--maxmatch</monospace>” switch, which will force nucmer4 to use all seeds at the cost of longer run times.</p>
<table-wrap id="pcbi.1005944.t006" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005944.t006</object-id>
<label>Table 6</label>
<caption>
<title>Timing and memory usage to align Illumina and PacBio reads to human reference.</title>
</caption>
<alternatives>
<graphic id="pcbi.1005944.t006g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005944.t006" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<tbody>
<tr>
<td align="left" rowspan="3"/>
<td align="center" colspan="6">Illumina reads to Human reference</td>
</tr>
<tr>
<td align="center" colspan="2">build index</td>
<td align="center" colspan="2">align</td>
<td align="center" colspan="2">result</td>
</tr>
<tr>
<td align="center">time (min)</td>
<td align="center">memory (GB)</td>
<td align="center">time (min)</td>
<td align="center">memory (GB)</td>
<td align="center">aligned bases (Gbp)</td>
<td align="right">aligned reads</td>
</tr>
<tr>
<td align="left">bwa-mem</td>
<td align="center">96</td>
<td align="right">4.5</td>
<td align="right">197</td>
<td align="right">11.2</td>
<td align="center">38.46</td>
<td align="right">263155221</td>
</tr>
<tr>
<td align="left">bowtie2</td>
<td align="center">51</td>
<td align="right">18.6</td>
<td align="right">163</td>
<td align="right">4.0</td>
<td align="center">38.00</td>
<td align="right">258560571</td>
</tr>
<tr>
<td align="left">nucmer4</td>
<td align="center">36</td>
<td align="right">45.1</td>
<td align="right">146</td>
<td align="right">45.5</td>
<td align="center">36.71</td>
<td align="right">250689492</td>
</tr>
<tr>
<td align="left" rowspan="3"/>
<td align="center" colspan="6">PacBio reads to Human reference</td>
</tr>
<tr>
<td align="center" colspan="2">build index</td>
<td align="center" colspan="2">align</td>
<td align="center" colspan="2">result</td>
</tr>
<tr>
<td align="center">time (min)</td>
<td align="center">memory (GB)</td>
<td align="center">time (min)</td>
<td align="center">memory (GB)</td>
<td align="center">aligned bases (Gbp)</td>
<td align="right">aligned reads</td>
</tr>
<tr>
<td align="left">blasr</td>
<td align="center">40</td>
<td align="right">29.4</td>
<td align="right">1680</td>
<td align="right">47.9</td>
<td align="center">24.41</td>
<td align="right">3836927</td>
</tr>
<tr>
<td align="left">bwa-mem</td>
<td align="center">96</td>
<td align="right">4.5</td>
<td align="right">1473</td>
<td align="right">7.7</td>
<td align="center">25.86</td>
<td align="right">3820163</td>
</tr>
<tr>
<td align="left">nucmer4</td>
<td align="center">36</td>
<td align="right">45.1</td>
<td align="right">850</td>
<td align="right">50.1</td>
<td align="center">23.02</td>
<td align="right">3784039</td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
<sec id="sec015">
<title>Parallelization</title>
<p><xref ref-type="fig" rid="pcbi.1005944.g001">Fig 1</xref> shows that Nucmer4’s alignment speed scales almost linearly from 2 to 16 parallel computing threads, and becomes sublinear at about 32 threads or more. The deviation from linear performance is likely due to the inherent random memory access for the suffix array where multiple threads start competing, saturating the memory bandwidth in our AMD Opteron system.</p>
<fig id="pcbi.1005944.g001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005944.g001</object-id>
<label>Fig 1</label>
<caption>
<title>Scaling of nucmer4’s performance when aligning Illumina reads to the <italic>A. thaliana</italic> genome with 1–32 threads.</title>
<p>All tests were run on a 32-core AMD Opteron computer.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005944.g001" xlink:type="simple"/>
</fig>
</sec>
</sec>
</sec>
<sec id="sec016">
<title>Availability</title>
<p>The MUMmer4 software including source code is available under an open source license at <ext-link ext-link-type="uri" xlink:href="http://mummer4.github.io" xlink:type="simple">http://mummer4.github.io</ext-link>.</p>
</sec>
<sec id="sec017">
<title>Future directions</title>
<p>In this paper we described MUMmer4, the successor to MUMmer3, a versatile and efficient genome alignment system. Nucmer4, the primary DNA sequence aligner in the MUMmer4 package, can be used for a variety of tasks ranging from simple alignment of two genome sequences to alignment of large, complex draft genomes with thousands of contigs. With the performance enhancements in this new system, Nucmer4 can align two mammalian genomes in about three hours on a 32-core server; we illustrated this by using it to compute that almost 90% of the human genome is about 98% identical to the chimpanzee genome.</p>
<p>Our future plans include support and maintenance of the software and improvements to other useful parts of MUMmer such as Promer, the protein sequence aligner.</p>
</sec>
<sec id="sec018">
<title>Supporting information</title>
<supplementary-material id="pcbi.1005944.s001" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005944.s001" xlink:type="simple">
<label>S1 File</label>
<caption>
<title>Supplemental information.</title>
<p>(DOCX)</p>
</caption>
</supplementary-material>
</sec>
</body>
<back>
<ack>
<p>We thank Michael Schatz of Johns Hopkins University for testing the software and reporting errors.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pcbi.1005944.ref001">
<label>1</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Kurtz</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Phillippy</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Delcher</surname> <given-names>AL</given-names></name>, <name name-style="western"><surname>Smoot</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Shumway</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Antonescu</surname> <given-names>C</given-names></name>, <etal>et al</etal>. <article-title>Versatile and open software for comparing large genomes</article-title>. <source>Genome Biology</source>. <year>2004</year>;<volume>5</volume>(<issue>2</issue>):<fpage>R12</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/gb-2004-5-2-r12" xlink:type="simple">10.1186/gb-2004-5-2-r12</ext-link></comment> <object-id pub-id-type="pmid">14759262</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref002">
<label>2</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Altschul</surname> <given-names>SF</given-names></name>, <name name-style="western"><surname>Gish</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Miller</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Myers</surname> <given-names>EW</given-names></name>, <name name-style="western"><surname>Lipman</surname> <given-names>DJ</given-names></name>. <article-title>Basic local alignment search tool</article-title>. <source>Journal of Molecular Biology</source>. <year>1990</year>;<volume>215</volume>(<issue>3</issue>):<fpage>403</fpage>–<lpage>410</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/S0022-2836(05)80360-2" xlink:type="simple">10.1016/S0022-2836(05)80360-2</ext-link></comment> <object-id pub-id-type="pmid">2231712</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref003">
<label>3</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Langmead</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Trapnell</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Pop</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Salzberg</surname> <given-names>SL</given-names></name>. <article-title>Ultrafast and memory-efficient alignment of short DNA sequences to the human genome</article-title>. <source>Genome Biology</source>. <year>2009</year>;<volume>10</volume>(<issue>3</issue>):<fpage>R25</fpage>–<lpage>R25</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/gb-2009-10-3-r25" xlink:type="simple">10.1186/gb-2009-10-3-r25</ext-link></comment> <object-id pub-id-type="pmid">19261174</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref004">
<label>4</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Li</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Durbin</surname> <given-names>R</given-names></name>. <article-title>Fast and accurate short read alignment with Burrowsâ€“Wheeler transform</article-title>. <source>Bioinformatics</source>. <year>2009</year>;<volume>25</volume>(<issue>14</issue>):<fpage>1754</fpage>–<lpage>1760</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/bioinformatics/btp324" xlink:type="simple">10.1093/bioinformatics/btp324</ext-link></comment> <object-id pub-id-type="pmid">19451168</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref005">
<label>5</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Kent</surname> <given-names>WJ</given-names></name>. <article-title>BLATâ€”The BLAST-Like Alignment Tool</article-title>. <source>Genome Research</source>. <year>2002</year>;<volume>12</volume>(<issue>4</issue>):<fpage>656</fpage>–<lpage>664</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1101/gr.229202" xlink:type="simple">10.1101/gr.229202</ext-link></comment> <object-id pub-id-type="pmid">11932250</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref006">
<label>6</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Darling</surname> <given-names>ACE</given-names></name>, <name name-style="western"><surname>Mau</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Blattner</surname> <given-names>FR</given-names></name>, <name name-style="western"><surname>Perna</surname> <given-names>NT</given-names></name>. <article-title>Mauve: Multiple Alignment of Conserved Genomic Sequence With Rearrangements</article-title>. <source>Genome Research</source>. <year>2004</year>;<volume>14</volume>(<issue>7</issue>):<fpage>1394</fpage>–<lpage>1403</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1101/gr.2289704" xlink:type="simple">10.1101/gr.2289704</ext-link></comment> <object-id pub-id-type="pmid">15231754</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref007">
<label>7</label>
<mixed-citation publication-type="other" xlink:type="simple">Harris RS. Improved pairwise alignment of genomic DNA [Ph.D.]. The Pennsylvania State University. United States—Pennsylvania; 2007.</mixed-citation>
</ref>
<ref id="pcbi.1005944.ref008">
<label>8</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Chaisson</surname> <given-names>MJ</given-names></name>, <name name-style="western"><surname>Tesler</surname> <given-names>G</given-names></name>. <article-title>Mapping single molecule sequencing reads using basic local alignment with successive refinement (BLASR): application and theory</article-title>. <source>BMC Bioinformatics</source>. <year>2012</year>;<volume>13</volume>(<issue>1</issue>):<fpage>238</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/1471-2105-13-238" xlink:type="simple">10.1186/1471-2105-13-238</ext-link></comment> <object-id pub-id-type="pmid">22988817</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref009">
<label>9</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Delcher</surname> <given-names>AL</given-names></name>, <name name-style="western"><surname>Kasif</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Fleischmann</surname> <given-names>RD</given-names></name>, <name name-style="western"><surname>Peterson</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>White</surname> <given-names>O</given-names></name>, <name name-style="western"><surname>Salzberg</surname> <given-names>SL</given-names></name>. <article-title>Alignment of whole genomes</article-title>. <source>Nucleic Acids Research</source>. <year>1999</year>;<volume>27</volume>(<issue>11</issue>):<fpage>2369</fpage>–<lpage>2376</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/nar/27.11.2369" xlink:type="simple">10.1093/nar/27.11.2369</ext-link></comment> <object-id pub-id-type="pmid">10325427</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref010">
<label>10</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Li</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Handsaker</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Wysoker</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Fennell</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Ruan</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Homer</surname> <given-names>N</given-names></name>, <etal>et al</etal>. <article-title>The Sequence Alignment/Map format and SAMtools</article-title>. <source>Bioinformatics (Oxford, England)</source>. <year>2009</year>;<volume>25</volume>(<issue>16</issue>):<fpage>2078</fpage>–<lpage>2079</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/bioinformatics/btp352" xlink:type="simple">10.1093/bioinformatics/btp352</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref011">
<label>11</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Smith</surname> <given-names>TF</given-names></name>, <name name-style="western"><surname>Waterman</surname> <given-names>MS</given-names></name>. <article-title>Identification of common molecular subsequences</article-title>. <source>Journal of Molecular Biology</source>. <year>1981</year>;<volume>147</volume>(<issue>1</issue>):<fpage>195</fpage>–<lpage>197</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/0022-2836(81)90087-5" xlink:type="simple">10.1016/0022-2836(81)90087-5</ext-link></comment> <object-id pub-id-type="pmid">7265238</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref012">
<label>12</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Vyverman</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Baets</surname> <given-names>BD</given-names></name>, <name name-style="western"><surname>Fack</surname> <given-names>V</given-names></name>, <name name-style="western"><surname>Dawyndt</surname> <given-names>P</given-names></name>. <article-title>essaMEM: finding maximal exact matches using enhanced sparse suffix arrays</article-title>. <source>Bioinformatics</source>. <year>2013</year>; p. btt042. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/bioinformatics/btt042" xlink:type="simple">10.1093/bioinformatics/btt042</ext-link></comment> <object-id pub-id-type="pmid">23349213</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref013">
<label>13</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Larsson</surname> <given-names>NJ</given-names></name>, <name name-style="western"><surname>Sadakane</surname> <given-names>K</given-names></name>. <article-title>Faster suffix sorting</article-title>. <source>Theoretical Computer Science</source>. <year>2007</year>;<volume>387</volume>(<issue>3</issue>):<fpage>258</fpage>–<lpage>272</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.tcs.2007.07.017" xlink:type="simple">10.1016/j.tcs.2007.07.017</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref014">
<label>14</label>
<mixed-citation publication-type="other" xlink:type="simple">Mori Y. libdivsufsort: A lightweight suffix-sorting library, 2010; 2010. Available from: <ext-link ext-link-type="uri" xlink:href="https://github.com/y-256/libdivsufsort/" xlink:type="simple">https://github.com/y-256/libdivsufsort/</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1005944.ref015">
<label>15</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Stevens</surname> <given-names>KA</given-names></name>, <name name-style="western"><surname>Wegrzyn</surname> <given-names>JL</given-names></name>, <name name-style="western"><surname>Zimin</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Puiu</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Crepeau</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Cardeno</surname> <given-names>C</given-names></name>, <etal>et al</etal>. <article-title>Sequence of the Sugar Pine Megagenome</article-title>. <source>Genetics</source>. <year>2016</year>;<volume>204</volume>(<issue>4</issue>):<fpage>1613</fpage>–<lpage>1626</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1534/genetics.116.193227" xlink:type="simple">10.1534/genetics.116.193227</ext-link></comment> <object-id pub-id-type="pmid">27794028</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref016">
<label>16</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Langmead</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Salzberg</surname> <given-names>SL</given-names></name>. <article-title>Fast gapped-read alignment with Bowtie 2</article-title>. <source>Nature methods</source>. <year>2012</year>;<volume>9</volume>(<issue>4</issue>):<fpage>357</fpage>–<lpage>359</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/nmeth.1923" xlink:type="simple">10.1038/nmeth.1923</ext-link></comment> <object-id pub-id-type="pmid">22388286</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref017">
<label>17</label>
<mixed-citation publication-type="other" xlink:type="simple">Beazley DM, others. SWIG: An easy to use tool for integrating scripting languages with C and C++. In: Proceedings of the 4th USENIX Tcl/Tk workshop; 1996. p. 129–139. Available from: <ext-link ext-link-type="uri" xlink:href="https://www.usenix.org/legacy/publications/library/proceedings/tcl96/full_papers/beazley" xlink:type="simple">https://www.usenix.org/legacy/publications/library/proceedings/tcl96/full_papers/beazley</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1005944.ref018">
<label>18</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Kaul</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Koo</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Jenkins</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Rizzo</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Rooney</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Tallon</surname> <given-names>L</given-names></name>, <etal>et al</etal>. <article-title>Analysis of the genome sequence of the flowering plant Arabidopsis thaliana</article-title>. <source>Nature</source>. <year>2000</year>;<volume>408</volume>(<issue>6814</issue>):<fpage>796</fpage>–<lpage>815</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/35048692" xlink:type="simple">10.1038/35048692</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref019">
<label>19</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Schneider</surname> <given-names>VA</given-names></name>, <name name-style="western"><surname>Graves-Lindsay</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Howe</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Bouk</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Chen</surname> <given-names>HC</given-names></name>, <name name-style="western"><surname>Kitts</surname> <given-names>PA</given-names></name>, <etal>et al</etal>. <article-title>Evaluation of GRCh38 and de novo haploid genome assemblies demonstrates the enduring quality of the reference assembly</article-title>. <source>Genome Research</source>. <year>2017</year>;<volume>27</volume>(<issue>5</issue>):<fpage>849</fpage>–<lpage>864</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1101/gr.213611.116" xlink:type="simple">10.1101/gr.213611.116</ext-link></comment> <object-id pub-id-type="pmid">28396521</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref020">
<label>20</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Mikkelsen</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Hillier</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Eichler</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Zody</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Jaffe</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Yang</surname> <given-names>SP</given-names></name>, <etal>et al</etal>. <article-title>Initial sequence of the chimpanzee genome and comparison with the human genome</article-title>. <source>Nature</source>. <year>2005</year>;<volume>437</volume>(<issue>7055</issue>):<fpage>69</fpage>–<lpage>87</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/nature04072" xlink:type="simple">10.1038/nature04072</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref021">
<label>21</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Hu</surname> <given-names>TT</given-names></name>, <name name-style="western"><surname>Pattyn</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Bakker</surname> <given-names>EG</given-names></name>, <name name-style="western"><surname>Cao</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Cheng</surname> <given-names>JF</given-names></name>, <name name-style="western"><surname>Clark</surname> <given-names>RM</given-names></name>, <etal>et al</etal>. <article-title>The Arabidopsis lyrata genome sequence and the basis of rapid genome size change</article-title>. <source>Nature genetics</source>. <year>2011</year>;<volume>43</volume>(<issue>5</issue>):<fpage>476</fpage>–<lpage>481</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/ng.807" xlink:type="simple">10.1038/ng.807</ext-link></comment> <object-id pub-id-type="pmid">21478890</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref022">
<label>22</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lee</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Gurtowski</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Yoo</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Marcus</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>McCombie</surname> <given-names>WR</given-names></name>, <name name-style="western"><surname>Schatz</surname> <given-names>M</given-names></name>. <article-title>Error correction and assembly complexity of single molecule sequencing reads</article-title>. <source>bioRxiv</source>. <year>2014</year>;</mixed-citation>
</ref>
<ref id="pcbi.1005944.ref023">
<label>23</label>
<mixed-citation publication-type="other" xlink:type="simple">ECtools and data;. <ext-link ext-link-type="uri" xlink:href="http://schatzlab.cshl.edu/data/ectools/" xlink:type="simple">http://schatzlab.cshl.edu/data/ectools/</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1005944.ref024">
<label>24</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Zook</surname> <given-names>JM</given-names></name>, <name name-style="western"><surname>Catoe</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>McDaniel</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Vang</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Spies</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Sidow</surname> <given-names>A</given-names></name>, <etal>et al</etal>. <article-title>Extensive sequencing of seven human genomes to characterize benchmark reference materials</article-title>. <source>bioRxiv</source>. <year>2015</year>; p. <fpage>026468</fpage>.</mixed-citation>
</ref>
<ref id="pcbi.1005944.ref025">
<label>25</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Mikkelsen</surname> <given-names>TS</given-names></name>, <name name-style="western"><surname>Hillier</surname> <given-names>LW</given-names></name>, <name name-style="western"><surname>Eichler</surname> <given-names>EE</given-names></name>, <name name-style="western"><surname>Zody</surname> <given-names>MC</given-names></name>, <etal>et al</etal>. <article-title>Initial sequence of the chimpanzee genome and comparison with the human genome</article-title>. <source>Nature</source>. <year>2005</year>;<volume>437</volume>(<issue>7055</issue>):<fpage>69</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/nature04072" xlink:type="simple">10.1038/nature04072</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref026">
<label>26</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Boothby</surname> <given-names>TC</given-names></name>, <name name-style="western"><surname>Tenlen</surname> <given-names>JR</given-names></name>, <name name-style="western"><surname>Smith</surname> <given-names>FW</given-names></name>, <name name-style="western"><surname>Wang</surname> <given-names>JR</given-names></name>, <name name-style="western"><surname>Patanella</surname> <given-names>KA</given-names></name>, <name name-style="western"><surname>Nishimura</surname> <given-names>EO</given-names></name>, <etal>et al</etal>. <article-title>Evidence for extensive horizontal gene transfer from the draft genome of a tardigrade</article-title>. <source>Proceedings of the National Academy of Sciences</source>. <year>2015</year>;<volume>112</volume>(<issue>52</issue>):<fpage>15976</fpage>–<lpage>15981</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1073/pnas.1510461112" xlink:type="simple">10.1073/pnas.1510461112</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref027">
<label>27</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Koutsovoulos</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Kumar</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Laetsch</surname> <given-names>DR</given-names></name>, <name name-style="western"><surname>Stevens</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Daub</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Conlon</surname> <given-names>C</given-names></name>, <etal>et al</etal>. <article-title>No evidence for extensive horizontal gene transfer in the genome of the tardigrade Hypsibius dujardini</article-title>. <source>Proceedings of the National Academy of Sciences</source>. <year>2016</year>;<volume>113</volume>(<issue>18</issue>):<fpage>5053</fpage>–<lpage>5058</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1073/pnas.1600338113" xlink:type="simple">10.1073/pnas.1600338113</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005944.ref028">
<label>28</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Ono</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Asai</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Hamada</surname> <given-names>M</given-names></name>. <article-title>PBSIM: PacBio reads simulatorâ€”toward accurate genome assembly</article-title>. <source>Bioinformatics</source>. <year>2012</year>;<volume>29</volume>(<issue>1</issue>):<fpage>119</fpage>–<lpage>121</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/bioinformatics/bts649" xlink:type="simple">10.1093/bioinformatics/bts649</ext-link></comment> <object-id pub-id-type="pmid">23129296</object-id></mixed-citation>
</ref>
</ref-list>
</back>
</article>