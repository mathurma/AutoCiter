<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="1.1d3" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id>
<journal-title-group>
<journal-title>PLOS Computational Biology</journal-title>
</journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-18-02016</article-id>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1006699</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Research Article</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Organisms</subject><subj-group><subject>Eukaryota</subject><subj-group><subject>Animals</subject><subj-group><subject>Vertebrates</subject><subj-group><subject>Fish</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Anatomy</subject><subj-group><subject>Animal anatomy</subject><subj-group><subject>Tails</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Medicine and health sciences</subject><subj-group><subject>Anatomy</subject><subj-group><subject>Animal anatomy</subject><subj-group><subject>Tails</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Zoology</subject><subj-group><subject>Animal anatomy</subject><subj-group><subject>Tails</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Physiology</subject><subj-group><subject>Biological locomotion</subject><subj-group><subject>Swimming</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Medicine and health sciences</subject><subj-group><subject>Physiology</subject><subj-group><subject>Biological locomotion</subject><subj-group><subject>Swimming</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Animal studies</subject><subj-group><subject>Experimental organism systems</subject><subj-group><subject>Model organisms</subject><subj-group><subject>Zebrafish</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Model organisms</subject><subj-group><subject>Zebrafish</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Animal studies</subject><subj-group><subject>Experimental organism systems</subject><subj-group><subject>Animal models</subject><subj-group><subject>Zebrafish</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Organisms</subject><subj-group><subject>Eukaryota</subject><subj-group><subject>Animals</subject><subj-group><subject>Vertebrates</subject><subj-group><subject>Fish</subject><subj-group><subject>Osteichthyes</subject><subj-group><subject>Zebrafish</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Sensory perception</subject><subj-group><subject>Vision</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Sensory perception</subject><subj-group><subject>Vision</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Sensory perception</subject><subj-group><subject>Vision</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Developmental biology</subject><subj-group><subject>Life cycles</subject><subj-group><subject>Larvae</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Equipment</subject><subj-group><subject>Optical equipment</subject><subj-group><subject>Cameras</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Behavior</subject><subj-group><subject>Animal behavior</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Behavior</subject><subj-group><subject>Animal behavior</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Zoology</subject><subj-group><subject>Animal behavior</subject></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>Stytra: An open-source, integrated system for stimulation, tracking and closed-loop behavioral experiments</article-title>
<alt-title alt-title-type="running-head">Stytra: An open-source package for stimulation, tracking and behavioral experiments</alt-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-5108-8204</contrib-id>
<name name-style="western">
<surname>Štih</surname> <given-names>Vilim</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Data curation</role>
<role content-type="http://credit.casrai.org/">Formal analysis</role>
<role content-type="http://credit.casrai.org/">Investigation</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Validation</role>
<role content-type="http://credit.casrai.org/">Visualization</role>
<role content-type="http://credit.casrai.org/">Writing – original draft</role>
<xref ref-type="aff" rid="aff001"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-4001-0564</contrib-id>
<name name-style="western">
<surname>Petrucco</surname> <given-names>Luigi</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Data curation</role>
<role content-type="http://credit.casrai.org/">Formal analysis</role>
<role content-type="http://credit.casrai.org/">Investigation</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Validation</role>
<role content-type="http://credit.casrai.org/">Visualization</role>
<role content-type="http://credit.casrai.org/">Writing – original draft</role>
<xref ref-type="aff" rid="aff001"/>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-3643-7776</contrib-id>
<name name-style="western">
<surname>Kist</surname> <given-names>Andreas M.</given-names></name>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"/>
<xref ref-type="fn" rid="currentaff001"><sup>¤</sup></xref>
</contrib>
<contrib contrib-type="author" corresp="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-1495-9314</contrib-id>
<name name-style="western">
<surname>Portugues</surname> <given-names>Ruben</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Funding acquisition</role>
<role content-type="http://credit.casrai.org/">Project administration</role>
<role content-type="http://credit.casrai.org/">Supervision</role>
<role content-type="http://credit.casrai.org/">Writing – original draft</role>
<xref ref-type="aff" rid="aff001"/>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
</contrib-group>
<aff id="aff001">
<addr-line>Research Group of Sensorimotor Control, Max Planck Institute of Neurobiology, Martinsried, Germany</addr-line>
</aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>Battaglia</surname> <given-names>Francesco P.</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1">
<addr-line>Radboud Universiteit Nijmegen, NETHERLANDS</addr-line>
</aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>The authors have declared that no competing interests exist.</p>
</fn>
<fn fn-type="current-aff" id="currentaff001">
<label>¤</label>
<p>Current address: Department of Phoniatrics and Pediatric Audiology, University Hospital Erlangen, Medical School, Friedrich-Alexander-University Erlangen-Nürnberg, Germany</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">rportugues@neuro.mpg.de</email></corresp>
</author-notes>
<pub-date pub-type="collection">
<month>4</month>
<year>2019</year>
</pub-date>
<pub-date pub-type="epub">
<day>8</day>
<month>4</month>
<year>2019</year>
</pub-date>
<volume>15</volume>
<issue>4</issue>
<elocation-id>e1006699</elocation-id>
<history>
<date date-type="received">
<day>29</day>
<month>11</month>
<year>2018</year>
</date>
<date date-type="accepted">
<day>15</day>
<month>3</month>
<year>2019</year>
</date>
</history>
<permissions>
<copyright-year>2019</copyright-year>
<copyright-holder>Štih et al</copyright-holder>
<license xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">
<license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pcbi.1006699"/>
<abstract>
<p>We present Stytra, a flexible, open-source software package, written in Python and designed to cover all the general requirements involved in larval zebrafish behavioral experiments. It provides timed stimulus presentation, interfacing with external devices and simultaneous real-time tracking of behavioral parameters such as position, orientation, tail and eye motion in both freely-swimming and head-restrained preparations. Stytra logs all recorded quantities, metadata, and code version in standardized formats to allow full provenance tracking, from data acquisition through analysis to publication. The package is modular and expandable for different experimental protocols and setups. Current releases can be found at <ext-link ext-link-type="uri" xlink:href="https://github.com/portugueslab/stytra" xlink:type="simple">https://github.com/portugueslab/stytra</ext-link>. We also provide complete documentation with examples for extending the package to new stimuli and hardware, as well as a schema and parts list for behavioral setups. We showcase Stytra by reproducing previously published behavioral protocols in both head-restrained and freely-swimming larvae. We also demonstrate the use of the software in the context of a calcium imaging experiment, where it interfaces with other acquisition devices. Our aims are to enable more laboratories to easily implement behavioral experiments, as well as to provide a platform for sharing stimulus protocols that permits easy reproduction of experiments and straightforward validation. Finally, we demonstrate how Stytra can serve as a platform to design behavioral experiments involving tracking or visual stimulation with other animals and provide an example integration with the DeepLabCut neural network-based tracking method.</p>
</abstract>
<funding-group>
<award-group id="award001">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/501100004189</institution-id>
<institution>Max-Planck-Gesellschaft</institution>
</institution-wrap>
</funding-source>
<award-id>PSY 825</award-id>
<principal-award-recipient>
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-1495-9314</contrib-id>
<name name-style="western">
<surname>Portugues</surname> <given-names>Ruben</given-names></name>
</principal-award-recipient>
</award-group>
<award-group id="award002">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/501100000854</institution-id>
<institution>Human Frontier Science Program</institution>
</institution-wrap>
</funding-source>
<award-id>RGP0027/2016</award-id>
<principal-award-recipient>
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-1495-9314</contrib-id>
<name name-style="western">
<surname>Portugues</surname> <given-names>Ruben</given-names></name>
</principal-award-recipient>
</award-group>
<funding-statement>RP was funded through the Human Frontier Science Program (<ext-link ext-link-type="uri" xlink:href="http://www.hfsp.org/" xlink:type="simple">http://www.hfsp.org/</ext-link>) grant RPG0027/2016 and through the Max Planck Gesellschaft (<ext-link ext-link-type="uri" xlink:href="http://www.mpg.de/" xlink:type="simple">http://www.mpg.de/</ext-link>) (PSY 825). The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
</funding-group>
<counts>
<fig-count count="11"/>
<table-count count="0"/>
<page-count count="19"/>
</counts>
<custom-meta-group>
<custom-meta>
<meta-name>PLOS Publication Stage</meta-name>
<meta-value>vor-update-to-uncorrected-proof</meta-value>
</custom-meta>
<custom-meta>
<meta-name>Publication Update</meta-name>
<meta-value>2019-04-18</meta-value>
</custom-meta>
<custom-meta id="data-availability">
<meta-name>Data Availability</meta-name>
<meta-value>All data can be found at Zenodo: <ext-link ext-link-type="uri" xlink:href="https://zenodo.org/record/1692080#.XAAST9VKi6I" xlink:type="simple">https://zenodo.org/record/1692080#.XAAST9VKi6I</ext-link> doi <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.5281/zenodo.1692080" xlink:type="simple">10.5281/zenodo.1692080</ext-link>.</meta-value>
</custom-meta>
</custom-meta-group>
</article-meta>
</front>
<body>
<disp-quote>
<p>This is a <italic>PLOS Computational Biology</italic> Software paper.</p>
</disp-quote>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<p>The central goal of systems neuroscience is to explain the neural underpinnings of behavior. To investigate the link between sensory input, brain activity and animal behavior, relevant behavioral variables have to be recorded and quantified. Therefore, the same experimental paradigm has to be replicated in different experimental setups in order to combine it with different recording or stimulation techniques, and it needs to be reproducible across different laboratories. However, the setups generally rely on heterogeneous hardware and custom-made software tailored to the specific requirements of one experimental apparatus. Often, the code used is based on expensive software packages (such as LabView or Matlab), with open-source options for hardware control generally limited to one particular type or brand of devices. As a consequence, the same experimental protocol has to be implemented many times, thus wasting time and increasing potential sources of error. This makes sharing the code for replicating a scientific finding under the same experimental conditions very difficult.</p>
<p>To address these problems, we developed Stytra, a package that encompasses all the requirements of hardware control, stimulation and behavioral tracking that we encounter in our everyday experimental work. Our system, completely written in Python, provides a framework to assemble an experiment combining different input and output hardware and algorithms for online behavioral tracking and closed-loop stimulation. It is highly modular and can be extended to support new hardware devices or tracking algorithms. It facilitates reuse of different components of the package, encourages building upon existing work and enforces consistent data management. The definition of experimental protocols in high-level Python scripts makes it very suitable for version control and code sharing across laboratories, facilitating reproducibility and collaboration between scientists. Finally, it runs on all common desktop operating systems (Windows, MacOS and Linux), therefore incurring no additional costs on the software side. Similar approaches have already been made available for real-time tracking of zebrafish larvae [<xref ref-type="bibr" rid="pcbi.1006699.ref001">1</xref>, <xref ref-type="bibr" rid="pcbi.1006699.ref002">2</xref>]. Still, to our knowledge, none of these solutions implement tracking functions for both head-restrained and freely-swimming larvae, they do not allow the use of custom tracking algorithms, and they do not provide a generic framework to design open- and closed-loop stimulation paradigms.</p>
<p>Stytra was developed primarily in the context of a laboratory working with larval zebrafish, and it fulfills the common requirements of behavioral paradigms used with this animal [<xref ref-type="bibr" rid="pcbi.1006699.ref003">3</xref>]: video tracking, visual stimulation and triggering of external devices. The tracking functions (for freely swimming and head-restrained fish) include both efficient re-implementations of published algorithms and newly-developed methods. Nevertheless, custom methods can easily be added. Common visual stimuli and methods for combining them and presenting them in different ways are provided. Our experimental setups are open-source as well [<xref ref-type="bibr" rid="pcbi.1006699.ref004">4</xref>]: hardware designs provided along with the documentation describe the apparatus required for performing common behavioral experiments in zebrafish in detail. The library provides many elements useful for designing behavioral experiments in Python, potentially offering a unified platform to build and share experiments in zebrafish neuroscience and behavioral research. We welcome and will support community contributions to expand the capabilities of the package to other paradigms and animals, although our development efforts will remain focused on zebrafish applications.</p>
</sec>
<sec id="sec002" sec-type="materials|methods">
<title>Design and implementation</title>
<sec id="sec003">
<title>Overview and library structure</title>
<p>We developed Stytra using the Python programming language. We endeavored to follow best practices in software engineering: separation of user interface and data processing code, modularity and consistent programming interfaces. In Stytra, new experiments can be designed using very simple Python syntax, allowing even beginners in programming to develop their own stimulation paradigms. Once defined, the experiment is controlled through a graphical user interface which can be used with no knowledge of Python. At the core of the Stytra package lies the <monospace>Experiment</monospace> object, which links all components that may be used in an experiment: stimulus presentation, camera, animal tracking, metadata and logging (<xref ref-type="supplementary-material" rid="pcbi.1006699.s001">S1 Fig</xref>).</p>
<p>This organization enables composing different experimental paradigms with full code reuse. Improvement of different modules (e.g. the user interface, plotting or tracking) is therefore reflected in all experimental setups, and support for a new piece of hardware or tracking function can be added with minimal effort and interference with other parts of the project. Online image processing is organized along a sequence of steps: first, images are acquired from the camera, then the image is filtered and tracked, and the tracking results are saved. Acquisition, tracking and data saving occur in separate processes (depicted in blue, purple, and green in <xref ref-type="fig" rid="pcbi.1006699.g001">Fig 1</xref>). This approach improves the reliability and the performance of online behavioral tracking, and exploits the advantages of multi-core processors. After processing, streaming numerical data (such as tracking results and dynamic parameters of stimuli) is passed into data accumulators in the main thread, and a user-selected subset can be plotted in real time and saved in one of the several supported formats. Moreover, for every experimental session all changeable properties impacting the execution of the experiment are recorded and saved. Finally, as the software package is version-controlled, the version (commit hash) of the software in use is saved as well, ensuring the complete reproducibility of every experiment.</p>
<fig id="pcbi.1006699.g001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006699.g001</object-id>
<label>Fig 1</label>
<caption>
<title>Data flow in Stytra.</title>
<p>Communication between different parts of a Stytra experiment. Each color represents a separate process in which the module(s) are running. Data flow between modules within one process is depicted by arrows, and between processes as double arrows. The classes belonging to the data flow elements are displayed in <monospace>monospace</monospace>. A more comprehensive diagram of the classes is provided in <xref ref-type="supplementary-material" rid="pcbi.1006699.s001">S1 Fig</xref>. The user interface, the stimulus update and related functions such as the screen calibration and data saving are performed in the main process, colored in green. The stimulation can be triggered by a triggering process (in orange) that listens for an external triggering signal. Frames can be acquired from a camera process (in blue), analyzed by a tracking function (in purple), and the result can be streamed to the main process for data saving and used in closed-loop experiments via the estimator.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006699.g001" xlink:type="simple"/>
</fig>
</sec>
<sec id="sec004">
<title>Building and running an experiment in Stytra</title>
<p>The <monospace>Experiment</monospace> object binds all the different components required to run an experiment. The most basic <monospace>Experiment</monospace> object performs the presentation of a succession of stimuli, saving the experiment metadata and the stimulation log. For experiments including video tracking, the <monospace>TrackingExperiment</monospace> object augments the basic <monospace>Experiment</monospace> with features such as camera frame acquisitions and online image analysis. The image analysis pipeline can be one of the zebrafish specific pipelines supplied with Stytra, or a custom tracking pipeline. The <monospace>Experiment</monospace> is linked to the user interface for controlling the running of stimulation protocols, inserting metadata, controlling parameters, and calibrating the stimulus display (<xref ref-type="fig" rid="pcbi.1006699.g002">Fig 2</xref>). In general, the users do not need to define new types of <monospace>Experiment</monospace> objects for every new experimental paradigm. Instead, paradigms are implemented by defining a <monospace>Protocol</monospace> object which contains the stimulus sequence (as described below) and a configuration dictionary with information about the camera, tracking pipeline, and triggering. The appropriate <monospace>Experiment</monospace> object can be automatically instantiated from the configuration dictionary using the Stytra constructor. Alternatively, an <monospace>Experiment</monospace> can be instantiated and run from the experiment script, as described in the documentation examples. Ideally, the provided <monospace>Experiment</monospace> objects should cover most of the requirements of zebrafish behavioral experiments, and redefining the <monospace>Experiment</monospace> is required only if one needs to modify the graphical user interface (<sc>gui</sc>), add more nodes in the data pipeline (screens or cameras) or implement more specific customizations. A more detailed depiction of the connections and versions of different objects is depicted in <xref ref-type="supplementary-material" rid="pcbi.1006699.s001">S1 Fig</xref>. For examples of how to create a <monospace>Protocol</monospace> and run experiments in Stytra, see the Usage examples box and the more detailed examples gallery in the documentation.</p>
<fig id="pcbi.1006699.g002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006699.g002</object-id>
<label>Fig 2</label>
<caption>
<title>Screen capture of the software in use.</title>
<p>The various behavioral paradigms supported by Stytra provide the user with a consistent interface to control experiments. The toolbar on top controls aspects of running the experiment, a camera panel shows the tracking results superimposed on the camera image, a calibration panel enables quick positioning and calibration of the stimulus display and a monitoring panel plots a user-selected subset of experimental variables.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006699.g002" xlink:type="simple"/>
</fig>
</sec>
<sec id="sec005">
<title>Stimulus design</title>
<p>Experimental protocols in Stytra are defined as sequences of timed stimuli presented to the animal through a projector or external actuators. A sequence of stimuli, defined as a Python list of <monospace>Stimulus</monospace> objects, is defined in a <monospace>Protocol</monospace> object (see Usage examples box). This structure enables straightforward design of new experimental protocols, requiring very little knowledge of the general structure of the library and only basic Python syntax. A dedicated class coordinates the timed execution of the protocol relying on a <monospace>QTimer</monospace> from the PyQt5 library, ensuring a temporal resolution in the order of 15-20 ms (around the response time of a normal monitor, see <xref ref-type="supplementary-material" rid="pcbi.1006699.s002">S2 Fig</xref>). Drawing very complex stimuli consisting of many polygons or requiring online computation of large arrays can decrease the stimulus display performance. The stimulus display framerate can be monitored online from the user interface when the protocol is running (see the lower left corner of the window in <xref ref-type="fig" rid="pcbi.1006699.g002">Fig 2</xref>). Milli- or microsecond precision, which might be required for optogenetic experiments, for example, is currently not supported. Each <monospace>Stimulus</monospace> has methods which are called at starting time or at every subsequent time step while it is set. In this way one can generate dynamically changing stimuli, or trigger external devices. New <monospace>Stimulus</monospace> types can be easily added to the library just by subclassing <monospace>Stimulus</monospace> and re-defining the <monospace>Stimulus.start()</monospace> and <monospace>Stimulus.update()</monospace> methods.</p>
<p>A large number of stimuli is included in the package. In particular, a library of visual stimuli has been implemented as <monospace>VisualStimulus</monospace> objects using the <monospace>QPainter</monospace> object, a part of the Qt <sc>gui</sc> library, enabling efficient drawing with OpenGL. Relying on a set of high-level drawing primitives makes the code very readable and maintainable. Stytra already includes common stimuli used in visual neuroscience, such as moving bars, dots, whole-field translation or rotations of patterns on a screen, and additional features such as movie playback and the presentation of images from a file (which can be generated by packages such as Imagen [<xref ref-type="bibr" rid="pcbi.1006699.ref005">5</xref>]). The classes describing visual stimuli can be combined, and new stimuli where these patterns are moved or masked can be quickly defined by combining the appropriate <monospace>Stimulus</monospace> types. Finally, new stimuli can be easily created by redefining the <monospace>paint()</monospace> method in a new <monospace>VisualStimulus</monospace> object. Multiple stimuli can be presented simultaneously using <monospace>StimulusCombiner</monospace>. Presenting different stimuli depending on animal behavior or external signals can be achieved using the <monospace>ConditionalStimulus</monospace> container, or with similarly designed custom objects. Visual stimuli are usually displayed on a secondary screen, therefore Stytra provides a convenient interface for positioning and calibrating the stimulation window (visible in <xref ref-type="fig" rid="pcbi.1006699.g002">Fig 2</xref> on the right-hand side). Although in our experiments we are using a single stimulation monitor, displaying stimuli on multiple screens can be achieved with virtual desktop technology or screen-splitting hardware boards. Importantly, all stimulus parameters are specified in physical units and are therefore independent of the display hardware. Finally, the timed execution of code inside <monospace>Stimulus</monospace> objects can be used to control hardware via I/O boards or serial communication with micro-controllers such as Arduino or MicroPython PyBoard. For example, in this way one may deliver odors or temperature stimuli or optogenetic stimulation. Examples for all these kinds of stimuli are provided in the main repository.</p>
</sec>
<sec id="sec006">
<title>Usage examples</title>
<p>Here we present the main parts of simple scripts that can be used to run a Stytra experiment. The complete scripts can be found in the Stytra repository under <monospace>stytra/examples</monospace>. Stytra is run in most cases by defining a stimulus sequence in a <monospace>Protocol</monospace> object. This custom protocol is passed to the <monospace>Stytra</monospace> constructor, which creates an appropriate <monospace>Experiment</monospace> object. The subclass of <monospace>Experiment</monospace> is selected depending on the configuration passed through either the Stytra constructor or the <monospace>stytra_config</monospace> attribute of the <monospace>Protocol</monospace>. The online documentation contains an example of how to use a custom <monospace>Experiment</monospace> class.</p>
<sec id="sec007">
<title>Creating and running a protocol</title>
<p>To create an experiment, a <monospace>Protocol</monospace> class has to be defined. The <monospace>Protocol.get_stim_sequence()</monospace> method returns the sequence of stimuli that will be presented in the experiment. A <monospace>Protocol</monospace> object is then passed as an argument to the instance of <monospace>Stytra</monospace> that will run it.</p>
<p>Example:</p>
<p><monospace>from stytra import Stytra, Protocol</monospace></p>
<p><monospace>from stytra.stimulation.stimuli import Pause, FullFieldVisualStimulus</monospace></p>
<p><monospace>class FlashProtocol(Protocol):</monospace></p>
<p><monospace> name = “flash protocol” # protocol name</monospace></p>
<p><monospace> def get_stim_sequence(self):</monospace></p>
<p><monospace>  stimuli = [Pause(duration = 9), # black screen, 9 sec FullFieldVisualStimulus(duration = 1, # flash, 1 sec color = (255, 255, 255))]</monospace></p>
<p><monospace>  return stimuli</monospace></p>
<p><monospace>Stytra(protocol = FlashProtocol())</monospace></p>
</sec>
<sec id="sec008">
<title>Creating a new stimulus</title>
<p>In an experiment it might be necessary to use a stimulus type not available in the existing library. To design a new stimulus, a <monospace>Stimulus</monospace> subclass has to be created and its <monospace>Stimulus.start()</monospace> and <monospace>Stimulus.update()</monospace> methods should be overwritten. In the following piece of code, we create a closed-loop stimulus which turns the screen red when the fish is swimming. To achieve this, we redefine the <monospace>Stimulus.update()</monospace> to change the color attribute, and the <monospace>Stimulus.paint()</monospace> to paint the screen red. The <monospace>stytra_config</monospace> attribute defines the video source (a Ximea camera), and the tracking functions (tail tracking with vigor as a velocity estimator):</p>
<p><monospace>from stytra import Stytra, Protocol</monospace></p>
<p><monospace>from stytra.stimulation.stimuli import VisualStimulus</monospace></p>
<p><monospace>from PyQt5.QtCore import QRect</monospace></p>
<p><monospace>from PyQt5.QtGui import QBrush, QColor</monospace></p>
<p><monospace>class NewStimulus(VisualStimulus):</monospace></p>
<p><monospace> def _ _init_ _(self, *args, **kwargs):</monospace></p>
<p><monospace>  super()._ _init_ _(*args, **kwargs)</monospace></p>
<p><monospace>  self.color = (255, 255, 255)</monospace></p>
<p><monospace> def paint(self, painter, w, h):</monospace></p>
<p><monospace>  # painter, w and h come from the Qt library drawing functions.</monospace></p>
<p><monospace>  # painter: QPainter object;</monospace></p>
<p><monospace>  # w, h: width and height of the window</monospace></p>
<p><monospace>  painter.setBrush(QBrush(QColor(*self.color))) # Use chosen color</monospace></p>
<p><monospace>  painter.drawRect(QRect(0, 0, w, h)) # draw full field rectangle</monospace></p>
<p><monospace> def update(self):</monospace></p>
<p><monospace>  fish_vel = self._experiment.estimator.get_velocity()</monospace></p>
<p><monospace>  # change color if speed of the fish is higher than threshold:</monospace></p>
<p><monospace>  if fish_vel &lt; -15:</monospace></p>
<p><monospace>   self.color = (255, 0, 0)</monospace></p>
<p><monospace>  else:</monospace></p>
<p><monospace>   self.color = (255, 255, 255)</monospace></p>
<p><monospace>class CustomProtocol(Protocol):</monospace></p>
<p><monospace> name = “custom protocol” # protocol name</monospace></p>
<p><monospace> # Here we define tracking method, vigor estimator, and add a camera:</monospace></p>
<p><monospace> stytra_config = dict(tracking = dict(method = “tail”, estimator = “vigor”), camera = “ximea”)</monospace></p>
<p><monospace> def get_stim_sequence(self):</monospace></p>
<p><monospace>  return [NewStimulus(duration = 10)]</monospace></p>
<p><monospace>Stytra(protocol = CustomProtocol())</monospace></p>
</sec>
</sec>
<sec id="sec009">
<title>Image acquisition and tracking</title>
<sec id="sec010">
<title>Image acquisition</title>
<p>A key feature of Stytra is the extraction of relevant behavioral features in real time from video inputs. The <monospace>Camera</monospace> object provides an interface for grabbing frames and setting parameters for a range of different camera types. Currently supported models include those by XIMEA, AVT, PointGray/FLIR, and Mikrotron, as well as webcams supported by OpenCV [<xref ref-type="bibr" rid="pcbi.1006699.ref006">6</xref>]. Support for other cameras can be added as long as a Python or C <sc>api</sc> exists. In addition, previously-recorded videos can also be processed, allowing for offline tracking. Frames are acquired from the original source in a process separated from the user interface and stimulus display. This ensures that the acquisition and tracking frame rate are independent of the stimulus display, which, depending on the complexity of the stimulus and output resolution, can be between 30 and 60 Hz.</p>
</sec>
<sec id="sec011">
<title>Tracking pipelines</title>
<p>The tracking process receives acquired frames and handles animal tracking (represented in <xref ref-type="fig" rid="pcbi.1006699.g001">Fig 1</xref>). Image processing and tracking are defined in subclasses of <monospace>Pipeline</monospace> objects and contain a tree of processing nodes, starting from input images and ending with tracking nodes that take images as input and give tracking results as output. This structure allows for multiple tracking functions to be applied on the same input image(s). Currently implemented image processing nodes include image filtering (down-sampling, inversion and low-pass filtering) and background subtraction. The outputs of the tracking nodes are assembled together and streamed to the main process, where the data is saved and visualized. The <monospace>Pipeline</monospace> object also allows specifying a custom camera overlay to display the results of the tracking and an additional plotting widget for an alternative visualization of data. This modular structure allows easy expansion of the library: new functions for pre-filtering or tracking can be incorporated into the pipeline with minimal effort. Pipelines to track tail and eye position in head-restrained fish, as well as fish position and orientation in an open arena, are included in Stytra. Parts of the tracking functions use the OpenCV computer vision library. Time-critical functions are compiled with the Numba library to increase their performance.</p>
</sec>
<sec id="sec012">
<title>Behavior tracking in head-restrained fish</title>
<p><bold><italic>Tail tracking</italic></bold>. Zebrafish larvae swim in discrete units called bouts, and different types of swim bouts, from startle responses to forward swimming are caused by different tail motion patterns [<xref ref-type="bibr" rid="pcbi.1006699.ref007">7</xref>]. The tail of the larvae can be easily skeletonized and described as a curve discretized into 7-10 segments [<xref ref-type="bibr" rid="pcbi.1006699.ref008">8</xref>] (<xref ref-type="fig" rid="pcbi.1006699.g003">Fig 3A</xref>). The tail tracking functions work by finding the angle of a tail segment given the position and the orientation of the previous one. The starting position of the tail, as well as a rough tail orientation and length need to be specified beforehand using start and end points, movable over the camera image displayed in the user interface (as can be seen in <xref ref-type="fig" rid="pcbi.1006699.g003">Fig 3A</xref>).</p>
<fig id="pcbi.1006699.g003" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006699.g003</object-id>
<label>Fig 3</label>
<caption>
<title>Head-restrained tail tracking in Stytra.</title>
<p>A) The image is first pre-processed by inverting, down-scaling, blurring and clipping, resulting in the image on the right, where the fish is the only object brighter than the background. Then, tail tracing starts from a user-defined point, and in the direction determined by another user-defined point at the end of the tail at rest. For each segment, a square (outlined in white) in the direction of the previous segment (yellow) is sampled, and the direction for the next segment is chosen as the vector (red) connecting the previous segment end and the center of mass of the sampled square (blue). B) A heatmap showing the angles of the tail segments from the start to the end of the tail during a bout, and a trace representing the cumulative curvature sum from a behaving animal. The total curvature is just the difference in angle between the first and last tail segment (adding up angle differences between all segments, only these two terms remain).</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006699.g003" xlink:type="simple"/>
</fig>
<p>To find the tail segments, two different functions are implemented. The first one looks at pixels along an arc to find their maximum (or minimum, if the image is inverted) where the current segment would end (as already described in e.g. [<xref ref-type="bibr" rid="pcbi.1006699.ref008">8</xref>]). The second method, introduced here, is based on centers of mass of sampling windows (<xref ref-type="fig" rid="pcbi.1006699.g003">Fig 3</xref>), and provides a more reliable and smoother estimate over a wider range of resolutions and illumination methods. The image contrast and tail segment numbers have to be adjusted for each setup, which can be easily accomplished through the live view of the filtering and tracking results. In the documentation we provide guidelines on choosing these parameters. To compare results across different setups which might have different camera resolutions, the resulting tail shape can be interpolated to a fixed number of segments regardless of the number of traced points.</p>
<p><bold><italic>Eye tracking</italic></bold>. Zebrafish larvae move their eyes to stabilize their gaze in response to whole field motion, perform re-positioning saccades, and converge their eyes to follow a potential prey in hunting maneuvers [<xref ref-type="bibr" rid="pcbi.1006699.ref009">9</xref>]. Naso-temporal eye movements can be described by the eye orientation with respect to the fish axis. Given the ellipsoidal shape of the eyes when seen from above, to find their orientation it is sufficient to fit an ellipse to the eye pixels and determine the angle of the major axis [<xref ref-type="bibr" rid="pcbi.1006699.ref009">9</xref>]. In Stytra, a movable and scalable rectangular region can be used to select the area of the camera view containing the eyes. As eyes are usually much darker than the background, with proper illumination conditions it is sufficient to binarize the image with an adjustable threshold which selects the pixels belonging to the eyes. Then, functions from the OpenCV library are used to find the two largest connected components of the binarized region and fits an ellipse to them. The absolute angle of the major axis of the ellipse is recorded as the eye angle (<xref ref-type="fig" rid="pcbi.1006699.g004">Fig 4</xref>). A live preview of the binarized image and the extracted ellipses helps the user to adjust the parameters.</p>
<fig id="pcbi.1006699.g004" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006699.g004</object-id>
<label>Fig 4</label>
<caption>
<title>Eye tracking in Stytra.</title>
<p>A) Eyes are detected by fitting an ellipse to the connected components of the image of the fish head after thresholding. B) Example trace of eye motion in response to a full-field rotating background.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006699.g004" xlink:type="simple"/>
</fig>
</sec>
<sec id="sec013">
<title>Freely-swimming fish tracking</title>
<p>To support different kinds of paradigms where fish are not head-restrained, we provide functions for freely-swimming fish tracking. The range of behavioral paradigms include investigating movement evoked by different kinds of stimuli, characterizing motion kinematics and assessing consequences of pharmacological or genetic interventions. To track the fish in an open arena, the first required step is background subtraction. The background is modelled with a mean image taken from multiple frames averaged in time, and slowly updated with an adjustable time constant. The subsequently processed image is the negative difference between the current frame and the threshold (pixels that are darker than the background are active). This image is first thresholded and regions within the right area range are found. Both eyes and the swim bladder are found as darker parts inside of these regions, and the center of mass of the three objects (two eyes and swim bladder) is taken as the center of the fish head. The direction of the tail is found by searching for the point with the largest difference from the background on a circle of half-tail radius. This direction is subsequently refined in the course of tail tracking, as described in the tail tracking section. The kinematic parameters are smoothed by Kalman filtering. An example resulting from tracking multiple fish simultaneously is shown in <xref ref-type="fig" rid="pcbi.1006699.g005">Fig 5</xref>. Fish identities are maintained constant while they are in the field of view and not overlapping, by keeping track of the previous positions and orientations. The number of fish does not significantly impact performance, however the resolution of the camera does, so we recommend a well-configured modern computer (7th generation and above Intel Core i7 processors or <sc>amd</sc> Ryzen) for tracking multiple fish in a 90 mm dish. In our experiments not more than 3 fish are usually present, and a tracking framerate of 300 Hz can be reached reliably. We have also tracked individual fish in a 24-well plate, which presented no performance issues at 100 Hz with a mid-range <sc>cpu</sc>. Simpler tracking scenarios for screening, where the exact position, orientation and tail curvature of individuals are not of interest, can work with even higher numbers of animals.</p>
<fig id="pcbi.1006699.g005" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006699.g005</object-id>
<label>Fig 5</label>
<caption>
<title>Example bouts tracked from freely-swimming fish.</title>
<p>From left to right: trajectories of bouts in different directions, the velocity magnitude and the total angle change during the course of the bouts. In the left-most panel, all trajectories were realigned such that the initial position and orientation of the fish were the same. The data was sampled at 300 Hz.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006699.g005" xlink:type="simple"/>
</fig>
<p>For closed-loop experiments, the camera view and the projected area need to be aligned to lock the stimulus to the fish position. To this end, a calibration module inside of Stytra finds the mapping between the area covered by the camera and the area illuminated by the screen. During calibration, three points are projected on the screen and detected as local maxima on the camera image. Then, a transformation matrix is computed to align the projected and recorded points. If the setup elements are kept firmly in place, the calibration has to be done only once, although regular checking of the calibration on a regular basis is encouraged.</p>
</sec>
<sec id="sec014">
<title>Custom tracking functions</title>
<p>Stytra is designed in an extensible fashion and video tracking algorithms for other animals can be easily added. To demonstrate this, we provide a small example of DeepLabCut-based tracking, which can be integrated with very few lines of code and immediately used with closed-loop stimuli. DeepLabCut is a convolutional neural network-based pose estimation toolbox [<xref ref-type="bibr" rid="pcbi.1006699.ref010">10</xref>] built on top of the DeeperCut architecture [<xref ref-type="bibr" rid="pcbi.1006699.ref011">11</xref>]. We incorporated an open-field recording example with the video and parameters provided in the original repository (see <xref ref-type="fig" rid="pcbi.1006699.g006">Fig 6</xref>). The code for this example is in a separate GitHub repository, listed at the end of the manuscript. The tracking performance of DeepLabCut mainly depends on video resolution and <sc>cpu</sc> and <sc>gpu</sc> performance. We managed to obtain a tracking speed of 20 Hz (resulting in a tracking latency of 50 ms) for a 640x480 px video on a computer equipped with a nVidia GeForce <sc>gtx</sc> Titan X <sc>gpu</sc> and Intel Xeon E5-2687W v3 <sc>cpu</sc>. For a detailed investigation of DeepLabCut performance see [<xref ref-type="bibr" rid="pcbi.1006699.ref012">12</xref>].</p>
<fig id="pcbi.1006699.g006" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006699.g006</object-id>
<label>Fig 6</label>
<caption>
<title>Screenshot of DeepLabCut-based rat tracking in Stytra.</title>
<p>On the left, the 4 detected keypoints (snout, two ears and tail base) in red are superimposed on the video. On the right, traces tracking the coordinates of the animal are displayed, along with a parameter of of a closed-loop stimulus (a circle that would be tracking a rat). The video displayed was provided with the DeepLabCut repository [<xref ref-type="bibr" rid="pcbi.1006699.ref010">10</xref>].</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006699.g006" xlink:type="simple"/>
</fig>
</sec>
</sec>
<sec id="sec015">
<title>Closed-loop stimuli design</title>
<p>Stimuli whose state depends on the behavior of the fish (position and orientation for freely swimming fish, and tail or eye motion for head-restrained fish) are controlled by linking the behavioral state logs to the stimulus display via <monospace>Estimator</monospace> objects (see <xref ref-type="fig" rid="pcbi.1006699.g001">Fig 1</xref>). An <monospace>Estimator</monospace> receives a data stream from a tracking function (such as tail angles), and uses it together with calibration parameters to estimate some quantity online. For example, a good proxy for fish velocity is the standard deviation of the tail curvature over a window of 50 ms [<xref ref-type="bibr" rid="pcbi.1006699.ref013">13</xref>], which we refer to as vigor. <xref ref-type="fig" rid="pcbi.1006699.g007">Fig 7</xref> shows an example of how vigor can be used in a closed-loop optomotor assay. When presented with a global motion of the visual field in the caudal-rostral direction, the fish tend to swim in the direction of perceived motion to minimize the visual flow, a reflex known as the optomotor response [<xref ref-type="bibr" rid="pcbi.1006699.ref003">3</xref>, <xref ref-type="bibr" rid="pcbi.1006699.ref014">14</xref>]. The visual feedback during the swimming bout is a crucial cue that the larvae use to control their movements. In this closed-loop experiment, we use the vigor-based estimation of fish forward velocity, together with a gain factor, to dynamically adjust the velocity of the gratings to match the visual flow expected by a forward swimming fish. The gain parameter can be changed to experimentally manipulate the speed of the visual feedback received by the larvae [<xref ref-type="bibr" rid="pcbi.1006699.ref013">13</xref>] (see below).</p>
<fig id="pcbi.1006699.g007" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006699.g007</object-id>
<label>Fig 7</label>
<caption>
<title>Closed-loop optomotor assay.</title>
<p>Dynamic update of the stimulus in a closed-loop assay for the optomotor response. From top: open-loop velocity of the gratings moving caudo-rostrally below the fish; cumulative tail angle (see the tail tracking section and <xref ref-type="fig" rid="pcbi.1006699.g003">Fig 3</xref> for details); bout vigor, estimated by calculating the instantaneous standard deviation of the angle sum in a 50 ms window; final closed-loop velocity of the gratings, with backward movements induced by the fish swimming.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006699.g007" xlink:type="simple"/>
</fig>
<p>Closed-loop stimuli may be important for freely swimming fish as well, for example to display patterns or motion which always maintain the same spatial relationship to the swimming fish by matching the stimulus location and orientation to that of the fish.</p>
</sec>
<sec id="sec016">
<title>Synchronization with external devices</title>
<p>Stytra is designed to support the presentation of stimuli that need to be synchronized with a separate acquisition program, e.g. for calcium imaging or electrophysiology. To this end, the <monospace>Trigger</monospace> object enables communication with external devices and different computers to synchronize the beginning of the experiment. The <monospace>Trigger</monospace> object runs in a separate process, ensuring that the interface is not blocked while waiting for trigger signals, and it can be used to either trigger the beginning of the experiment, or to trigger arbitrary parts of the protocol using the existing <monospace>TriggerStimulus</monospace> object or similar custom stimuli. Two ways of receiving the triggering signal are already supported in the library: <sc>ttl</sc> pulse triggering via a LabJack board, and communication over a local network employing the ZeroMQ library. Messages exchanged through ZeroMQ can also contain data, such as the microscope configuration, that will be saved together with the rest of the experiment metadata. The triggering module is designed to be easily expandable, and we provide instructions for writing custom trigger objects. In our lab the two-photon microscope is controlled by custom LabView software, which we extended to include ZeroMQ communication with Stytra. An example LabView program that can be used to trigger Stytra is illustrated in the triggering section of the documentation. In Results, we describe an example experiment using this triggering configuration to link behavioral and stimulus quantities and the recorded calcium responses. Proprietary scanning programs where this cannot be achieved can still trigger Stytra using <sc>ttl</sc> pulses.</p>
</sec>
<sec id="sec017">
<title>Data collection</title>
<p>The design of Stytra encourages automatic data management. A dedicated <monospace>DataCollector</monospace> object is used to log the metadata about the experiment. Parameters from the entire program are appended to a single hierarchical parameter tree, which is saved at the end of the experiment. Quantities in the tree can come from different sources. Firstly, parameters can be added at any point in the code. For example, at every run the current version number of Stytra and git commit are detected and saved, together with the versions of the dependencies. Secondly, many of the key objects of Stytra (tracking nodes, display and camera controllers…) are parametrized though a custom parameters package (lightparam). When constructing them, one needs to pass the parameter tree that collects the data. This ensures that all quantities needed to replicate the experiment are collected within the metadata file. Finally, dedicated parametrized objects can be used to manually input metadata concerning the animal (age, genotype, etc.) or the experiment (setup, session, etc.). These classes can be customized to automatically include lab-specific metadata options, such as setup identifiers or animal lines (examples for this customization are provided in the documentation). Various logs accompanying the experiment run (state of the stimuli, the raw tracking variables and the estimated state of the fish) are saved as tabular data. The supported data formats are CSV, HDF5 and Feather, but others could be added as long as they provide an interface to the Pandas library. To demonstrate the convenience of the data and metadata saving methods of Stytra, we made example data available together with Jupyter notebooks for the analyses that can reproduce the figures in this paper. Finally, a central experiment database can be connected to keep track of all the experiments in a lab or institute. The documentation provides an example of a MongoDB database connection.</p>
</sec>
<sec id="sec018">
<title>Setup hardware</title>
<p>In our effort to make experiments as open and reproducible as possible, we documented example setups that can be used together with the Stytra software for performing behavioral experiments in head-restrained and freely swimming fish (<xref ref-type="fig" rid="pcbi.1006699.g008">Fig 8</xref>). In general, the minimal setup for tracking the fish larvae requires a high-speed camera (a minimum of 100 Hz is required to capture the most common tail beats which have a frequency up to 50 Hz, but we recommend at least 300 Hz to describe the details of the tail kinematics). The camera must be equipped with a suitable objective: a macro lens for the head-restrained tail tracking or a normal lens for the freely swimming recordings, where a smaller magnification and a larger field of view are required. More detailed camera and lens guidelines can be found in the documentation. Infrared illumination is then used to provide contrast without interfering with the animal’s visual perception. Since fish strongly rely on vision and many of their reflexes can be triggered by visual stimulation, the setup is usually equipped with a projector or screen to present the visual stimulus to the fish. Although in our setups stimuli are projected below the fish, a lateral projector would be fully compatible with Stytra. Most of our rig frames consist of optomechanical parts commonly used for building microscopes. These parts are convenient but not strictly necessary to build a well-functioning rig. Replacing them with simple hardware-store and laser-cut components can significantly reduce the costs. Therefore, we also provide instructions for a head-restrained setup built inside a cardboard box, where the most expensive item is the high-speed camera, bringing the price of the whole setup without the computer below 700 euros. We built and documented such a setup, where we were able to elicit and record reliable optomotor responses in larval zebrafish (<xref ref-type="fig" rid="pcbi.1006699.g008">Fig 8</xref>).</p>
<fig id="pcbi.1006699.g008" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006699.g008</object-id>
<label>Fig 8</label>
<caption>
<title>Hardware for zebrafish behavior experiments.</title>
<p>A) Above: sample image of a behavioral setup that can be used to track head-restrained zebrafish tail end eyes (the opaque enclosure has been removed for visualization purposes). Below: sample traces for tail angle and grating velocity obtained from this setup with the closed-loop experiment described in <xref ref-type="fig" rid="pcbi.1006699.g007">Fig 7</xref>. B) A low-cost version of the setup presented in A) that can be used to investigate behavior in the head-restrained fish, and sample traces from this setup. A detailed description of the setup together with a complete list of parts can be found at <ext-link ext-link-type="uri" xlink:href="http://www.portugueslab.com/stytra/hardware_list" xlink:type="simple">www.portugueslab.com/stytra/hardware_list</ext-link>.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006699.g008" xlink:type="simple"/>
</fig>
<p>A complete description of all the above-mentioned versions of the setup along with an itemized list of parts is included within the Stytra hardware documentation.</p>
</sec>
<sec id="sec019">
<title>Comparison with existing software packages</title>
<p>Many general-purpose systems have been proposed over the years to present visual and other kinds of stimuli and control behavioral experiments, each with its own strengths and limitations. Below we sum up some of the systems which are currently maintained, and we present how they compare to Stytra.</p>
<sec id="sec020">
<title>Bonsai</title>
<p>Bonsai [<xref ref-type="bibr" rid="pcbi.1006699.ref015">15</xref>] is a visual programming language built on top of the language C# with a reactive, dataflow-based paradigm. In Bonsai, users with little experience in programming can implement their own tracking pipelines and basic stimuli. By default Bonsai offers visualization of any data processing node, and custom visualizers. In principle, due to the generality of Bonsai, all functions of Stytra could be implemented within it. Still, implementing many features would require using a programming language uncommon in science (C#). Also, the use of several Python libraries, such as DeepLabCut, is in many cases not possible, as only a subset of Python is supported in C# through the IronPython interpreter.</p>
</sec>
<sec id="sec021">
<title>Psychophysics toolbox</title>
<p>Psychophysics Toolbox [<xref ref-type="bibr" rid="pcbi.1006699.ref016">16</xref>] offers a large toolbox to build visual stimuli and stimulation protocols. The toolbox has been developed with human psychophysics in mind, in particular visual and auditory psychophysics. It provides large control over display and sound hardware, and many tools for acquiring responses from the subject through the mouse and keyboard. Still, its application is restricted to the stimulus design, as it does not offer any camera integration or animal tracking modules. This makes the toolbox ill-suited for developing closed-loop stimuli where behavior and responses of the animal need to be fed back to the stimulus control software. Moreover, it relies on the proprietary software package Matlab.</p>
</sec>
<sec id="sec022">
<title>Psychopy</title>
<p>Psychopy [<xref ref-type="bibr" rid="pcbi.1006699.ref017">17</xref>] is a library similar to the Psychophysics Toolbox, written in Python. It provides precise control over displaying visual and auditory stimuli (not currently implemented in Stytra), and a set of tools for recording responses through standard computer inputs (mouse and keyboard). Due to its wide use in human psychophysics experiments, it has a larger library of stimuli than Stytra. However, it is also purely a stimulation library without video or other data acquisition support. Moreover, it does not provide a system for easy online control of stimulus parameters, an essential feature for closed-loop experiments.</p>
</sec>
<sec id="sec023">
<title>MWorks</title>
<p>MWorks is a C/C++ library to control neurophysiological experiments, developed mostly for (visual) neurophysiology in primates and rodents. It provides support for building complex tasks involving trials with different possible outcomes, and contains a dedicated library for handling visual stimuli. Due to being implemented in a compiled language, higher and more consistent performance can be obtained than with our package, which is Python based. However, it is not designed for online video analysis of behavior, which is essential for behaviorally-controlled closed-loop experiments. Furthermore, while scripting and expanding Stytra requires pure Python syntax, experiments in MWorks are coded in custom high-level scripting language based on C++. Most importantly, it runs only on MacOS, which depends on Apple hardware, available only in a minority of laboratories.</p>
</sec>
<sec id="sec024">
<title>ZebEyeTrack</title>
<p>The software solution described in [<xref ref-type="bibr" rid="pcbi.1006699.ref002">2</xref>] covers a small subset of Stytra functionality—eye tracking and eye-motion related stimulus presentation. It is implemented in LabView and Matlab, which adds two expensive proprietary software dependencies. Running an experiment requires launching separate programs and many manual steps as described in the publication. The tracking frame rate is limited to 30 Hz in real-time while Stytra can perform online eye tracking at 500 Hz, and Stytra’s performance is mainly limited by the camera frame rate.</p>
</sec>
</sec>
</sec>
<sec id="sec025" sec-type="results">
<title>Results</title>
<sec id="sec026">
<title>Triggering Stytra from a scanning two-photon microscope</title>
<p>We demonstrate the communication with a custom-built two-photon microscope. We performed two-photon calcium imaging in a seven days post fertilization (dpf), head-restrained fish larva pan-neuronally expressing the calcium indicator GCaMP6f (Tg(<italic>elavl3</italic>:GCaMP6f), [<xref ref-type="bibr" rid="pcbi.1006699.ref018">18</xref>]). For a complete description of the calcium imaging protocol see [<xref ref-type="bibr" rid="pcbi.1006699.ref019">19</xref>]. These and following experiments were performed in accordance with approved protocols set by the Max Planck Society and the Regierung von Oberbayern.</p>
<p>We designed a simple protocol in Stytra consisting of either open- or closed-loop forward-moving gratings, similar to the optomotor assay described in the closed-loop section, with the gain set to either 0 or 1. At the beginning of the experiment, the microscope sends a ZeroMQ message to Stytra, as described in the previous section. This triggers the beginning of the visual stimulation protocol, as well as the online tracking of the fish tail, with a 10-20 ms delay. To match behavioral quantities and stimulus features with their evoked neuronal correlates, we used the data saved by Stytra to build regressors for grating speed and tail motion (for a description of regressor-based analysis of calcium signals, see [<xref ref-type="bibr" rid="pcbi.1006699.ref008">8</xref>]). Then, we computed pixel-wise correlation coefficients of calcium activity and the two regressors. <xref ref-type="fig" rid="pcbi.1006699.g009">Fig 9</xref> reports the results obtained by imaging a large area of the fish brain, covering all regions from the rhombencephalon to the optic tectum. As expected, calcium signals in the region of the optic tectum are highly correlated with motion in the visual field, while events in more caudal regions of the reticular formation are highly correlated with swimming bouts. The Stytra script used for this experiment is available at <monospace>stytra/example/imaging_exp.py</monospace>.</p>
<fig id="pcbi.1006699.g009" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006699.g009</object-id>
<label>Fig 9</label>
<caption>
<title>Closed-loop protocol and simultaneous whole-brain calcium imaging.</title>
<p>A) A protocol consisting of either open- or closed-loop forward-moving gratings was presented to a seven day old Tg(<italic>elavl3</italic>:GCaMP6f) zebrafish larvae during two-photon imaging. The arrowhead points to the timepoint of receiving the trigger signal from the microscope. Colored stripes indicate periods when the gratings were moving: dark gray represents open loop trials (gain 0) and light gray represents closed-loop trials (gain 1). B) Left: Pixel-wise correlation coefficients with the grating velocity regressor. The square on the regressor map reports the position of the area that was used to compute the calcium trace displayed on the right. Right: z-scored fluorescence trace from the selected area, imposed over the regressor trace. C) Same as B, for the vigor regressor.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006699.g009" xlink:type="simple"/>
</fig>
</sec>
<sec id="sec027">
<title>Experiment replication</title>
<p>One of the main strengths of Stytra is the possibility of sharing the experimental paradigms described in a publication as scripts that can be run on different platforms and experimental hardware. To prove the validity of this approach, we decided to showcase the software reproducing the results from two publications that investigated different behaviors of the larval zebrafish. This allowed us to verify the performance of our package in producing and monitoring reliable behavioral responses, and showed how the Stytra platform can be used to share the code underlying an experimental paradigm. The scripts used for designing these experiments are available in our repository, together with a full list of parts and description of the hardware. In this way, everyone can independently replicate the experiments simply by installing and running Stytra on a suitable behavioral setup.</p>
<sec id="sec028">
<title>Closed-loop motor adaptation</title>
<p>To demonstrate the effectiveness of the closed-loop stimulation software for head-restrained larvae, we re-implemented in Stytra one of the paradigms described in [<xref ref-type="bibr" rid="pcbi.1006699.ref013">13</xref>]. This paper addresses the importance of instantaneous visual feedback in the control of the optomotor response in seven dpf zebrafish larvae.</p>
<p>In [<xref ref-type="bibr" rid="pcbi.1006699.ref013">13</xref>], a closed-loop paradigm was used to have real-time control over the visual feedback that the animal receives upon swimming. After triggering motor activity with forward-moving black and white gratings (10 mm/s, 0.1 cycles/mm), online tail tracking was used to estimate the expected velocity of the fish based on freely-moving observations, and a backward velocity proportional to the expected forward velocity was imposed over the forward grating speed. In one crucial experiment (Fig 3 of [<xref ref-type="bibr" rid="pcbi.1006699.ref013">13</xref>]) the authors demonstrated that reducing or increasing the magnitude of this velocity by a factor of 1.5 (high gain) or 0.5 (low gain) resulted in modifications of the bout parameters such as bout length and inter-bout interval (time between two consecutive bouts). <xref ref-type="fig" rid="pcbi.1006699.g010">Fig 10A</xref> shows the inter-bout interval along the protocol, where the three gain conditions were presented in a sequence that tested all possible gain transitions. When the gain increased the fish was consistently swimming less (higher inter-bout interval), while the opposite was observed when the gain decreased. Therefore, as expected, fish adapted the swimming parameters to compensate for changes in visual feedback.</p>
<fig id="pcbi.1006699.g010" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006699.g010</object-id>
<label>Fig 10</label>
<caption>
<title>Visual feedback changes inter-bout interval in a head-restrained optomotor assay.</title>
<p>Replication within Stytra of results published in [<xref ref-type="bibr" rid="pcbi.1006699.ref013">13</xref>]. A) Changing the gain that is used to convert the fish’s swimming vigor to relative velocity with respect to the grating affects the inter-bout interval. The line represents the average normalized inter-bout time, and bars represent standard error of the mean from n = 28 larvae (adapted from [<xref ref-type="bibr" rid="pcbi.1006699.ref013">13</xref>]). B) Replication in Stytra of the same experimental protocol (n = 24 larvae). Individual fish traces are shown in gray.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006699.g010" xlink:type="simple"/>
</fig>
<p>We reproduced exactly the same protocol within Stytra, and we used Stytra modules for closed-loop control of a visual stimulus to compare whether it could replicate the findings from [<xref ref-type="bibr" rid="pcbi.1006699.ref013">13</xref>]. The cumulative angle of the extracted tail segments was used with a gain factor to estimate the fish velocity and the gain factor was changed in a sequence matching the protocol in [<xref ref-type="bibr" rid="pcbi.1006699.ref013">13</xref>]. The replication with Stytra yielded the same result (<xref ref-type="fig" rid="pcbi.1006699.g010">Fig 10B</xref>), that inter-bout interval decreased in low gain conditions and increased in high gain conditions.</p>
</sec>
<sec id="sec029">
<title>Closed-loop phototaxis assay</title>
<p>To test the freely swimming closed-loop performance, we replicated a protocol from [<xref ref-type="bibr" rid="pcbi.1006699.ref020">20</xref>]. The fish is induced to perform phototaxis by keeping half of its visual field (the left or the right side) bright while the other is dark. The fish is more likely to turn to the bright side. The stimulus is constantly updated so that the light-dark boundary is always along the mid-line of the fish. We replicated the qualitative trends observed in [<xref ref-type="bibr" rid="pcbi.1006699.ref020">20</xref>], however the ratios of forward swims to turns are notably different (<xref ref-type="fig" rid="pcbi.1006699.g011">Fig 11</xref>). The variability of fish responses and differences in the stimulus presentation setup (e.g. projector brightness) could account for these differences. Also, to reduce duration of the experiments, we included a radially-inward moving stimulus that brings the fish back into the field of view.</p>
<fig id="pcbi.1006699.g011" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006699.g011</object-id>
<label>Fig 11</label>
<caption>
<title>Comparison of turning angle distribution in a closed-loop freely-swimming phototaxis experiment.</title>
<p>Left: a histogram of the angle turned per bout, redrawn from [<xref ref-type="bibr" rid="pcbi.1006699.ref020">20</xref>]. Right: the equivalent panel, with n = 10 fish and the protocol run with Stytra. The dark shading on the plot represents the dark side of the visual field.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006699.g011" xlink:type="simple"/>
</fig>
</sec>
</sec>
<sec id="sec030">
<title>Discussion</title>
<p>We have developed Stytra, a Python-based software package that can perform online behavioral analysis and stimulation and can be interfaced with existing solutions to combine these with physiological experiments. This demonstrates its suitability as a framework for coding and running experiments in systems neuroscience. In addition to the open-source software, we are contributing to the nascent open hardware movement [<xref ref-type="bibr" rid="pcbi.1006699.ref004">4</xref>] and are providing a complete description of the hardware used for conducting behavioral experiments. Finally, we provide a set of example analysis scripts for the experiments described in this manuscript, which can be easily modified for other experimental questions. We believe that the simplicity of the implementation of an experiment within Stytra facilitates the collaboration between laboratories, since complex experimental paradigms can be run and shared with Python scripts whose reproducibility can be ensured using version control.</p>
<p>The current version of the software supports all experimental paradigms currently running in our lab. Support for different hardware would require some extensions in the architecture. Simultaneous use of multiple cameras is currently not supported either, but this requires a minor rewriting of the frame dispatching module. We will both continue to extend Stytra’s capabilities and support any contributions that expand the library to cover a wider range of experimental conditions. Finally, it is important to note that the choice of Python as a language would make it difficult to obtain millisecond-level or higher temporal precision (e.g. for closed-loop electrophysiology). To this aim, existing solutions based on compiled languages should be employed, such as [<xref ref-type="bibr" rid="pcbi.1006699.ref021">21</xref>] (a system for closed-loop electrophysiology in C++). Another possibility would be to combine Open Ephys and Bonsai, as in [<xref ref-type="bibr" rid="pcbi.1006699.ref022">22</xref>].</p>
<p>The modular and open-source nature of the package (licensed under the <sc>gnu gpl</sc> v3.0 licence) facilitates contributions from the community to support an increasing number of hardware devices and experimental conditions. Although the current implementation deals with typical zebrafish experiments, the package contains many modules that can be used in other contexts, for example: Qt-based design and timed execution of stimuli, support for different cameras models and accumulators to save data streamed from different processes that can be used for closed-loop stimuli. Although the adaptation to very different experimental conditions requires familiarity with Stytra internals, scientists interested in developing behavioral paradigms using pure Python could use many modules of Stytra as a starting point. We will make use of the community features of Github to provide assistance to any interested developers, and to support adopting the package in other labs. In conclusion, we hope that Stytra can be a resource for the neuroscience community, providing a common framework to create shareable and reproducible behavioral experiments.</p>
</sec>
<sec id="sec031">
<title>Online resources</title>
<list list-type="bullet">
<list-item>
<p>Stytra repository: <ext-link ext-link-type="uri" xlink:href="https://github.com/portugueslab/stytra" xlink:type="simple">https://github.com/portugueslab/stytra</ext-link> DOI:<ext-link ext-link-type="uri" xlink:href="https://doi.org/10.5281/zenodo.2548534" xlink:type="simple">10.5281/zenodo.2548534</ext-link></p>
</list-item>
<list-item>
<p>Stytra documentation: <ext-link ext-link-type="uri" xlink:href="http://www.portugueslab.com/stytra/" xlink:type="simple">http://www.portugueslab.com/stytra/</ext-link></p>
</list-item>
<list-item>
<p>data analysis notebooks: <ext-link ext-link-type="uri" xlink:href="https://github.com/portugueslab/example_stytra_analysis" xlink:type="simple">https://github.com/portugueslab/example_stytra_analysis</ext-link></p>
</list-item>
<list-item>
<p>example data from Stytra: <ext-link ext-link-type="uri" xlink:href="https://zenodo.org/record/1692080" xlink:type="simple">https://zenodo.org/record/1692080</ext-link></p>
</list-item>
<list-item>
<p>example extension of Stytra to rat experiments: <ext-link ext-link-type="uri" xlink:href="https://github.com/portugueslab/Stytra-with-DeepLabCut" xlink:type="simple">https://github.com/portugueslab/Stytra-with-DeepLabCut</ext-link></p>
</list-item>
</list>
</sec>
</sec>
<sec id="sec032">
<title>Supporting information</title>
<supplementary-material id="pcbi.1006699.s001" mimetype="image/tiff" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006699.s001" xlink:type="simple">
<label>S1 Fig</label>
<caption>
<title>Software architecture of Stytra.</title>
<p>A partial diagram of classes and the links between them.</p>
<p>(TIF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006699.s002" mimetype="image/tiff" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006699.s002" xlink:type="simple">
<label>S2 Fig</label>
<caption>
<title>Temporal jitter of a flickering stimulus.</title>
<p>The distribution of time differences between bright-dark transitions of a stimulus set to flip between full luminosity on the red channel and darkness on every stimulus. Pure red was flashed in order to avoid artifacts of <sc>led dlp</sc> projector color multiplexing. The brightness of a small area of the display was recorded with a Ximea camera with a OnSemi <sc>python</sc> 1300 sensor at 2000 Hz.</p>
<p>(TIF)</p>
</caption>
</supplementary-material>
</sec>
</body>
<back>
<ack>
<p>We thank Marco Albanesi for testing the software and the first pull requests, and Virginia Palieri, Elena I. Dragomir, Ot Prat and Daniil Markov for being the first users of Stytra in the lab. We thank the Python open-source community on whose work this package is based on, especially Luke Campagnola for developing the invaluable PyQtGraph package.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pcbi.1006699.ref001">
<label>1</label>
<mixed-citation publication-type="other" xlink:type="simple">Haesemeyer M. haesemeyer/ZebraTrack: Initial release; 2019. Available from: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.5281/zenodo.2539837" xlink:type="simple">https://doi.org/10.5281/zenodo.2539837</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1006699.ref002">
<label>2</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Dehmelt</surname> <given-names>FA</given-names></name>, <name name-style="western"><surname>von Daranyi</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Leyden</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Arrenberg</surname> <given-names>AB</given-names></name>. <article-title>Evoking and tracking zebrafish eye movement in multiple larvae with ZebEyeTrack</article-title>. <source>Nature protocols</source>. <year>2018</year>; p. <fpage>1</fpage>.</mixed-citation>
</ref>
<ref id="pcbi.1006699.ref003">
<label>3</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Portugues</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Engert</surname> <given-names>F</given-names></name>. <article-title>The neural basis of visual behaviors in the larval zebrafish</article-title>. <source>Current opinion in neurobiology</source>. <year>2009</year>;<volume>19</volume>(<issue>6</issue>):<fpage>644</fpage>–<lpage>647</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.conb.2009.10.007" xlink:type="simple">10.1016/j.conb.2009.10.007</ext-link></comment> <object-id pub-id-type="pmid">19896836</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006699.ref004">
<label>4</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Chagas</surname> <given-names>AM</given-names></name>. <article-title>Haves and have nots must find a better way: The case for open scientific hardware</article-title>. <source>PLoS biology</source>. <year>2018</year>;<volume>16</volume>(<issue>9</issue>):<fpage>e3000014</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pbio.3000014" xlink:type="simple">10.1371/journal.pbio.3000014</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1006699.ref005">
<label>5</label>
<mixed-citation publication-type="other" xlink:type="simple">Imagen;. <ext-link ext-link-type="uri" xlink:href="https://imagen.pyviz.org" xlink:type="simple">https://imagen.pyviz.org</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1006699.ref006">
<label>6</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Bradski</surname> <given-names>G</given-names></name>. <article-title>The OpenCV Library</article-title>. <source>Dr Dobb’s Journal of Software Tools</source>. <year>2000</year>.</mixed-citation>
</ref>
<ref id="pcbi.1006699.ref007">
<label>7</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Budick</surname> <given-names>SA</given-names></name>, <name name-style="western"><surname>O’Malley</surname> <given-names>DM</given-names></name>. <article-title>Locomotor repertoire of the larval zebrafish: swimming, turning and prey capture</article-title>. <source>Journal of Experimental Biology</source>. <year>2000</year>;<volume>203</volume>(<issue>17</issue>):<fpage>2565</fpage>–<lpage>2579</lpage>. <object-id pub-id-type="pmid">10934000</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006699.ref008">
<label>8</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Portugues</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Feierstein</surname> <given-names>CE</given-names></name>, <name name-style="western"><surname>Engert</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Orger</surname> <given-names>MB</given-names></name>. <article-title>Whole-brain activity maps reveal stereotyped, distributed networks for visuomotor behavior</article-title>. <source>Neuron</source>. <year>2014</year>;<volume>81</volume>(<issue>6</issue>):<fpage>1328</fpage>–<lpage>1343</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.neuron.2014.01.019" xlink:type="simple">10.1016/j.neuron.2014.01.019</ext-link></comment> <object-id pub-id-type="pmid">24656252</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006699.ref009">
<label>9</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Beck</surname> <given-names>JC</given-names></name>, <name name-style="western"><surname>Gilland</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Tank</surname> <given-names>DW</given-names></name>, <name name-style="western"><surname>Baker</surname> <given-names>R</given-names></name>. <article-title>Quantifying the ontogeny of optokinetic and vestibuloocular behaviors in zebrafish, medaka, and goldfish</article-title>. <source>Journal of neurophysiology</source>. <year>2004</year>;<volume>92</volume>(<issue>6</issue>):<fpage>3546</fpage>–<lpage>3561</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1152/jn.00311.2004" xlink:type="simple">10.1152/jn.00311.2004</ext-link></comment> <object-id pub-id-type="pmid">15269231</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006699.ref010">
<label>10</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Mathis</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Mamidanna</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Cury</surname> <given-names>KM</given-names></name>, <name name-style="western"><surname>Abe</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Murthy</surname> <given-names>VN</given-names></name>, <name name-style="western"><surname>Mathis</surname> <given-names>MW</given-names></name>, <etal>et al</etal>. <article-title>DeepLabCut: markerless pose estimation of user-defined body parts with deep learning</article-title>. <source>Nature Neuroscience</source>. <year>2018</year>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/s41593-018-0209-y" xlink:type="simple">10.1038/s41593-018-0209-y</ext-link></comment> <object-id pub-id-type="pmid">30127430</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006699.ref011">
<label>11</label>
<mixed-citation publication-type="other" xlink:type="simple">Insafutdinov E, Pishchulin L, Andres B, Andriluka M, Schiele B. DeeperCut: A Deeper, Stronger, and Faster Multi-Person Pose Estimation Model.</mixed-citation>
</ref>
<ref id="pcbi.1006699.ref012">
<label>12</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Mathis</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Warren</surname> <given-names>RA</given-names></name>. <article-title>On the inference speed and video-compression robustness of DeepLabCut</article-title>. <source>bioRxiv</source>. <year>2018</year>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1101/457242" xlink:type="simple">10.1101/457242</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1006699.ref013">
<label>13</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Portugues</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Engert</surname> <given-names>F</given-names></name>. <article-title>Adaptive locomotor behavior in larval zebrafish</article-title>. <source>Frontiers in systems neuroscience</source>. <year>2011</year>;<volume>5</volume>:<fpage>72</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.3389/fnsys.2011.00072" xlink:type="simple">10.3389/fnsys.2011.00072</ext-link></comment> <object-id pub-id-type="pmid">21909325</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006699.ref014">
<label>14</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Orger</surname> <given-names>MB</given-names></name>, <name name-style="western"><surname>Kampff</surname> <given-names>AR</given-names></name>, <name name-style="western"><surname>Severi</surname> <given-names>KE</given-names></name>, <name name-style="western"><surname>Bollmann</surname> <given-names>JH</given-names></name>, <name name-style="western"><surname>Engert</surname> <given-names>F</given-names></name>. <article-title>Control of visually guided behavior by distinct populations of spinal projection neurons</article-title>. <source>Nature neuroscience</source>. <year>2008</year>;<volume>11</volume>(<issue>3</issue>):<fpage>327</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/nn2048" xlink:type="simple">10.1038/nn2048</ext-link></comment> <object-id pub-id-type="pmid">18264094</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006699.ref015">
<label>15</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lopes</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Bonacchi</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Frazão</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Neto</surname> <given-names>JP</given-names></name>, <name name-style="western"><surname>Atallah</surname> <given-names>BV</given-names></name>, <name name-style="western"><surname>Soares</surname> <given-names>S</given-names></name>, <etal>et al</etal>. <article-title>Bonsai: an event-based framework for processing and controlling data streams</article-title>. <source>Frontiers in neuroinformatics</source>. <year>2015</year>;<volume>9</volume>:<fpage>7</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.3389/fninf.2015.00007" xlink:type="simple">10.3389/fninf.2015.00007</ext-link></comment> <object-id pub-id-type="pmid">25904861</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006699.ref016">
<label>16</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Brainard</surname> <given-names>DH</given-names></name>, <name name-style="western"><surname>Vision</surname> <given-names>S</given-names></name>. <article-title>The psychophysics toolbox</article-title>. <source>Spatial vision</source>. <year>1997</year>;<volume>10</volume>:<fpage>433</fpage>–<lpage>436</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1163/156856897X00357" xlink:type="simple">10.1163/156856897X00357</ext-link></comment> <object-id pub-id-type="pmid">9176952</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006699.ref017">
<label>17</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Peirce</surname> <given-names>JW</given-names></name>. <article-title>PsychoPy—psychophysics software in Python</article-title>. <source>Journal of neuroscience methods</source>. <year>2007</year>;<volume>162</volume>(<issue>1-2</issue>):<fpage>8</fpage>–<lpage>13</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.jneumeth.2006.11.017" xlink:type="simple">10.1016/j.jneumeth.2006.11.017</ext-link></comment> <object-id pub-id-type="pmid">17254636</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006699.ref018">
<label>18</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Wolf</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Dubreuil</surname> <given-names>AM</given-names></name>, <name name-style="western"><surname>Bertoni</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Böhm</surname> <given-names>UL</given-names></name>, <name name-style="western"><surname>Bormuth</surname> <given-names>V</given-names></name>, <name name-style="western"><surname>Candelier</surname> <given-names>R</given-names></name>, <etal>et al</etal>. <article-title>Sensorimotor computation underlying phototaxis in zebrafish</article-title>. <source>Nature Communications</source>. <year>2017</year>;<volume>8</volume>(<issue>1</issue>):<fpage>651</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/s41467-017-00310-3" xlink:type="simple">10.1038/s41467-017-00310-3</ext-link></comment> <object-id pub-id-type="pmid">28935857</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006699.ref019">
<label>19</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Kist</surname> <given-names>AM</given-names></name>, <name name-style="western"><surname>Knogler</surname> <given-names>LD</given-names></name>, <name name-style="western"><surname>Markov</surname> <given-names>DA</given-names></name>, <name name-style="western"><surname>Yildizoglu</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Portugues</surname> <given-names>R</given-names></name>. <chapter-title>Whole-Brain Imaging Using Genetically Encoded Activity Sensors in Vertebrates</chapter-title>. In: <source>Decoding Neural Circuit Structure and Function</source>. <publisher-name>Springer</publisher-name>; <year>2017</year>. p. <fpage>321</fpage>–<lpage>341</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1006699.ref020">
<label>20</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Huang</surname> <given-names>KH</given-names></name>, <name name-style="western"><surname>Ahrens</surname> <given-names>MB</given-names></name>, <name name-style="western"><surname>Dunn</surname> <given-names>TW</given-names></name>, <name name-style="western"><surname>Engert</surname> <given-names>F</given-names></name>. <article-title>Spinal projection neurons control turning behaviors in zebrafish</article-title>. <source>Current Biology</source>. <year>2013</year>;<volume>23</volume>(<issue>16</issue>):<fpage>1566</fpage>–<lpage>1573</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.cub.2013.06.044" xlink:type="simple">10.1016/j.cub.2013.06.044</ext-link></comment> <object-id pub-id-type="pmid">23910662</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006699.ref021">
<label>21</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Ciliberti</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Kloosterman</surname> <given-names>F</given-names></name>. <article-title>Falcon: a highly flexible open-source software for closed-loop neuroscience</article-title>. <source>Journal of neural engineering</source>. <year>2017</year>;<volume>14</volume>(<issue>4</issue>):<fpage>045004</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1088/1741-2552/aa7526" xlink:type="simple">10.1088/1741-2552/aa7526</ext-link></comment> <object-id pub-id-type="pmid">28548044</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006699.ref022">
<label>22</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Buccino</surname> <given-names>AP</given-names></name>, <name name-style="western"><surname>Lepperod</surname> <given-names>ME</given-names></name>, <name name-style="western"><surname>Dragly</surname> <given-names>SA</given-names></name>, <name name-style="western"><surname>Hafliger</surname> <given-names>PD</given-names></name>, <name name-style="western"><surname>Fyhn</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Hafting</surname> <given-names>T</given-names></name>. <article-title>Open source modules for tracking animal behavior and closed-loop stimulation based on Open Ephys and Bonsai</article-title>. <source>bioRxiv</source>. <year>2018</year>; p. <fpage>340141</fpage>.</mixed-citation>
</ref>
</ref-list>
</back>
</article>