<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="article-commentary" dtd-version="3.0" xml:lang="EN"><front><journal-meta><journal-id journal-id-type="publisher-id">plos</journal-id><journal-id journal-id-type="publisher">pcbi</journal-id><journal-id journal-id-type="flc">plcb</journal-id><journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id><journal-id journal-id-type="pmc">ploscomp</journal-id><!--===== Grouping journal title elements =====--><journal-title-group><journal-title>PLoS Computational Biology</journal-title></journal-title-group><issn pub-type="ppub">1553-734X</issn><issn pub-type="epub">1553-7358</issn><publisher><publisher-name>Public Library of Science</publisher-name><publisher-loc>San Francisco, USA</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="doi">10.1371/journal.pcbi.0020087</article-id><article-id pub-id-type="publisher-id">06-PLCB-PV-0086R1</article-id><article-id pub-id-type="sici">plcb-02-08-05</article-id><article-categories><subj-group subj-group-type="heading"><subject>Perspective</subject></subj-group><subj-group subj-group-type="Discipline"><subject>Computational Biology</subject><subject>Science Policy</subject><subject>Computational Biology/Systems Biology</subject></subj-group><subj-group subj-group-type="System Taxonomy"><subject>None</subject></subj-group></article-categories><title-group><article-title>Scientific Software Development Is Not an Oxymoron</article-title><alt-title alt-title-type="running-head">Perspectives</alt-title></title-group><contrib-group><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Baxter</surname><given-names>Susan M</given-names></name><xref ref-type="fn" rid="aff1"/><xref ref-type="corresp" rid="cor1">
            <sup>*</sup>
          </xref></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Day</surname><given-names>Steven W</given-names></name><xref ref-type="fn" rid="aff1"/></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Fetrow</surname><given-names>Jacquelyn S</given-names></name><xref ref-type="fn" rid="aff1"/></contrib><contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Reisinger</surname><given-names>Stephanie J</given-names></name><xref ref-type="fn" rid="aff1"/></contrib></contrib-group><contrib-group><contrib contrib-type="editor" xlink:type="simple"><name name-style="western"><surname>McEntyre</surname><given-names>Johanna</given-names></name><role>Editor</role><xref ref-type="aff" rid="edit1"/></contrib></contrib-group><aff id="edit1">National Center for Biotechnology Information, United States of America</aff><author-notes><fn fn-type="con" id="ack1"><p>SMB and SJR conceived and designed the experiments. SWD and JSF analyzed the data. SWD and JSF contributed reagents/materials/analysis tools. SMB, SWD, JSF, and SJR wrote the paper.</p></fn><fn fn-type="current-aff" id="aff1"><p>Susan M. Baxter and Steven W. Day are at the National Center for Genome Resources, Santa Fe, New Mexico, United States of America. Jacquelyn S. Fetrow is in the Departments of Computer Science and Physics at Wake Forest University, Winston-Salem, North Carolina, United States of America. Stephanie J. Reisinger is at the Prosanos Corporation, San Diego, California, United States of America.</p></fn><corresp id="cor1">* To whom correspondence should be addressed. E-mail: <email xlink:type="simple">smb@ncgr.org</email></corresp><fn fn-type="conflict" id="ack3"><p> The authors have declared that no competing interests exist.</p></fn></author-notes><pub-date pub-type="ppub"><month>9</month><year>2006</year></pub-date><pub-date pub-type="epub"><day>8</day><month>9</month><year>2006</year></pub-date><volume>2</volume><issue>9</issue><elocation-id>e87</elocation-id><!--===== Grouping copyright info into permissions =====--><permissions><copyright-year>2006</copyright-year><copyright-holder>Baxter et al</copyright-holder><license><license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p></license></permissions><funding-group><funding-statement>The authors received no specific funding for this article.</funding-statement></funding-group><counts><page-count count="4"/></counts><!--===== Restructure custom-meta-wrap to custom-meta-group =====--><custom-meta-group><custom-meta><meta-name>citation</meta-name><meta-value>Baxter SM, Day SW, Fetrow JS, Reisinger SJ (2006) Scientific software development is not an oxymoron. PLoS Comput Biol 2(9): e87. DOI: <ext-link ext-link-type="doi" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.0020087" xlink:type="simple">10.1371/journal.pcbi.0020087</ext-link></meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="s1"><title/><disp-quote><p>“Many scientists and engineers spend much of their lives writing, debugging, and maintaining software, but only a handful have ever been taught how to do this effectively: after a couple of introductory courses, they are left to rediscover (or reinvent) the rest of programming on their own. The result? Most spend far too much time wrestling with software, instead of doing research, but have no idea how reliable or efficient their programs are.” —Greg Wilson [<xref ref-type="bibr" rid="pcbi-0020087-b001">1</xref>]</p></disp-quote><p>As Greg Wilson's <italic>American Scientist</italic> article [<xref ref-type="bibr" rid="pcbi-0020087-b002">2</xref>] circulated on the “bio-IT” e-mail lists and blogosphere this past winter, many of us sighed, groaned, and smiled in recognition. The field of computational biology crosses the span between engineering and science—a surprisingly (to some) large gulf that typically is uncovered in the process of developing scientific software.</p><p>Why opine on best practices for scientific software projects now? Computational biologists are taking on increasingly important roles in this Internet-enabled, information-rich, high-throughput era of biology [<xref ref-type="bibr" rid="pcbi-0020087-b003">3</xref>]. Analytics and algorithms must operate on disparate and relatively large datasets. Curation and peer review is essential to critical analysis of computational conclusions. Software applications are needed to aggregate, integrate, and manage data, tools, results, and discoveries. Computational biologists are involved as advisors to technical teams developing and maintaining long-lived data resources, as product owners for software development, as coding and algorithm experts, and as reviewers of proposals and manuscripts. Whether code is developed for use in a single laboratory or as part of a larger, multi-institutional project, there are best practices worth knowing and following.</p><p>We are starting with the premise that scientific software development brings together different cultures. A “certified technology stack” might mean a robust <italic>n</italic>-tiered architecture to some and an expensive waste of resources to others. We want to avoid fanning controversy over interdisciplinary science [<xref ref-type="bibr" rid="pcbi-0020087-b004">4</xref>,<xref ref-type="bibr" rid="pcbi-0020087-b005">5</xref>] and misunderstandings inherent at the interface between engineering and science [<xref ref-type="bibr" rid="pcbi-0020087-b006">6</xref>,<xref ref-type="bibr" rid="pcbi-0020087-b007">7</xref>]. We hope to provide a common understanding so that we all—specialists and generalists—can work effectively on scientific software projects, increasing project efficiency, software longevity, user community acceptance, and translational impact.</p><p>We see important similarities between the way scientists and software engineers approach and attack problems which may provide a general framework for successful scientific software development. Scientists are taught the scientific method from the time they perform their first experiments. Similarly, software engineers are taught about the software development life cycle before they write their first “if” statement. By understanding similarities between these approaches, we can layer some practical methods from the software development life cycle onto computational biology projects to build a solid foundation for success.</p><p>Two of us are card-carrying software engineers; two of us are formally trained as scientists. We are all battle-scarred veterans of large scientific software development projects, while working in business, nonprofit, government, and academic settings. Many of those projects were successful; some were not. We think that the best practices learned and employed on large scientific software projects can also instruct smaller development projects carried out by single-investigator laboratories or small teams. (In addition to the references cited, see <xref ref-type="boxed-text" rid="pcbi-0020087-box001">Box 1</xref> for a suggested library and for resources to improve scientific software development processes.)</p><p>We define success as delivering a code base that produces consistent, reproducible results, is usable and useful, can be easily maintained and updated, and has a reasonable shelf life. We will also add that successful scientific software projects are usually fun—realizing this might expose how truly geeky we are.</p></sec><sec id="s2"><title>Suggested Best Practices</title><sec id="s2a"><title/><p>To achieve success in scientific software projects, we propose a minimal set of guidelines for pragmatic practitioners, peer reviewers, and project leaders of small- (single-lab) to medium- (collaborative, noncommercial projects) sized projects. We debated, solicited advice, reread some of our favorite books [<xref ref-type="bibr" rid="pcbi-0020087-b008">8</xref>,<xref ref-type="bibr" rid="pcbi-0020087-b009">9</xref>], and took guidance from our editors, to boil down our experiences and this enormous topic to five recommended, stripped-down practices for successful scientific software development: 1) design the project up-front; 2) document programs and key processes; 3) apply quality control; 4) use data standards where possible; and 5) incorporate project management. We can trace project failures back to breakdowns in any one or more of these practices. We will next explain what we mean by each practice.</p><sec id="s2a1"><title>Design the project up-front.</title><p>Good scientists do not perform experiments before developing a hypothesis, then describing materials and methods to test that hypothesis. Similarly, before the first line of code is written, software projects should be proactively and thoughtfully designed. This does not necessarily require a voluminous tome, but it should answer two key questions: “What will the program(s) do?” and “How will the results produced by the program be verified?” The most simple design documents describe inputs, how those inputs will be transformed by the program(s), and outputs.</p><boxed-text content-type="1col" id="pcbi-0020087-box001" position="float"><sec id="sb1"><title>Box 1. Suggested Resources and Beginning Library for Maturing Scientific Software Developers and Project Managers</title><sec id="sb1a"><title>Broad scope:</title><p>Basic software development practices: Software carpentry. <ext-link ext-link-type="uri" xlink:href="http://www.scipy.org" xlink:type="simple">http://www.scipy.org</ext-link>. <italic>Website and coursework written with scientific software development in mind</italic>.</p></sec><sec id="sb1b"><title>Design:</title><p>Gamma E, Helm R, Johnson R, Vlissides J (1995) Design patterns: Elements of reusable object-oriented software. Boston: Addison-Wesley. 395 p. <italic>Seminal book on object-oriented design patterns for developers aiming to reuse code bases.</italic></p></sec><sec id="sb1c"><title>Quality Control:</title><p>Lewis WE (2004) Software testing and continuous quality improvement. 2nd edition. New York: Auerbach. 560 p. <italic>Squarely addresses testing and quality in a maintenance environment; of particular use to developers supporting long-lived code bases.</italic></p></sec><sec id="sb1d"><title>Project management:</title><p>Berkun S (2005) The art of project management. Sebastopol (California): O'Reilly Media. 488 p. <italic>Easy-to-read book filled with many “lessons learned,” to read rather than to have to experience.</italic></p><p>Schwaber K (2004) Agile project management with Scrum. Redmond (Washington): Microsoft Press. 192 p. <italic>Iterative methodology aimed at keeping plans in sync with what is really going on in software development projects.</italic></p></sec></sec></boxed-text><p>Based on the purpose of the software, identifying the appropriate technologies or programming languages is a vital decision during the design phase. While typically driven, often mistakenly, by the current in-house expertise of the software developers, there should be careful analysis in addressing the problem with the most practical selection of technologies. For example, if ease of distribution is considered important, the platform-independent nature of Java may make the most sense; if the software deals with a great deal of text manipulation, Perl may be best suited; if speed of execution is essential, C or C++ may be the way to go. In addition to considering the built-in strengths of a particular language, most offer a vast array of canned libraries (whether included in the distribution or preexisting as an open source project) developed to handle all but the most arcane technological issues. It is at this design juncture that much time can be saved in building software components that could be acquired for almost nothing through relatively minimal research. Additionally, plugging in trusted, reusable code bases lends credibility to the overall quality of the software and streamlines the testing phase.</p><p>The team should develop test plans and create data to test their code. In the development of test plans, it is also good practice to consider independent variables, such as how long the program might take to run on a certain platform, how it will work with a real-world-sized input file, or how well it will interface or interoperate with other programs that are not a part of your project.</p><p>The design phase should also address software usability requirements. If the software under development will be used only by the programmer, usability might not be a large concern. However, as funding agencies emphasize dissemination, collaborative teams aim to share tools; and to use statistics to help justify renewal of funding, usability should be a higher priority in scientific software development. Designing facile user interfaces, interactive feedback cycles, maintenance and release plans, or easy reuse of code or tools requires careful thought, due diligence, and resourcing up-front.</p><p>Typically, the proposal writing or management approval process provides a mechanism to force project design. Before coding begins, projects can discover existing tools and data standards and articulate the planned functionality and testing of the software. No matter the scale of the software project, it is important to incorporate feedback from key stakeholders (thesis advisor, external advisory committee, etc.) in this process to ensure that the design meets expectations.</p></sec><sec id="s2a2"><title>Document programs and key processes.</title><p>One of the foundations of scientific research is the lab notebook, where materials, methods, and results are recorded so that experiments can be repeated. Similarly, all computer programs and code bases should be well-documented, modular, and easy to read and follow even by users who did not write the program. Modularity can be a complex issue, but at a basic level it refers to coding in a way so that the overall task being performed is divided into small, discrete units of work. This design paradigm promotes reusability and flexibility [<xref ref-type="bibr" rid="pcbi-0020087-b010">10</xref>]. A modest level of documentation might provide help through a user-guide, information on how to compile and execute a program, and in-line comments describing program functions and modules.</p></sec><sec id="s2a3"><title>Use a quality control process.</title><p>One cornerstone of good science is reproducibility of results. Similarly, being able to consistently reproduce the results of a computer program is the yardstick used to measure the validity of that program. Reproducibility requires three things: ensuring a program works the way it should (testing), knowing exactly what was used to produce the results (version control), and recognizing and tracking program bugs.</p><p>Programs should be thoroughly tested according to the test plans developed in the design phase. Well-designed unit tests may be used to address whether a particular module of code is working properly and allows testing to proceed piecemeal and iteratively throughout the development process. This enables bugs to be identified and handled early so as to avoid major problems during integration and final testing.</p><p>Undeniably, computational biology projects are fluid: there are always newer, better data files and standards available, requiring continual updates to the code base. Consequently, it is critical to track exactly which version of software and which set of input files and parameters were used to produce a specific set of results. This is especially important six months later, when the original programmer has moved on to another project. Developers should use version control for both data and source code, tying results to specific versions. Subversion [<xref ref-type="bibr" rid="pcbi-0020087-b011">11</xref>] and CVS [<xref ref-type="bibr" rid="pcbi-0020087-b012">12</xref>,<xref ref-type="bibr" rid="pcbi-0020087-b013">13</xref>] are open source version control systems freely available. Finally, confessing to and tracking known bugs should be encouraged since bugs are to be expected in software products. Jira [<xref ref-type="bibr" rid="pcbi-0020087-b014">14</xref>] and Bugzilla [<xref ref-type="bibr" rid="pcbi-0020087-b015">15</xref>] are widely used issue-tracking tools.</p><p>Beyond application of functional testing, quality can be addressed further through performance optimization using bounds checkers (e.g., Valgrind provides basic debugging capabilities plus detailed profiling of memory use). These issues are typically overlooked during software development as problems with memory leaks and poor memory management hide behind software functionality and may long go unnoticed.</p></sec><sec id="s2a4"><title>Apply data standards where possible.</title><p>Disseminating to and sharing results with the broader research community is critical and often provides the basis for new scientific progress. The same is true for computer programs. The inputs, outputs, and “results” of computer programs are often data files. Whether included as supplementary materials for a manuscript or as subtables in an enterprise level relational database, scientific data should be supplied in accepted, standard formats wherever possible. Admittedly, biology is a fast-moving target. However, the increasing need to share, compare, and integrate data and tools is driving communitywide initiatives to standardize biological data formats [<xref ref-type="bibr" rid="pcbi-0020087-b016">16</xref>,<xref ref-type="bibr" rid="pcbi-0020087-b017">17</xref>]. As one example, the MGED Society has defined minimal sets of parameters to describe gene expression array datasets (MIAME), along with a data standard (MAGE) [<xref ref-type="bibr" rid="pcbi-0020087-b018">18</xref>]. As a result of their lead and other work, shared repositories for microarray results are now available and evolving [<xref ref-type="bibr" rid="pcbi-0020087-b019">19</xref>,<xref ref-type="bibr" rid="pcbi-0020087-b020">20</xref>], and journals are increasingly requiring supplemental data deposition at them [<xref ref-type="bibr" rid="pcbi-0020087-b021">21</xref>]. Software developers should research the availability of community-accepted data standards as inputs and outputs for their programs. Even if suitable data standards are not available, it is important to include documentation (metadata) describing the data. Metadata should explain the format (syntax) of the data as well as definitions and assumptions that allow the data to be interpreted or used in the proper context (semantics). Data standards ensure the ability to scale and integrate code bases, enable accurate and efficient code development, and reduce user and peer reviewer frustration.</p></sec><sec id="s2a5"><title>Incorporate project management.</title><p>In scientific research, principal investigators ensure that experiments are performed according to defined procedures, while making progress in the context of a schedule and a budget. For software development projects, a project manager performs a similar function. Principal investigators who are not themselves software engineers may find themselves filling a project manager role because they supervise people in their labs who write software. Project management for a modest algorithm-development project involving one or two programmers might involve informal design and code reviews, regular meetings to track progress against an established timeline, and review (and sign-off) of testing results.</p><p>Larger, collaborative projects, however, can become hopelessly chaotic without more disciplined project management. A commonly used approach to managing larger projects is to break them into manageable subprojects, with a series of release cycles interleaved with user or stakeholder feedback. A simple project website, wiki, or more sophisticated solutions such as Xplanner [<xref ref-type="bibr" rid="pcbi-0020087-b022">22</xref>] and Basecamp [<xref ref-type="bibr" rid="pcbi-0020087-b023">23</xref>], can be used to facilitate team communication, share project plans and documentation, and transparently manage development projects. In our opinion, the Scrum software development methodology [<xref ref-type="bibr" rid="pcbi-0020087-b024">24</xref>] offers a practical way to iteratively manage medium-sized software projects.</p></sec></sec></sec><sec id="s3"><title>Examples of Successful Projects That Employ Best Practices</title><p>Outside our own anecdotal experiences, we think there is growing evidence that software best practices can effectively meet real-life, scientific needs. We can point to heavyweight projects, such as the cancer Biomedical Informatics Grid (caBIG) [<xref ref-type="bibr" rid="pcbi-0020087-b025">25</xref>], and to more modest, lightweight activities such as the Bioconductor project [<xref ref-type="bibr" rid="pcbi-0020087-b026">26</xref>].</p><p>Specifically, the Bioconductor project has adopted practical techniques that are instructive for small software projects [<xref ref-type="bibr" rid="pcbi-0020087-b026">26</xref>]. The Bioconductor project develops statistical software packages ubiquitously employed in biomedical research. This group recognized that reproducing computational research reported in the literature is usually hampered by poorly documented software packages. While scientific manuscripts now typically point to supplementary materials (usually data and computer programs) on the Internet, access to them is not always enough to replicate the research reported. This open-source project adopted the concept of a “vignette,” which is a detailed and interactive document providing a textual description of software functionality [<xref ref-type="bibr" rid="pcbi-0020087-b027">27</xref>]. This form of documentation, long regarded as a software best practice, has engendered quite a cult following in the scientific community. In this case, the ultimate goal of reproducible research has exposed software best practices as an <italic>enabler</italic> and not as a burdensome side effect.</p><p>Reading back over this article, we recognize that there are many “shoulds” in our guidelines. In our defense, we write from our collective, heartbreaking experiences watching wheels reinvented, finding dead or unusable programs, and, worse, inheriting rancid and labyrinthine code bases. We are of the opinion that community adherence to the guidelines described here will increase the impact and usability of computational biology work, without placing undue burden on the creators of rapidly evolving, scientific code bases.</p></sec></body><back><ref-list><title>References</title><ref id="pcbi-0020087-b001"><label>1</label><element-citation publication-type="other" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Wilson</surname><given-names>GV</given-names></name></person-group>
					<year>2006</year>
					<source>Software carpentry</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.scipy.org" xlink:type="simple">http://www.scipy.org</ext-link>. Accessed 10 July 2006.</comment>
				</element-citation></ref><ref id="pcbi-0020087-b002"><label>2</label><element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Wilson</surname><given-names>GV</given-names></name></person-group>
					<year>2005</year>
					<article-title>Where's the real bottleneck in scientific computing?</article-title>
					<source>Am Sci</source>
					<volume>94</volume>
					<fpage>5</fpage>
				</element-citation></ref><ref id="pcbi-0020087-b003"><label>3</label><element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Morris</surname><given-names>RW</given-names></name><name name-style="western"><surname>Bean</surname><given-names>CA</given-names></name><name name-style="western"><surname>Farber</surname><given-names>GK</given-names></name><name name-style="western"><surname>Gallahan</surname><given-names>D</given-names></name><name name-style="western"><surname>Jakobsson</surname><given-names>E</given-names></name><etal/></person-group>
					<year>2005</year>
					<article-title>Digital biology: An emerging and promising discipline.</article-title>
					<source>Trends Biotechnol</source>
					<volume>23</volume>
					<fpage>113</fpage>
					<lpage>117</lpage>
					<comment>DOI: <ext-link ext-link-type="doi" xlink:href="http://dx.doi.org/10.1016/j.tibtech.2005.01.005" xlink:type="simple">10.1016/j.tibtech.2005.01.005</ext-link></comment>
				</element-citation></ref><ref id="pcbi-0020087-b004"><label>4</label><element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Eddy</surname><given-names>S</given-names></name></person-group>
					<year>2005</year>
					<article-title>“Antedisciplinary” science.</article-title>
					<source>PLoS Comput Biol</source>
					<volume>1</volume>
					<elocation-id>e6.</elocation-id>
					<comment>DOI: <ext-link ext-link-type="doi" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.0010006" xlink:type="simple">10.1371/journal.pcbi.0010006</ext-link></comment>
				</element-citation></ref><ref id="pcbi-0020087-b005"><label>5</label><element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Huerta</surname><given-names>MF</given-names></name><name name-style="western"><surname>Farber</surname><given-names>GK</given-names></name><name name-style="western"><surname>Wilder</surname><given-names>EL</given-names></name><name name-style="western"><surname>Dushanka</surname><given-names>V</given-names></name><name name-style="western"><surname>Kleinman</surname><given-names>PA</given-names></name><etal/></person-group>
					<year>2005</year>
					<article-title>NIH roadmap interdisciplinary research initiatives.</article-title>
					<source>PLoS Comput Biol</source>
					<volume>1</volume>
					<elocation-id>e59.</elocation-id>
					<comment>DOI: <ext-link ext-link-type="doi" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.0010059" xlink:type="simple">10.1371/journal.pcbi.0010059</ext-link></comment>
				</element-citation></ref><ref id="pcbi-0020087-b006"><label>6</label><element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Cassman</surname><given-names>M</given-names></name><name name-style="western"><surname>Arkin</surname><given-names>A</given-names></name><name name-style="western"><surname>Katagiri</surname><given-names>F</given-names></name><name name-style="western"><surname>Lauffenburger</surname><given-names>D</given-names></name><name name-style="western"><surname>Doyle</surname><given-names>FJ</given-names></name><etal/></person-group>
					<year>2005</year>
					<article-title>Barriers to progress in systems biology.</article-title>
					<source>Nature</source>
					<volume>438</volume>
					<fpage>1079</fpage>
				</element-citation></ref><ref id="pcbi-0020087-b007"><label>7</label><element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Quackenbush</surname><given-names>J</given-names></name><name name-style="western"><surname>Stoeckert</surname><given-names>C</given-names></name><name name-style="western"><surname>Ball</surname><given-names>C</given-names></name><name name-style="western"><surname>Brazma</surname><given-names>A</given-names></name><name name-style="western"><surname>Gentleman</surname><given-names>R</given-names></name><etal/></person-group>
					<year>2006</year>
					<article-title>Top-down standards will not serve systems biology.</article-title>
					<source>Nature</source>
					<volume>440</volume>
					<fpage>24</fpage>
				</element-citation></ref><ref id="pcbi-0020087-b008"><label>8</label><element-citation publication-type="other" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Hunt</surname><given-names>A</given-names></name><name name-style="western"><surname>Thomas</surname><given-names>D</given-names></name></person-group>
					<year>2000</year>
					<source>The pragmatic programmer: From journeyman to master</source>
					<publisher-loc>Boston</publisher-loc>
					<publisher-name>Addison Wesley</publisher-name>
					<!--===== Restructure page-count as size[@units="page"] =====--><size units="page">321</size>
					<comment>p.</comment>
				</element-citation></ref><ref id="pcbi-0020087-b009"><label>9</label><element-citation publication-type="other" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Berkun</surname><given-names>S</given-names></name></person-group>
					<year>2005</year>
					<source>The art of project management</source>
					<publisher-loc>Sebastopol (California)</publisher-loc>
					<publisher-name>O'Reilly Media</publisher-name>
					<!--===== Restructure page-count as size[@units="page"] =====--><size units="page">488</size>
					<comment>p.</comment>
				</element-citation></ref><ref id="pcbi-0020087-b010"><label>10</label><element-citation publication-type="other" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Gamma</surname><given-names>E</given-names></name><name name-style="western"><surname>Helm</surname><given-names>R</given-names></name><name name-style="western"><surname>Johnson</surname><given-names>R</given-names></name><name name-style="western"><surname>Vlissides</surname><given-names>J</given-names></name></person-group>
					<year>1995</year>
					<source>Design patterns: Elements of reusable object-oriented software</source>
					<publisher-loc>Boston</publisher-loc>
					<publisher-name>Addison-Wesley</publisher-name>
				</element-citation></ref><ref id="pcbi-0020087-b011"><label>11</label><element-citation publication-type="other" xlink:type="simple">
					<source>Subversion</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://subversion.tigris.org" xlink:type="simple">http://subversion.tigris.org</ext-link>. Accessed 10 July 2006.</comment>
				</element-citation></ref><ref id="pcbi-0020087-b012"><label>12</label><element-citation publication-type="other" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Thomas</surname><given-names>D</given-names></name><name name-style="western"><surname>Hunt</surname><given-names>A</given-names></name></person-group>
					<year>2003</year>
					<source>Pragmatic version control using CVS</source>
					<publisher-loc>Boston</publisher-loc>
					<publisher-name>The Pragmatic Programmers</publisher-name>
					<!--===== Restructure page-count as size[@units="page"] =====--><size units="page">176</size>
					<comment>p.</comment>
				</element-citation></ref><ref id="pcbi-0020087-b013"><label>13</label><element-citation publication-type="other" xlink:type="simple">
					<source>Concurrent Versioning System (CVS)</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.nongnu.org/cvs" xlink:type="simple">http://www.nongnu.org/cvs</ext-link>. Accessed 10 July 2006.</comment>
				</element-citation></ref><ref id="pcbi-0020087-b014"><label>14</label><element-citation publication-type="other" xlink:type="simple">
					<source>Jira: Bug tracking, issue tracking, and project management</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.atlassian.com/software/jira" xlink:type="simple">http://www.atlassian.com/software/jira</ext-link>. Accessed 10 July 2006.</comment>
				</element-citation></ref><ref id="pcbi-0020087-b015"><label>15</label><element-citation publication-type="other" xlink:type="simple">
					<source>Bugzilla</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.bugzilla.org" xlink:type="simple">http://www.bugzilla.org</ext-link>. Accessed 10 July 2006.</comment>
				</element-citation></ref><ref id="pcbi-0020087-b016"><label>16</label><element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Yang</surname><given-names>C</given-names></name><name name-style="western"><surname>Benz</surname><given-names>RD</given-names></name><name name-style="western"><surname>Cheeseman</surname><given-names>MA</given-names></name></person-group>
					<year>2006</year>
					<article-title>Landscape of current toxicity databases and database standards.</article-title>
					<source>Curr Opin Drug Discov Devel</source>
					<volume>9</volume>
					<fpage>124</fpage>
					<lpage>133</lpage>
				</element-citation></ref><ref id="pcbi-0020087-b017"><label>17</label><element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Luciano</surname><given-names>JS</given-names></name></person-group>
					<year>2005</year>
					<article-title>PAX of mind for pathway researchers.</article-title>
					<source>Drug Discov Today</source>
					<volume>10</volume>
					<fpage>937</fpage>
					<lpage>942</lpage>
				</element-citation></ref><ref id="pcbi-0020087-b018"><label>18</label><element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Whetzel</surname><given-names>PL</given-names></name><name name-style="western"><surname>Parkinson</surname><given-names>H</given-names></name><name name-style="western"><surname>Causton</surname><given-names>HC</given-names></name><name name-style="western"><surname>Fan</surname><given-names>L</given-names></name><name name-style="western"><surname>Fostel</surname><given-names>J</given-names></name><etal/></person-group>
					<year>2006</year>
					<article-title>The MGED ontology: A resource for semantics-based description of microarray experiments.</article-title>
					<source>Bioinformatics</source>
					<volume>22</volume>
					<fpage>866</fpage>
					<lpage>873</lpage>
				</element-citation></ref><ref id="pcbi-0020087-b019"><label>19</label><element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Barrett</surname><given-names>T</given-names></name><name name-style="western"><surname>Suzek</surname><given-names>TO</given-names></name><name name-style="western"><surname>Troup</surname><given-names>DB</given-names></name><name name-style="western"><surname>Wilhite</surname><given-names>SE</given-names></name><name name-style="western"><surname>Ngau</surname><given-names>WC</given-names></name><etal/></person-group>
					<year>2005</year>
					<article-title>NCBI GEO: Mining millions of expression profiles—Database and tools.</article-title>
					<source>Nucleic Acids Res</source>
					<volume>33</volume>
					<fpage>D562</fpage>
					<lpage>D566</lpage>
				</element-citation></ref><ref id="pcbi-0020087-b020"><label>20</label><element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Parkinson</surname><given-names>P</given-names></name><name name-style="western"><surname>Sarkans</surname><given-names>U</given-names></name><name name-style="western"><surname>Shojatalab</surname><given-names>M</given-names></name><name name-style="western"><surname>Abeygunawardena</surname><given-names>N</given-names></name><name name-style="western"><surname>Contrino</surname><given-names>S</given-names></name><etal/></person-group>
					<year>2005</year>
					<article-title>ArrayExpress—A public repository for microarray gene expression data at the EBI.</article-title>
					<source>Nucleic Acids Res</source>
					<volume>33</volume>
					<fpage>D553</fpage>
					<lpage>D555</lpage>
					<comment>DOI: <ext-link ext-link-type="doi" xlink:href="http://dx.doi.org/10.1093/nar/gki056" xlink:type="simple">10.1093/nar/gki056. </ext-link></comment>
				</element-citation></ref><ref id="pcbi-0020087-b021"><label>21</label><element-citation publication-type="journal" xlink:type="simple">
					<year>2002</year>
					<article-title>Microarray standards at last.</article-title>
					<source>Nature</source>
					<volume>419</volume>
					<fpage>323</fpage>
					<comment>DOI: <ext-link ext-link-type="doi" xlink:href="http://dx.doi.org/10.1038/419323a" xlink:type="simple">10.1038/419323a</ext-link>.</comment>
				</element-citation></ref><ref id="pcbi-0020087-b022"><label>22</label><element-citation publication-type="other" xlink:type="simple">
					<source>Xplanner</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.xplanner.org" xlink:type="simple">http://www.xplanner.org</ext-link>. Accessed 10 July 2006.</comment>
				</element-citation></ref><ref id="pcbi-0020087-b023"><label>23</label><element-citation publication-type="other" xlink:type="simple">
					<source>BaseCamp</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.basecamphq.com" xlink:type="simple">http://www.basecamphq.com</ext-link>. Accessed 10 July 2006.</comment>
				</element-citation></ref><ref id="pcbi-0020087-b024"><label>24</label><element-citation publication-type="other" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Schwaber</surname><given-names>K</given-names></name></person-group>
					<year>2004</year>
					<source>Agile project management with Scrum</source>
					<publisher-loc>Redmond (Washington)</publisher-loc>
					<publisher-name>Microsoft Press</publisher-name>
					<!--===== Restructure page-count as size[@units="page"] =====--><size units="page">150</size>
					<comment>p.</comment>
				</element-citation></ref><ref id="pcbi-0020087-b025"><label>25</label><element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Phillips</surname><given-names>J</given-names></name><name name-style="western"><surname>Chilukuri</surname><given-names>R</given-names></name><name name-style="western"><surname>Fragoso</surname><given-names>G</given-names></name><name name-style="western"><surname>Warzel</surname><given-names>D</given-names></name><name name-style="western"><surname>Covitz</surname><given-names>PA</given-names></name></person-group>
					<year>2006</year>
					<article-title>The caCORE Software Development Kit: Streamlining construction of interoperable biomedical information services.</article-title>
					<source>BMC Med Inform Decis Mak</source>
					<volume>6</volume>
					<fpage>2</fpage>
				</element-citation></ref><ref id="pcbi-0020087-b026"><label>26</label><element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Gentleman</surname><given-names>RC</given-names></name><name name-style="western"><surname>Carey</surname><given-names>VJ</given-names></name><name name-style="western"><surname>Bates</surname><given-names>DM</given-names></name><name name-style="western"><surname>Bolstad</surname><given-names>B</given-names></name><name name-style="western"><surname>Dettling</surname><given-names>M</given-names></name><etal/></person-group>
					<year>2004</year>
					<article-title>Bioconductor: Open software development for computational biology and bioinformatics.</article-title>
					<source>Genome Biol</source>
					<volume>5</volume>
					<fpage>R80</fpage>
				</element-citation></ref><ref id="pcbi-0020087-b027"><label>27</label><element-citation publication-type="other" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Gentleman</surname><given-names>RC</given-names></name><name name-style="western"><surname>Lang</surname><given-names>TD</given-names></name></person-group>
					<year>2004</year>
					<article-title>Statistical analyses and reproducible research.</article-title>
					<comment>In:</comment>
					<source><italic>Bioconductor project working papers.</italic> Working Paper 2</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.bepress.com/bioconductor/paper2" xlink:type="simple">http://www.bepress.com/bioconductor/paper2</ext-link>. Accessed 10 July 2006. Available: <ext-link ext-link-type="uri" xlink:href="http://www.bioconductor.org/docs/vignettes.html" xlink:type="simple">http://www.bioconductor.org/docs/vignettes.html</ext-link>. Accessed 10 July 2006.</comment>
				</element-citation></ref></ref-list><sec><title/></sec></back></article>