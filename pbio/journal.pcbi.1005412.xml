<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN" "http://jats.nlm.nih.gov/publishing/1.1d3/JATS-journalpublishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="editorial" dtd-version="1.1d3" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id>
<journal-title-group>
<journal-title>PLOS Computational Biology</journal-title>
</journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-16-01683</article-id>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1005412</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Editorial</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Computer software</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software development</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software development</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software tools</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software tools</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Software engineering</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Software engineering</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Research assessment</subject><subj-group><subject>Reproducibility</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Database and informatics methods</subject><subj-group><subject>Bioinformatics</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Database and informatics methods</subject><subj-group><subject>Bioinformatics</subject><subj-group><subject>Sequence analysis</subject><subj-group><subject>Sequence alignment</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Operating systems</subject></subj-group></subj-group></article-categories>
<title-group>
<article-title>Ten simple rules for making research software more robust</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-0677-6902</contrib-id>
<name name-style="western">
<surname>Taschuk</surname> <given-names>Morgan</given-names></name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0001-8659-8979</contrib-id>
<name name-style="western">
<surname>Wilson</surname> <given-names>Greg</given-names></name>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
</contrib>
</contrib-group>
<aff id="aff001">
<label>1</label>
<addr-line>Genome Sequence Informatics, Ontario Institute for Cancer Research, Toronto, Ontario, Canada</addr-line>
</aff>
<aff id="aff002">
<label>2</label>
<addr-line>Software Carpentry Foundation, Austin, Texas, United States of America</addr-line>
</aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>The authors have declared that no competing interests exist.</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">morgan.taschuk@oicr.on.ca</email></corresp>
</author-notes>
<pub-date pub-type="collection">
<month>4</month>
<year>2017</year>
</pub-date>
<pub-date pub-type="epub">
<day>13</day>
<month>4</month>
<year>2017</year>
</pub-date>
<volume>13</volume>
<issue>4</issue>
<elocation-id>e1005412</elocation-id>
<permissions>
<copyright-year>2017</copyright-year>
<copyright-holder>Taschuk, Wilson</copyright-holder>
<license xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">
<license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pcbi.1005412"/>
<abstract>
<p>Software produced for research, published and otherwise, suffers from a number of common problems that make it difficult or impossible to run outside the original institution or even off the primary developer’s computer. We present ten simple rules to make such software robust enough to be run by anyone, anywhere, and thereby delight your users and collaborators.</p>
</abstract>
<abstract abstract-type="summary">
<title>Author summary</title>
<p>Many researchers have found out the hard way that there’s a world of difference between “works for me on my machine” and “works for other people on theirs.” Many common challenges can be avoided by following a few simple rules; doing so not only improves reproducibility but can accelerate research.</p>
</abstract>
<funding-group>
<funding-statement>This work was partially funded by the Ontario Institute for Cancer Research. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
</funding-group>
<counts>
<fig-count count="0"/>
<table-count count="0"/>
<page-count count="10"/>
</counts>
</article-meta>
</front>
<body>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<p>Scientific software is typically developed and used by a single person, usually a graduate student or postdoc [<xref ref-type="bibr" rid="pcbi.1005412.ref001">1</xref>]. It may produce the intended results in their hands, but what happens when someone else wants to run it? Everyone with a few years of experience feels a bit nervous when told to use another person’s code to analyze their data: it will often be undocumented, work in unexpected ways (if it works at all), rely on nonexistent paths or resources, be tuned for a single dataset, or simply be an older version than was used in published papers. The potential new user is then faced with two unpalatable options: hack the existing code to make it work or start over.</p>
<p>Being unable to replicate results is so common that one publication refers to it as “a rite of passage” [<xref ref-type="bibr" rid="pcbi.1005412.ref002">2</xref>]. The root cause of this problem is that most research software is essentially a prototype, and therefore is not robust. The lack of robustness in published, distributed software leads to duplicated efforts with little practical benefit, which slows the pace of research [<xref ref-type="bibr" rid="pcbi.1005412.ref003">3</xref>, <xref ref-type="bibr" rid="pcbi.1005412.ref004">4</xref>]. Bioinformatics software repositories [<xref ref-type="bibr" rid="pcbi.1005412.ref005">5</xref>, <xref ref-type="bibr" rid="pcbi.1005412.ref006">6</xref>] catalogue dozens to hundreds of tools that perform similar tasks: for example, in 2016, the Bioinformatics Links Directory included 84 different multiple sequence aligners, 141 tools to analyze transcript expression, and 182 pathway and interaction resources. Some of these tools are legitimate efforts to improve the state-of-the-art, but often, they are difficult to install and run [<xref ref-type="bibr" rid="pcbi.1005412.ref007">7</xref>, <xref ref-type="bibr" rid="pcbi.1005412.ref008">8</xref>] and are effectively abandoned after publication [<xref ref-type="bibr" rid="pcbi.1005412.ref009">9</xref>].</p>
<p>This problem is not unique to bioinformatics or even to computing [<xref ref-type="bibr" rid="pcbi.1005412.ref002">2</xref>]. Best practices in software engineering specifically aim to increase software robustness. However, most bioinformaticians learn what they know about software development on the job or otherwise informally [<xref ref-type="bibr" rid="pcbi.1005412.ref001">1</xref>, <xref ref-type="bibr" rid="pcbi.1005412.ref010">10</xref>]. Existing training programs and initiatives rarely have the time to cover software engineering in depth, especially since the field is so broad and developing so rapidly [<xref ref-type="bibr" rid="pcbi.1005412.ref004">4</xref>, <xref ref-type="bibr" rid="pcbi.1005412.ref010">10</xref>]. In addition, making software robust is not directly rewarded in science, and funding is difficult to come by [<xref ref-type="bibr" rid="pcbi.1005412.ref001">1</xref>]. Some proposed solutions to this problem include restructuring educational programs, hiring dedicated software engineers [<xref ref-type="bibr" rid="pcbi.1005412.ref004">4</xref>, <xref ref-type="bibr" rid="pcbi.1005412.ref011">11</xref>], partnering with private sector or grassroots organizations [<xref ref-type="bibr" rid="pcbi.1005412.ref001">1</xref>, <xref ref-type="bibr" rid="pcbi.1005412.ref005">5</xref>], or using specific technical tools like containerization or cloud computing [<xref ref-type="bibr" rid="pcbi.1005412.ref012">12</xref>, <xref ref-type="bibr" rid="pcbi.1005412.ref013">13</xref>]. Each of these requires time and, in some cases, institutional change.</p>
<p>The good news is you don’t need to be a professionally trained programmer to write robust software. In fact, some of the best, most reliable pieces of software in many scientific communities are written by researchers [<xref ref-type="bibr" rid="pcbi.1005412.ref003">3</xref>, <xref ref-type="bibr" rid="pcbi.1005412.ref011">11</xref>] who have adopted strong software engineering approaches, have high standards of reproducibility, use good testing practices, and foster strong user bases through constantly evolving, clearly documented, useful, and useable software. In the bioinformatics community, Bioconductor and Galaxy follow this path [<xref ref-type="bibr" rid="pcbi.1005412.ref012">12</xref>, <xref ref-type="bibr" rid="pcbi.1005412.ref014">14</xref>]. Not all scientific software needs to be robust [<xref ref-type="bibr" rid="pcbi.1005412.ref015">15</xref>], but if you publish a paper about your software, it should, at minimum, satisfy these rules.</p>
<p>So what is “robust” software? We implied above that it is software that works for people other than the original author and on machines other than its creator’s. More specifically, we mean that:</p>
<list list-type="bullet">
<list-item>
<p>it can be installed on more than one computer with relative ease,</p>
</list-item>
<list-item>
<p>it works consistently as advertised, and</p>
</list-item>
<list-item>
<p>it can be integrated with other tools.</p>
</list-item>
</list>
<p>Our rules are generic and can be applied to all languages, libraries, packages, documentation styles, and operating systems for both closed-source and open-source software. They are also necessary steps toward making computational research replicable and reproducible: after all, if your tools and libraries cannot be run by others, they cannot be used to verify your results or as a stepping stone for future work [<xref ref-type="bibr" rid="pcbi.1005412.ref016">16</xref>].</p>
</sec>
<sec id="sec002">
<title>Rule 1: Use version control</title>
<p>Version control is essential to sustainable software development [<xref ref-type="bibr" rid="pcbi.1005412.ref017">17</xref>, <xref ref-type="bibr" rid="pcbi.1005412.ref018">18</xref>]. In particular, developers will struggle to understand what they have actually built, what it actually does, and what they have actually released without some mechanical way to keep track of changes. They should therefore put everything into version control as soon as it is created, including programs, original field observations, and the source files for papers. Files that can be regenerated as needed, such as the binaries for compiled programs or intermediate files generated during data analysis, should not be versioned; instead, it is often more sensible to use an archiving system for them and store the metadata describing their contents in version control instead [<xref ref-type="bibr" rid="pcbi.1005412.ref019">19</xref>].</p>
<p>If you are new to version control, it is simplest to treat it as “a better Dropbox” (or, if you are of a certain age, a better FTP) and to use it simply to synchronize files between multiple developers and machines [<xref ref-type="bibr" rid="pcbi.1005412.ref020">20</xref>]. Once you are comfortable working that way, you should use a feature branch workflow: designate one parallel copy (or “branch”) of the repository as the master, and create a new branch from it each time you want to fix a bug or add a new feature. This allows work on independent changes to proceed in isolation; once the work has been completed and tested, it can be merged into the master branch for release.</p>
</sec>
<sec id="sec003">
<title>Rule 2: Document your code and usage</title>
<p>How to write high-quality documentation has been described elsewhere [<xref ref-type="bibr" rid="pcbi.1005412.ref021">21</xref>], and so here, we only cover two minimal types: the README and usage. The README is usually available even before the software is installed, exists to get a new user started, and points them towards more help. Usage is a terse, informative command-line help message that guides the user in the correct use of the software.</p>
<p>Numerous guidelines exist on how to write a good README file [<xref ref-type="bibr" rid="pcbi.1005412.ref022">22</xref>, <xref ref-type="bibr" rid="pcbi.1005412.ref023">23</xref>]. At a minimum, your README should:</p>
<list list-type="order">
<list-item>
<p>Explain what the software does. There’s nothing more frustrating than downloading and installing something only to find out that it doesn’t do what you thought it did.</p>
</list-item>
<list-item>
<p>List required dependencies. We address dependencies in more detail in Rule 5.</p>
</list-item>
<list-item>
<p>Provide compilation or installation instructions.</p>
</list-item>
<list-item>
<p>List all input and output files, even those considered self-explanatory. Link to specifications for standard formats and list the required fields and acceptable values in other files. If there is no rigorous definition for a format, explain its parts as clearly as possible in plain English.</p>
</list-item>
<list-item>
<p>List a few example commands to get a user started quickly.</p>
</list-item>
<list-item>
<p>State attributions and licensing. Attributions are how you credit your contributors; licenses dictate how others may use and need to credit your work.</p>
</list-item>
</list>
<p>The program should also print usage information when launching from the command line. Usage provides the first line of help for both new and experienced users. Terseness is important: usage that extends for multiple screens is difficult to read or refer to on the fly.</p>
<p>Almost all command-line applications use a combination of POSIX [<xref ref-type="bibr" rid="pcbi.1005412.ref024">24</xref>] and GNU [<xref ref-type="bibr" rid="pcbi.1005412.ref023">23</xref>] standards for usage. More standard command-line behaviours are detailed in [<xref ref-type="bibr" rid="pcbi.1005412.ref008">8</xref>]. Your software’s usage should:</p>
<list list-type="order">
<list-item>
<p>Describe the syntax for running the program, including the name of the program, the relative location of optional and required flags, other arguments, and values for execution.</p>
</list-item>
<list-item>
<p>Give a short description to remind users of the software’s primary function.</p>
</list-item>
<list-item>
<p>List the most commonly used arguments, a description of each, and the default values.</p>
</list-item>
<list-item>
<p>State where to find more information.</p>
</list-item>
</list>
<p>Usage should be printed to standard output so that it can be combined with other bash utilities like <monospace>grep</monospace>, and it should finish with an appropiate exit code.</p>
<p>Documentation beyond the README and usage is up to the developer’s discretion. We think it is very important for developers to document their work, but our experience is that people are unlikely do it during normal development. However, it is worth noting that software that is widely used and contributed to has and enforces the need for good documentation [<xref ref-type="bibr" rid="pcbi.1005412.ref014">14</xref>].</p>
</sec>
<sec id="sec004">
<title>Rule 3: Make common operations easy to control</title>
<p>Being able to change parameters on the fly to determine if and how they change the results is important as your software gains more users since it facilitates exploratory analysis and parameter sweeping. Programs should therefore allow the most commonly changed parameters to be configured from the command line.</p>
<p>Users will want to change some values more often than others. Since parameters are software-specific, the appropriate “tunable” ones cannot be detailed here, but a short list includes input and reference files and directories, output files and directories, filtering parameters, random number generation seeds, and alternatives such as compressing results, using a variant algorithm, or verbose output.</p>
<p>Check that all input values are in a reasonable range at startup. Few things are as annoying as having a program announce after running for two hours that it isn’t going to save its results because the requested directory doesn’t exist.</p>
<p>To make programs even easier to use, choose reasonable defaults when they exist and set no defaults at all when there aren’t any reasonable ones. You can set reasonable default values as long as any command line arguments override those values.</p>
<p>Changeable values should never be hard-coded: if users have to edit your software in order to run it, you have done something wrong. Changeable but infrequently changed values should therefore be stored in configuration files. These can be in a standard location, e.g., <monospace>.packagerc</monospace> in the user’s home directory, or provided on the command line as an additional argument. Configuration files are often created during installation to set up such things as server names, network drives, and other defaults for your lab or institution.</p>
</sec>
<sec id="sec005">
<title>Rule 4: Version your releases</title>
<p>Software evolves over time, with developers adding or removing features as need dictates. Making official releases stamps a particular set of features with a project-specific identifier so that version can be retrieved for later use. For example, if a paper is published, the software should be released at the same time so that the results can be reproduced.</p>
<p>Most software has a version number composed of a decimal number that increments as new versions are released. There are many different ways to construct and interpret this number, but most importantly for us, a particular software version run with the same parameters should give identical results no matter when it’s run. Results include both correct output as well as any errors. Increment your version number every time you release your software to other people.</p>
<p>Semantic versioning [<xref ref-type="bibr" rid="pcbi.1005412.ref025">25</xref>] is one of the most common types of versioning for open-source software. Version numbers take the form of “MAJOR.MINOR[.PATCH],” e.g., 0.2.6. Changes in the major version number herald significant changes in the software that are not backwards compatible, such as changing or removing features or altering the primary functions of the software. Increasing the minor version represents incremental improvements in the software, like adding new features. Following the minor version number can be an arbitrary number of project-specific identifiers, including patches, builds, and qualifiers. Common qualifiers include <monospace>alpha</monospace>, <monospace>beta</monospace>, and <monospace>SNAPSHOT</monospace>, for applications that are not yet stable or released, and <monospace>-RC</monospace> for release candidates prior to an official release.</p>
<p>The version of your software should be easily available by supplying <monospace>--version</monospace> or <monospace>-v</monospace> on the command line. This command should print the software name and version number, and it should also be included in all of the program’s output, particularly debugging traces. If someone needs help, it’s important that they be able to tell whoever’s helping them which version of the software they’re using.</p>
<p>While new releases may make a program better in general, they can simultaneously create work for someone who integrated the old version into their own workflow a year or two ago and won’t see any benefits from upgrading. A program’s authors should therefore ensure that old released versions continue to be available. A number of mechanisms exist for controlled release that range from adding an appropriate commit message or tag to version control [<xref ref-type="bibr" rid="pcbi.1005412.ref020">20</xref>] to official releases alongside code on Bitbucket or GitHub to depositing into a repository like apt, yum, homebrew, CPAN, etc. Choose the method that best suits the number and expertise of users you anticipate.</p>
</sec>
<sec id="sec006">
<title>Rule 5: Reuse software (within reason)</title>
<p>In the spirit of code reuse and interoperability, developers often want to reuse software written by others. With a few lines, a call is made out to another library or program and the results are incorporated into the primary script. Using popular projects reduces the amount of code that needs to be maintained and leverages the work done by the other software.</p>
<p>Unfortunately, reusing software (whether software libraries or separate executables) introduces dependencies, which can bring their own special pain. The interface between two software packages can be a source of considerable frustration: all too often, support requests descend into debugging errors produced by the other project due to incompatible libraries, versions, or operating systems [<xref ref-type="bibr" rid="pcbi.1005412.ref016">16</xref>]. Even introducing libraries in the same programming language can rely on software installed in the environment, and the problem becomes much more difficult when relying on executables or even on web services.</p>
<p>Despite these problems, software developers in research should reuse existing software provided a few guidelines are adhered to.</p>
<p>First, make sure that you really need the auxiliary program. If you are executing GNU sort instead of figuring out how to sort lists in Python, it may not be worth the pain of integration. Reuse software that offers some measurable improvement to your project.</p>
<p>Second, if launching an executable, ensure the appropriate software and version is available. Either allow the user to configure the exact path to the package, distribute the program with the dependent software, or download it during installation using your package manager. If the executable requires internet access, check for that early in execution.</p>
<p>Third, ensure that reused software is robust. Relying on erratic third party libraries or software is a recipe for tears. Prefer software that follows good software development practices, is open for support questions, and is available from a stable location or repository using your package manager.</p>
<p>Exercise caution, especially when transitioning across languages or using separate executables, as they tend to be especially sensitive to operating systems, environments, and locales.</p>
</sec>
<sec id="sec007">
<title>Rule 6: Rely on build tools and package managers for installation</title>
<p>To compile code, deploy applications, and automate other tasks, programmers routinely use build tools like Make, Rake, Maven, Ant, or MS Build. These tools can also be used to manage runtime environments, i.e., to check that the right versions of required packages are installed and install or upgrade them if they are not. As mentioned in Rule 5, a package manager can mitigate some of the difficulties in software reuse.</p>
<p>The same tools can and should be used to manage runtime environments on users’ machines as well. Accordingly, developers should document all dependencies in a machine-readable form. Package managers like apt and yum are available on most Unix-like systems, and application package managers exist for specific languages like Python (pip), Java (Maven/Gradle), and Ruby (RubyGems). These package managers can be used together with the build utility to ensure that dependencies are available at compile/run time.</p>
<p>For example, it is common for Python projects to include a file called <monospace>requirements.txt</monospace> that lists the names of required libraries, along with version ranges:</p>
<p><monospace>requests&gt;=2.0</monospace></p>
<p><monospace>pygithub&gt;=1.26,&lt;=1.27</monospace></p>
<p><monospace>python-social-auth&gt;=0.2.19,&lt;0.3</monospace></p>
<p>This file can be read by the pip package manager, which can check that the required software is available and install it if it is not. Whatever is used, developers should always install dependencies using their dependency description, especially on their personal machines, so that they’re sure it works.</p>
<p>Conversely, developers should avoid depending on scripts and tools which are not available as packages. In many cases, a program’s author may not realize that some tool was built locally and doesn’t exist elsewhere. At present, the only sure way to discover such unknown dependencies is to install on a system administered by someone else and see what breaks. As use of virtualization containers becomes more widespread, software installation can also be tested on a virtual machine or container system like Docker.</p>
</sec>
<sec id="sec008">
<title>Rule 7: Do not require root or other special privileges to install or run</title>
<p>Root (also known as “superuser” or “admin”) is a special account on a computer that has (among other things) the power to modify or delete system files and user accounts. Conversely, files and directories owned by root usually cannot be modifed by normal users.</p>
<p>Installing or running a program with root privileges is often convenient, since doing so automatically bypasses all those pesky safety checks that might otherwise get in the user’s way. However, those checks are there for a reason: scientific software packages may not intentionally be malware, but one small bug or over-eager file-matching expression can certainly make them behave as if they were. Outside of very unusual circumstances, packages should not require root privileges to set up or use.</p>
<p>Another reason for this rule is that users may want to try out a new package before installing it systemwide on a cluster. Requiring root privileges will frustrate such efforts and thereby reduce uptake of the package. Requiring, as Apache Tomcat does, that software be installed under its own user account—i.e., that <monospace>packagename</monospace> be made a user and all of the package’s software be installed in that pseudo-user’s space—is similarly limiting, and makes side-by-side installation of multiple versions of the package more difficult.</p>
<p>Developers should therefore allow packages to be installed in an arbitrary location, e.g., under a user’s home directory in <monospace>~/packagename</monospace>, or in directories with standard names like <monospace>bin</monospace>, <monospace>lib</monospace>, and <monospace>man</monospace> under a chosen directory. If the first option is chosen, the user may need to modify his or her search path to include the package’s executables and libraries, but this can (more or less) be automated and is much less risky than setting things up as root.</p>
<p>Testing the ability to install software has traditionally been regarded as difficult, since it necessarily alters the machine on which the test is conducted. Lightweight virtualization containers like Docker make this much easier as well, or you can simply ask another person to try and build your software before releasing it.</p>
</sec>
<sec id="sec009">
<title>Rule 8: Eliminate hard-coded paths</title>
<p>It’s easy to write software that reads input from a file called <monospace>mydata.csv</monospace>, but it’s also very limiting. If a colleague asks you to process his or her data, you must either overwrite your data file (which is risky) or edit your code to read <monospace>otherdata.csv</monospace> (which is also risky, because there’s every likelihood you’ll forget to change the filename back or will change three uses of the filename but not a fourth).</p>
<p>Hard-coding file paths in a program also makes the software harder to run in other environments. If your package is installed on a cluster, for example, the user’s data will almost certainly not be in the same directory as the software, and the folder <monospace>C:\users\yourname\</monospace> will probably not even exist.</p>
<p>For these reasons, users should be able to set the names and locations of input and output files as command-line parameters. This rule applies to reference datasets as well as the user’s own data: if a user wants to try a new gene identification algorithm using a different set of genes as a training set, he or she should not have to edit the software to do so. A corollary to this rule is to not require users to navigate to a particular directory to do their work, since “where I have to be” is just another hard-coded path.</p>
<p>In order to save typing, it is often convenient to allow users to specify an input or output directory, and then require that there be files with particular names in that directory. This practice is an example of “convention over configuration,” a principle used by software frameworks such as WordPress and Ruby on Rails that often strikes a good balance between adaptability and consistency.</p>
</sec>
<sec id="sec010">
<title>Rule 9: Include a small test set that can be run to ensure the software is actually working</title>
<p>Every package should come with a set of tests for users to run after installation. Its purpose is not only to check that the software is working correctly (although that is extremely helpful) but also to ensure that it works at all. This test script can also serve as a working example of how to run the software.</p>
<p>In order to be useful, make the tests easy to find and run. Many build systems will also run unit tests if provided them at compile time. For users, or if the build system is not amenable to testing, provide a working script in the project’s root directory named <monospace>runtests.sh</monospace> or something equally obvious. This lets new users build their analysis from a working script. For example, with its distribution, the graph-based sequence aligner HISAT2 includes a full set of very small files, and a “Getting Started with HISAT2” section in its manual that leads you through the entire data lifecycle [<xref ref-type="bibr" rid="pcbi.1005412.ref026">26</xref>].</p>
<p>Equally important is to make the test script’s output easy to interpret. Screens full of correlation coefficients do not qualify: instead, the script’s output should be simple to understand for nonexperts, such as one line per test, with the test’s name and its pass/fail status, followed by a single summary line saying how many tests were run and how many passed or failed. If many or all tests fail because of missing dependencies, that fact should be displayed once, clearly, rather than once per test, so that users have a clear idea of what they need to fix and how much work it’s likely to take.</p>
<p>Research has shown that the ease with which people can start making contributions is a strong predictor of whether they will or not [<xref ref-type="bibr" rid="pcbi.1005412.ref027">27</xref>]. By making it simpler for outsiders to contribute, a test suite of any kind also makes it more likely that they will, and software with collaborators stands a better chance of surviving in the busy field of scientific software.</p>
</sec>
<sec id="sec011">
<title>Rule 10: Produce identical results when given identical inputs</title>
<p>The usage message tells users what the program could do. It is equally important for the program to tell users what it actually did. Accordingly, when the program starts, it should echo all parameters and software versions to standard out or a log file alongside the results to increase the reproducibility of that step.</p>
<p>Given a set of parameters and a dataset, a particular version of a program should produce the same results every time it is run to aid testing, debugging, and reproducibility. Even minor changes to code can cause minor changes in output because of floating-point issues, which means that getting exactly the same output for the same input and parameters probably won’t work during development, but it should still be a goal for people who have deployed a specific version.</p>
<p>Many applications rely on randomized algorithms to improve performance or runtimes. As a consequence, results can change between runs, even when provided with the same data and parameters. By its nature, this randomness renders strict reproducibility (and, therefore, debugging) more difficult. If even the small test set (#9) produces different results for each run, new users may not be able to tell whether or not the software is working properly. When comparing results between versions or after changing parameters, even small differences can confuse or muddy the comparison. And especially when producing results for publications, grants, or diagnoses, any analysis should be absolutely reproducible.</p>
<p>Given the size of biological data, it is unreasonable to suggest that random algorithms be removed. However, most programs use a pseudo-random number generator, which uses a starting seed and an equation to approximate random numbers. Setting the seed to a consistent value can remove randomness between runs. Allow the user to optionally provide the random seed as an input parameter, thus rendering the program deterministic for those cases where it matters. If the seed is set internally (e.g., using clock time), echo it to the output for reuse later. If setting the seed is not possible, make sure the acceptable tolerance is known and detailed in documentation and in the tests.</p>
</sec>
<sec id="sec012" sec-type="conclusions">
<title>Conclusion</title>
<p>There has been extended discussion over the past few years of the sustainability of research software, but this question is meaningless in isolation: any piece of software can be sustained if its users are willing to put in enough effort. The real equation is the ratio between the skill and effort available and the ease with which software can be installed, understood, used, maintained, and extended. Following the ten rules we outline here reduces the denominator and thereby enables researchers to build on each other’s work more easily.</p>
<p>That said, not every coding effort needs to be engineered to last. Code that is used once to answer a specific question related to a specific dataset doesn’t require comprehensive documentation or flexible configuration, and the only sensible way to test it may well be to run it on the dataset in question. Exploratory analysis is an iterative process that is developed quickly and revised often [<xref ref-type="bibr" rid="pcbi.1005412.ref004">4</xref>, <xref ref-type="bibr" rid="pcbi.1005412.ref011">11</xref>]. However, if a script is dusted off and run three or four times for slightly different purposes, is crucial to a publication or a lab, or is being passed on to someone else, it may be time to make your software more robust.</p>
</sec>
<sec id="sec013">
<title>Supporting information</title>
<supplementary-material id="pcbi.1005412.s001" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005412.s001" xlink:type="simple">
<label>S1 Checklist</label>
<caption>
<title>Robust software checklist.</title>
<p>A checklist summarizing these ten simple rules to apply to your own software.</p>
<p>(PDF)</p>
</caption>
</supplementary-material>
</sec>
</body>
<back>
<ack>
<p>The authors thank the reviewers who provided feedback on the manuscript before and after submission. The list is available on our Github page: <ext-link ext-link-type="uri" xlink:href="http://github.com/oicr-gsi/robust-paper" xlink:type="simple">http://github.com/oicr-gsi/robust-paper</ext-link>.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pcbi.1005412.ref001">
<label>1</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Prins</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>de Ligt</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Tarasov</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Jansen</surname> <given-names>RC</given-names></name>, <name name-style="western"><surname>Cuppen</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Bourne</surname> <given-names>PE</given-names></name>. <article-title>Toward effective software solutions for big biology</article-title>. <source>Nature Biotechnology</source>. <year>2015</year>;<volume>33</volume>(<issue>7</issue>):<fpage>686</fpage>–<lpage>687</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/nbt.3240" xlink:type="simple">10.1038/nbt.3240</ext-link></comment> <object-id pub-id-type="pmid">26154002</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref002">
<label>2</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Baker</surname> <given-names>M</given-names></name>. <article-title>1,500 scientists lift the lid on reproducibility</article-title>. <source>Nature</source>. <year>2016</year>;<volume>533</volume>(<issue>7604</issue>):<fpage>452</fpage>–<lpage>454</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/533452a" xlink:type="simple">10.1038/533452a</ext-link></comment> <object-id pub-id-type="pmid">27225100</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref003">
<label>3</label>
<mixed-citation publication-type="other" xlink:type="simple">Prabhu P, Jablin TB, Raman A, Zhang Y, Huang J, Kim H, et al. A Survey of the Practice of Computational Science. In: State of the Practice Reports. SC’11. New York, NY, USA: ACM; 2011. p. 19:1–19:12.</mixed-citation>
</ref>
<ref id="pcbi.1005412.ref004">
<label>4</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lawlor</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Walsh</surname> <given-names>P</given-names></name>. <article-title>Engineering bioinformatics: building reliability, performance and productivity into bioinformatics software</article-title>. <source>Bioengineered</source>. <year>2015</year>;<volume>6</volume>(<issue>4</issue>). <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1080/21655979.2015.1050162" xlink:type="simple">10.1080/21655979.2015.1050162</ext-link></comment> <object-id pub-id-type="pmid">25996054</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref005">
<label>5</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Ison</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Rapacki</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Ménager</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Kalaš</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Rydza</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Chmura</surname> <given-names>P</given-names></name>, <etal>et al</etal>. <article-title>Tools and data services registry: a community effort to document bioinformatics resources</article-title>. <source>Nucleic Acids Research</source>. <year>2016</year>;<volume>44</volume>(<issue>D1</issue>):<fpage>D38</fpage>–<lpage>D47</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1093/nar/gkv1116" xlink:type="simple">10.1093/nar/gkv1116</ext-link></comment> <object-id pub-id-type="pmid">26538599</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref006">
<label>6</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Brazas</surname> <given-names>MD</given-names></name>, <name name-style="western"><surname>Yim</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Yeung</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Ouellette</surname> <given-names>BFF</given-names></name>. <article-title>A decade of web server updates at the bioinformatics links directory: 2003–2012</article-title>. <source>Nucleic Acids Research</source>. <year>2012</year>; <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1093/nar/gks632" xlink:type="simple">10.1093/nar/gks632</ext-link></comment> <object-id pub-id-type="pmid">22700703</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref007">
<label>7</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Stajich</surname> <given-names>JE</given-names></name>, <name name-style="western"><surname>Block</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Boulez</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Brenner</surname> <given-names>SE</given-names></name>, <name name-style="western"><surname>Chervitz</surname> <given-names>SA</given-names></name>, <name name-style="western"><surname>Dagdigian</surname> <given-names>C</given-names></name>, <etal>et al</etal>. <article-title>The Bioperl Toolkit: Perl Modules for the Life Sciences</article-title>. <source>Genome Research</source>. <year>2002</year>;<volume>12</volume>(<issue>10</issue>):<fpage>1611</fpage>–<lpage>1618</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1101/gr.361602" xlink:type="simple">10.1101/gr.361602</ext-link></comment> <object-id pub-id-type="pmid">12368254</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref008">
<label>8</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Seemann</surname> <given-names>T</given-names></name>. <article-title>Ten recommendations for creating usable bioinformatics command line software</article-title>. <source>GigaScience</source>. <year>2013</year>;<volume>2</volume>(<issue>1</issue>):<fpage>15</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1186/2047-217X-2-15" xlink:type="simple">10.1186/2047-217X-2-15</ext-link></comment> <object-id pub-id-type="pmid">24225083</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref009">
<label>9</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Nekrutenko</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Taylor</surname> <given-names>J</given-names></name>. <article-title>Next-generation sequencing data interpretation: enhancing reproducibility and accessibility</article-title>. <source>Nature ReviewsGenetics</source>. <year>2012</year>;<volume>13</volume>(<issue>9</issue>):<fpage>667</fpage>–<lpage>72</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1005412.ref010">
<label>10</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Atwood</surname> <given-names>TK</given-names></name>, <name name-style="western"><surname>Bongcam-Rudloff</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Brazas</surname> <given-names>ME</given-names></name>, <name name-style="western"><surname>Corpas</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Gaudet</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Lewitter</surname> <given-names>F</given-names></name>, <etal>et al</etal>. <article-title>GOBLET: The Global Organisation for Bioinformatics Learning, Education and Training</article-title>. <source>PLoS Computational Biology</source>. <year>2015</year>; <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1004143" xlink:type="simple">10.1371/journal.pcbi.1004143</ext-link></comment> <object-id pub-id-type="pmid">25856076</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref011">
<label>11</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Sanders</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Kelly</surname> <given-names>D</given-names></name>. <article-title>Dealing with Risk in Scientific Software Development</article-title>. <source>Software, IEEE</source>. <year>2008</year>;<volume>25</volume>(<issue>4</issue>):<fpage>21</fpage>–<lpage>28</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1109/MS.2008.84" xlink:type="simple">10.1109/MS.2008.84</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref012">
<label>12</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Afgan</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Baker</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>van den Beek</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Blankenberg</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Bouvier</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Čech</surname> <given-names>M</given-names></name>, <etal>et al</etal>. <article-title>The Galaxy platform for accessible, reproducible and collaborative biomedical analyses: 2016 update</article-title>. <source>Nucleic Acids Research</source>. <year>2016</year>;<volume>44</volume>(<issue>W1</issue>):<fpage>W3</fpage>–<lpage>W10</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1093/nar/gkw343" xlink:type="simple">10.1093/nar/gkw343</ext-link></comment> <object-id pub-id-type="pmid">27137889</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref013">
<label>13</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Howe</surname> <given-names>B</given-names></name>. <article-title>Virtual Appliances, Cloud Computing, and Reproducible Research</article-title>. <source>Computing in Science Engineering</source>. <year>2012</year>;<volume>14</volume>(<issue>4</issue>):<fpage>36</fpage>–<lpage>41</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1109/MCSE.2012.62" xlink:type="simple">10.1109/MCSE.2012.62</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref014">
<label>14</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Gentleman</surname> <given-names>RC</given-names></name>, <name name-style="western"><surname>Carey</surname> <given-names>VJ</given-names></name>, <name name-style="western"><surname>Bates</surname> <given-names>DM</given-names></name>, <name name-style="western"><surname>Bolstad</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Dettling</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Dudoit</surname> <given-names>S</given-names></name>, <etal>et al</etal>. <article-title>Bioconductor: open software development for computational biology and bioinformatics</article-title>. <source>Genome Biology</source>. <year>2004</year>;<volume>5</volume>(<issue>10</issue>):<fpage>1</fpage>–<lpage>16</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1186/gb-2004-5-10-r80" xlink:type="simple">10.1186/gb-2004-5-10-r80</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref015">
<label>15</label>
<mixed-citation publication-type="other" xlink:type="simple">Varoquaux G. Software for reproducible science: let’s not have a misunderstanding; 2015. <ext-link ext-link-type="uri" xlink:href="http://gael-varoquaux.info/programming/software-for-reproducible-science-lets-not-have-a-misunderstanding.html" xlink:type="simple">http://gael-varoquaux.info/programming/software-for-reproducible-science-lets-not-have-a-misunderstanding.html</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1005412.ref016">
<label>16</label>
<mixed-citation publication-type="other" xlink:type="simple">Brown CT. Replication, reproduction, and remixing in research software; 2013. <ext-link ext-link-type="uri" xlink:href="http://ivory.idyll.org/blog/research-software-reuse.html" xlink:type="simple">http://ivory.idyll.org/blog/research-software-reuse.html</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1005412.ref017">
<label>17</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Wilson</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Aruliah</surname> <given-names>DA</given-names></name>, <name name-style="western"><surname>Brown</surname> <given-names>CT</given-names></name>, <name name-style="western"><surname>Hong</surname> <given-names>NPC</given-names></name>, <name name-style="western"><surname>Davis</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Guy</surname> <given-names>RT</given-names></name>, <etal>et al</etal>. <article-title>Best Practices for Scientific Computing</article-title>. <source>PLoS Biology</source>. <year>2014</year>;<volume>12</volume>(<issue>1</issue>):<fpage>e1001745</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pbio.1001745" xlink:type="simple">10.1371/journal.pbio.1001745</ext-link></comment> <object-id pub-id-type="pmid">24415924</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref018">
<label>18</label>
<mixed-citation publication-type="other" xlink:type="simple">Wilson G, Bryan J, Cranston K, Kitzes J, Nederbragt L, Teal TK. Good Enough Practices in Scientific Computing. arxivorg. 2016;abs/1609.00037.</mixed-citation>
</ref>
<ref id="pcbi.1005412.ref019">
<label>19</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Noble</surname> <given-names>WS</given-names></name>. <article-title>A Quick Guide to Organizing Computational Biology Projects</article-title>. <source>PLoS Computational Biology</source>. <year>2009</year>;<volume>5</volume>(<issue>7</issue>). <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1000424" xlink:type="simple">10.1371/journal.pcbi.1000424</ext-link></comment> <object-id pub-id-type="pmid">19649301</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref020">
<label>20</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Blischak</surname> <given-names>JD</given-names></name>, <name name-style="western"><surname>Davenport</surname> <given-names>ER</given-names></name>, <name name-style="western"><surname>Wilson</surname> <given-names>G</given-names></name>. <article-title>A Quick Introduction to Version Control with Git and GitHub</article-title>. <source>PLOS Computational Biology</source>. <year>2016</year>;<volume>12</volume>(<issue>1</issue>):<fpage>1</fpage>–<lpage>18</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1004668" xlink:type="simple">10.1371/journal.pcbi.1004668</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref021">
<label>21</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Karimzadeh</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Hoffman</surname> <given-names>MM</given-names></name>. <article-title>Top considerations for creating bioinformatics software documentation</article-title>. <source>Briefings in Bioinformatics</source>. in press <year>2017</year>; <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1093/bib/bbw134" xlink:type="simple">10.1093/bib/bbw134</ext-link></comment> <object-id pub-id-type="pmid">28088754</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref022">
<label>22</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Johnson</surname> <given-names>M</given-names></name>. <article-title>Building a Better ReadMe</article-title>. <source>Technical Communication</source>. <year>1997</year>;<volume>44</volume>(<issue>1</issue>):<fpage>28</fpage>–<lpage>36</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1005412.ref023">
<label>23</label>
<mixed-citation publication-type="other" xlink:type="simple">Free Software Foundation. GNU Coding Standards; 2016. <ext-link ext-link-type="uri" xlink:href="https://www.gnu.org/prep/standards/standards.html" xlink:type="simple">https://www.gnu.org/prep/standards/standards.html</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1005412.ref024">
<label>24</label>
<mixed-citation publication-type="other" xlink:type="simple">The IEEE, The Open Group. The Open Group Base Specifications Issue 7 IEEE Std 1003.1-2008. 12. Utility Conventions; 2016. <ext-link ext-link-type="uri" xlink:href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html" xlink:type="simple">http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1005412.ref025">
<label>25</label>
<mixed-citation publication-type="other" xlink:type="simple">Preston-Werner T. Semantic Versioning 2.0.0; 2016. <ext-link ext-link-type="uri" xlink:href="http://semver.org/spec/v2.0.0.html" xlink:type="simple">http://semver.org/spec/v2.0.0.html</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1005412.ref026">
<label>26</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Pertea</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Kim</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Pertea</surname> <given-names>GM</given-names></name>, <name name-style="western"><surname>Leek</surname> <given-names>JT</given-names></name>, <name name-style="western"><surname>Salzberg</surname> <given-names>SL</given-names></name>. <article-title>Transcript-level expression analysis of RNA-seq experiments with HISAT, StringTie and Ballgown</article-title>. <source>Nature Protocols</source>. <year>2016</year>;<volume>11</volume>(<issue>9</issue>):<fpage>1650</fpage>–<lpage>1667</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/nprot.2016.095" xlink:type="simple">10.1038/nprot.2016.095</ext-link></comment> <object-id pub-id-type="pmid">27560171</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005412.ref027">
<label>27</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Steinmacher</surname> <given-names>I</given-names></name>, <name name-style="western"><surname>Silva</surname> <given-names>MAG</given-names></name>, <name name-style="western"><surname>Gerosa</surname> <given-names>MA</given-names></name>, <name name-style="western"><surname>Redmiles</surname> <given-names>DF</given-names></name>. <article-title>A systematic literature review on the barriers faced by newcomers to open source software projects</article-title>. <source>Information and Software Technology</source>. <year>2015</year>;<volume>59</volume>:<fpage>67</fpage>–<lpage>85</lpage>. <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.infsof.2014.11.001" xlink:type="simple">http://dx.doi.org/10.1016/j.infsof.2014.11.001</ext-link>.</mixed-citation>
</ref>
</ref-list>
</back>
</article>