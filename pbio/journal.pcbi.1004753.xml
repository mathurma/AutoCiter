<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN" "http://jats.nlm.nih.gov/publishing/1.1d3/JATS-journalpublishing1.dtd">
<article article-type="research-article" dtd-version="1.1d3" xml:lang="en" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id>
<journal-title-group>
<journal-title>PLOS Computational Biology</journal-title>
</journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-15-01629</article-id>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1004753</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Research Article</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Computational biology</subject><subj-group><subject>Genome analysis</subject><subj-group><subject>Sequence assembly tools</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Genomics</subject><subj-group><subject>Genome analysis</subject><subj-group><subject>Sequence assembly tools</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Microbiology</subject><subj-group><subject>Medical microbiology</subject><subj-group><subject>Microbial pathogens</subject><subj-group><subject>Fungal pathogens</subject><subj-group><subject>Fusarium</subject><subj-group><subject>Fusarium oxysporum</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Medicine and health sciences</subject><subj-group><subject>Pathology and laboratory medicine</subject><subj-group><subject>Pathogens</subject><subj-group><subject>Microbial pathogens</subject><subj-group><subject>Fungal pathogens</subject><subj-group><subject>Fusarium</subject><subj-group><subject>Fusarium oxysporum</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Mycology</subject><subj-group><subject>Fungal pathogens</subject><subj-group><subject>Fusarium</subject><subj-group><subject>Fusarium oxysporum</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Computer software</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Biochemistry</subject><subj-group><subject>Bioenergetics</subject><subj-group><subject>Energy-producing organelles</subject><subj-group><subject>Mitochondria</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Cell biology</subject><subj-group><subject>Cellular structures and organelles</subject><subj-group><subject>Energy-producing organelles</subject><subj-group><subject>Mitochondria</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Molecular biology</subject><subj-group><subject>Molecular biology techniques</subject><subj-group><subject>Sequencing techniques</subject><subj-group><subject>Sequence analysis</subject><subj-group><subject>Sequence alignment</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Molecular biology techniques</subject><subj-group><subject>Sequencing techniques</subject><subj-group><subject>Sequence analysis</subject><subj-group><subject>Sequence alignment</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Genomics</subject><subj-group><subject>Repeated sequences</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Database and informatics methods</subject><subj-group><subject>Biological databases</subject><subj-group><subject>Sequence databases</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Molecular biology</subject><subj-group><subject>Molecular biology techniques</subject><subj-group><subject>Sequencing techniques</subject><subj-group><subject>Sequence analysis</subject><subj-group><subject>Sequence databases</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Molecular biology techniques</subject><subj-group><subject>Sequencing techniques</subject><subj-group><subject>Sequence analysis</subject><subj-group><subject>Sequence databases</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Computational biology</subject><subj-group><subject>Comparative genomics</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Genomics</subject><subj-group><subject>Comparative genomics</subject></subj-group></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>GRAbB: Selective Assembly of Genomic Regions, a New Niche for Genomic Research</article-title>
<alt-title alt-title-type="running-head">GRAbB: Selective Assembly of Genomic Regions</alt-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes" xlink:type="simple">
<contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-0536-7787</contrib-id>
<name name-style="western">
<surname>Brankovics</surname> <given-names>Bal√°zs</given-names></name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Zhang</surname> <given-names>Hao</given-names></name>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>van Diepeningen</surname> <given-names>Anne D.</given-names></name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>van der Lee</surname> <given-names>Theo A. J.</given-names></name>
<xref ref-type="aff" rid="aff004"><sup>4</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Waalwijk</surname> <given-names>Cees</given-names></name>
<xref ref-type="aff" rid="aff004"><sup>4</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>de Hoog</surname> <given-names>G. Sybren</given-names></name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
</contrib>
</contrib-group>
<aff id="aff001">
<label>1</label>
<addr-line>CBS-KNAW Fungal Biodiversity Centre, Utrecht, the Netherlands</addr-line>
</aff>
<aff id="aff002">
<label>2</label>
<addr-line>Institute of Biodiversity and Ecosystem Dynamics, University of Amsterdam, Amsterdam, the Netherlands</addr-line>
</aff>
<aff id="aff003">
<label>3</label>
<addr-line>State Key Laboratory for Biology of Plant Diseases and Insect Pests, Institute of Plant Protection, Chinese Academy of Agriculture Sciences, Beijing, China</addr-line>
</aff>
<aff id="aff004">
<label>4</label>
<addr-line>Wageningen University and Research Centre, Wageningen, the Netherlands</addr-line>
</aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>Gardner</surname> <given-names>Paul P</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1">
<addr-line>University of Canterbury, NEW ZEALAND</addr-line>
</aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>The authors have declared that no competing interests exist.</p>
</fn>
<fn fn-type="con" id="contrib001">
<p>Conceived and designed the experiments: BB. Performed the experiments: BB. Analyzed the data: BB. Contributed reagents/materials/analysis tools: BB. Wrote the paper: BB HZ ADvD TAJvdL CW GSdH.</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">b.brankovics@cbs.knaw.nl</email></corresp>
</author-notes>
<pub-date pub-type="collection">
<month>6</month>
<year>2016</year>
</pub-date>
<pub-date pub-type="epub">
<day>16</day>
<month>6</month>
<year>2016</year>
</pub-date>
<volume>12</volume>
<issue>6</issue>
<elocation-id>e1004753</elocation-id>
<history>
<date date-type="received">
<day>28</day>
<month>9</month>
<year>2015</year>
</date>
<date date-type="accepted">
<day>13</day>
<month>1</month>
<year>2016</year>
</date>
</history>
<permissions>
<copyright-year>2016</copyright-year>
<copyright-holder>Brankovics et al</copyright-holder>
<license xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">
<license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pcbi.1004753"/>
<abstract>
<p>GRAbB (Genomic Region Assembly by Baiting) is a new program that is dedicated to assemble specific genomic regions from NGS data. This approach is especially useful when dealing with multi copy regions, such as mitochondrial genome and the rDNA repeat region, parts of the genome that are often neglected or poorly assembled, although they contain interesting information from phylogenetic or epidemiologic perspectives, but also single copy regions can be assembled. The program is capable of targeting multiple regions within a single run. Furthermore, GRAbB can be used to extract specific loci from NGS data, based on homology, like sequences that are used for barcoding. To make the assembly specific, a known part of the region, such as the sequence of a PCR amplicon or a homologous sequence from a related species must be specified. By assembling only the region of interest, the assembly process is computationally much less demanding and may lead to assemblies of better quality. In this study the different applications and functionalities of the program are demonstrated such as: exhaustive assembly (rDNA region and mitochondrial genome), extracting homologous regions or genes (IGS, RPB1, RPB2 and TEF1a), as well as extracting multiple regions within a single run. The program is also compared with MITObim, which is meant for the exhaustive assembly of a single target based on a similar query sequence. GRAbB is shown to be more efficient than MITObim in terms of speed, memory and disk usage. The other functionalities (handling multiple targets simultaneously and extracting homologous regions) of the new program are not matched by other programs. The program is available with explanatory documentation at <ext-link ext-link-type="uri" xlink:href="https://github.com/b-brankovics/grabb" xlink:type="simple">https://github.com/b-brankovics/grabb</ext-link>. GRAbB has been tested on Ubuntu (12.04 and 14.04), Fedora (23), CentOS (7.1.1503) and Mac OS X (10.7). Furthermore, GRAbB is available as a docker repository: brankovics/grabb (<ext-link ext-link-type="uri" xlink:href="https://hub.docker.com/r/brankovics/grabb/" xlink:type="simple">https://hub.docker.com/r/brankovics/grabb/</ext-link>).</p>
</abstract>
<funding-group>
<award-group id="award001">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/501100003246</institution-id>
<institution>Nederlandse Organisatie voor Wetenschappelijk Onderzoek</institution>
</institution-wrap>
</funding-source>
<award-id>833.13.006</award-id>
<principal-award-recipient>
<name name-style="western">
<surname>van Diepeningen</surname> <given-names>Anne D.</given-names></name>
</principal-award-recipient>
</award-group>
<funding-statement>The investigations are supported by the Division for Earth and Life Sciences (ALW) with financial aid from the Netherlands Organization for Scientific Research (NWO, <ext-link ext-link-type="uri" xlink:href="http://www.nwo.nl/" xlink:type="simple">http://www.nwo.nl/</ext-link>) under grant number 833.13.006. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
</funding-group>
<counts>
<fig-count count="1"/>
<table-count count="2"/>
<page-count count="9"/>
</counts>
<custom-meta-group>
<custom-meta id="data-availability">
<meta-name>Data Availability</meta-name>
<meta-value>All new sequences have been submitted to ENA. Fusarium oxysporum f. sp. cubense race 4 strain B2 complete mitochondrion genome has accession number LT571433 and Fusarium oxysporum f. sp. cubense race 4 strain B2 rDNA repeat region has accession number LT571434.</meta-value>
</custom-meta>
</custom-meta-group>
</article-meta>
</front>
<body>
<disp-quote><p>This is a <italic>PLOS Computational Biology</italic> Software paper</p></disp-quote>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<p>High throughput sequencing of whole genomes is becoming routine due to the advances in sequencing technologies and the reduction of the costs involved. Currently, the number of genome and transcriptome sequencing datasets made accessible for the research community is steadily increasing [<xref ref-type="bibr" rid="pcbi.1004753.ref001">1</xref>].</p>
<p>However, in many studies using NGS data, the main focus is on the nuclear genome. This can be seen on the relatively low number of organellar genome assemblies published compared to the number of nuclear genome assemblies published. The mitogenome (mitochondrial genome) and the ribosomal DNA repeat region (18S rRNA‚ÄîITS1‚Äî5.8S rRNA‚ÄîITS2‚Äî28S rRNA‚Äî IGS) are generally not completely assembled, even when there is sufficient information in the NGS data [<xref ref-type="bibr" rid="pcbi.1004753.ref002">2</xref>]. These regions contain loci that are predominantly used for phylogenetic comparisons and species identification. Furthermore, there is no program that promises to extract barcoding loci form NGS reads.</p>
<p>The time and computational power required for assembling a specific region of the genome is less than that required for assembling the entire genome, while the quality of the assembled sequences may improve. Few resources exist to examine regions other than the nuclear genome. So far there is only one program, MITObim, which selectively assembles organellar genomes, and was developed for the mitogenome [<xref ref-type="bibr" rid="pcbi.1004753.ref002">2</xref>]. While other programs are aimed at re-assembly to improve an existing assembly [<xref ref-type="bibr" rid="pcbi.1004753.ref003">3</xref>] or at closing gaps [<xref ref-type="bibr" rid="pcbi.1004753.ref004">4</xref>], MITObim is designed to use the sequence of a related species as a reference for the assembly until either one of two completion criteria is met: i) a maximum number of iterations specified at invocation is reached, or ii) no new reads are found.</p>
<p>Here, we present GRAbB (Genomic Region Assembly by Baiting), a new versatile program that is designed to be flexible in terms of input options, assembly and completion criteria. The program uses a reference file to identify reads corresponding to the target region. For the assembly, the program can use two well-known assemblers, Edena [<xref ref-type="bibr" rid="pcbi.1004753.ref005">5</xref>, <xref ref-type="bibr" rid="pcbi.1004753.ref006">6</xref>] and Velvet [<xref ref-type="bibr" rid="pcbi.1004753.ref007">7</xref>], but the source code is designed to be easily expandable to employ other assemblers, as demonstrated in the documentation. It is the first program that can handle multiple regions separately within a single run. Moreover, it is the first program that is able to extract homologous sequence regions, such as barcoding sites.</p>
<p>In this paper, the exhaustive assembly capabilities of GRAbB were compared with that of MITObim. Besides this comparison, GRAbB was also run on NGS data to demonstrate its functionalities targeting multiple regions with diverse completion criteria.</p>
</sec>
<sec id="sec002" sec-type="materials|methods">
<title>Design and Implementation</title>
<sec id="sec003">
<title>Algorithm overview</title>
<p>GRAbB is written in Perl and it uses only modules that are part of the core distribution of Perl. In addition to basic UNIX commands, the following third-party programs are used by GRAbB: mirabait (from the MIRA package; [<xref ref-type="bibr" rid="pcbi.1004753.ref008">8</xref>]), Seqtk (<ext-link ext-link-type="uri" xlink:href="https://github.com/lh3/seqtk" xlink:type="simple">https://github.com/lh3/seqtk</ext-link>), Edena [<xref ref-type="bibr" rid="pcbi.1004753.ref005">5</xref>, <xref ref-type="bibr" rid="pcbi.1004753.ref006">6</xref>], Velvet [<xref ref-type="bibr" rid="pcbi.1004753.ref007">7</xref>] and Exonerate [<xref ref-type="bibr" rid="pcbi.1004753.ref009">9</xref>].</p>
<p>The program is designed to be versatile and flexible with the following functionalities:</p>
<list list-type="bullet">
<list-item>
<p>To use pairing information,</p>
</list-item>
<list-item>
<p>To use additional bait sequences,</p>
</list-item>
<list-item>
<p>To assemble multiple regions separately in a single run,</p>
</list-item>
<list-item>
<p>To use any of a range of completion criteria (different ones for each region are allowed in a multi-assembly run).</p>
</list-item>
</list>
<p>These functionalities are detailed below at the appropriate steps of the algorithm.</p>
</sec>
<sec id="sec004">
<title>Input</title>
<p>As shown in <xref ref-type="fig" rid="pcbi.1004753.g001">Fig 1a</xref>, there are two mandatory input files (the reference file and at least one read file), In addition, there is an optional input file (the additional bait file).</p>
<fig id="pcbi.1004753.g001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1004753.g001</object-id>
<label>Fig 1</label>
<caption>
<title>Schematic workflow of GRAbB.</title>
<p><bold>a:</bold> The input files for GRAbB. <bold>b:</bold> The main loop of GRAbB. <bold>c:</bold> Internal loops for the individual threads, the number of threads is based on the number of sequences in the reference file in multi-mode, otherwise there is only a single thread. <bold>d:</bold> Check whether there are incomplete threads left or not. <bold>e:</bold> Output files for each thread. Dashed arrows indicate optional files (only in exonerate-mode). Green arrows indicate termination signal of a given thread or run. If GRAbB is not run in multi-mode, then the first step within the internal loop is the <italic>de novo</italic> assembly, the preceding ones are skipped.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1004753.g001" xlink:type="simple"/>
</fig>
<p>The reference file may contain multiple sequence entries, which serve as references for the individual threads if the program is run in multi-mode. The description lines may contain specification for the completion criterion to be used for the given sequence, allowing users to use different completion criteria for the different threads within a single run.</p>
<p>Multiple read files can be specified as input. GRAbB can make use of pairing information.</p>
<p>The additional bait file is used for the first baiting step by merging it with the reference to create a unified bait file. The file may contain more than one sequence.</p>
</sec>
<sec id="sec005">
<title>Main loop</title>
<p>The main loop of GRAbB can be summarized as follows: i) creating the bait file, ii) finding reads by baiting, iii) <italic>de novo</italic> assembly of the selected reads, and iv) testing completion (<xref ref-type="fig" rid="pcbi.1004753.g001">Fig 1b</xref>). When multi-mode is selected, the general baiting step is followed by specific baiting, <italic>de novo</italic> assembly and completion testing steps for each of the threads (<xref ref-type="fig" rid="pcbi.1004753.g001">Fig 1c</xref>). The threads are generated by splitting the reference file into single-entry FASTA files. These newly created reference files are used as bait for the initial specific baiting steps for the given thread (<xref ref-type="fig" rid="pcbi.1004753.g001">Fig 1c</xref>). At the end of each cycle of the main loop, the program checks whether there is any thread that is not completed yet: then it continues or stops accordingly (<xref ref-type="fig" rid="pcbi.1004753.g001">Fig 1d</xref>).</p>
<sec id="sec006">
<title>i) Creating the bait file</title>
<p>Before the first baiting step, the specified reference and the additional bait file are combined into a single internal bait file. In multi-mode, the reference sequences corresponding to the given thread will be used for the first specific baiting step.</p>
<p>In each of the later iterations of the program, the latest assembly is used as (internal) bait file. For the general baiting step in multi-mode the individual assembly files are combined into a single (general) bait file.</p>
</sec>
<sec id="sec007">
<title>ii) Finding reads</title>
<p>Reads corresponding to the target sequence are identified by using exact k-mer (31 bp) matching that is implemented by mirabait. The names of the reads thus identified are collected and added to the list of read names from previous iterations (there is a separate list for general baiting and for each of the threads.) If there are no new reads identified, the program stops the iteration: either for the given thread or for all the threads, depending on which baiting step generated this result. The identified reads are collected from the read files using Seqtk into internal read files.</p>
<p>By using a general baiting step before the specific baiting, it is possible to reduce the required runtime, since the large input read file(s) is/are only screened once per iteration and the specific baiting is confined to screening the reads that are already identified to be specific during the general baiting.</p>
</sec>
<sec id="sec008">
<title>iii) <italic>De novo</italic> assembly</title>
<p>The program can use two assemblers, Edena and Velvet, by default, however there is a skeleton code to add other assemblers to be used by the program. Even though Edena is the default assembler, by using command line options other assemblers may be selected as well.</p>
<p>The fact that single- or paired-mode is selected is passed on to the assembler program that assembles the specific reads <italic>de novo</italic>. Furthermore, additional arguments may be passed, such as overlap cutoff size (Edena), to the assembler program at the invocation of the main program.</p>
<p>At the invocation of GRAbB it is possible to specify a length filter that excludes the contigs from the assembly that are shorter than the specified length from the completion testing, and these are not used for generating the bait file for the next iteration either. This enables to minimize the effect of repeat regions on the assembly process.</p>
</sec>
<sec id="sec009">
<title>iv) Testing completion</title>
<p>There are multiple completion criteria that can be specified for the program. These can be specified for each thread separately or for all of the threads at once. In addition, it is possible to specify multiple criteria for the same thread or run. The program stops when any one of these criteria is met.</p>
<p>The first completion criterion is implicit: the program stops if no new information is found. This means that either there are no new reads found or that the new assembly is identical to the bait used for the current iteration. If no other criterion is specified, then the run will be exhaustive, since it iterates until it cannot find any new information.</p>
<p>The simplest explicit completion criterion is the size criterion. There are three options that can be used for this setting: i) total assembly size, ii) length of the longest contig, and iii) N50 value of the assembly. This criterion is tested independently for each of the threads in multi-mode, or alternatively for the single thread. Multiple criteria can be used in a single run; this also applies to the different size criteria. These settings are useful when exploring the vicinity of a specified sequence region.</p>
<p>The final criterion is matching a homologous sequence. In this case, the specific reference sequence is used to identify the homologous region within the assembly. In order to identify the matching region, GRAbB uses Exonerate with settings that ensure that the entire reference sequence is aligned to the contigs. This makes it possible to match sequences that are somewhat dissimilar to the reference and may contain indels, causing gaps in the alignment. If the reference could be aligned to the contigs over its entire length, the completion criterion is met, and the matched region is extracted from the assembly in the same orientation as the reference sequence and saved to a separate output file. Otherwise, the length of the matched region is compared to that of the previous iteration. In case the length of the matched region has increased, the thread or run will continue, otherwise the thread or run will stop.</p>
</sec>
</sec>
<sec id="sec010">
<title>Up- and downstream processes</title>
<p>Besides the main program, there are some helper programs included within the package that can help with preprocessing the input data or to further process the output data. These are detailed in the documentation (<ext-link ext-link-type="uri" xlink:href="https://github.com/b-brankovics/grabb" xlink:type="simple">https://github.com/b-brankovics/grabb</ext-link>).</p>
</sec>
</sec>
<sec id="sec011" sec-type="results">
<title>Results</title>
<sec id="sec012">
<title>Simulated data</title>
<p>To compare the performance of GRAbB with that of MITObim 1.7 (using MIRA 4.0.2; <ext-link ext-link-type="uri" xlink:href="https://github.com/chrishah/MITObim.git" xlink:type="simple">https://github.com/chrishah/MITObim.git</ext-link>; [<xref ref-type="bibr" rid="pcbi.1004753.ref002">2</xref>]), simulated sequencing data generated based on the <italic>F. graminearum</italic> mitogenome sequence available from NCBI (NC_009493) were used together with either the original <italic>F. graminearum</italic> (NC_009493) or <italic>F. oxysporum</italic> (NC_017930) mitogenome as reference. MITObim has two assembly settings: <italic>de novo</italic> and mapping. However, since the mapping setting did not prove to be applicable to reconstruct the <italic>F. graminearum</italic> sequence by using <italic>F. oxysporum</italic> as reference, only the <italic>de novo</italic> setting was used for the comparison. GRAbB produced a single contig in both cases. MITObim produced multiple contigs in both runs, however a single contig could be obtained from the LargeContigs MAF format file produced by using miraconvert. All the single contigs produced could be circularized using the merge_contigs.pl and were identical to the original sequence. Although both MITObim and GRAbB could assemble the genome correctly, GRAbB did it more efficiently and demanded less disk space for the output folders <xref ref-type="table" rid="pcbi.1004753.t001">Table 1</xref> (sequence similarity information is in supplementary file <xref ref-type="supplementary-material" rid="pcbi.1004753.s001">S1 Text</xref>).</p>
<table-wrap id="pcbi.1004753.t001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1004753.t001</object-id>
<label>Table 1</label>
<caption>
<title>Comparison between GRAbB and MITObim using our <italic>in silico</italic> generated paired-end read library.</title>
</caption>
<alternatives>
<graphic id="pcbi.1004753.t001g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1004753.t001" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="center">Program</th>
<th align="center">Reference</th>
<th align="center">N</th>
<th align="center">CPU usage (%)<xref ref-type="table-fn" rid="t001fn002">*</xref></th>
<th align="center">Time elapsed (m:s)</th>
<th align="center">Maximum memory usage (Mb)</th>
<th align="center">Output folder size (Mb)</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">GRAbB</td>
<td align="left"><italic>F. graminearum</italic></td>
<td align="right">2</td>
<td align="center">157</td>
<td align="center">00:15.52</td>
<td align="char" char=".">285.09</td>
<td align="right">70</td>
</tr>
<tr>
<td align="left">GRAbB</td>
<td align="left"><italic>F. oxysporum</italic></td>
<td align="right">10</td>
<td align="center">161</td>
<td align="center">01:49.24</td>
<td align="char" char=".">286.05</td>
<td align="right">527</td>
</tr>
<tr>
<td align="left">MITObim</td>
<td align="left"><italic>F. graminearum</italic></td>
<td align="right">3</td>
<td align="center">150</td>
<td align="center">09:42.15</td>
<td align="char" char=".">1,354.86</td>
<td align="right">4,126</td>
</tr>
<tr>
<td align="left">MITObim</td>
<td align="left"><italic>F. oxysporum</italic></td>
<td align="right">9</td>
<td align="center">150</td>
<td align="center">25:37.71</td>
<td align="char" char=".">1,358.81</td>
<td align="right">10,667</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t001fn001">
<p>Data were generated by /usr/bin/time on Ubuntu 14.04.1. Both programs were run on the same simulated read library derived from <italic>F. graminearum</italic> mitogenome. Reference column shows which mitogenome was the input for the run. N is the number of iteration it took to complete the assembly. Output folder size refers to the disk space occupied by the output files of the run. This was assessed using /usr/bin/du on Ubuntu 14.04.1.</p>
</fn>
<fn id="t001fn002">
<p>* The program, /usr/bin/time, assigns 100% for each of the cores of the processor, and the computer used has four cores, thus the maximal CPU usage is 400%.</p>
</fn>
</table-wrap-foot>
</table-wrap>
</sec>
<sec id="sec013">
<title>NGS data</title>
<p>To demonstrate the capabilities of GRAbB, it was run on paired-end reads derived from <italic>Fusarium oxysporum</italic> f. sp. <italic>cubense</italic> race 4 strain B2 (SRR550152; [<xref ref-type="bibr" rid="pcbi.1004753.ref010">10</xref>]) and the results were compared to the assembly published for this strain (AMGQ01). In the single run multiple regions were targeted simultaneously: mitochondrial genome, rDNA region, barcoding loci (IGS, TEF1a, RPB1 and RPB2). The goal of the threads were as follows: assemble the complete mitogenome, assemble the complete rDNA region, extract barcoding loci, compare the extraction results using sequences from different species and test the effect on the extraction when the query contains a gap (<xref ref-type="table" rid="pcbi.1004753.t002">Table 2</xref>; sequence similarity information in supplementary file <xref ref-type="supplementary-material" rid="pcbi.1004753.s001">S1 Text</xref>).</p>
<table-wrap id="pcbi.1004753.t002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1004753.t002</object-id>
<label>Table 2</label>
<caption>
<title>Overview of the multi-query run.</title>
</caption>
<alternatives>
<graphic id="pcbi.1004753.t002g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1004753.t002" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="center" rowspan="2">Thread number</th>
<th align="center" rowspan="2">Target</th>
<th align="center" colspan="4">Reference</th>
<th align="center" rowspan="2">Result size (bp)</th>
<th align="center" rowspan="2">Assembly type</th>
<th align="center" colspan="2">Number of iterations</th>
</tr>
<tr>
<th align="center">Region</th>
<th align="center">Species</th>
<th align="center">Accession number</th>
<th align="center">Size (bp)</th>
<th align="center">Specific</th>
<th align="center">General</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">1</td>
<td align="left">mt</td>
<td align="left">mt</td>
<td align="left"><italic>F. oxysporum</italic></td>
<td align="left">NC_017930</td>
<td align="right">34,477</td>
<td align="right">49,697</td>
<td align="center">exhaustive</td>
<td align="right">18</td>
<td align="right">3</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">rDNA</td>
<td align="left">IGS</td>
<td align="left"><italic>F. oxysporum</italic></td>
<td align="left">FD_00403_IGS</td>
<td align="right">1,449</td>
<td align="right">7,872</td>
<td align="center">exhaustive</td>
<td align="right">2</td>
<td align="right">10</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">IGS</td>
<td align="left">IGS</td>
<td align="left"><italic>F. oxysporum</italic></td>
<td align="left">FD_00403_IGS</td>
<td align="right">1,449</td>
<td align="right">1,446</td>
<td align="center">exonerate</td>
<td align="right">1</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">TEF1a</td>
<td align="left">TEF1a</td>
<td align="left"><italic>F. oxysporum</italic></td>
<td align="left">FD_00403_EF-1a</td>
<td align="right">689</td>
<td align="right">684</td>
<td align="center">exonerate</td>
<td align="right">1</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">TEF1a</td>
<td align="left">TEF1a</td>
<td align="left"><italic>F. oxysporum</italic></td>
<td align="left">FD_00403_EF-1a<xref ref-type="table-fn" rid="t002fn002">*</xref></td>
<td align="right">652</td>
<td align="right">647</td>
<td align="center">exonerate</td>
<td align="right">1</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">TEF1a</td>
<td align="left">TEF1a</td>
<td align="left"><italic>F. graminearum</italic></td>
<td align="left">FD_00001_EF-1a</td>
<td align="right">643</td>
<td align="right">647</td>
<td align="center">exonerate</td>
<td align="right">3</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">7</td>
<td align="left">TEF1a</td>
<td align="left">TEF1a</td>
<td align="left"><italic>F. solani</italic></td>
<td align="left">FD_01036_EF-1a</td>
<td align="right">677</td>
<td align="right">647</td>
<td align="center">exonerate</td>
<td align="right">4</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">8</td>
<td align="left">RPB1</td>
<td align="left">RPB1</td>
<td align="left"><italic>F. oxysporum</italic></td>
<td align="left">FD_02003_RPB1</td>
<td align="right">1,606</td>
<td align="right">1,606</td>
<td align="center">exonerate</td>
<td align="right">1</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">9</td>
<td align="left">RPB2</td>
<td align="left">RPB2</td>
<td align="left"><italic>F. oxysporum</italic></td>
<td align="left">FD_02003_RPB2</td>
<td align="right">1,762</td>
<td align="right">1,899</td>
<td align="center">exonerate</td>
<td align="right">1</td>
<td align="right">1</td>
</tr>
<tr>
<td align="center">10</td>
<td align="left">RPB2</td>
<td align="left">RPB2</td>
<td align="left"><italic>F. oxysporum</italic></td>
<td align="left">FD_00120_RPB2-57<break/>FD_00120_RPB2-711</td>
<td align="right">879<break/>860</td>
<td align="right">1,876</td>
<td align="center">exonerate</td>
<td align="right">1</td>
<td align="right">1</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t002fn001">
<p>The accession numbers are either GenBank accessions or FusariumID (<ext-link ext-link-type="uri" xlink:href="http://isolate.fusariumdb.org" xlink:type="simple">http://isolate.fusariumdb.org</ext-link>) accessions. The assembly type specifies which assembly mode was selected for the given thread during the GRAbB run. Multiple specific iterations are run only during the first general iteration.</p>
</fn>
<fn id="t002fn002">
<p>*: This sequence was truncated to span the same region as FD_00001_EF-1a and FD_01036_EF-1a.</p>
</fn>
</table-wrap-foot>
</table-wrap>
<sec id="sec014">
<title>Mitochondrial genome</title>
<p>The mitochondrial genome of the strain was assembled into a single contig, which had 9-9 oligoC sequences at both ends. To solve this problem, Edena was rerun on the sequences specific for the mitogenome, but the reads were trimmed to be 70 bp long. By removing part of the ‚Äò3 end of the reads, the assembly improved. The final assembly contained a single contig, and the two ends of the contig overlapped by 60 bp, indicating a circular nature. This is in agreement with the fact that the mitochondrial genome is circular in <italic>Fusarium</italic> spp [<xref ref-type="bibr" rid="pcbi.1004753.ref011">11</xref>].</p>
<p>The circularized sequence was 49697 bp long (LT571433). The reference sequence (NC_017930) lacked a region (approximately 12 kbp long) that is present in the mitogenomes of all other <italic>Fusarium</italic> spp. sequenced thus far [<xref ref-type="bibr" rid="pcbi.1004753.ref011">11</xref>]. This region contains tRNA genes and a large ORF (open reading frame) that is typical for <italic>Fusarium</italic> species, the function of this ORF is unknown. The new sequence contained this region, in addition to three new introns in protein coding genes.</p>
<p>In the AMGQ01 assembly there are 30 contigs containing mitochondrial sequences. These sequences cover only 39.07% of the mitogenome.</p>
</sec>
<sec id="sec015">
<title>Ribosomal DNA region (18S rRNA‚ÄîITS1‚Äî5.8S rRNA‚ÄîITS2‚Äî28S rRNA‚ÄîIGS)</title>
<p>The assembly for the rDNA region contained two contigs, and the contigs could be joined because they overlapped by 99 bp, indicating a circular or repetitive morphology. The ribosomal DNA region is not circular, but since it is present within the genome in multiple copies as direct repeats [<xref ref-type="bibr" rid="pcbi.1004753.ref012">12</xref>] it can be considered as a circular sequence from a bioinformatics perspective.</p>
<p>The circularized sequence was 7,872 bp long. The obtained sequence (LT571434) contained the 18S, 5.8S and 28S rRNA genes, as well as, the ITS1, ITS2 and IGS regions. Since the rDNA region is present in multiple copies in the nuclear genome, therefore has higher coverage compared to surrounding regions. This makes it possible to assemble the complete repeat region without assembling the flanking regions. In the AMGQ01 assembly there are 14 contigs containing rDNA region sequences. These sequences cover only 63.89% of the rDNA region.</p>
</sec>
<sec id="sec016">
<title>Barcoding loci (IGS, TEF1a, RPB1 and RPB2)</title>
<p>All the threads targeting barcoding loci finished by matching the query sequence in the assemblies. The result for the threads of the three TEF1a sequences from different species (<italic>F. oxysporum</italic>, <italic>F. graminearum</italic> and <italic>F. solani</italic>) returned identical sequences. The IGS sequence had only partial matches when compared with the AMGQ01 assembly, but matched completely with the newly assembled rDNA region sequence. The TEF1a, RPB1 and RPB2 sequences were identical to matching sequences from the assembly (AMGQ01), however, the RPB2 locus was found at the junction of two contigs in the assembly, which overlapped by 5 bp.</p>
</sec>
</sec>
<sec id="sec017">
<title>Conclusions</title>
<p>GRAbB (Genomic Region Assembly by Baiting) is a new versatile program that is designed to be flexible in terms of input options, assembly and completion criteria. It is the first program that can handle multiple regions separately within a single run. Moreover, it is the first program that is able to extract homologous sequence regions, such as barcoding sites.</p>
<p>The program was compared with MITObim, which is meant for the exhaustive assembly of a single target based on a similar query sequence. GRAbB is shown to be more efficient than MITObim in terms of speed, memory and disk usage.</p>
<p>The other functionalities, handling multiple targets simultaneously and extracting homologous regions, of the new program are not matched by other programs. These functionalities were demonstrated by a single run. GRAbB managed to assemble the individual target regions independently of each other. In the case of the mitochondrial genome, the rDNA region and last RPB2 example, the complete sequences could be recovered, although the target sequences contained regions that were not present in the query sequences. The same TEF1a region was targeted by three homologous query sequences from three different species, although the sequences shared different levels of similarity to the target sequence, all three threads returned the same sequence. GRAbB identifies reads corresponding to a target region by using exact 31-mer matching, thus 31-basepair-long sequence identity between query and target can be sufficient to seed an assembly.</p>
</sec>
</sec>
<sec id="sec018">
<title>Availability and Future Directions</title>
<p>GRAbB is available with explanatory documentation at <ext-link ext-link-type="uri" xlink:href="https://github.com/b-brankovics/grabb" xlink:type="simple">https://github.com/b-brankovics/grabb</ext-link>. Furthermore, GRAbB is available as a docker repository: brankovics/grabb (<ext-link ext-link-type="uri" xlink:href="https://hub.docker.com/r/brankovics/grabb/" xlink:type="simple">https://hub.docker.com/r/brankovics/grabb/</ext-link>). The GitHub package has been tested on Ubuntu (12.04 and 14.04), Fedora (23), CentOS (7.1.1503) and Mac OS X (10.7). The docker repository can be used on any platform that has a working installation of docker. The program is made available with MIT license.</p>
<p>GRAbB is written in a way that allows users to run it with any assembler that can be executed via the command line. Although, the program is meant to be run with <italic>de novo</italic> assemblers, the skeleton code provided in the package and convention of creation and location of intermediary files allow users to employ reference based assemblers, as well.</p>
</sec>
<sec id="sec019">
<title>Supporting Information</title>
<supplementary-material id="pcbi.1004753.s001" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1004753.s001" xlink:type="simple">
<label>S1 Text</label>
<caption>
<title>Sequence similarity between target and query sequences.</title>
<p>(PDF)</p>
</caption>
</supplementary-material>
</sec>
</body>
<back>
<ref-list>
<title>References</title>
<ref id="pcbi.1004753.ref001">
<label>1</label>
<mixed-citation publication-type="other" xlink:type="simple">The NCBI Sequence Read Archive;. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/Traces/sra" xlink:type="simple">http://www.ncbi.nlm.nih.gov/Traces/sra</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004753.ref002">
<label>2</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Hahn</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Bachmann</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Chevreux</surname> <given-names>B</given-names></name>. <article-title>Reconstructing mitochondrial genomes directly from genomic next-generation sequencing reads‚Äìa baiting and iterative mapping approach</article-title>. <source>Nucleic Acids Res</source>. <year>2013</year> <month>Jul</month>;<volume>41</volume>(<issue>13</issue>):<fpage>e129</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1093/nar/gkt371" xlink:type="simple">10.1093/nar/gkt371</ext-link></comment> <object-id pub-id-type="pmid">23661685</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004753.ref003">
<label>3</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Green</surname> <given-names>RE</given-names></name>, <name name-style="western"><surname>Malaspinas</surname> <given-names>AS</given-names></name>, <name name-style="western"><surname>Krause</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Briggs</surname> <given-names>AW</given-names></name>, <name name-style="western"><surname>Johnson</surname> <given-names>PLF</given-names></name>, <name name-style="western"><surname>Uhler</surname> <given-names>C</given-names></name>, <etal>et al</etal>. <article-title>A complete Neandertal mitochondrial genome sequence determined by high-throughput sequencing</article-title>. <source>Cell</source>. <year>2008</year> <month>Aug</month>;<volume>134</volume>(<issue>3</issue>):<fpage>416</fpage>‚Äì<lpage>26</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.cell.2008.06.021" xlink:type="simple">10.1016/j.cell.2008.06.021</ext-link></comment> <object-id pub-id-type="pmid">18692465</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004753.ref004">
<label>4</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Tsai</surname> <given-names>IJ</given-names></name>, <name name-style="western"><surname>Otto</surname> <given-names>TD</given-names></name>, <name name-style="western"><surname>Berriman</surname> <given-names>M</given-names></name>. <article-title>Improving draft assemblies by iterative mapping and assembly of short reads to eliminate gaps</article-title>. <source>Genome Biol</source>. <year>2010</year>;<volume>11</volume>(<issue>4</issue>):<fpage>R41</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1186/gb-2010-11-4-r41" xlink:type="simple">10.1186/gb-2010-11-4-r41</ext-link></comment> <object-id pub-id-type="pmid">20388197</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004753.ref005">
<label>5</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Hernandez</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Fran√ßois</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Farinelli</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Oster√•s</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Schrenzel</surname> <given-names>J</given-names></name>. <article-title><italic>De novo</italic> bacterial genome sequencing: millions of very short reads assembled on a desktop computer</article-title>. <source>Genome Res</source>. <year>2008</year> <month>May</month>;<volume>18</volume>(<issue>5</issue>):<fpage>802</fpage>‚Äì<lpage>9</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1101/gr.072033.107" xlink:type="simple">10.1101/gr.072033.107</ext-link></comment> <object-id pub-id-type="pmid">18332092</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004753.ref006">
<label>6</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Hernandez</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Tewhey</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Veyrieras</surname> <given-names>JB</given-names></name>, <name name-style="western"><surname>Farinelli</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>√òster√•s</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Fran√ßois</surname> <given-names>P</given-names></name>, <etal>et al</etal>. <article-title><italic>De novo</italic> finished 2.8 Mbp <italic>Staphylococcus aureus</italic> genome assembly from 100 bp short and long range paired-end reads</article-title>. <source>Bioinformatics</source>. <year>2014</year> <month>Jan</month>;<volume>30</volume>(<issue>1</issue>):<fpage>40</fpage>‚Äì<lpage>9</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1093/bioinformatics/btt590" xlink:type="simple">10.1093/bioinformatics/btt590</ext-link></comment> <object-id pub-id-type="pmid">24130309</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004753.ref007">
<label>7</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Zerbino</surname> <given-names>DR</given-names></name>, <name name-style="western"><surname>Birney</surname> <given-names>E</given-names></name>. <article-title>Velvet: algorithms for <italic>de novo</italic> short read assembly using de Bruijn graphs</article-title>. <source>Genome Res</source>. <year>2008</year> <month>May</month>;<volume>18</volume>(<issue>5</issue>):<fpage>821</fpage>‚Äì<lpage>9</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1101/gr.074492.107" xlink:type="simple">10.1101/gr.074492.107</ext-link></comment> <object-id pub-id-type="pmid">18349386</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004753.ref008">
<label>8</label>
<mixed-citation publication-type="other" xlink:type="simple">Chevreux B, Wetter T, Suhai S. Genome sequence assembly using trace signals and additional sequence information. In: Computer Science and Biology: Proceedings of the German Conference on Bioinformatics (GCB).; 1999. p. 45‚Äì56.</mixed-citation>
</ref>
<ref id="pcbi.1004753.ref009">
<label>9</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Slater</surname> <given-names>GSC</given-names></name>, <name name-style="western"><surname>Birney</surname> <given-names>E</given-names></name>. <article-title>Automated generation of heuristics for biological sequence comparison</article-title>. <source>BMC Bioinformatics</source>. <year>2005</year>;<volume>6</volume>:<fpage>31</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1186/1471-2105-6-31" xlink:type="simple">10.1186/1471-2105-6-31</ext-link></comment> <object-id pub-id-type="pmid">15713233</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004753.ref010">
<label>10</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Guo</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Han</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Yang</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Zeng</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Fan</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Zhu</surname> <given-names>Y</given-names></name>, <etal>et al</etal>. <article-title>Genome and transcriptome analysis of the fungal pathogen <italic>Fusarium oxysporum</italic> f. sp. <italic>cubense</italic> causing banana vascular wilt disease</article-title>. <source>PLoS ONE</source>. <year>2014</year>;<volume>9</volume>(<issue>4</issue>):<fpage>e95543</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pone.0095543" xlink:type="simple">10.1371/journal.pone.0095543</ext-link></comment> <object-id pub-id-type="pmid">24743270</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004753.ref011">
<label>11</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Fourie</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>van der Merwe</surname> <given-names>NA</given-names></name>, <name name-style="western"><surname>Wingfield</surname> <given-names>BD</given-names></name>, <name name-style="western"><surname>Bogale</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Tudzynski</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Wingfield</surname> <given-names>MJ</given-names></name>, <etal>et al</etal>. <article-title>Evidence for inter-specific recombination among the mitochondrial genomes of <italic>Fusarium</italic> species in the <italic>Gibberella fujikuroi</italic> complex</article-title>. <source>BMC Genomics</source>. <year>2013</year>;<volume>14</volume>:<fpage>605</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1186/1471-2164-14-605" xlink:type="simple">10.1186/1471-2164-14-605</ext-link></comment> <object-id pub-id-type="pmid">24010864</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004753.ref012">
<label>12</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Hillis</surname> <given-names>DM</given-names></name>, <name name-style="western"><surname>Dixon</surname> <given-names>MT</given-names></name>. <article-title>Ribosomal DNA: molecular evolution and phylogenetic inference</article-title>. <source>Q Rev Biol</source>. <year>1991</year> <month>Dec</month>;<volume>66</volume>(<issue>4</issue>):<fpage>411</fpage>‚Äì<lpage>53</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1086/417338" xlink:type="simple">10.1086/417338</ext-link></comment> <object-id pub-id-type="pmid">1784710</object-id></mixed-citation>
</ref>
</ref-list>
</back>
</article>