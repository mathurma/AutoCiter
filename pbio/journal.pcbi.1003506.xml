<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="3.0" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id><journal-title-group>
<journal-title>PLoS Computational Biology</journal-title></journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, USA</publisher-loc></publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-13-01442</article-id>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1003506</article-id>
    <article-categories><subj-group subj-group-type="heading"><subject>Editorial</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>Biology and life sciences</subject><subj-group><subject>Computational biology</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v2"><subject>Computer and information sciences</subject><subj-group><subject>Software engineering</subject></subj-group></subj-group></article-categories>
<title-group>
<article-title>Ten Simple Rules for Effective Computational Research</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Osborne</surname><given-names>James M.</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Bernabeu</surname><given-names>Miguel O.</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="aff" rid="aff4"><sup>4</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Bruna</surname><given-names>Maria</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Calderhead</surname><given-names>Ben</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Cooper</surname><given-names>Jonathan</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Dalchau</surname><given-names>Neil</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Dunn</surname><given-names>Sara-Jane</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Fletcher</surname><given-names>Alexander G.</given-names></name><xref ref-type="aff" rid="aff5"><sup>5</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Freeman</surname><given-names>Robin</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref><xref ref-type="aff" rid="aff3"><sup>3</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Groen</surname><given-names>Derek</given-names></name><xref ref-type="aff" rid="aff4"><sup>4</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Knapp</surname><given-names>Bernhard</given-names></name><xref ref-type="aff" rid="aff6"><sup>6</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>McInerny</surname><given-names>Greg J.</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Mirams</surname><given-names>Gary R.</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Pitt-Francis</surname><given-names>Joe</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Sengupta</surname><given-names>Biswa</given-names></name><xref ref-type="aff" rid="aff7"><sup>7</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Wright</surname><given-names>David W.</given-names></name><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="aff" rid="aff4"><sup>4</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Yates</surname><given-names>Christian A.</given-names></name><xref ref-type="aff" rid="aff5"><sup>5</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Gavaghan</surname><given-names>David J.</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Emmott</surname><given-names>Stephen</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Deane</surname><given-names>Charlotte</given-names></name><xref ref-type="aff" rid="aff6"><sup>6</sup></xref></contrib>
</contrib-group>
<aff id="aff1"><label>1</label><addr-line>Computational Biology Group, Department of Computer Science, University of Oxford, Wolfson Building, Oxford, United Kingdom</addr-line></aff>
<aff id="aff2"><label>2</label><addr-line>Computational Science Laboratory, Microsoft Research, Cambridge, United Kingdom</addr-line></aff>
<aff id="aff3"><label>3</label><addr-line>CoMPLEX, Mathematical and Physical Sciences, University College London, Physics Building, London, United Kingdom</addr-line></aff>
<aff id="aff4"><label>4</label><addr-line>Centre for Computational Science, Department of Chemistry, University College London, London, United Kingdom</addr-line></aff>
<aff id="aff5"><label>5</label><addr-line>Wolfson Centre for Mathematical Biology, Mathematical Institute, University of Oxford, Andrew Wiles Building, Radcliffe Observatory Quarter, Oxford, United Kingdom</addr-line></aff>
<aff id="aff6"><label>6</label><addr-line>Department of Statistics, University of Oxford, Oxford, United Kingdom</addr-line></aff>
<aff id="aff7"><label>7</label><addr-line>The Wellcome Trust Centre for Neuroimaging, Institute of Neurology, University College London, London, United Kingdom</addr-line></aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple"><name name-style="western"><surname>Bourne</surname><given-names>Philip E.</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/></contrib>
</contrib-group>
<aff id="edit1"><addr-line>University of California San Diego, United States of America</addr-line></aff>
<author-notes>
<corresp id="cor1">* E-mail: <email xlink:type="simple">James.Osborne@cs.ox.ac.uk</email></corresp>
<fn fn-type="conflict"><p>ND, SJD, and SE are paid employees of Microsoft Research (MSR) and JMO, MB, RF, and GJM are partly supported by MSR. This does not alter our adherence to the PLOS policies on sharing data and materials. All other authors have declared that no competing interests exist.</p></fn>
</author-notes>
<pub-date pub-type="collection"><month>3</month><year>2014</year></pub-date>
<pub-date pub-type="epub"><day>27</day><month>3</month><year>2014</year></pub-date>
<volume>10</volume>
<issue>3</issue>
<elocation-id>e1003506</elocation-id><permissions>
<copyright-year>2014</copyright-year>
<copyright-holder>Osborne et al</copyright-holder><license xlink:type="simple"><license-p>This is an open-access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p></license></permissions><funding-group><funding-statement>This work is part of the 2020 Science programme, which is funded through the EPSRC Cross-Disciplinary Interface Programme (grant number EP/I017909/1) and is also supported by Microsoft Research Ltd. The funders had no role in the preparation of the manuscript.</funding-statement></funding-group><counts><page-count count="3"/></counts></article-meta>
</front>
<body><sec id="s1">
<title/>
<p>In order to attempt to understand the complexity inherent in nature, mathematical, statistical and computational techniques are increasingly being employed in the life sciences. In particular, the use and development of software tools is becoming vital for investigating scientific hypotheses, and a wide range of scientists are finding software development playing a more central role in their day-to-day research. In fields such as biology and ecology, there has been a noticeable trend towards the use of quantitative methods for both making sense of ever-increasing amounts of data <xref ref-type="bibr" rid="pcbi.1003506-Kumar1">[1]</xref> and building or selecting models <xref ref-type="bibr" rid="pcbi.1003506-Karr1">[2]</xref>.</p>
<p>As Research Fellows of the “2020 Science” project (<ext-link ext-link-type="uri" xlink:href="http://www.2020science.net" xlink:type="simple">http://www.2020science.net</ext-link>), funded jointly by the EPSRC (Engineering and Physical Sciences Research Council) and Microsoft Research, we have firsthand experience of the challenges associated with carrying out multidisciplinary computation-based science <xref ref-type="bibr" rid="pcbi.1003506-Mirams1">[3]</xref>–<xref ref-type="bibr" rid="pcbi.1003506-Bernabeu1">[5]</xref>. In this paper we offer a jargon-free guide to best practice when developing and using software for scientific research. While many guides to software development exist, they are often aimed at computer scientists <xref ref-type="bibr" rid="pcbi.1003506-Mozilla1">[6]</xref> or concentrate on large open-source projects <xref ref-type="bibr" rid="pcbi.1003506-Prli1">[7]</xref>; the present guide is aimed specifically at the vast majority of scientific researchers: those without formal training in computer science. We present our ten simple rules with the aim of enabling scientists to be more effective in undertaking research and therefore maximise the impact of this research within the scientific community. While these rules are described individually, collectively they form a single vision for how to approach the practical side of computational science.</p>
<p>Our rules are presented in roughly the chronological order in which they should be undertaken, beginning with things that, as a computational scientist, you should do <italic>before</italic> you even think about writing any code. For each rule, guides on getting started, links to relevant tutorials, and further reading are provided in the supplementary material (<xref ref-type="supplementary-material" rid="pcbi.1003506.s001">Text S1</xref>).</p>
</sec><sec id="s2">
<title>Rule 1: Look Before You Leap</title>
<p>One of the key considerations in the development of any method, computational or otherwise, is whether it has previously been approached by someone else. A growing wealth of software toolboxes and libraries exist to tackle many problems. However, assessing the range and quality of what is available can be hard, especially when addressing nontraditional problems. A simple but often-overlooked approach is to conduct a software literature review to ascertain what software is available and has been successfully employed. Software repositories (e.g., GitHub, <ext-link ext-link-type="uri" xlink:href="https://github.com/" xlink:type="simple">https://github.com/</ext-link>, and SourceForge, <ext-link ext-link-type="uri" xlink:href="http://sourceforge.net/" xlink:type="simple">http://sourceforge.net/</ext-link>) are a good place to begin a review. Furthermore, engaging with the network of researchers surrounding your own is invaluable; see <xref ref-type="bibr" rid="pcbi.1003506-DallOlio1">[8]</xref> and <xref ref-type="bibr" rid="pcbi.1003506-Michaut1">[9]</xref> for advice on this. If your coworkers write software in the same language or use particular toolboxes, you may be able to consult their expertise in order to accelerate and provide support for your work.</p>
</sec><sec id="s3">
<title>Rule 2: Develop a Prototype First</title>
<p>Before writing any code, it is imperative to clarify what you are trying to implement: what functionality do you require, and what interfaces do you need? When implementing your latest developments, you should first begin by considering a prototype (i.e., a simplified version of the full system or algorithm) to gain insight and to guide the next steps. This is equally relevant whether building on existing code or starting from scratch. By prototyping new functionality and building code up incrementally, you can check that each element of your code operates as expected (and each incremental development can be tested; see Rule 8). Breaking your problem up into smaller elements like this will also help to provide structure to your code and will make it much easier when you subsequently need to extend it. From a practical point of view, it will usually be easier to prototype mathematical and statistical methods in a “higher-level” language, for example Matlab, R, or Python. Although these languages can be slower to run than optimized code in a “lower-level” language, their straightforward nature, built-in functionality, and available libraries mean that you will spend less time expressing your ideas in code and searching for bugs.</p>
</sec><sec id="s4">
<title>Rule 3: Make Your Code Understandable to Others (and Yourself)</title>
<p>When revising or adapting existing code, the absence of documentation and comments can result in errors and time drains. Such documentation not only makes your code more understandable to others but also to your future self (put simply, the code tells you “how”, the comments tell you “why”). The program code itself can be made more understandable by using meaningful variable names and formatting the code consistently. While commenting and documentation is often neglected when faced with deadlines, developing and maintaining a standardised way of commenting your code will be of great benefit. As well as low-level documentation in the code, you should maintain a record of the “big picture” functionality (i.e., interconnectivity of components and input/output formats). This could take the form of a high-level diagram or description of the system, whether by hand on paper, in verbose code comments, or using standardized approaches such as UML (Unified Modelling Language) (see <xref ref-type="supplementary-material" rid="pcbi.1003506.s001">Text S1</xref>). When you are reviewing your code for documentation you should actively seek ways to break it up into modules. This not only aids structure and readability but also avoids the error-prone and tedious task of debugging and updating two (or more) copies of the same code. As a rule of thumb, if you write the same code twice, it should become a function, subroutine, or method.</p>
</sec><sec id="s5">
<title>Rule 4: Don't Underestimate the Complexity of Your Task</title>
<p>When developing your code, you should keep a record of your work. This could be in the form of a “logbook” file or a paper notebook where you store commonly used commands and other notes; another good option is an online tool such as Evernote (<ext-link ext-link-type="uri" xlink:href="http://evernote.com/" xlink:type="simple">http://evernote.com/</ext-link>). You will often find that you have to choose between spending a long time doing a task by hand and possibly spending longer learning how to automate it. In order to automate the task, you will probably need to learn how to use some basic tools such as text editors or scripting languages. Don't be tempted to think, “This is just a one-off, I'll get on with it;” it won't be. You will find bugs, wish to change a parameter, or need to alter a figure slightly, and you will eventually have to repeat the whole process. Even if you are <italic>certain</italic> that it really is a one-off task, use your “logbook” and keep a record of the list of commands you used, since this is the first step towards automating the task if and when the time comes. However, it is not appropriate to automate everything, and you need to find a good balance, automating opportunistically, taking the expected time and cost into account. A good rule to follow is “the rule of three:” once you have had to do the same thing twice already, automate it.</p>
</sec><sec id="s6">
<title>Rule 5: Understand the Mathematical, Numerical, and Computational Methods Underpinning Your Work</title>
<p>When solving any computational model, you should always ensure that you are using the appropriate numerical method for your problem, and that any constraints and conditions are satisfied. A basic understanding of numerical analysis and, in particular, the concepts of rate of convergence, order, and stability of numerical methods will pay dividends. Care should also be taken to ensure that any assumptions made in the derivation of the underlying mathematical models or methods (e.g., having a sufficiently large number of objects to permit a continuum approximation) hold for all system states of interest. You should consult the relevant literature (and communities) that explains these methods and their advantages and/or disadvantages and not steam ahead without first gaining an understanding of which methods are appropriate. By fully understanding the mathematical and numerical methods being used, you can be confident that your results reflect the true behaviour of the underlying model and are not numerical or computational artefacts.</p>
</sec><sec id="s7">
<title>Rule 6: Use Pictures: They Really Are Worth a Thousand Words</title>
<p>Visualisation and graphics are fundamental to developing, understanding, and testing hypotheses, and are indispensable for verifying and validating computational methods (e.g., revealing correlations, covariation, position, structure, flows, orientation, anomalies, and outliers). So, from day one, spend time developing the visual components of your work. Learn, develop and use visualisation software and tools to ensure that you understand your research outputs and can effectively communicate your findings. You may well need to develop novel visualisations for your work, but keep the basic figures. You needed them to understand your results, model, and implementation, and so will anyone else. You should ensure that your visualisation algorithms can be executed separately so that they can be reused by you and others (for the same and different tasks) and refined for other formats (e.g., publications, presentations, and websites). In reality, all scientists could be better educated in design, so any investment will be rewarded, especially by receiving feedback on visualization from users.</p>
</sec><sec id="s8">
<title>Rule 7: Version Control <italic>Everything</italic></title>
<p>Version control systems (VCSs) offer an easy way to store and back up not only the current version of your code that you are working on but also every previous version of the code (in what's known as a repository). This not only saves you from having to keep multiple copies of the same file but also allows you to “roll back” to an older “working” version of the code if things go wrong. VCSs also allow you to share material between multiple machines, operating systems, and more importantly, users in a simple and robust manner. Two of the most popular VCSs are Subversion (<ext-link ext-link-type="uri" xlink:href="http://subversion.apache.org" xlink:type="simple">http://subversion.apache.org</ext-link>) and Git (<ext-link ext-link-type="uri" xlink:href="http://www.github.com" xlink:type="simple">http://www.github.com</ext-link>), both of which offer many advanced features for managing your code. Cloud storage such as Dropbox (<ext-link ext-link-type="uri" xlink:href="http://www.dropbox.com" xlink:type="simple">http://www.dropbox.com</ext-link>) and SkyDrive (<ext-link ext-link-type="uri" xlink:href="http://www.skydrive.live.com" xlink:type="simple">http://www.skydrive.live.com</ext-link>) offer basic file sharing and backup facilities; however, they don't offer the code management features of true VCSs, so the effort put in to learning a VCS is well worth it (see <xref ref-type="supplementary-material" rid="pcbi.1003506.s001">Text S1</xref> for guides on getting started with VCSs). While the primary use of version control is to manage the development and distribution of code, many other collaborative endeavours can be stored in a version control repository. In particular, using version control tools while preparing publications can save time and effort, especially when dealing with input from multiple authors. For example, contributions to this manuscript were managed using a VCS.</p>
</sec><sec id="s9">
<title>Rule 8: Test <italic>Everything</italic></title>
<p>Any non-trivial computer program will have bugs when first written, often subtle ones that are hard to detect, which may lead to incorrect results. Indeed, in extreme cases this has caused high-profile retractions of papers <xref ref-type="bibr" rid="pcbi.1003506-Chang1">[10]</xref>. Simple tests that the software behaviour matches expectations are essential for ensuring robust results, minimising the presence of bugs, and gaining confidence in your code (for you and others). As a result of the time pressures inherent in academia, often software testing is performed manually in an <italic>ad hoc</italic> manner, to determine whether results “look roughly right” <xref ref-type="bibr" rid="pcbi.1003506-PittFrancis1">[11]</xref>. However, a systematic approach to testing pays dividends. You should learn how to test effectively to avoid the illusion of reliability. For example, compare low-level routines against analytical or prototype solutions (see Rule 2) or experimental data and consider “corner cases” and both branches of “if” statements. Get the computer to run tests for you automatically and alert you to problems, using a suitable testing framework (see <xref ref-type="supplementary-material" rid="pcbi.1003506.s001">Text S1</xref>). Ideally this should be tied to a version control system (see Rule 7) so that tests are run automatically whenever new code is committed to the repository. A useful rule is to turn bugs you fix into new tests to avoid them recurring. Testing gives you the confidence to modify your code without worrying that you are breaking it. Testing can also provide a means for reproducing results of published papers. By setting up a test comparing against published values, you can easily find out when fixing a newly identified bug changes published results.</p>
</sec><sec id="s10">
<title>Rule 9: Share <italic>Everything</italic></title>
<p>Just as it is a common practice to publish your research findings in peer-reviewed journals, if an important part of your research involves developing new software tools and/or collecting new data, you should consider sharing these <xref ref-type="bibr" rid="pcbi.1003506-Prli1">[7]</xref>. Based on our collective experience, we advocate an open approach of sharing source code, data, and results as freely as possible. You should ask yourself, “Why not share?” If the answer is, “I am worried that people would find mistakes in it,” then, as a scientist, this should be the strongest argument in favour of sharing it! The provision of such resources openly provides the means to replicate, reproduce, and examine newly developed methods and techniques. Open sharing not only facilitates the scientific enterprise through replication, validation, and error checking, but also deters fraud and malpractice through transparency. It is our opinion that the many arguments in favour of openly sharing code, data, and results far outweigh any against. In many modern computational analyses, the source code represents a readable, executable methodology of the research in question. Sharing is the key to a sustainable future for computational science, and publishers are beginning to require it, with some considering reviewing the software used to generate results <xref ref-type="bibr" rid="pcbi.1003506-Hayden1">[12]</xref>.</p>
</sec><sec id="s11">
<title>Rule 10: Keep Going!</title>
<p>Our advice arises from our collective experience, and we continue to strive to obey these rules in our work. Scientists have a wide variety of demands on their time (researching, writing papers <xref ref-type="bibr" rid="pcbi.1003506-Bourne1">[13]</xref>, teaching <xref ref-type="bibr" rid="pcbi.1003506-Vicens1">[14]</xref>, applying for grants, administration, etc.) and have to make the most of limited resources. Becoming more technically effective can seem daunting without strategies for making progress and keeping motivated. So, prioritise in a way that suits you and your projects and career aspirations. One strategy is to implement another of these rules each time you start a new project, to build a growing repertoire rather than trying to do everything at once. Take every opportunity to teach and help others to do what you have learnt.</p>
</sec><sec id="s12">
<title>Supporting Information</title>
<supplementary-material id="pcbi.1003506.s001" mimetype="application/pdf" xlink:href="info:doi/10.1371/journal.pcbi.1003506.s001" position="float" xlink:type="simple"><label>Text S1</label><caption>
<p>Supplementary material for paper. Includes guides for getting started with each rule, along with references to useful links and further reading.</p>
<p>(PDF)</p>
</caption></supplementary-material></sec></body>
<back><ref-list>
<title>References</title>
<ref id="pcbi.1003506-Kumar1"><label>1</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Kumar</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Dudley</surname><given-names>J</given-names></name> (<year>2007</year>) <article-title>Bioinformatics software for biologists in the genomics era</article-title>. <source>Bioinformatics</source> <volume>23</volume>: <fpage>1713</fpage>–<lpage>1717</lpage> <comment>doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1093/bioinformatics/btm239" xlink:type="simple">10.1093/bioinformatics/btm239</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1003506-Karr1"><label>2</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Karr</surname><given-names>JR</given-names></name>, <name name-style="western"><surname>Sanghvi</surname><given-names>JC</given-names></name>, <name name-style="western"><surname>Macklin</surname><given-names>DN</given-names></name>, <name name-style="western"><surname>Gutschow</surname><given-names>MV</given-names></name>, <name name-style="western"><surname>Jacobs</surname><given-names>JM</given-names></name>, <etal>et al</etal>. (<year>2012</year>) <article-title>A Whole-Cell Computational Model Predicts Phenotype from Genotype</article-title>. <source>Cell</source> <volume>150</volume>: <fpage>389</fpage>–<lpage>401</lpage> <comment>doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.cell.2012.05.044" xlink:type="simple">10.1016/j.cell.2012.05.044</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1003506-Mirams1"><label>3</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Mirams</surname><given-names>GR</given-names></name>, <name name-style="western"><surname>Arthurs</surname><given-names>CJ</given-names></name>, <name name-style="western"><surname>Bernabeu</surname><given-names>MO</given-names></name>, <name name-style="western"><surname>Bordas</surname><given-names>R</given-names></name>, <name name-style="western"><surname>Cooper</surname><given-names>J</given-names></name>, <etal>et al</etal>. (<year>2013</year>) <article-title>Chaste: an open source C++ library for computational physiology and biology</article-title>. <source>PLOS Comput Biol</source> <volume>9</volume>: <fpage>e1002970</fpage> <comment>doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1002970" xlink:type="simple">10.1371/journal.pcbi.1002970</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1003506-Dalchau1"><label>4</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Dalchau</surname><given-names>N</given-names></name>, <name name-style="western"><surname>Phillips</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Goldstein</surname><given-names>LD</given-names></name>, <name name-style="western"><surname>Howarth</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Cardelli</surname><given-names>L</given-names></name>, <etal>et al</etal>. (<year>2011</year>) <article-title>A peptide filtering relation quantifies MHC class I peptide optimization</article-title>. <source>PLOS Comput Biol</source> <volume>7</volume>: <fpage>e1002144</fpage> <comment>doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1002144" xlink:type="simple">10.1371/journal.pcbi.1002144</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1003506-Bernabeu1"><label>5</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Bernabeu</surname><given-names>MO</given-names></name>, <name name-style="western"><surname>Nash</surname><given-names>RW</given-names></name>, <name name-style="western"><surname>Groen</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Carver</surname><given-names>HB</given-names></name>, <name name-style="western"><surname>Hetherington</surname><given-names>J</given-names></name>, <etal>et al</etal>. (<year>2013</year>) <article-title>Impact of blood rheology on wall shear stress in a model of the middle cerebral artery</article-title>. <source>Interface Focus</source> <volume>3</volume>: <fpage>20120094</fpage> <comment>doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1098/rsfs.2012.0094" xlink:type="simple">10.1098/rsfs.2012.0094</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1003506-Mozilla1"><label>6</label>
<mixed-citation publication-type="other" xlink:type="simple">Mozilla Science Lab (2013) Software Carpentry. Available: <ext-link ext-link-type="uri" xlink:href="http://software-carpentry.org/" xlink:type="simple">http://software-carpentry.org/</ext-link>. Accessed 18 March 2013.</mixed-citation>
</ref>
<ref id="pcbi.1003506-Prli1"><label>7</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Prlić</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Procter</surname><given-names>JB</given-names></name> (<year>2012</year>) <article-title>Ten simple rules for the open development of scientific software</article-title>. <source>PLOS Comput Biol</source> <volume>8</volume>: <fpage>e1002802</fpage> <comment>doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1002802" xlink:type="simple">10.1371/journal.pcbi.1002802</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1003506-DallOlio1"><label>8</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Dall'Olio</surname><given-names>GM</given-names></name>, <name name-style="western"><surname>Marino</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Schubert</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Keys</surname><given-names>KL</given-names></name>, <name name-style="western"><surname>Stefan</surname><given-names>MI</given-names></name>, <etal>et al</etal>. (<year>2011</year>) <article-title>Ten simple rules for getting help from online scientific communities</article-title>. <source>PLOS Comput Biol</source> <volume>7</volume>: <fpage>e1002202</fpage> <comment>doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1002202" xlink:type="simple">10.1371/journal.pcbi.1002202</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1003506-Michaut1"><label>9</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Michaut</surname><given-names>M</given-names></name> (<year>2011</year>) <article-title>Ten simple rules for getting involved in your scientific community</article-title>. <source>PLOS Comput Biol</source> <volume>7</volume>: <fpage>e1002232</fpage> <comment>doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1002232" xlink:type="simple">10.1371/journal.pcbi.1002232</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1003506-Chang1"><label>10</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Chang</surname><given-names>G</given-names></name>, <name name-style="western"><surname>Roth</surname><given-names>CB</given-names></name>, <name name-style="western"><surname>Reyes</surname><given-names>CL</given-names></name>, <name name-style="western"><surname>Pornillos</surname><given-names>O</given-names></name>, <name name-style="western"><surname>Chen</surname><given-names>Y</given-names></name>, <etal>et al</etal>. (<year>2006</year>) <article-title>Retraction</article-title>. <source>Science</source> <volume>314</volume>: <fpage>1875</fpage> <comment>doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1126/science.314.5807.1875b" xlink:type="simple">10.1126/science.314.5807.1875b</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1003506-PittFrancis1"><label>11</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Pitt-Francis</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Bernabeu</surname><given-names>MO</given-names></name>, <name name-style="western"><surname>Cooper</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Garny</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Momtahan</surname><given-names>L</given-names></name>, <etal>et al</etal>. (<year>2008</year>) <article-title>Chaste: Using agile programming techniques to develop computational biology software</article-title>. <source>Phil Trans R Soc A</source> <volume>366</volume>: <fpage>3111</fpage>–<lpage>3136</lpage> <comment>doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1098/rsta.2008.0096" xlink:type="simple">10.1098/rsta.2008.0096</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1003506-Hayden1"><label>12</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Hayden</surname><given-names>EC</given-names></name> (<year>2013</year>) <article-title>Mozilla plan seeks to debug scientific code</article-title>. <source>Nature</source> <volume>501</volume>: <fpage>472</fpage> <comment>doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/501472a" xlink:type="simple">10.1038/501472a</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1003506-Bourne1"><label>13</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Bourne</surname><given-names>PE</given-names></name> (<year>2005</year>) <article-title>Ten simple rules for getting published</article-title>. <source>PLOS Comput Biol</source> <volume>1</volume>: <fpage>e57</fpage> <comment>doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.0010057" xlink:type="simple">10.1371/journal.pcbi.0010057</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1003506-Vicens1"><label>14</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Vicens</surname><given-names>Q</given-names></name>, <name name-style="western"><surname>Bourne</surname><given-names>PE</given-names></name> (<year>2009</year>) <article-title>Ten simple rules to combine teaching and research</article-title>. <source>PLOS Comput Biol</source> <volume>5</volume>: <fpage>e1000358</fpage> <comment>doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1000358" xlink:type="simple">10.1371/journal.pcbi.1000358</ext-link></comment></mixed-citation>
</ref>
</ref-list></back>
</article>