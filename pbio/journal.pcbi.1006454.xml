<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN" "http://jats.nlm.nih.gov/publishing/1.1d3/JATS-journalpublishing1.dtd">
<article article-type="research-article" dtd-version="1.1d3" xml:lang="en" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id>
<journal-title-group>
<journal-title>PLOS Computational Biology</journal-title>
</journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1006454</article-id>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-18-00643</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Research Article</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Database and informatics methods</subject><subj-group><subject>Biological databases</subject><subj-group><subject>Sequence databases</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Database and informatics methods</subject><subj-group><subject>Bioinformatics</subject><subj-group><subject>Sequence analysis</subject><subj-group><subject>Sequence databases</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Database and informatics methods</subject><subj-group><subject>Biological databases</subject><subj-group><subject>Genomic databases</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Computational biology</subject><subj-group><subject>Genome analysis</subject><subj-group><subject>Genomic databases</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Genomics</subject><subj-group><subject>Genome analysis</subject><subj-group><subject>Genomic databases</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Cryptography</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Cryptography</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Database and informatics methods</subject><subj-group><subject>Biological databases</subject><subj-group><subject>Mutation databases</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Mutation</subject><subj-group><subject>Mutation databases</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Cryptography</subject><subj-group><subject>Encryption</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Cryptography</subject><subj-group><subject>Encryption</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Mutation</subject><subj-group><subject>Point mutation</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Synthetic biology</subject><subj-group><subject>Synthetic genomics</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Synthetic biology</subject><subj-group><subject>Synthetic genomics</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Organisms</subject><subj-group><subject>Bacteria</subject><subj-group><subject>Staphylococcus</subject><subj-group><subject>Staphylococcus aureus</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Microbiology</subject><subj-group><subject>Medical microbiology</subject><subj-group><subject>Microbial pathogens</subject><subj-group><subject>Bacterial pathogens</subject><subj-group><subject>Staphylococcus</subject><subj-group><subject>Staphylococcus aureus</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Medicine and health sciences</subject><subj-group><subject>Pathology and laboratory medicine</subject><subj-group><subject>Pathogens</subject><subj-group><subject>Microbial pathogens</subject><subj-group><subject>Bacterial pathogens</subject><subj-group><subject>Staphylococcus</subject><subj-group><subject>Staphylococcus aureus</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>SIG-DB: Leveraging homomorphic encryption to securely interrogate privately held genomic databases</article-title>
<alt-title alt-title-type="running-head">Searching private genomic databases with homomorphic encryption</alt-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-0145-9564</contrib-id>
<name name-style="western">
<surname>Titus</surname>
<given-names>Alexander J.</given-names>
</name>
<role content-type="http://credit.casrai.org/">Data curation</role>
<role content-type="http://credit.casrai.org/">Investigation</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Validation</role>
<role content-type="http://credit.casrai.org/">Visualization</role>
<role content-type="http://credit.casrai.org/">Writing – original draft</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Flower</surname>
<given-names>Audrey</given-names>
</name>
<role content-type="http://credit.casrai.org/">Formal analysis</role>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Hagerty</surname>
<given-names>Patrick</given-names>
</name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<xref ref-type="aff" rid="aff004"><sup>4</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Gamble</surname>
<given-names>Paul</given-names>
</name>
<role content-type="http://credit.casrai.org/">Validation</role>
<role content-type="http://credit.casrai.org/">Visualization</role>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Lewis</surname>
<given-names>Charlie</given-names>
</name>
<role content-type="http://credit.casrai.org/">Validation</role>
<role content-type="http://credit.casrai.org/">Visualization</role>
<xref ref-type="aff" rid="aff005"><sup>5</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Stavish</surname>
<given-names>Todd</given-names>
</name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>O’Connell</surname>
<given-names>Kevin P.</given-names>
</name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Supervision</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Shipley</surname>
<given-names>Greg</given-names>
</name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<xref ref-type="aff" rid="aff005"><sup>5</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Rogers</surname>
<given-names>Stephanie M.</given-names>
</name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Funding acquisition</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Project administration</role>
<role content-type="http://credit.casrai.org/">Supervision</role>
<role content-type="http://credit.casrai.org/">Writing – original draft</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
</contrib>
</contrib-group>
<aff id="aff001"><label>1</label> <addr-line>B.Next, In-Q-Tel, Arlington, VA, United States of America</addr-line></aff>
<aff id="aff002"><label>2</label> <addr-line>Quantitative Biomedical Sciences, Dartmouth College, Hanover, NH, United States of America</addr-line></aff>
<aff id="aff003"><label>3</label> <addr-line>Lab41, In-Q-Tel, Arlington, VA, United States of America</addr-line></aff>
<aff id="aff004"><label>4</label> <addr-line>CosmiQ Works, In-Q-Tel, Arlington, VA, United States of America</addr-line></aff>
<aff id="aff005"><label>5</label> <addr-line>Cyber Reboot, In-Q-Tel, Arlington, VA, United States of America</addr-line></aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>Markel</surname>
<given-names>Scott</given-names>
</name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1"><addr-line>Dassault Systemes BIOVIA, UNITED STATES</addr-line></aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>All authors certify there are no competing financial interests related to this work. All authors are paid employees of the non-profit firm, In-Q-Tel.</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">bnext@iqt.org</email></corresp>
</author-notes>
<pub-date pub-type="epub">
<day>4</day>
<month>9</month>
<year>2018</year>
</pub-date>
<pub-date pub-type="collection">
<month>9</month>
<year>2018</year>
</pub-date>
<volume>14</volume>
<issue>9</issue>
<elocation-id>e1006454</elocation-id>
<history>
<date date-type="received">
<day>24</day>
<month>4</month>
<year>2018</year>
</date>
<date date-type="accepted">
<day>22</day>
<month>8</month>
<year>2018</year>
</date>
</history>
<permissions>
<copyright-year>2018</copyright-year>
<copyright-holder>Titus et al</copyright-holder>
<license xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">
<license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pcbi.1006454"/>
<abstract>
<p>Genomic data are becoming increasingly valuable as we develop methods to utilize the information at scale and gain a greater understanding of how genetic information relates to biological function. Advances in synthetic biology and the decreased cost of sequencing are increasing the amount of privately held genomic data. As the quantity and value of private genomic data grows, so does the incentive to acquire and protect such data, which creates a need to store and process these data securely. We present an algorithm for the Secure Interrogation of Genomic DataBases (SIG-DB). The SIG-DB algorithm enables databases of genomic sequences to be searched with an encrypted query sequence without revealing the query sequence to the Database Owner or any of the database sequences to the Querier. SIG-DB is the first application of its kind to take advantage of locality-sensitive hashing and homomorphic encryption to allow generalized sequence-to-sequence comparisons of genomic data.</p>
</abstract>
<abstract abstract-type="summary">
<title>Author summary</title>
<p>Genomic data are becoming increasingly valuable as we develop methods to utilize the information at scale and gain a greater understanding of how genetic information relates to biological function. Advances in synthetic biology and the decreased cost of sequencing are increasing the amount of privately held genomic data. As the quantity and value of private genomic data grows, so does the incentive to acquire and protect such data, which creates a need to store and process these data securely. We present an algorithm for the Secure Interrogation of Genomic DataBases (SIG-DB). The SIG-DB algorithm enables databases of genomic sequences to be searched with an encrypted query sequence without revealing the query sequence to the Database Owner or any of the database sequences to the Querier. SIG-DB is the first application of its kind to take advantage of locality-sensitive hashing and homomorphic encryption to allow generalized sequence-to-sequence comparisons of genomic data.</p>
</abstract>
<funding-group>
<funding-statement>The authors received no specific funding for this work</funding-statement>
</funding-group>
<counts>
<fig-count count="3"/>
<table-count count="4"/>
<page-count count="16"/>
</counts>
<custom-meta-group>
<custom-meta>
<meta-name>PLOS Publication Stage</meta-name>
<meta-value>vor-update-to-uncorrected-proof</meta-value>
</custom-meta>
<custom-meta>
<meta-name>Publication Update</meta-name>
<meta-value>2018-09-14</meta-value>
</custom-meta>
<custom-meta id="data-availability">
<meta-name>Data Availability</meta-name>
<meta-value>We accessed and downloaded available bacterial genome data in FASTA format from the National Center for Biotechnology Information (NCBI) Assembly RefSeq(14) database (DB), resulting in a total data set of 75,958 samples. The data set contained 244 gigabytes of complete genome, chromosome, scaffold, and contig sequences for all available bacterial species. For algorithm testing, we used E. coli (taxid:562) genomes (n = 7,078) and S. aureus (taxid:1280) genomes (n = 50 genomes) as well as the full data set of all available species genomes (n = 75,958). All code and documentation is available on the B.Next GitHub page, located at <ext-link ext-link-type="uri" xlink:href="https://github.com/BNext-IQT/GEMstone" xlink:type="simple">https://github.com/BNext-IQT/GEMstone</ext-link>. All sequence data for E. coli (taxid:562) and S. aureus (taxid:1280) were obtained from <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/assembly" xlink:type="simple">https://www.ncbi.nlm.nih.gov/assembly</ext-link>. We accessed and downloaded all sequence data used in this study on October 1st, 2017.</meta-value>
</custom-meta>
</custom-meta-group>
</article-meta>
</front>
<body>
<disp-quote>
<p>This is a <italic>PLOS Computational Biology</italic> Methods paper.</p>
</disp-quote>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<p>Genomic information is becoming valuable to a variety of applications, including healthcare and industry. Thus, biological data privacy and security is becoming increasingly important, especially as our understanding of how genetic information relates to biological function continues to grow. The genomic sequence of an individual not only provides information of identity, but can reveal family lineage, physical traits, and disease susceptibility. However, there is inherent tension between the Health Insurance Portability and Accountability Act (HIPAA) requirements for patient data privacy, and scientific and/or public health utility of genomic data. For example, researchers who want to study the genetics of disease may wish to compare patient genome databases in a way that allows data mining while complying with HIPAA obligations.</p>
<p>Microbial genomic data is also increasing in quantity and value as microbes are being utilized for industrial, agricultural, and medical purposes. Advances in synthetic biology are creating valuable opportunities in healthcare and industry, where the market in 2016 was $3.9B, and is projected to grow to $11.4B by 2021[<xref ref-type="bibr" rid="pcbi.1006454.ref001">1</xref>]. In particular, synthetic biology is transforming industrial practices, where microorganisms are exploited to produce commercial products, resulting in customized microbes and unique genomic data. With that comes fierce corporate competition, and the genomic information becomes proprietary. Increasingly, the impact of the human microbiome on health is also an active area of research[<xref ref-type="bibr" rid="pcbi.1006454.ref002">2</xref>,<xref ref-type="bibr" rid="pcbi.1006454.ref003">3</xref>]. As we expand our understanding of the microbiome, our personal microbial fingerprint may become part of the data stored in electronic health records[<xref ref-type="bibr" rid="pcbi.1006454.ref004">4</xref>]. Therefore, we may arrive at a consensus that a person’s microbiome is as important to protect as a person’s genome. Additionally, genomic information has become an important component of the identification, characterization, and attribution of an unknown microbiological sample, such as an outbreak of a novel infectious agent. To execute the appropriate bioinformatic analyses, known genomic data is required to compare against the sample’s genomic data. However, the growing amount of privately held and proprietary genomic information, and the lack of secure computation techniques for sequence-to-sequence comparisons on that data, could hinder the timely genomic analysis of the novel microorganism.</p>
<p>Data in storage can be protected by hardware- or software-based encryption, but sensitive data is vulnerable during processing. Therefore, there is a need for methods, including search and comparison methods, that permit the processing of data while preserving security. Several approaches have been published that demonstrate software-based, secure, multi-party computation for biomedical applications, including Yao’s protocol[<xref ref-type="bibr" rid="pcbi.1006454.ref005">5</xref>], oblivious transfer[<xref ref-type="bibr" rid="pcbi.1006454.ref006">6</xref>], and many others[<xref ref-type="bibr" rid="pcbi.1006454.ref007">7</xref>]. Because human genomes are highly conserved, however, much of the existing work is on methods for assessing genomic variation at the SNP[<xref ref-type="bibr" rid="pcbi.1006454.ref008">8</xref>,<xref ref-type="bibr" rid="pcbi.1006454.ref009">9</xref>] or causal variant[<xref ref-type="bibr" rid="pcbi.1006454.ref005">5</xref>] level.</p>
<p>Homomorphic Encryption (HE)[<xref ref-type="bibr" rid="pcbi.1006454.ref008">8</xref>–<xref ref-type="bibr" rid="pcbi.1006454.ref010">10</xref>] is a class of methods with properties[<xref ref-type="bibr" rid="pcbi.1006454.ref011">11</xref>,<xref ref-type="bibr" rid="pcbi.1006454.ref012">12</xref>] that make sequence-to-sequence comparisons, such as searching polynucleotide sequence databases, amenable to encryption. HE differs from other encryption methods by allowing operations directly on encrypted data without access to a private key. The result remains encrypted and can be revealed to the owner at a later point with their private key. There are two classes of HE: fully HE and partial HE. Fully HE systems[<xref ref-type="bibr" rid="pcbi.1006454.ref011">11</xref>] allow an arbitrary set of operations (e.g., addition, subtraction, division, and multiplication) to be performed on ciphertext, but currently come at an operationally prohibitive computational expense for most applications. Partial HE systems allow a much smaller subset of operations on ciphertext, with each encryption system developed to support a specific set of operations. The Paillier homomorphic encryption system (PHE)[<xref ref-type="bibr" rid="pcbi.1006454.ref012">12</xref>] is an additive (+) HE cryptosystem. PHE algorithms can be orders of magnitude faster than fully HE cryptosystems[<xref ref-type="bibr" rid="pcbi.1006454.ref011">11</xref>,<xref ref-type="bibr" rid="pcbi.1006454.ref013">13</xref>], and thus are promising for immediate operational applications. To date, there is no published work we are aware of that leverages any version of HE for polynucleotide sequence-to-sequence comparisons.</p>
<p>We have developed an algorithm, Secure Interrogation of Genomic DataBases (SIG-DB), which is designed to enable a two-party exchange. In this exchange, a Querier encrypts a genetic sequence of interest and passes it to a Database Owner. The Database Owner then compares the encrypted sequence to each item in the database and calculates an encrypted similarity score. After comparisons, the encrypted similarity scores are passed back to the Querier, decrypted with the Querier’s private key, and interpreted. In this exchange, the query and each element in the database are kept secret while allowing sequence-to-sequence comparisons. We demonstrate the SIG-DB algorithm’s performance on microbial genomic data obtained from the National Center for Biotechnology Information (NCBI) Assembly database[<xref ref-type="bibr" rid="pcbi.1006454.ref014">14</xref>], but see broader applications across any sequence-to-sequence comparison.</p>
</sec>
<sec id="sec002" sec-type="results">
<title>Results</title>
<p>The SIG-DB algorithm is intended for use between two parties: a Querier and a Database Owner who is willing-but-unable to share his genomic data without having a way to protect it. For example, these parties may be businesses wanting to keep their proprietary information protected while collaborating, hospitals collaborating on research while considering HIPAA requirements, or an investigator and a genomic data company. This protocol requires both the Querier and the Database Owner to be willing participants in the transaction.</p>
<p>There are two major components of the SIG-DB protocol. First, the genomic sequences are converted to a storage efficient data structure. To do so, we chose to use k-mers and locality-sensitive hashing (LSH). The use of k-mers is an established method of breaking up genetic sequences without appreciative data loss; the size of the k-mer can be optimized for a specific application. LSHs are also space efficient data structures that store information as either a 1 or 0 and, unlike Bloom filters, force the data to a preset vector size that is smaller than the original data dimensions. For example, the sequence ‘TATCAGA’ would represent a 1 in a separate location within the LSH than ‘ATCAGAT’ (see <xref ref-type="fig" rid="pcbi.1006454.g001">Fig 1</xref>). The size of the LSH is a trade-off between computational runtime and the likelihood of a false match (i.e. hash collision) in the LSH. For our application, the LSH length is set to be five times the length of the longest sequence of all the sequences being compared. Thus, the probability of a hash collision is 18% [<xref ref-type="bibr" rid="pcbi.1006454.ref015">15</xref>]. This probability can be changed based on user requirements, and specifically, it can be lowered by increasing the size of the LSH (with an increase in runtime), or by using multiple hash functions in conjunction to build a Bloom filter rather than an LSH[<xref ref-type="bibr" rid="pcbi.1006454.ref016">16</xref>].</p>
<fig id="pcbi.1006454.g001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006454.g001</object-id>
<label>Fig 1</label>
<caption>
<title>Example of a locality sensitive hash (LSH), derived from a DNA sequence.</title>
<p>In SIG-DB, the k-mers are created using a sliding window of 1 character, as illustrated, with a sequence of length n resulting in ‘n-k’ k-mers.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006454.g001" xlink:type="simple"/>
</fig>
<p>Second, the query LSH data are encrypted, compared to database entries, and resulting scores decrypted. SIG-DB compares encrypted queries against unencrypted genomic sequences in a database while only revealing minimal information about the database to the Querier (i.e. number of entries in the database and potentially the degree of diversity within the database), and no information about the query to the Database owner. This is achieved by sending the encrypted query to the Database Owner where computation can be carried out behind the database firewall. For each query-database entry LSH comparison, the magnitude of the database entry LSH and an encrypted intersection score are returned to the Querier. From this information, the Querier can calculate similarity scores as the intersection over union (IoU), the intersection over magnitude of query LSH (IoQ), and the intersection over magnitude of database entry LSH (IoD). The full workflow can be seen in <xref ref-type="fig" rid="pcbi.1006454.g002">Fig 2</xref>, outlining the steps in both encrypted and unencrypted space.</p>
<fig id="pcbi.1006454.g002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006454.g002</object-id>
<label>Fig 2</label>
<caption>
<title>SIG-DB protocol for (1) hashing sequence into locality sensitive hash (LSH), (2) encrypting and passing LSH, (3) hashing database elements into LSHs, (4) comparing encrypted query LSH to unencrypted database LSHs, (5) passing scores and decrypting, and (6) calculating IoU, IoD, and IoQ scores.</title>
<p>Unencrypted space = blue boxes and encrypted space = green boxes.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006454.g002" xlink:type="simple"/>
</fig>
<sec id="sec003">
<title>Proportion of sequence mutation &amp; K-mer size</title>
<p>We conducted tuning experiments to identify the effect of k-mer size on algorithm performance and tested the extent to which SIG-DB is robust to sequence mutations, using a dataset of 50 <italic>Escherichia coli</italic> genomes and 50 <italic>Staphylococcus aureus</italic> genomes (from which the query sequences were selected then compared against). The k-mer length was tested at k = {8, 16, and 32}. Uniformly distributed, random mutations were introduced to query sequences <italic>in silico</italic> in 5% increments, ranging from 0%-100%. Using a k-mer length of 8, the SIG-DB algorithm correctly returned the sequence of interest as the highest IoU score for sequences with mutation rates from 0–45% for <italic>E</italic>. <italic>coli</italic> and 0–35% for <italic>S</italic>. <italic>aureus</italic> (<xref ref-type="table" rid="pcbi.1006454.t001">Table 1</xref>). The mutation rate tolerance decreases as the k-mer size increases (<xref ref-type="fig" rid="pcbi.1006454.g003">Fig 3</xref>). We found that the method correctly identified the presence of similar sequences in the subject database to a greater level of divergence when k was set to 8. Therefore, we set k = 8 for all subsequent work.</p>
<fig id="pcbi.1006454.g003" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006454.g003</object-id>
<label>Fig 3</label>
<caption>
<title>Intersection over union (IoU) scores for k-mer = {8, 16, 32} with random query sequence mutation rates from 0–100%.</title>
<p>K-mer = 8 showed best performance, with correct identification of sequence of interest up to mutation rates of 45%. The red circles indicate the largest mutation rate for each k-mer size that returned the correct result as the highest IoU value. The horizontal red line represents IoU = 0.1.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006454.g003" xlink:type="simple"/>
</fig>
<table-wrap id="pcbi.1006454.t001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006454.t001</object-id>
<label>Table 1</label> <caption><title>SIG-DB algorithm performance based on proportion of sequence randomly mutated in <italic>E</italic>. <italic>coli</italic> and <italic>S</italic>. <italic>aureus</italic> (DB = 50 seqs, LSH = 100k bases, Q = 20K bases, E = 20K bases).</title></caption>
<alternatives>
<graphic id="pcbi.1006454.t001g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006454.t001" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left" rowspan="2">Species</th>
<th align="left" rowspan="2">K-mer size</th>
<th align="left" rowspan="2">Percent mutation</th>
<th align="left"/>
<th align="left" colspan="2">Best</th>
<th align="left"/>
</tr>
<tr>
<th align="left" style="background-color:#F2F2F2">IoU</th>
<th align="left" colspan="2" style="background-color:#F2F2F2">IoQ</th>
<th align="left" style="background-color:#F2F2F2">IoD</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">0</td>
<td align="left">1.00</td>
<td align="left" colspan="2">1.00</td>
<td align="left">1.00</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">10</td>
<td align="left">0.35</td>
<td align="left" colspan="2">0.49</td>
<td align="left">0.56</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">20</td>
<td align="left">0.18</td>
<td align="left" colspan="2">0.28</td>
<td align="left">0.33</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">30</td>
<td align="left">0.11</td>
<td align="left" colspan="2">0.19</td>
<td align="left">0.22</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">40</td>
<td align="left">0.09</td>
<td align="left" colspan="2">0.16</td>
<td align="left">0.18</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">50</td>
<td align="left">0.08</td>
<td align="left" colspan="2">0.15</td>
<td align="left">0.14</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">16</td>
<td align="left">0</td>
<td align="left">1.00</td>
<td align="left" colspan="2">1.00</td>
<td align="left">1.00</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">16</td>
<td align="left">10</td>
<td align="left">0.19</td>
<td align="left" colspan="2">0.32</td>
<td align="left">0.32</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">16</td>
<td align="left">20</td>
<td align="left">0.11</td>
<td align="left" colspan="2">0.20</td>
<td align="left">0.20</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">16</td>
<td align="left">30</td>
<td align="left">0.10</td>
<td align="left" colspan="2">0.19</td>
<td align="left">0.19</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">32</td>
<td align="left">0</td>
<td align="left">1.00</td>
<td align="left" colspan="2">1.00</td>
<td align="left">1.00</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">32</td>
<td align="left">10</td>
<td align="left">0.11</td>
<td align="left" colspan="2">0.20</td>
<td align="left">0.20</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">32</td>
<td align="left">20</td>
<td align="left">0.10</td>
<td align="left" colspan="2">0.19</td>
<td align="left">0.19</td>
</tr>
<tr>
<td align="left"><italic>S</italic>. <italic>aureus</italic></td>
<td align="left">8</td>
<td align="left">0</td>
<td align="left">1.00</td>
<td align="left" colspan="2">1.00</td>
<td align="left">1.00</td>
</tr>
<tr>
<td align="left"><italic>S</italic>. <italic>aureus</italic></td>
<td align="left">8</td>
<td align="left">10</td>
<td align="left">0.35</td>
<td align="left" colspan="2">0.46</td>
<td align="left">0.58</td>
</tr>
<tr>
<td align="left"><italic>S</italic>. <italic>aureus</italic></td>
<td align="left">8</td>
<td align="left">20</td>
<td align="left">0.18</td>
<td align="left" colspan="2">0.26</td>
<td align="left">0.35</td>
</tr>
<tr>
<td align="left"><italic>S</italic>. <italic>aureus</italic></td>
<td align="left">8</td>
<td align="left">30</td>
<td align="left">0.11</td>
<td align="left" colspan="2">0.17</td>
<td align="left">0.23</td>
</tr>
<tr>
<td align="left"><italic>S</italic>. <italic>aureus</italic></td>
<td align="left">8</td>
<td align="left">40</td>
<td align="left">0.08</td>
<td align="left" colspan="2">0.15</td>
<td align="left">0.16</td>
</tr>
<tr>
<td align="left"><italic>S</italic>. <italic>aureus</italic></td>
<td align="left">16</td>
<td align="left">0</td>
<td align="left">1.00</td>
<td align="left" colspan="2">1.00</td>
<td align="left">1.00</td>
</tr>
<tr>
<td align="left"><italic>S</italic>. <italic>aureus</italic></td>
<td align="left">16</td>
<td align="left">10</td>
<td align="left">0.18</td>
<td align="left" colspan="2">0.31</td>
<td align="left">0.31</td>
</tr>
<tr>
<td align="left"><italic>S</italic>. <italic>aureus</italic></td>
<td align="left">16</td>
<td align="left">20</td>
<td align="left">0.11</td>
<td align="left" colspan="2">0.21</td>
<td align="left">0.21</td>
</tr>
<tr>
<td align="left"><italic>S</italic>. <italic>aureus</italic></td>
<td align="left">16</td>
<td align="left">30</td>
<td align="left">0.10</td>
<td align="left" colspan="2">0.19</td>
<td align="left">0.19</td>
</tr>
<tr>
<td align="left"><italic>S</italic>. <italic>aureus</italic></td>
<td align="left">50</td>
<td align="left">0</td>
<td align="left">1.00</td>
<td align="left" colspan="2">1.00</td>
<td align="left">1.00</td>
</tr>
<tr>
<td align="left"><italic>S</italic>. <italic>aureus</italic></td>
<td align="left">50</td>
<td align="left">10</td>
<td align="left">0.10</td>
<td align="left" colspan="2">0.19</td>
<td align="left">0.19</td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
<p>The similarity scores are drastically reduced with minor point mutations because a single mutation affects every <italic>k</italic>-mer associated with it. For example, the sequence TCGATCGATCGATCGA with a point mutation at the highlighted “A” represents a mutation in the 8-mers TCGATCGA, CGATCGAT, GATCGATC, ATCGATCG, TCGATCGA, CGATCGAT, GATCGATC, ATCGATCG. For this reason, shorter <italic>k</italic>-mers are more robust to data degradation and thus lead to better SIG-DB algorithm performance. However, decreasing k-mer size comes at a computational cost; therefore, algorithm performance is a trade-off between k-mer size and run-time.</p>
</sec>
<sec id="sec004">
<title>Location of sequence mutation</title>
<p>The previous mutation tests assumed a random distribution of mutations throughout the genomic sequence, representing single base pair discrepancies between a query and a database sequence. To test the effect of mutations localized to one-half of a sequence with the other half a perfect match to an element of the database (i.e. sequences that overlap by 50%), we assessed the performance of the algorithm with 0–50% mutation.</p>
<p>Using a data set of 50 <italic>E</italic>. <italic>coli</italic> genomes, an <italic>E</italic>. <italic>coli</italic> query sequence, and a <italic>k</italic>-mer length of <italic>k = 8</italic>, the SIG-DB algorithm correctly returned the query sequence of interest as the highest IoU score for sequences with mutation rates from 0% (IoU = 1.0) to 45% (IoU = 0.41). A 0% mutation represents two identical sequences, and a 50% mutation represents two sequences that overlap and match by exactly 50% (<xref ref-type="table" rid="pcbi.1006454.t002">Table 2</xref>). The similarity scores had a less dramatic decline when mutations are localized to a section of the sequence, compared to the sharp decline that occurred when the mutations are dispersed throughout the entire sequence. This observation is expected, because fewer k-mers are affected by the mutations when they are localized to one half of the sequence (Supplemental <xref ref-type="supplementary-material" rid="pcbi.1006454.s002">S1 Fig</xref>).</p>
<table-wrap id="pcbi.1006454.t002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006454.t002</object-id>
<label>Table 2</label> <caption><title>SIG-DB algorithm performance based on mutations localized to one half of total sequence (DB = 50 seqs, LSH = 100k bases, Q = 20K bases, E = 20K bases).</title></caption>
<alternatives>
<graphic id="pcbi.1006454.t002g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006454.t002" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left" rowspan="2">Species</th>
<th align="left" rowspan="2">K-mer size</th>
<th align="left" rowspan="2">Percent mutation</th>
<th align="left"/>
<th align="left" colspan="2">Best</th>
<th align="left"/>
</tr>
<tr>
<th align="left" style="background-color:#F2F2F2">IoU</th>
<th align="left" colspan="2" style="background-color:#F2F2F2">IoQ</th>
<th align="left" style="background-color:#F2F2F2">IoD</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">5</td>
<td align="left">0.73</td>
<td align="left" colspan="2">0.82</td>
<td align="left">0.87</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">10</td>
<td align="left">0.60</td>
<td align="left" colspan="2">0.71</td>
<td align="left">0.78</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">15</td>
<td align="left">0.52</td>
<td align="left" colspan="2">0.64</td>
<td align="left">0.72</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">20</td>
<td align="left">0.46</td>
<td align="left" colspan="2">0.59</td>
<td align="left">0.67</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">25</td>
<td align="left">0.44</td>
<td align="left" colspan="2">0.57</td>
<td align="left">0.65</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">30</td>
<td align="left">0.42</td>
<td align="left" colspan="2">0.56</td>
<td align="left">0.64</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">35</td>
<td align="left">0.41</td>
<td align="left" colspan="2">0.55</td>
<td align="left">0.62</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">40</td>
<td align="left">0.41</td>
<td align="left" colspan="2">0.55</td>
<td align="left">0.61</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">45</td>
<td align="left">0.41</td>
<td align="left" colspan="2">0.56</td>
<td align="left">0.61</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">8</td>
<td align="left">50</td>
<td align="left">0.42</td>
<td align="left" colspan="2">0.57</td>
<td align="left">0.61</td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
</sec>
<sec id="sec005">
<title>Query runtime relative to DB size</title>
<p>To ensure a secure query does not reveal information about the query through execution time, the total run-time must scale linearly with the size of the database being searched. This prevents the point at which the algorithm stops from revealing which database entry met the appropriate search criteria. To test the linear scalability of the SIG-DB algorithm, queries were executed against databases containing an increasing number of sequences for four different query sizes. Sequences of length 100, 1000, 10000, and 20000 base pairs were queried against databases with 7, 70, 700, 7078, and 75958 entries, respectively, and demonstrated a linear relationship between query execution time and database size (<xref ref-type="table" rid="pcbi.1006454.t003">Table 3</xref>).</p>
<table-wrap id="pcbi.1006454.t003" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006454.t003</object-id>
<label>Table 3</label> <caption><title>SIG-DB runtime for increasing database sizes (Mut = 0, IoU = 1.0, K = 8).</title></caption>
<alternatives>
<graphic id="pcbi.1006454.t003g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006454.t003" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left">Species</th>
<th align="left">Database size</th>
<th align="left">LSH Size</th>
<th align="left" colspan="2">Query size &amp; DB element size</th>
<th align="left">Run time<break/>(min)</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">7</td>
<td align="left">500</td>
<td align="left">100</td>
<td align="left">100</td>
<td align="left">0.03</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">70</td>
<td align="left">500</td>
<td align="left">100</td>
<td align="left">100</td>
<td align="left">0.03</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">700</td>
<td align="left">500</td>
<td align="left">100</td>
<td align="left">100</td>
<td align="left">0.07</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">7,078</td>
<td align="left">500</td>
<td align="left">100</td>
<td align="left">100</td>
<td align="left">0.45</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">75,958</td>
<td align="left">500</td>
<td align="left">100</td>
<td align="left">100</td>
<td align="left">4.58</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">7</td>
<td align="left">5,000</td>
<td align="left">1,000</td>
<td align="left">1,000</td>
<td align="left">0.09</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">70</td>
<td align="left">5,000</td>
<td align="left">1,000</td>
<td align="left">1,000</td>
<td align="left">0.10</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">700</td>
<td align="left">5,000</td>
<td align="left">1,000</td>
<td align="left">1,000</td>
<td align="left">0.65</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">7,078</td>
<td align="left">5,000</td>
<td align="left">1,000</td>
<td align="left">1,000</td>
<td align="left">5.44</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">75,958</td>
<td align="left">5,000</td>
<td align="left">1,000</td>
<td align="left">1,000</td>
<td align="left">101.64</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">7</td>
<td align="left">50,000</td>
<td align="left">10,000</td>
<td align="left">10,000</td>
<td align="left">0.43</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">70</td>
<td align="left">50,000</td>
<td align="left">10,000</td>
<td align="left">10,000</td>
<td align="left">1.25</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">700</td>
<td align="left">50,000</td>
<td align="left">10,000</td>
<td align="left">10,000</td>
<td align="left">8.35</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">7,078</td>
<td align="left">50,000</td>
<td align="left">10,000</td>
<td align="left">10,000</td>
<td align="left">86.85</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">75,958</td>
<td align="left">50,000</td>
<td align="left">10,000</td>
<td align="left">10,000</td>
<td align="left">993.82</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">7</td>
<td align="left">100,000</td>
<td align="left">20,000</td>
<td align="left">20,000</td>
<td align="left">0.85</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">70</td>
<td align="left">100,000</td>
<td align="left">20,000</td>
<td align="left">20,000</td>
<td align="left">2.69</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">700</td>
<td align="left">100,000</td>
<td align="left">20,000</td>
<td align="left">20,000</td>
<td align="left">18.22</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">7,078</td>
<td align="left">100,000</td>
<td align="left">20,000</td>
<td align="left">20,000</td>
<td align="left">185.1</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">75,958</td>
<td align="left">100,000</td>
<td align="left">20,000</td>
<td align="left">20,000</td>
<td align="left">2215.25</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t003fn001"><p>7,078 = Total number of <italic>E</italic>. <italic>coli</italic> genomic samples</p></fn>
<fn id="t003fn002"><p>75,958 = Total number of all available genomic samples</p></fn>
</table-wrap-foot>
</table-wrap>
</sec>
<sec id="sec006">
<title>Length of query relative to DB entries</title>
<p>Biological sequences inherently are quite variable in size, with genomes ranging from thousands (viruses) to billions (plants and mammals) of base pairs, depending on the species. Therefore, it is likely the query sequence will not be the same size as the database entries, and that the database entries will vary in length. We included 3 similarity metrics (IoU, IoQ, and IoD) in the output to account for sequence size variation. To test the robustness of SIG-DB and the similarity metrics for queries and database entries of varying relative lengths, using a data set of 50 <italic>E</italic>. <italic>coli</italic> genomes and an <italic>E</italic>. <italic>coli</italic> query sequence, we compared performance on sequences that ranged in relative length from 1:1 to 4:1/1:4 (Q:DB, respectively). The sequence lengths tested varied from 5,000bp to 20,000bp, which represent the typical size ranges for viral genomes and bacterial genes. The k-mer size was held constant at k = 8, and no mutations were introduced. For all ratios tested, SIG-DB returned the correct sequence as the highest IoU (<xref ref-type="table" rid="pcbi.1006454.t004">Table 4</xref>). When the database sequences were held constant at 20,000bp and the query sequence reduced to smaller sizes, the IoQ = 1.0 for every test. When flipped, the IoD = 1.0 for every test. This performed as expected, because for IoQ (or IoD), only the length of the query (or database entry, respectively) is factored into the similarity score calculation. Therefore, the scoring would be a perfect match for all ratios tested (Supplemental <xref ref-type="supplementary-material" rid="pcbi.1006454.s003">S2 Fig</xref>).</p>
<table-wrap id="pcbi.1006454.t004" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006454.t004</object-id>
<label>Table 4</label> <caption><title>SIG-DB algorithm performance based on relative sizes of query and database elements (K = 8, DB = 50 seqs, LSH = 100k bases, Mut = 0).</title></caption>
<alternatives>
<graphic id="pcbi.1006454.t004g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006454.t004" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left" rowspan="2">Species</th>
<th align="left" colspan="2" rowspan="2">Query size &amp; DB element size</th>
<th align="left"/>
<th align="left" colspan="2">Best</th>
<th align="left"/>
</tr>
<tr>
<th align="left" style="background-color:#F2F2F2">IoU</th>
<th align="left" colspan="2" style="background-color:#F2F2F2">IoQ</th>
<th align="left" style="background-color:#F2F2F2">IoD</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">20,000</td>
<td align="left">20,000</td>
<td align="left">1.0</td>
<td align="left" colspan="2">1.0</td>
<td align="left">1.0</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">15,000</td>
<td align="left">20,000</td>
<td align="left">0.80</td>
<td align="left" colspan="2">1.0</td>
<td align="left">0.80</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">10,000</td>
<td align="left">20,000</td>
<td align="left">0.58</td>
<td align="left" colspan="2">1.0</td>
<td align="left">0.58</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">5,000</td>
<td align="left">20,000</td>
<td align="left">0.31</td>
<td align="left" colspan="2">1.0</td>
<td align="left">0.31</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">20,000</td>
<td align="left">15,000</td>
<td align="left">0.80</td>
<td align="left" colspan="2">0.80</td>
<td align="left">1.0</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">20,000</td>
<td align="left">10,000</td>
<td align="left">0.58</td>
<td align="left" colspan="2">0.58</td>
<td align="left">1.0</td>
</tr>
<tr>
<td align="left"><italic>E</italic>. <italic>coli</italic></td>
<td align="left">20,000</td>
<td align="left">5,000</td>
<td align="left">0.31</td>
<td align="left" colspan="2">0.31</td>
<td align="left">1.0</td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
</sec>
<sec id="sec007">
<title>Correctness</title>
<p>To test the robustness of the algorithm to return the correct results, we conceptualized the algorithm as a classifier and tested the classification accuracy by setting a similarity score threshold, above which the algorithm can be thought of as reporting that a particular database entry was similar to the query. We used Average Nucleotide Identity (ANI), a measure of pairwise bidirectional nucleotide similarity, as the ground truth similarity measurement for each query-database entry comparison, with ANI thresholds of 95% and 99%[<xref ref-type="bibr" rid="pcbi.1006454.ref017">17</xref>,<xref ref-type="bibr" rid="pcbi.1006454.ref018">18</xref>].</p>
<p>The algorithm performed well across all database entry length sets and under both ANI thresholds (AUC values range from 0.97 to 1.00). In fact, with an ANI threshold of 0.95 (a slightly more ‘permissive’ gold standard), the algorithm was essentially a perfect classifier (AUC = 1.00 for all length sets)—assigning similarity scores to database entry-query pairs in exactly the same order as their ANI score rankings (Supplemental <xref ref-type="supplementary-material" rid="pcbi.1006454.s004">S3</xref> &amp; <xref ref-type="supplementary-material" rid="pcbi.1006454.s005">S4</xref> Figs).</p>
</sec>
<sec id="sec008">
<title>Practicality</title>
<p>One major concern for using homomorphic encryption techniques for operational purposes is the computational expense. Total execution time for SIG-DB ranges from a few seconds to approximately 1300 seconds when using a single CPU core to process a single query against a database of 100 entries with sequence lengths of 100 and 20,000 bases, respectively (Supplemental <xref ref-type="supplementary-material" rid="pcbi.1006454.s006">S5 Fig</xref>). Parallelization helps performance but has diminishing returns for more than 16 CPU cores. For example, with a 20,000 bp query sequence length and a database of 82,992 sequences, the execution time goes from 51 minutes with one core to 21 minutes with 16 cores—a reduction of more than 50%. However, when looking only at scoring time, performance is worse when the algorithm is parallelized. This observation is likely related to the size of the query being scored and how efficient it is, or is not, to divide the work over several CPUs at the same time, versus running the calculation on a single CPU without that overhead. Additionally, query comparison time and similarity scoring time are the most time intensive steps, and they appear to be equal even as parameters change (Supplemental <xref ref-type="supplementary-material" rid="pcbi.1006454.s007">S6 Fig</xref>).</p>
<p>The linear scalability of execution time is an important requirement of HE algorithms. If this does not occur, then one or more parties may infer information about the encrypted data from the point in which computation ends. For example, if searching for an exact match in a database, if the algorithm terminates before searching all elements of the database, then the database holder can infer that the last element searched was an exact match for the query. Our algorithm searches every element of a database and was shown to scale linearly as a function of database size (factor of 8 difference between total execution time of tests ran with 100 and 1000 database entries; Supplemental <xref ref-type="supplementary-material" rid="pcbi.1006454.s008">S7 Fig</xref>).</p>
</sec>
</sec>
<sec id="sec009" sec-type="conclusions">
<title>Discussion</title>
<p>We developed the secure interrogation of genomic databases (SIG-DB) algorithm as a proof-of-concept for a suitable, technologically feasible approach to compare a genomic sequence of interest to a privately-held database and produce an indication of similarity between the sequence of interest and each database entry. This approach could enable bioinformatics practitioners or investigators to leverage privately held information in a secure way–a capability that is non-existent today for genomic sequence comparisons. This tool could expedite the timeliness of queries and gain meaningful results in critical timeframes for infectious disease event response decisions. This is important, as many bioinformatics practitioners are not security experts, and thus are less likely to develop applications in this space.</p>
<p>The overall security of an encrypted data manipulation algorithm is fundamental to its success. The SIG-DB algorithm leverages established homomorphic encryption schemes to ensure that no outside (non-participating) party can learn the details of specific queries; only information about the query request patterns can be learned (We did not conduct a formal security analysis of homomorphic encryption, as it has been done previously[<xref ref-type="bibr" rid="pcbi.1006454.ref011">11</xref>–<xref ref-type="bibr" rid="pcbi.1006454.ref013">13</xref>]). It also ensures that no outside party can view the database records directly. Only metadata is exchanged in the form of encrypted LSH magnitudes, and thus individual data entries are never exposed outside the owners’ own security systems.</p>
<p>From the metadata returned, the Querier will learn the number of entries in the database. When combined with the DB LSH magnitudes and the similarity scores returned, the Querier could extrapolate the diversity within the database. Additionally, if the Querier repeated SIG-DB multiple times against the same database using the same query sequence, the Querier could learn about any database modifications that may have occurred. This risk is limited, however, since the execution is controlled by the Database Owner, who retains the right to refuse repeat executions.</p>
<p>A fully homomorphic encryption (FHE) approach, such as Microsoft SEAL, reduces the amount of information leaked by not needing to reveal the magnitudes of Database LSHs (unlike PHE), and therefore does not reveal the length of the database entries. This is because FHE[<xref ref-type="bibr" rid="pcbi.1006454.ref011">11</xref>] allows for division and multiplication, allowing the algorithm to calculate the full similarity score (while keeping it encrypted) before passing the information out of the database. However, FHE comes with an increased computational cost (an FHE implementation of SIG-DB required 2.25 times as long to execute as the PHE implementation), which currently limits its operational utility.</p>
<p>We developed this tool with the initial intention of it being used for microbial genomic sequence comparisons, especially when a user needs to quickly identify a source of information relevant to the query sequence, such as an infectious disease outbreak or intentional release of a bioweapons agent. However, there are a number of applications that it could be used for including human genomics, healthcare, organizational collaborations, and more. We demonstrated here that the algorithm is particularly robust to varying sizes of genomes. The algorithm is also robust with regards to mutations. Any change to the hashed <italic>k</italic>-mer (e.g. SNP, INDEL) will alter the position, hence the threshold for similarity scores should be tuned to the use case. Large rearrangements (e.g. large segment translocations) will largely keep <italic>k-</italic>mers intact and therefore would not alter their hash position. The current implementation reports three scoring metrics: IoU, IoD, and IoQ. These were included to account for potential variations in sequence size and locations of mutations.</p>
<p>Additionally, certain species may have unique genomic elements, such as repeat elements common in plant and human genomes. Given the nature of the LSH data structures, which forces identical k-mer sequences to hash into the same data location, we believe SIG-DB will be robust to those unique genomic elements. This also means that the number of repeats may not be useful as distinguishing factor between sequences in the present algorithm since each identical k-mer would map to the same hash location in the LSH. This is an inherent limitation of the hashing nature of the algorithm which would need to be further characterized before extension into additional organism classes. This would need to be a consideration when planning the operation for certain applications. SIG-DB should be tested using plant and human genomic sequences to confirm the utility for those data sources and optimize for performance.</p>
<p>SIG-DB can be optimized for a particular application by modifying the parameters (k-mer size, LSH size, hash collision rate) based on the user’s tolerance for mutations, length of database sequences, and computational resources. The size of the k-mer should be chosen to account for the degree of variability that is captured. Our results indicate that a smaller k-mer is robust to mutations and that tolerance is reduced by increasing the size of the k-mer. The operator will need to decide how much variation should be tolerated and establish their k-mer size accordingly.</p>
<p>The LSH size should be tuned to balance the trade-off between computational burden and hash collision. The primary consideration when tuning the size of the LSH for the query is the amount of unique information in the data, or unique k-mers to be exact. For example, an 8-mer of DNA base elements has a maximum of 65,536 unique 8-mers (4^8). This calculation is only dependent on the size of the k-mer and not the species or genomic content; therefore, all species that utilize the four bases of DNA have the same set of unique 8-mers possible. The theoretical optimal LSH has a unique entry for each unique k-mer. In practicality, however, tuning the size of the LSH to the maximum possible 8-mers for the sequences being compared could reduce the size of the LSH needed and therefore reduce the computational run-time. For example, a sequence of 20,000 bp has a maximum of 19,992 unique 8-mers (<italic>n-k</italic>). To maintain the optimal 5:1 ratio for LSH:unique k-mers, this means the LSH size would only need to be 100,000 instead of 327,680.</p>
<p>Computational resources should be considered and optimized for the given situation. The process of sequence comparisons and decryption will be the most computationally burdensome given the operations over every database entry. This should be considered by the query holder when establishing computational infrastructure. Of note, the SIG-DB prototype was developed in Python, and thus runs with the efficiency of a Python program. Extensions of this work should include implementing the SIG-DB algorithm in C++ to allow for faster runtime. The algorithm runtime, however, can only be improved to a certain limit with programming language and runtime environment optimization, as the algorithm itself has an inherent runtime complexity that is independent of language or environment.</p>
<p>Overall, the SIG-DB algorithm provides a method for a secure multi-party exchange of information, meaning an exchange of information between a data holder and one or more data queriers. The outcome of this protocol is a similarity score, which provides an indication of the relative similarity between a query and the entries within the interrogated database. Should the user determine there is adequate similarity, the next steps would be based on his needs and processes. We see use cases within organizations where parties are willing and open to participate in the exchange, but where security of information even within the organization is paramount, such as in the case of HIPAA data in healthcare. The potential versatility of this protocol creates an even greater opportunity for impact within the broader scientific community.</p>
</sec>
<sec id="sec010" sec-type="materials|methods">
<title>Methods</title>
<sec id="sec011">
<title>Data</title>
<p>We accessed and downloaded available bacterial genome data in FASTA format from the National Center for Biotechnology Information (NCBI) Assembly RefSeq[<xref ref-type="bibr" rid="pcbi.1006454.ref014">14</xref>] database (DB), resulting in a total dataset of 75,958 samples. The dataset contained 244 gigabytes of complete genome, chromosome, scaffold, and contig sequences for all available bacterial species. For algorithm testing, we used <italic>E</italic>. <italic>coli</italic> (<italic>n = 7</italic>,<italic>078</italic> genomes) and <italic>S</italic>. <italic>aureus</italic> genomes (<italic>n = 50</italic> genomes) as well as the full dataset of all available species genomes (<italic>n = 75</italic>,<italic>958</italic>).</p>
</sec>
<sec id="sec012">
<title>Query preparation</title>
<p>To build the LSH with the appropriate false positive rate and minimize computational burden, the maximum length of a sequence in the database must be obtained from the Database Owner to serve as a proxy for the number of unique <italic>k</italic>-mers possible. From this implementation, the LSH is constructed to have a 5:1 ratio of available space to filled locations. For testing purposes, sequences with maximum length of 20,000 base pairs were used, thus LSHs were initialized to have 100,000 available hash locations. For sequences longer than 20,000 base pairs, the first 20,000 bases were used, and sequences shorter than 20,000 base pairs were used in their entirety. Sequence <italic>k</italic>-mers were hashed into the LSH using the Python <italic>hash</italic> function.</p>
<p>Homomorphic encryption was implemented with the Python package <italic>phe</italic>[<xref ref-type="bibr" rid="pcbi.1006454.ref019">19</xref>], implementing the Paillier additive homomorphic encryption system (PHE)[<xref ref-type="bibr" rid="pcbi.1006454.ref012">12</xref>]. Under this system, a public key/private key pair is generated and each element of an LSH is encrypted using the public key. The Paillier cryptosystem is based on integer factorization, and as such our default key size (DEFAULT_SIZE = 3072) is chosen to give a minimum of 128 bits of security.</p>
</sec>
<sec id="sec013">
<title>Database searching</title>
<p>An LSH is created for each database entry using the LSH Constructor, provided by the Querier. The Database Owner executes the comparison between each DB entry LSH and the encrypted Query LSH using the comparison executable provided by the Querier. For each comparison, an encrypted intersection score is calculated by the sum of all the encrypted Query LSH hash locations corresponding to a filled hash entry in the DB entry’s LSH. The magnitude of the DB entry LSH is calculated as the sum of hashes in the LSH. The pair {encrypted intersection score, DB entry LSH magnitude} for each entry in the database are then returned to the Querier for evaluation.</p>
</sec>
<sec id="sec014">
<title>Similarity metric calculations</title>
<p>To assess the similarity between the query and the entries in the database, the returned encrypted intersection scores are decrypted using the private key. The intersection over union (IoU) score is calculated using the unencrypted intersection score, the query LSH magnitude, and the DB entry LSH magnitude:
<disp-formula id="pcbi.1006454.e001">
<alternatives>
<graphic id="pcbi.1006454.e001g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1006454.e001" xlink:type="simple"/>
<mml:math display="block" id="M1">
<mml:mi>I</mml:mi><mml:mi>o</mml:mi><mml:mi>U</mml:mi><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>I</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>s</mml:mi><mml:mi>e</mml:mi><mml:mi>c</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mrow><mml:mi>Q</mml:mi><mml:mi>u</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>y</mml:mi><mml:mspace width="0.25em"/><mml:mi>L</mml:mi><mml:mi>S</mml:mi><mml:mi>H</mml:mi></mml:mrow><mml:mo>|</mml:mo><mml:mo>+</mml:mo><mml:mo>|</mml:mo><mml:mrow><mml:mi>D</mml:mi><mml:mi>B</mml:mi><mml:mspace width="0.25em"/><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>r</mml:mi><mml:mi>y</mml:mi><mml:mspace width="0.25em"/><mml:mi>L</mml:mi><mml:mi>S</mml:mi><mml:mi>H</mml:mi></mml:mrow><mml:mo>|</mml:mo><mml:mo>−</mml:mo><mml:mi>I</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>s</mml:mi><mml:mi>e</mml:mi><mml:mi>c</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi></mml:mrow></mml:mfrac>
</mml:math>
</alternatives>
</disp-formula></p>
<p>Additionally, to account for scenarios with a query sequence shorter than the database sequences, the intersection over length of query (IoQ) is calculated using the unencrypted intersection score and the query LSH magnitude:
<disp-formula id="pcbi.1006454.e002">
<alternatives>
<graphic id="pcbi.1006454.e002g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1006454.e002" xlink:type="simple"/>
<mml:math display="block" id="M2">
<mml:mi>I</mml:mi><mml:mi>o</mml:mi><mml:mi>Q</mml:mi><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>I</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>s</mml:mi><mml:mi>e</mml:mi><mml:mi>c</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mrow><mml:mi>Q</mml:mi><mml:mi>u</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>y</mml:mi><mml:mspace width="0.25em"/><mml:mi>L</mml:mi><mml:mi>S</mml:mi><mml:mi>H</mml:mi></mml:mrow><mml:mo>|</mml:mo></mml:mrow></mml:mfrac>
</mml:math>
</alternatives>
</disp-formula></p>
<p>Finally, to account for scenarios with a query sequence longer than the database sequences, the intersection over DB entry LSH magnitude (IoD) is calculated using the unencrypted intersection score and the DB entry LSH magnitude:
<disp-formula id="pcbi.1006454.e003">
<alternatives>
<graphic id="pcbi.1006454.e003g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1006454.e003" xlink:type="simple"/>
<mml:math display="block" id="M3">
<mml:mi>I</mml:mi><mml:mi>o</mml:mi><mml:mi>D</mml:mi><mml:mo>=</mml:mo><mml:mfrac><mml:mrow><mml:mi>I</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>e</mml:mi><mml:mi>r</mml:mi><mml:mi>s</mml:mi><mml:mi>e</mml:mi><mml:mi>c</mml:mi><mml:mi>t</mml:mi><mml:mi>i</mml:mi><mml:mi>o</mml:mi><mml:mi>n</mml:mi></mml:mrow><mml:mrow><mml:mo>|</mml:mo><mml:mrow><mml:mi>D</mml:mi><mml:mi>B</mml:mi><mml:mspace width="0.25em"/><mml:mi>e</mml:mi><mml:mi>n</mml:mi><mml:mi>t</mml:mi><mml:mi>r</mml:mi><mml:mi>y</mml:mi><mml:mspace width="0.25em"/><mml:mi>L</mml:mi><mml:mi>S</mml:mi><mml:mi>H</mml:mi></mml:mrow><mml:mo>|</mml:mo></mml:mrow></mml:mfrac>
</mml:math>
</alternatives>
</disp-formula></p>
<p>From the IoU, IoQ, and IoD, the Querier can evaluate the highest similarity and the overall similarity of database entries to the query sequence.</p>
</sec>
<sec id="sec015">
<title>SIG-DB algorithm</title>
<p>The SIG-DB algorithm is a two-party exchange for sequence-to-sequence comparisons between an encrypted query and elements of a database. The steps of the algorithm are as follows:</p>
<list list-type="order">
<list-item><p>Querier: From Database Owner, determine largest sequence length in database</p></list-item>
<list-item><p>Querier: Hash query sequence <italic>k</italic>-mers into a locality-sensitive hash (LSH) with a specified acceptable false positive rate based on largest entry sequence length</p></list-item>
<list-item><p>Querier: Generate a public/private key pair using the Paillier cryptosystem</p></list-item>
<list-item><p>Querier: Encrypt each element in the query LSH using the Paillier public key</p></list-item>
<list-item><p>Querier: Pass the encrypted query LSH, the LSH constructor with hash function, and a processing script to the Database Owner</p></list-item>
<list-item><p>Database Owner: Hash each database sequence entry into an LSH of matching dimension to the query LSH using the original hash function, provided by the Querier.</p></list-item>
<list-item><p>Database Owner: For every database entry LSH:
<list list-type="order">
<list-item><p>Calculate encrypted intersection score by the sum of all elements in the encrypted query LSH that correspond to a filled entry in the DB LSH</p></list-item>
<list-item><p>Calculate the magnitude of the DB LSH</p></list-item></list></p></list-item>
<list-item><p>Database Owner: return all pairs (DB LSH magnitude and encrypted intersection score) to the Querier</p></list-item>
<list-item><p>Querier: decrypt the encrypted intersection scores using the Paillier private key</p></list-item>
<list-item><p>Querier: For each query-database entry pair, calculate the intersection over union (IoU), intersection over query magnitude (IoQ), and intersection over DB LSH magnitude (IoD).</p></list-item>
</list>
</sec>
<sec id="sec016">
<title>SIG-DB algorithm testing</title>
<p>Our algorithm testing was conducted on an NVIDIA Titan X GPU with 64 GB of memory. The initial implementation of SIG-DB uses 48 parallel processes to encrypt the LSH and generate the reported similarity metrics. Each step in the algorithm is asynchronous and may be parallelized independently.</p>
<p>We tested the algorithm using the data downloaded from the NCBI Assembly database. We used an LSH with 500–100,000 available locations for hashing relative to standardized sequence lengths of 100–20,000 base pairs (always in 5:1 ratio, respectively). These lengths were chosen to represent a range of sequences from raw sequence read to small genome sizes. <italic>E</italic>. <italic>coli</italic> genomes range from between 4,500,000–6,000,000 bases, but for efficiency, we used a reduced fraction of the full genome as the first <italic>n</italic> base pairs of the sequence (seq[1:n]). The algorithm scales to encompass full genome size sequences, but appropriate adjustments to LSH size must be made.</p>
</sec>
<sec id="sec017">
<title><italic>In silico</italic> sequence mutations</title>
<p>We introduced mutations into wild-type query sequences randomly across queries of various lengths. These mutations were intended to represent point mutations in the sequence as well as loss of data quality due to sequencing errors. The point mutations were conducted by changing the selected base pair to either one of the remaining three base pairs, or to an ‘X’ representing a data error. These mutations were introduced at random distributions across the sequence, ranging from no mutations (0%) to full sequence mutations (100%).</p>
</sec>
<sec id="sec018">
<title>Correctness</title>
<p>A dataset was created from two <italic>E</italic>. <italic>coli</italic> genomes (K-12 MG1655 and O157:H7, taken from the RefSeq database). 500 non-overlapping database entries were created by sampling at random from the full genomes for each of three lengths: 1000, 2000, and 3000 bp. From each database entry, a 1000 bp query sequence was selected at random. (Queries taken from a database entry of a given length were used only in searches against the database set from which they were generated.) In order to have sufficient coverage of the desired genetic diversity, the selected query sequences were duplicated twice and the duplicates randomly mutated, where each base pair in the two duplicates had a 5% or 10% chance (respectively) of being switched to an alternate base. In total, this produced 1,500 queries for each length-set of database entries: 500 wild-type, 500 samples with 5% mutation, and 500 samples with 10% mutation.</p>
<p>ANI and SIG-DB similarity scores were computed for each database entry-query pair within a given length-set. For the SIG-DB score, the maximum of the IoU, IoQ, or IoD was taken to account for sequence:query length differences. A Receiver Operator Characteristic (ROC) curve was generated to determine the tradeoff between true positive rate (TPR) and false positive rate (FPR). Multiple classification thresholds were defined for the SIG-DB similarity scores such that all sequences with similarity ≥ threshold were considered “relevant”. The thresholds were set in an increasing manner, starting with Similarity = 0 representing a threshold that counted all sequences as “relevant”. Each subsequence threshold was then set as the next highest similarity score in the result set. For example, if five sequences had similarity scores of [0.2, 0.33, 0.33, 0.75, 0.87] then each of the unique scores would be set as a classification threshold, resulting in the following counts of the number of “relevant” sequences at each threshold: [<xref ref-type="bibr" rid="pcbi.1006454.ref005">5</xref>, <xref ref-type="bibr" rid="pcbi.1006454.ref004">4</xref>, <xref ref-type="bibr" rid="pcbi.1006454.ref002">2</xref>, <xref ref-type="bibr" rid="pcbi.1006454.ref001">1</xref>]. For each new threshold, the TPR and FPR were calculated, then plotted as a ROC curve.</p>
</sec>
<sec id="sec019">
<title>Practicality</title>
<p>To assess the practicality of using SIG-DB in operational applications, we performed a series of tests to understand the amount of time required to run the full operation on a single CPU core, the time savings that could be achieved using a parallelized approach, and the breakout of time requirements by step in the protocol (encryption time, query time, and scoring time). All bacterial sequences in the RefSeq database were used to perform these tests. The database records have a minimum length of 337 bases, a maximum length of 12,106,419 bases, and an average length of 2,756 bases. Heat maps were generated from test runs that evaluate 3 different variables: (1) number of cores used for computation (1–48 cores), (2) query length (100–20,000 bases), and (3) number of entries in the database (100, 1000, 5000, and 10000 FASTA files; or 10,145 sequences, 89,992 sequences, 425,772 sequences, and 860,984 sequences, respectively).</p>
</sec>
<sec id="sec020">
<title>Code/Data availability</title>
<p>All code and documentation is available on the B.Next GitHub page, located at <ext-link ext-link-type="uri" xlink:href="https://github.com/BNext-IQT/GEMstone" xlink:type="simple">https://github.com/BNext-IQT/GEMstone</ext-link>. All sequence data for <italic>E</italic>. <italic>coli</italic> (taxid:562) and S. aureus (taxid:1280) were obtained from <ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/assembly" xlink:type="simple">https://www.ncbi.nlm.nih.gov/assembly</ext-link>. We accessed and downloaded all sequence data used in this study on October 1<sup>st</sup>, 2017.</p>
</sec>
</sec>
<sec id="sec021">
<title>Supporting information</title>
<supplementary-material id="pcbi.1006454.s001" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006454.s001" xlink:type="simple">
<label>S1 Table</label>
<caption>
<title>ANI Data statistics describing the distribution of the ANI scores for each database element length dataset.</title>
<p>(DOCX)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006454.s002" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006454.s002" xlink:type="simple">
<label>S1 Fig</label>
<caption>
<title>Similarity scores (IoU, IoQ, and IoD) for k-mer = {8} with random sequence mutation localized to one half of the sequence at rates from 0–100%.</title>
<p>The red circle represented the largest mutation rate that correctly returned the sequence of interest as the highest IoU score.</p>
<p>(DOCX)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006454.s003" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006454.s003" xlink:type="simple">
<label>S2 Fig</label>
<caption>
<title>Similarity scores for varying sizes of query and DB entries.</title>
<p>(A) DB held constant at 20,000 bases while query varied from 5,000–20,000 bases. (B) Query held constant at 20,000 bases while DB varied from 5,000–20,000 bases.</p>
<p>(DOCX)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006454.s004" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006454.s004" xlink:type="simple">
<label>S3 Fig</label>
<caption>
<title>Receiver Operator Characteristic (ROC) curves for Paillier-SIG-DB.</title>
<p>Query length = 1000 bases and ANI threshold of 0.99 for A-C; 0.95 for D. (A) DB entry length = 1000 bp with a total of 750,000 query to database entry comparisons and 1,515 of those with ANI scores above the ANI threshold (true positives) (B) DB entry length = 2000 bp with a total of 750,000 query to database entry comparisons and 1,549 of those with ANI scores above the ANI threshold (C) DB entry length = 3000 bp with a total of 750,000 query to database entry comparisons and 1,708 of those with ANI scores above the ANI threshold (D) DB entry length = 1000bp with a total of 750,000 query to database entry comparisons and 1,877 of those with ANI scores above the ANI threshold (representative of all ROC curves generated using an ANI threshold = 0.95).</p>
<p>(DOCX)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006454.s005" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006454.s005" xlink:type="simple">
<label>S4 Fig</label>
<caption>
<title/>
<p>Receiver Operator Characteristic (ROC) curves for Paillier-SIG-DB based on each similarity score–(A) IoD, (B) IoU, and (C) IoQ. Query length = 1000 bases and ANI threshold of 0.99. The DB entry length was 1000 bp (top row) with a total of 750,000 query to database entry comparisons and 1,515 of those with ANI scores above the ANI threshold (true positives) and 3000 bp (bottom row) with DB entry length = 3000 bp with a total of 750,000 query to database entry comparisons and 1,708 of those with ANI scores above the ANI threshold. Using IoD as the similarity score when a query is one-third the size of the database entries results in an odd ROC curve representing very poor performance, as shown in (A) bottom row. One possible explanation is that the denominator is larger than the possible intersection space, and as such, we may be washing out the small differences between the intersections of positive and negative examples. In a dataset of only 0.2% positive samples, this leads to broad misclassification. This phenomenon is exactly why we included IoD, IoU, and IoQ as our scoring metrics.</p>
<p>(DOCX)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006454.s006" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006454.s006" xlink:type="simple">
<label>S5 Fig</label>
<caption>
<title>SIG-DB Execution time for a query against a database of 100 entries (10,145 sequences) using various numbers of cores for computation.</title>
<p>(DOCX)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006454.s007" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006454.s007" xlink:type="simple">
<label>S6 Fig</label>
<caption>
<title>Heat map showing time of execution for SIG-DB, comparing a single query of 'qlen' length to a database containing 1000 entries (82,992 sequences).</title>
<p>The trends in this heat map are representative of all scenarios tested.</p>
<p>(DOCX)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006454.s008" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006454.s008" xlink:type="simple">
<label>S7 Fig</label>
<caption>
<title>SIG-DB execution time for 100 and 1000 database entries compared to different query lengths; both runs performed with 48 cores.</title>
<p>Note: y-axis is in log-scale.</p>
<p>(DOCX)</p>
</caption>
</supplementary-material>
</sec>
</body>
<back>
<ack>
<p>The authors would like to thank Lisa Porter for her helpful discussions during development of this project and her critical reading of the manuscript; and Nat Puffer and Justin Wilder for their feedback and discussion on encryption and data security.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pcbi.1006454.ref001"><label>1</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Flores Bueso</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Tangney</surname> <given-names>M</given-names></name>. <article-title>Synthetic Biology in the Driving Seat of the Bioeconomy</article-title>. <source>Trends Biotechnol</source>. Elsevier; <year>2017</year>;<volume>35</volume>: <fpage>373</fpage>–<lpage>378</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.tibtech.2017.02.002" xlink:type="simple">10.1016/j.tibtech.2017.02.002</ext-link></comment> <object-id pub-id-type="pmid">28249675</object-id></mixed-citation></ref>
<ref id="pcbi.1006454.ref002"><label>2</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Goodrich</surname> <given-names>JK</given-names></name>, <name name-style="western"><surname>Davenport</surname> <given-names>ER</given-names></name>, <name name-style="western"><surname>Clark</surname> <given-names>AG</given-names></name>, <name name-style="western"><surname>Ley</surname> <given-names>RE</given-names></name>. <article-title>The Relationship Between the Human Genome and Microbiome Comes into View</article-title>. <source>Annu Rev Genet</source>. Annual Reviews; <year>2014</year>; <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1146/annurev-genet-110711-155532" xlink:type="simple">10.1146/annurev-genet-110711-155532</ext-link></comment> <object-id pub-id-type="pmid">28934590</object-id></mixed-citation></ref>
<ref id="pcbi.1006454.ref003"><label>3</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Hall</surname> <given-names>AB</given-names></name>, <name name-style="western"><surname>Tolonen</surname> <given-names>AC</given-names></name>, <name name-style="western"><surname>Xavier</surname> <given-names>RJ</given-names></name>. <article-title>Human genetic variation and the gut microbiome in disease</article-title>. <source>Nat Rev Genet</source>. Nature Publishing Group, a division of Macmillan Publishers Limited. All Rights Reserved.; <year>2017</year>;<volume>18</volume>: <fpage>690</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/nrg.2017.63" xlink:type="simple">10.1038/nrg.2017.63</ext-link></comment> <object-id pub-id-type="pmid">28824167</object-id></mixed-citation></ref>
<ref id="pcbi.1006454.ref004"><label>4</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Chuong</surname> <given-names>KH</given-names></name>, <name name-style="western"><surname>Mack</surname> <given-names>DR</given-names></name>, <name name-style="western"><surname>Stintzi</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>O’Doherty</surname> <given-names>KC</given-names></name>. <chapter-title>Human Microbiome and Learning Healthcare Systems: Integrating Research and Precision Medicine for Inflammatory Bowel Disease</chapter-title>. <publisher-name>OMICS</publisher-name>. <publisher-loc>United States</publisher-loc>; <year>2017</year>; <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1089/omi.2016.0185" xlink:type="simple">10.1089/omi.2016.0185</ext-link></comment> <object-id pub-id-type="pmid">28282257</object-id></mixed-citation></ref>
<ref id="pcbi.1006454.ref005"><label>5</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Jagadeesh</surname> <given-names>KA</given-names></name>, <name name-style="western"><surname>Wu</surname> <given-names>DJ</given-names></name>, <name name-style="western"><surname>Birgmeier</surname> <given-names>JA</given-names></name>, <name name-style="western"><surname>Boneh</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Bejerano</surname> <given-names>G</given-names></name>. <article-title>Deriving genomic diagnoses without revealing patient genomes</article-title>. <source>Science</source> (80-). <year>2017</year>;<volume>357</volume>: <fpage>692 LP</fpage>–<lpage>695</lpage>.</mixed-citation></ref>
<ref id="pcbi.1006454.ref006"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Troncoso-Pastoriza JR, Katzenbeisser S, Celik M. Privacy Preserving Error Resilient Dna Searching Through Oblivious Automata. Proceedings of the 14th ACM Conference on Computer and Communications Security. New York, NY, USA: ACM; 2007. pp. 519–528. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1145/1315245.1315309" xlink:type="simple">10.1145/1315245.1315309</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1006454.ref007"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Dugan T, Zou X. A Survey of Secure Multiparty Computation Protocols for Privacy Preserving Genetic Tests. 2016 IEEE First International Conference on Connected Health: Applications, Systems and Engineering Technologies (CHASE). 2016. pp. 173–182. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1109/CHASE.2016.71" xlink:type="simple">10.1109/CHASE.2016.71</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1006454.ref008"><label>8</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Kim</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Lauter</surname> <given-names>K</given-names></name>. <article-title>Private genome analysis through homomorphic encryption</article-title>. <source>BMC Med Inform Decis Mak</source>. BioMed Central; <year>2015</year>;<volume>15</volume>: <fpage>S3</fpage>.</mixed-citation></ref>
<ref id="pcbi.1006454.ref009"><label>9</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Ziegeldorf</surname> <given-names>JH</given-names></name>, <name name-style="western"><surname>Pennekamp</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Hellmanns</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Schwinger</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Kunze</surname> <given-names>I</given-names></name>, <name name-style="western"><surname>Henze</surname> <given-names>M</given-names></name>, <etal>et al</etal>. <article-title>BLOOM: BLoom filter based oblivious outsourced matchings</article-title>. <source>BMC Med Genomics</source>. <year>2017</year>;<volume>10</volume>: <fpage>44</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/s12920-017-0277-y" xlink:type="simple">10.1186/s12920-017-0277-y</ext-link></comment> <object-id pub-id-type="pmid">28786361</object-id></mixed-citation></ref>
<ref id="pcbi.1006454.ref010"><label>10</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Dowlin</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Gilad-Bachrach</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Laine</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Lauter</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Naehrig</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Wernsing</surname> <given-names>J</given-names></name>. <article-title>Manual for using homomorphic encryption for bioinformatics</article-title>. <source>Proc IEEE. IEEE</source>; <year>2017</year>;<volume>105</volume>: <fpage>552</fpage>–<lpage>567</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1109/JPROC.2016.2622218" xlink:type="simple">10.1109/JPROC.2016.2622218</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1006454.ref011"><label>11</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Gentry</surname> <given-names>C</given-names></name>. <article-title>Fully homomorphic encryption using ideal lattices</article-title>. <source>STOC</source>. <year>2009</year>. pp. <fpage>169</fpage>–<lpage>178</lpage>. 978-1-60558-506-2/09/05</mixed-citation></ref>
<ref id="pcbi.1006454.ref012"><label>12</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Paillier</surname> <given-names>P</given-names></name>. <chapter-title>Public-key cryptosystems based on composite degree residuosity classes</chapter-title>. <source>Eurocrypt</source>. <publisher-name>Springer</publisher-name>; <year>1999</year>. pp. <fpage>223</fpage>–<lpage>238</lpage>.</mixed-citation></ref>
<ref id="pcbi.1006454.ref013"><label>13</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Chen</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Laine</surname> <given-names>K</given-names></name>. <article-title>Simple Encrypted Arithmetic Library—SEAL v2.2</article-title>. <year>2017</year> <month>Jun</month>.</mixed-citation></ref>
<ref id="pcbi.1006454.ref014"><label>14</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Coordinators</surname> <given-names>NR</given-names></name>. <chapter-title>Database resources of the National Center for Biotechnology Information</chapter-title>. <source>Nucleic Acids Res</source>. <publisher-name>Oxford University Press</publisher-name>; <year>2016</year>;<volume>44</volume>: <fpage>D7</fpage>–<lpage>D19</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/nar/gkv1290" xlink:type="simple">10.1093/nar/gkv1290</ext-link></comment> <object-id pub-id-type="pmid">26615191</object-id></mixed-citation></ref>
<ref id="pcbi.1006454.ref015"><label>15</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Wolper</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Leroy</surname> <given-names>D</given-names></name>. <chapter-title>Reliable hashing without collision detection BT—Computer Aided Verification</chapter-title>. In: <name name-style="western"><surname>Courcoubetis</surname> <given-names>C</given-names></name>, editor. <publisher-loc>Berlin, Heidelberg</publisher-loc>: <publisher-name>Springer Berlin Heidelberg</publisher-name>; <year>1993</year>. pp. <fpage>59</fpage>–<lpage>70</lpage>.</mixed-citation></ref>
<ref id="pcbi.1006454.ref016"><label>16</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Bloom</surname> <given-names>BH</given-names></name>. <article-title>Space/Time Trade-offs in Hash Coding with Allowable Errors</article-title>. <source>Commun ACM</source>. New York, NY, USA: ACM; <year>1970</year>;<volume>13</volume>: <fpage>422</fpage>–<lpage>426</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1145/362686.362692" xlink:type="simple">10.1145/362686.362692</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1006454.ref017"><label>17</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Kim</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Oh</surname> <given-names>H-S</given-names></name>, <name name-style="western"><surname>Park</surname> <given-names>S-C</given-names></name>, <name name-style="western"><surname>Chun</surname> <given-names>J</given-names></name>. <article-title>Towards a taxonomic coherence between average nucleotide identity and 16S rRNA gene sequence similarity for species demarcation of prokaryotes</article-title>. <source>Int J Syst Evol Microbiol</source>. England; <year>2014</year>;<volume>64</volume>: <fpage>346</fpage>–<lpage>351</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1099/ijs.0.059774-0" xlink:type="simple">10.1099/ijs.0.059774-0</ext-link></comment> <object-id pub-id-type="pmid">24505072</object-id></mixed-citation></ref>
<ref id="pcbi.1006454.ref018"><label>18</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Goris</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Konstantinidis</surname> <given-names>KT</given-names></name>, <name name-style="western"><surname>Klappenbach</surname> <given-names>JA</given-names></name>, <name name-style="western"><surname>Coenye</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Vandamme</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Tiedje</surname> <given-names>JM</given-names></name>. <article-title>DNA-DNA hybridization values and their relationship to whole-genome sequence similarities</article-title>. <source>Int J Syst Evol Microbiol</source>. England; <year>2007</year>;<volume>57</volume>: <fpage>81</fpage>–<lpage>91</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1099/ijs.0.64483-0" xlink:type="simple">10.1099/ijs.0.64483-0</ext-link></comment> <object-id pub-id-type="pmid">17220447</object-id></mixed-citation></ref>
<ref id="pcbi.1006454.ref019"><label>19</label><mixed-citation publication-type="other" xlink:type="simple">N1 Analytics. Python-Paillier. 2017.</mixed-citation></ref>
</ref-list>
</back>
</article>