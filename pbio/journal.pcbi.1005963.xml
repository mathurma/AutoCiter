<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN" "http://jats.nlm.nih.gov/publishing/1.1d3/JATS-journalpublishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="editorial" dtd-version="1.1d3" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id>
<journal-title-group>
<journal-title>PLOS Computational Biology</journal-title>
</journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1005963</article-id>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-17-01205</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Editorial</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Cognitive science</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Learning</subject><subj-group><subject>Human learning</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Learning</subject><subj-group><subject>Human learning</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Learning</subject><subj-group><subject>Human learning</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Learning and memory</subject><subj-group><subject>Learning</subject><subj-group><subject>Human learning</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>People and places</subject><subj-group><subject>Population groupings</subject><subj-group><subject>Professions</subject><subj-group><subject>Instructors</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software development</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software development</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>People and places</subject><subj-group><subject>Population groupings</subject><subj-group><subject>Professions</subject><subj-group><subject>Historians</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social sciences</subject><subj-group><subject>Sociology</subject><subj-group><subject>Education</subject><subj-group><subject>Schools</subject><subj-group><subject>Universities</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Cognitive science</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Learning</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Learning</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Learning</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Learning and memory</subject><subj-group><subject>Learning</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Spectrum analysis techniques</subject><subj-group><subject>Absorption spectroscopy</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Computer software</subject><subj-group><subject>Open source software</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Science policy</subject><subj-group><subject>Open science</subject><subj-group><subject>Open source software</subject></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>Ten simple rules for collaborative lesson development</article-title>
<alt-title alt-title-type="running-head">Ten simple rules for collaborative lesson development</alt-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-7766-1187</contrib-id>
<name name-style="western">
<surname>Devenyi</surname>
<given-names>Gabriel A.</given-names>
</name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-1870-1329</contrib-id>
<name name-style="western">
<surname>Emonet</surname>
<given-names>Rémi</given-names>
</name>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-7943-5650</contrib-id>
<name name-style="western">
<surname>Harris</surname>
<given-names>Rayna M.</given-names>
</name>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<name name-style="western">
<surname>Hertweck</surname>
<given-names>Kate L.</given-names>
</name>
<xref ref-type="aff" rid="aff004"><sup>4</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<name name-style="western">
<surname>Irving</surname>
<given-names>Damien</given-names>
</name>
<xref ref-type="aff" rid="aff005"><sup>5</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-1470-7723</contrib-id>
<name name-style="western">
<surname>Milligan</surname>
<given-names>Ian</given-names>
</name>
<xref ref-type="aff" rid="aff006"><sup>6</sup></xref>
</contrib>
<contrib contrib-type="author" corresp="yes" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0001-8659-8979</contrib-id>
<name name-style="western">
<surname>Wilson</surname>
<given-names>Greg</given-names>
</name>
<xref ref-type="aff" rid="aff007"><sup>7</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
</contrib-group>
<aff id="aff001"><label>1</label> <addr-line>Douglas Mental Health University Institute, McGill University, Montreal, Quebec, Canada</addr-line></aff>
<aff id="aff002"><label>2</label> <addr-line>Univ Lyon, UJM-Saint-Etienne, Saint-Étienne, France</addr-line></aff>
<aff id="aff003"><label>3</label> <addr-line>The University of Texas at Austin, Austin, Texas, United States of America</addr-line></aff>
<aff id="aff004"><label>4</label> <addr-line>The University of Texas at Tyler, Tyler, Texas, United States of America</addr-line></aff>
<aff id="aff005"><label>5</label> <addr-line>CSIRO Oceans and Atmosphere, Hobart, Tasmania, Australia</addr-line></aff>
<aff id="aff006"><label>6</label> <addr-line>University of Waterloo, Waterloo, Ontario, Canada</addr-line></aff>
<aff id="aff007"><label>7</label> <addr-line>DataCamp, Toronto, Ontario, Canada</addr-line></aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>Markel</surname>
<given-names>Scott</given-names>
</name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1"><addr-line>Dassault Systemes BIOVIA, UNITED STATES</addr-line></aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>The authors have declared that no competing interests exist.</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">gvwilson@third-bit.com</email></corresp>
</author-notes>
<pub-date pub-type="epub">
<day>1</day>
<month>3</month>
<year>2018</year>
</pub-date>
<pub-date pub-type="collection">
<month>3</month>
<year>2018</year>
</pub-date>
<volume>14</volume>
<issue>3</issue>
<elocation-id>e1005963</elocation-id>
<permissions>
<copyright-year>2018</copyright-year>
<copyright-holder>Devenyi et al</copyright-holder>
<license xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">
<license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pcbi.1005963"/>
<funding-group>
<funding-statement>The authors received no specific funding for this article.</funding-statement>
</funding-group>
<counts>
<fig-count count="2"/>
<table-count count="0"/>
<page-count count="8"/>
</counts>
</article-meta>
</front>
<body>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<p>Lessons take significant effort to build and even more to maintain. Most academics do this work on their own, but leveraging a community approach can make educational resource development more sustainable, robust, and responsive. Treating lessons as a community resource to be updated, adapted, and improved incrementally can free up valuable time while increasing quality.</p>
<p>Despite the success of openness in software development and the curation of Wikipedia, it is an uncommon approach in the academic instructional setting. Each year, thousands of university lecturers teach subjects ranging from first year biology to graduate-level courses in Indian film. Some use textbooks written by one or a few authors, but beyond that they develop and maintain their course materials in isolation.</p>
<p>Given that academic research often depends on sharing, this differing approach to developing pedagogical materials is interesting, but the sociology and psychology behind such a blind spot are beyond the scope of this paper.</p>
<p>The authors have many years of experience with community-developed lessons in the context of research computing in the sciences and humanities through organizations like Software Carpentry and Programming Historian [<xref ref-type="bibr" rid="pcbi.1005963.ref001">1</xref>]. Software Carpentry was founded in 1998 to teach scientists basic computing skills and has since spawned two sibling organizations called Data Carpentry and Library Carpentry. Programming Historian was founded in 2008 and has evolved into a collaboratively edited site providing lessons to humanities scholars. Their guiding principles are that lessons should be 1) open and easily accessible as well as 2) continually maintained, refined, and improved by a community of contributors.</p>
<p>All open education projects (e.g., massive open online courses) satisfy the first criterion by definition, but very few satisfy the second. In other words, while it is common for open education projects to be occasionally updated by an individual or small team (as happens when a new edition of a book is edited and published), this is not the same as continuous improvement by a large community of contributors. The 10 simple rules that follow summarize what we have learned about doing so as maintainers, editors, and reviewers of lessons used by tens of thousands of people (<xref ref-type="fig" rid="pcbi.1005963.g001">Fig 1</xref>). By following these rules, we contend that it is possible to create higher quality lessons than could be created by an individual or small team, both in terms of accuracy and pedagogy (<xref ref-type="fig" rid="pcbi.1005963.g002">Fig 2</xref>). As an added bonus, the lessons are always up-to-date and require less time per author to develop and maintain.</p>
<fig id="pcbi.1005963.g001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005963.g001</object-id>
<label>Fig 1</label>
<caption>
<title>Graphical abstract of 10 simple rules for collaborative lesson development.</title>
<p><bold>1.</bold> To clarify your audience, consider writing learner profiles (<xref ref-type="boxed-text" rid="pcbi.1005963.box001">Box 1</xref>). <bold>2.</bold> Make lessons modular by breaking them into small, single-purpose modules. <bold>3.</bold> Teach your instructors the best practices for developing, delivering, and maintaining lessons. <bold>4.</bold> Encourage and empower contributors by making the contribution process transparent and straightforward. <bold>5</bold> Build a community around lessons by creating opportunities for participation and mentorship. <bold>6.</bold> Publish new versions periodically and recognize contributors by their unique identifiers (e.g., ORCID). <bold>7.</bold> Evaluate lessons during and after class for a complete picture of their efficacy. <bold>8.</bold> Reduce, reuse, or recycle lessons before creating a new one from scratch. <bold>9.</bold> Link to other resources that complement the lesson content. <bold>10.</bold> Remember that you can’t please everyone in your audience or community.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005963.g001" xlink:type="simple"/>
</fig>
<fig id="pcbi.1005963.g002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005963.g002</object-id>
<label>Fig 2</label>
<caption>
<title>Collaborative open lesson development.</title>
<p>Following the decision to develop lessons, activities focus on lesson development as well as community building. Boxes surrounded by dotted lines represent community contributions to lessons. Dashed arrows represent connections to activities outside the original lesson design. The box enclosed in a dashed dotted line represents unaffiliated learning resources.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005963.g002" xlink:type="simple"/>
</fig>
</sec>
<sec id="sec002">
<title>Rule 1: Clarify your audience</title>
<p>The first requirement for building lessons together is to know for whom they are being built. "Archaeology students" is far too vague: are you and your collaborators thinking of first year students who need an introduction to the field, graduate students who intend to specialize in the subdiscipline that is the lesson’s focus, or someone in between? If different contributors believe different things about prerequisite knowledge, equipment or software required, or how much time learners will have, they will find it difficult to work together.</p>
<p>Instead of starting with learning objectives (Rule 3), it can be helpful to write learner profiles to clarify the learner’s general background, what they already know, what they think they want to do, how the material will help them, and any special needs they might have. This technique is borrowed from user interface design, and a typical learner profile is presented in <xref ref-type="boxed-text" rid="pcbi.1005963.box001">Box 1</xref>.</p>
<boxed-text id="pcbi.1005963.box001" position="float">
<sec id="sec003">
<title>Box 1: Learner profile.</title>
<p>Jorge has just moved from Costa Rica to Canada to study agricultural engineering. While fluent in both Spanish and English, he has a hearing disability that sometimes makes it hard for him to understand lectures, particularly in noisy environments. Other than using Excel, Word, and the internet, Jorge’s most significant previous experience with computers is helping his sister build a WordPress site for the family business.</p>
<p>Jorge needs to measure properties of soil from nearby farms using a handheld device that sends text files to his computer. Right now, Jorge has to open each file in Excel, crop the first and last points, and calculate an average. This workshop will show Jorge how to write a small Python program to read the data, select the right values from each file, and calculate the required statistics.</p>
</sec>
</boxed-text>
</sec>
<sec id="sec004">
<title>Rule 2: Make lessons modular</title>
<p>Every instructor’s needs are different, so build small chunks that can be repurposed in many ways. A university lecturer in meteorology, for instance, might construct a course for their students by bringing together lessons on differential equations, fluid mechanics, and absorption spectroscopy. Creating courses this way shifts the instructor’s burden from writing to finding and synthesizing, which are easier if lessons clearly define what they cover (Rule 1) and if lessons have been designed by people with a shared worldview (Rule 3).</p>
<p>One way to achieve this is to take existing courses and break them down into smaller, single-purpose modules (a change which has pedagogical and administrative advantages in its own right). When this is done, these modules can be made more discoverable by referencing specific points in the model curricula promulgated by many professional societies (e.g., as learning objectives). Smaller modules are also more approachable for new contributors (Rule 4).</p>
</sec>
<sec id="sec005">
<title>Rule 3: Teach best practices for lesson development</title>
<p>Decades of pedagogical research have yielded many insights into how best to build and deliver lessons [<xref ref-type="bibr" rid="pcbi.1005963.ref002">2</xref>]. Unfortunately, many college and university faculty have little or no formal training in education [<xref ref-type="bibr" rid="pcbi.1005963.ref003">3</xref>], so this knowledge is rarely applied in the classroom.</p>
<p>Our experience is that even a brief introduction to a few key practices helps collaborative lesson development. If people have a shared understanding of how lessons should be developed, it is easier for them to work together. Less obviously, if people have a shared model of how lessons will be used, they are more likely to build reusable material. Finally, teaching people how to teach is a great way to introduce them to each other and build community (<xref ref-type="fig" rid="pcbi.1005963.g002">Fig 2</xref>).</p>
<p>By way of example, Software Carpentry encourages its volunteers to use the popular lesson development methodology presented by Wiggins and McTighe [<xref ref-type="bibr" rid="pcbi.1005963.ref004">4</xref>], in which learning objectives and assessments are created before any lesson materials are developed. In particular, “summative assessments” are created to determine whether the learning objectives have been met, and “formative assessments” are created to gauge the progress of learners and to give them a chance to practice key skills. The completed formative assessments are put in order and only then are the lessons written, with the aim of connecting each formative assessment to the next. This method is effective in its own right, but its greatest benefit is that it gives everyone a framework for collaboration.</p>
<p>An example of how to teach such pedagogical practices is Software Carpentry’s instructor training program. First offered in 2012, it is now a two-day course delivered both in person and online [<xref ref-type="bibr" rid="pcbi.1005963.ref005">5</xref>–<xref ref-type="bibr" rid="pcbi.1005963.ref007">7</xref>]. In addition to a focus on pedagogy, the course teaches whom Software Carpentry’s lessons are for, how they are delivered, and how they are maintained. Largely as a result of this training, several hundred people per year now contribute to Software Carpentry’s lessons.</p>
</sec>
<sec id="sec006">
<title>Rule 4: Encourage and empower contributors</title>
<p>Making the process for contributing to a lesson simple and transparent is the key to receiving contributions. Licensing, code of conduct, governance, and the review and publication process must all be explicit rather than implicit to lower the social barriers to contribution.</p>
<p>Tools can help, especially if they allow proposed changes to be viewed and discussed prior to their incorporation into the lessons. (In software development, this is known as “premerge review.”) However, some tools that are popular in open-source software development have considerable up-front learning costs. Portals like GitHub, for example, support everything that open lesson development needs but require contributors to use Git, which has a notoriously steep learning curve [<xref ref-type="bibr" rid="pcbi.1005963.ref008">8</xref>].</p>
<p>Complicating matters further, some file formats make collaboration easier or more difficult. Despite their ubiquity, open-source version control systems do not directly support review or merge of Microsoft Office or OpenDocument file formats, which raises an additional burden for newcomers [<xref ref-type="bibr" rid="pcbi.1005963.ref009">9</xref>]. While Google Docs and wikis lack some capabilities, such as full-fledged premerge review (although "suggest mode" mitigates this to some degree), their low barrier to entry makes them more welcoming to newcomers.</p>
<p>The best way to choose tools for managing lessons is to ask potential contributors what they are comfortable with rather than requiring them to come to you. Remember also that contributing to a lesson is probably not their top priority, and look for ways to reduce their cognitive load. For example, threaded discussion forums can improve the signal-to-noise ratio by reducing long “reply all” email exchanges. Several open frameworks are available to facilitate development of new lessons, such as learnr (<ext-link ext-link-type="uri" xlink:href="https://rstudio.github.io/learnr" xlink:type="simple">https://rstudio.github.io/learnr</ext-link>), Morea (<ext-link ext-link-type="uri" xlink:href="https://morea-framework.github.io" xlink:type="simple">https://morea-framework.github.io</ext-link>), and DataCamp’s templates (<ext-link ext-link-type="uri" xlink:href="https://www.datacamp.com/teach/documentation" xlink:type="simple">https://www.datacamp.com/teach/documentation</ext-link>).</p>
</sec>
<sec id="sec007">
<title>Rule 5: Build community around lessons</title>
<p>Software versions and dependencies are constantly changing, while the academic literature is advancing at an ever-increasing pace. As a result, what is cutting edge one year may be out of date the next and simply wrong the year after. Collaborative lesson development groups must therefore focus on creating a community in which contributors support each other rather than relying on a small group of stewards. Authors cannot be expected to maintain continual vigilance on a lesson, but this is necessary for continual use.</p>
<p>A key part of doing this is to create opportunities for legitimate peripheral participation. Curating a list of small tasks that newcomers can easily tackle, encouraging them to give feedback on proposed changes, or asking them to add new exercises and tweak diagrams and references can all provide an on-ramp for people who might question their own authority or ability to change the main body of a lesson. Equally, acknowledging all contributions, however small, gives new contributors an early reward for taking part.</p>
<p>In 2015, Software Carpentry established a Mentoring Subcommittee to support instructors as they progress through training, teaching, and curriculum development. The Mentoring Subcommittee has promoted community building by providing virtual spaces where instructors from all over the world can share success stories and discuss strategies for overcoming challenges. This has helped strengthen the community and provided insight into how lessons can be improved (Rule 7).</p>
<p>Finally, working in the open can be great, but it can also unintentionally suppress voices. Programming Historian makes an ombudsperson available for private chats and facilitation to ensure that no one is excluded. Software Carpentry operates by a Code of Conduct that outlines acceptable standards of behavior for community members and those interacting with the Carpentries at events and in virtual spaces. Community members on a Policy Subcommittee serve as advocates for the Code of Conduct and adjudicate reported violations.</p>
</sec>
<sec id="sec008">
<title>Rule 6: Publish periodically and recognize contributions</title>
<p>Like software, specific versions of lessons should be published or released periodically so that learners or instructors have something stable to refer to for the duration of their use (<xref ref-type="fig" rid="pcbi.1005963.g002">Fig 2</xref>). Periodic releases also provide an opportunity for recognizing the contributions of new authors and maintainers.</p>
<p>Academia has only a few ways of recognizing contributions. Until these are expanded, it is important to publish lessons in ways that traditional academic systems can digest. One is to give releases DOIs supplied by providers such as Zenodo (<ext-link ext-link-type="uri" xlink:href="https://zenodo.org/" xlink:type="simple">https://zenodo.org/</ext-link>) or DataCite (<ext-link ext-link-type="uri" xlink:href="https://www.datacite.org/" xlink:type="simple">https://www.datacite.org/</ext-link>). Contributors can be listed as authors and the maintainers of the lesson as editors to differentiate recognition of their contributions. Each time the lesson is published, names and identifiers such as ORCIDs (<ext-link ext-link-type="uri" xlink:href="https://orcid.org" xlink:type="simple">https://orcid.org</ext-link>) should be gathered for all contributors.</p>
<p>A lesson release is a good opportunity to bring the material into a stable shape by fixing outstanding issues and merging contributions. Version control automatically maintains a list of contributors and can also be used to track which content is in which release (e.g., using branches or tags). Lesson releases should use a consistent naming scheme; Software Carpentry has used the year and month of release (e.g., "2017.05") in its releases [<xref ref-type="bibr" rid="pcbi.1005963.ref010">10</xref>, <xref ref-type="bibr" rid="pcbi.1005963.ref011">11</xref>].</p>
<p>If lessons are being released regularly, automate the process and archive old versions in a discoverable location. Also make sure that everyone involved knows what "done" looks like, i.e., which outstanding issues have to be addressed and how they have to be formatted in order for the next release to go out. A simple checklist stored with the lesson materials is good enough to start, but as time goes by, the community may want to use an issue tracking system of some sort so that work items can be assigned to specific people and then ticked off as they are completed.</p>
</sec>
<sec id="sec009">
<title>Rule 7: Evaluate lessons at several scales</title>
<p>What people immersed in developing lessons think needs fixing can easily differ from what learners think. It is therefore critical to gather and act on feedback at several scales to check assumptions and stay on course (<xref ref-type="fig" rid="pcbi.1005963.g002">Fig 2</xref>).</p>
<p>Microscale feedback can be gathered by an instructor while teaching a particular lesson. Learners can provide feedback on everything from typographical errors and the clarity of quiz questions to the order in which topics are presented, all of which the instructor should record at the end of each class in some shared location (such as a Google Doc or GitHub issues). As well as encouraging direct verbal feedback, it is a good idea to provide learners with a means to provide feedback anonymously during class (e.g., on small pieces of paper like sticky notes or through anonymous surveys).</p>
<p>Surveys and interviews before and after class should be used to uncover larger issues, particularly those arising from developers not fully understanding their audience, e.g., assuming prior knowledge that learners do not have. Such surveys are most effective when conducted 30–90 days after class; this gives people time to reflect, so their feedback will more accurately reflect what they learned rather than how entertained they were. Clearly stated learning objectives (Rule 3) are essential here, as they tell assessors what they should be measuring.</p>
</sec>
<sec id="sec010">
<title>Rule 8: Reduce, reuse, recycle</title>
<p>Just as a scholar would not write a paper without a literature review, an instructor should not create a new lesson if there is an existing one they could use or contribute to. A short online search can reveal if someone has written what you need, whether it is complementary to your goals, and if it can be tweaked or modified to meet your needs.</p>
<p>Before reusing content, make sure to check its license. Both Programming Historian and the Carpentry projects use the Creative Commons–Attribution license (<ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/licenses/by/4.0/" xlink:type="simple">https://creativecommons.org/licenses/by/4.0/</ext-link>), which allows people to share and adapt material for any purpose as long as they cite the original source. Other Creative Commons licenses may restrict commercial use and/or creation of derivative materials.</p>
<p>The question of licensing also arises when recycling lesson components such as images, data, figures, or code. If the license does not cover them explicitly, ask permission as you would for any other academic material.</p>
<p>The converse of this rule is to make the license for your lessons explicit and discoverable. For example, when lessons are published (Rule 6), make sure that keywords such as "CC-BY" appear in their bibliography entries and HTML page headers.</p>
</sec>
<sec id="sec011">
<title>Rule 9: Link to other resources</title>
<p>Learners are unlikely to absorb everything they need to know about a topic from your lesson alone. This is partly a matter of scope—any interesting subject is too large to fit in a single lesson—but also a matter of level and direction. As Caulfield has argued [<xref ref-type="bibr" rid="pcbi.1005963.ref012">12</xref>], the best way to use the internet is to provide a chorus of explanations that offer many angles and approaches for a given topic, each of which may be the best fit for a different set of needs (<xref ref-type="fig" rid="pcbi.1005963.g002">Fig 2</xref>).</p>
<p>Collaboratively developed lessons should direct learners to these resources at strategic points. If a community or discussion forum exists for the topic, such as textbooks, technical documentation, videos, web pages, threads on Quora, or mailing lists, then it is worth including.</p>
<p>Doing this is substantial work, and maintaining it even more so, which makes building community around lessons (Rule 5) all the more important. In particular, it is vital to engage the learners as equal participants in that community. They should be able to propose updates, corrections, and additions to lessons and know that they are encouraged to do so (Rule 4).</p>
</sec>
<sec id="sec012">
<title>Rule 10: You can’t please everyone</title>
<p>No single lesson can be right for every learner. Two people with no prior knowledge of a specific subject may still be able to move at different speeds because of different levels of general background knowledge. Similarly, lessons on ecology for learners in Utah and Vietnam will probably be most relatable if they use different examples. A community may therefore maintain several differently oriented or differently paced lessons on a single topic, just as programming languages provide several different libraries for doing the same general thing with different levels of performance and complexity.</p>
<p>Similarly, no lesson development community can serve all purposes. Some groups may prioritize rapid evolution, while others may prefer a "measure twice, cut once" approach. If there are complementary ways to explain something or points of view that can cohabit respectfully, it may be possible to present them side by side. There are good pedagogical reasons to do this even if contributors do not disagree: weighing alternatives fosters higher-order thinking.</p>
<p>But sometimes choices must be made. The open-source software community has wrestled with these issues for three decades and has evolved some best practices to address them [<xref ref-type="bibr" rid="pcbi.1005963.ref013">13</xref>]. As discussed in Rule 4, the first step is to have a clear governance structure and a clear, permissive license. Minor disagreements should be discussed openly and respectfully. If they turn out not to be so minor after all, contributors should split off and evolve the lesson in the way they see best. (This is one of the reasons to have a permissive license.)</p>
<p>These splits rarely happen in practice. When they do, it is important to remember that we all share the same vision of better lessons built together.</p>
</sec>
<sec id="sec013" sec-type="conclusions">
<title>Conclusion</title>
<p>Every day, teachers all over the world spend countless hours duplicating each other’s work. These 10 rules provide an alternative: adopting the model of collaborative software development to make more robust and sustainable lessons in all domains that can be continually improved by those who use them. We hope that our experiences can help others teach more with more impact and less effort.</p>
</sec>
</body>
<back>
<ack>
<p>We are grateful to everyone who provided feedback on this paper, including James Baker, Nathan Moore, Pariksheet Nanda, Tom Pollard, Byron Smith, and Andrew Walker. We are also grateful to the hundreds of people who have contributed to Programming Historian, Data Carpentry, Software Carpentry, and Library Carpentry over many years.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pcbi.1005963.ref001"><label>1</label><mixed-citation publication-type="other" xlink:type="simple">Afanador-Llach MJ, Baker J, Crymble A, Gayol V, Gibbs F, Lincoln M, McDaniel C, Milligan I, Parr J, Castro AR, Knuppel AS, Visconti A, Walsh B, Wieringa J. Programming Historian. Accessed: 8 February 2018. <ext-link ext-link-type="uri" xlink:href="https://programminghistorian.org/" xlink:type="simple">https://programminghistorian.org/</ext-link>.</mixed-citation></ref>
<ref id="pcbi.1005963.ref002"><label>2</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Ambrose</surname> <given-names>SA</given-names></name>, <name name-style="western"><surname>Bridges</surname> <given-names>MW</given-names></name>, <name name-style="western"><surname>DiPietro</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Lovett</surname> <given-names>MC</given-names></name>, <name name-style="western"><surname>Norman</surname> <given-names>MK</given-names></name>. <source>How Learning Works</source>. <publisher-name>Jossey-Bass</publisher-name>; <year>2010</year>.</mixed-citation></ref>
<ref id="pcbi.1005963.ref003"><label>3</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Brownell</surname> <given-names>S. E</given-names></name>. and <name name-style="western"><surname>Tanner</surname> <given-names>K. D.</given-names></name>: <article-title>Barriers to faculty pedagogical change: Lack of training, time, incentives, and…tensions with professional identity?</article-title> <source>CBE Life Sciences Education</source>, <volume>11</volume>(<issue>4</issue>), <year>2012</year>, <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1187/cbe.12-09-0163" xlink:type="simple">10.1187/cbe.12-09-0163</ext-link></comment> <object-id pub-id-type="pmid">23222828</object-id></mixed-citation></ref>
<ref id="pcbi.1005963.ref004"><label>4</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Wiggins</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>McTighe</surname> <given-names>J</given-names></name>. <source>Understanding by Design</source>. <edition>2nd ed</edition>. <publisher-name>Association for Supervision and Curriculum Development</publisher-name>; <year>2005</year>.</mixed-citation></ref>
<ref id="pcbi.1005963.ref005"><label>5</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Wilson</surname> <given-names>G</given-names></name>. <article-title>Software Carpentry: Lessons Learned</article-title>. <source>F1000Research</source>, <volume>3</volume>(<issue>62</issue>), <year>2016</year>, <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.12688/f1000research.3-62.v2" xlink:type="simple">10.12688/f1000research.3-62.v2</ext-link></comment> <object-id pub-id-type="pmid">24715981</object-id></mixed-citation></ref>
<ref id="pcbi.1005963.ref006"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Koch C. and Wilson G. (eds.) Software Carpentry: Instructor Training; 2016. <ext-link ext-link-type="uri" xlink:href="https://zenodo.org/record/57571#.WS8huDOZPdQ" xlink:type="simple">https://zenodo.org/record/57571#.WS8huDOZPdQ</ext-link>.</mixed-citation></ref>
<ref id="pcbi.1005963.ref007"><label>7</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Wilson</surname> <given-names>G</given-names></name>. <source>How to Teach Programming (And Other Things)</source>. <publisher-name>Lulu.com</publisher-name>; <year>2017</year>.</mixed-citation></ref>
<ref id="pcbi.1005963.ref008"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">GitLab Global Developer Survey. Accessed: 8 February 2018. <ext-link ext-link-type="uri" xlink:href="http://get.gitlab.com/global-developer-survey/" xlink:type="simple">http://get.gitlab.com/global-developer-survey/</ext-link>, 2016.</mixed-citation></ref>
<ref id="pcbi.1005963.ref009"><label>9</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Jacobs</surname> <given-names>C. T.</given-names></name>, <name name-style="western"><surname>Gorman</surname> <given-names>G. J.</given-names></name>, <name name-style="western"><surname>Rees</surname> <given-names>H. E.</given-names></name>, and <name name-style="western"><surname>Craig</surname> <given-names>L. E.</given-names></name>: <article-title>Experiences With Efficient Methodologies for Teaching Computer Programming to Geoscientists</article-title> <source>Journal of Geoscience Education</source> <volume>64</volume>(<issue>3</issue>), <year>2016</year>, <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.5408/15-101.1" xlink:type="simple">10.5408/15-101.1</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1005963.ref010"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Devenyi G. A. and Koch C. (eds.): Software Carpentry: The Unix Shell; 2015. <ext-link ext-link-type="uri" xlink:href="https://zenodo.org/record/27355#.WS8lajOZPdQ" xlink:type="simple">https://zenodo.org/record/27355#.WS8lajOZPdQ</ext-link>.</mixed-citation></ref>
<ref id="pcbi.1005963.ref011"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Devenyi G. A. and Srinath A. (eds.): Software Carpentry: The Unix Shell; 2017. <ext-link ext-link-type="uri" xlink:href="https://zenodo.org/record/278226#.WS74tTOZPdQ" xlink:type="simple">https://zenodo.org/record/278226#.WS74tTOZPdQ</ext-link>.</mixed-citation></ref>
<ref id="pcbi.1005963.ref012"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">Caulfield M. Choral Explanations; 2016. Accessed: 8 February 2018. <ext-link ext-link-type="uri" xlink:href="https://hapgood.us/2016/05/13/choral-explanations/" xlink:type="simple">https://hapgood.us/2016/05/13/choral-explanations/</ext-link>.</mixed-citation></ref>
<ref id="pcbi.1005963.ref013"><label>13</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Fogel</surname> <given-names>K</given-names></name>. <source>Producing Open Source Software</source>. <publisher-name>O’Reilly</publisher-name>; <year>2005</year>.</mixed-citation></ref>
</ref-list>
</back>
</article>