<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN" "http://jats.nlm.nih.gov/publishing/1.1d3/JATS-journalpublishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="1.1d3" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id>
<journal-title-group>
<journal-title>PLOS Computational Biology</journal-title>
</journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-17-00494</article-id>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1005904</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Research Article</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Organisms</subject><subj-group><subject>Eukaryota</subject><subj-group><subject>Animals</subject><subj-group><subject>Invertebrates</subject><subj-group><subject>Arthropoda</subject><subj-group><subject>Insects</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social sciences</subject><subj-group><subject>Sociology</subject><subj-group><subject>Social systems</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Applied mathematics</subject><subj-group><subject>Algorithms</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Simulation and modeling</subject><subj-group><subject>Algorithms</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Numerical analysis</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Behavior</subject><subj-group><subject>Animal behavior</subject><subj-group><subject>Foraging</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Zoology</subject><subj-group><subject>Animal behavior</subject><subj-group><subject>Foraging</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Systems science</subject><subj-group><subject>Complex systems</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Systems science</subject><subj-group><subject>Complex systems</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Organisms</subject><subj-group><subject>Eukaryota</subject><subj-group><subject>Animals</subject><subj-group><subject>Invertebrates</subject><subj-group><subject>Arthropoda</subject><subj-group><subject>Insects</subject><subj-group><subject>Hymenoptera</subject><subj-group><subject>Bees</subject><subj-group><subject>Honey bees</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Probability theory</subject><subj-group><subject>Probability distribution</subject></subj-group></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>Costs of task allocation with local feedback: Effects of colony size and extra workers in social insects and other multi-agent systems</article-title>
<alt-title alt-title-type="running-head">Costs of task allocation in complex systems</alt-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0001-7179-0706</contrib-id>
<name name-style="western">
<surname>Radeva</surname> <given-names>Tsvetomira</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Formal analysis</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Writing – original draft</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Dornhaus</surname> <given-names>Anna</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Funding acquisition</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Project administration</role>
<role content-type="http://credit.casrai.org/">Supervision</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
<xref ref-type="fn" rid="econtrib001"><sup>‡</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-3045-265X</contrib-id>
<name name-style="western">
<surname>Lynch</surname> <given-names>Nancy</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Formal analysis</role>
<role content-type="http://credit.casrai.org/">Funding acquisition</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Project administration</role>
<role content-type="http://credit.casrai.org/">Supervision</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="fn" rid="econtrib001"><sup>‡</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0001-9756-0167</contrib-id>
<name name-style="western">
<surname>Nagpal</surname> <given-names>Radhika</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Funding acquisition</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
<xref ref-type="fn" rid="econtrib001"><sup>‡</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Su</surname> <given-names>Hsin-Hao</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Formal analysis</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
</contrib>
</contrib-group>
<aff id="aff001">
<label>1</label>
<addr-line>Electrical Engineering and Computer Science Department, Massachusetts Institute of Technology, Cambridge, MA, USA</addr-line>
</aff>
<aff id="aff002">
<label>2</label>
<addr-line>Department of Ecology and Evolutionary Biology, The University of Arizona, Tucson, AZ, USA</addr-line>
</aff>
<aff id="aff003">
<label>3</label>
<addr-line>School of Engineering and Applied Sciences, Harvard University, Cambridge, MA, USA</addr-line>
</aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>Komarova</surname> <given-names>Natalia L.</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1">
<addr-line>University of California Irvine, UNITED STATES</addr-line>
</aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>The authors have declared that no competing interests exist.</p>
</fn>
<fn fn-type="other" id="econtrib001">
<p>‡ These authors are joint senior authors on this work.</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">radeva@csail.mit.edu</email></corresp>
</author-notes>
<pub-date pub-type="collection">
<month>12</month>
<year>2017</year>
</pub-date>
<pub-date pub-type="epub">
<day>14</day>
<month>12</month>
<year>2017</year>
</pub-date>
<volume>13</volume>
<issue>12</issue>
<elocation-id>e1005904</elocation-id>
<history>
<date date-type="received">
<day>27</day>
<month>3</month>
<year>2017</year>
</date>
<date date-type="accepted">
<day>28</day>
<month>11</month>
<year>2017</year>
</date>
</history>
<permissions>
<copyright-year>2017</copyright-year>
<copyright-holder>Radeva et al</copyright-holder>
<license xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">
<license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pcbi.1005904"/>
<abstract>
<p>Adaptive collective systems are common in biology and beyond. Typically, such systems require a task allocation algorithm: a mechanism or rule-set by which individuals select particular roles. Here we study the performance of such task allocation mechanisms measured in terms of the time for individuals to allocate to tasks. We ask: (1) Is task allocation fundamentally difficult, and thus costly? (2) Does the performance of task allocation mechanisms depend on the number of individuals? And (3) what other parameters may affect their efficiency? We use techniques from distributed computing theory to develop a model of a social insect colony, where workers have to be allocated to a set of tasks; however, our model is generalizable to other systems. We show, first, that the ability of workers to quickly assess demand for work in tasks they are not currently engaged in crucially affects whether task allocation is quickly achieved or not. This indicates that in social insect tasks such as thermoregulation, where temperature may provide a global and near instantaneous stimulus to measure the need for cooling, for example, it should be easy to match the number of workers to the need for work. In other tasks, such as nest repair, it may be impossible for workers not directly at the work site to know that this task needs more workers. We argue that this affects whether task allocation mechanisms are under strong selection. Second, we show that colony size does not affect task allocation performance under our assumptions. This implies that when effects of colony size are found, they are not inherent in the process of task allocation itself, but due to processes not modeled here, such as higher variation in task demand for smaller colonies, benefits of specialized workers, or constant overhead costs. Third, we show that the ratio of the number of available workers to the workload crucially affects performance. Thus, workers in excess of those needed to complete all tasks improve task allocation performance. This provides a potential explanation for the phenomenon that social insect colonies commonly contain inactive workers: these may be a ‘surplus’ set of workers that improves colony function by speeding up optimal allocation of workers to tasks. Overall our study shows how limitations at the individual level can affect group level outcomes, and suggests new hypotheses that can be explored empirically.</p>
</abstract>
<abstract abstract-type="summary">
<title>Author summary</title>
<p>Many complex systems have to allocate their units to different functions: cells in an embryo develop into different tissues, servers in a computer cluster perform different calculations, and insect workers choose particular tasks, such as brood care or foraging. Here we demonstrate that this process does not automatically become easier or harder with system size. If more workers are present than needed to complete the work available, some workers will always be idle; despite this, having surplus workers makes redistributing them across the tasks that need work much faster. Thus, unexpectedly, such surplus, idle workers may potentially significantly improve system performance. Our work suggests that interdisciplinary studies between biology and distributed computing can yield novel insights for both fields.</p>
</abstract>
<funding-group>
<award-group id="award001">
<funding-source>
<institution>Wyss Institute for Biologically Inspired Engineering, Harvard University</institution>
</funding-source>
<principal-award-recipient>
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0001-9756-0167</contrib-id>
<name name-style="western">
<surname>Nagpal</surname> <given-names>Radhika</given-names></name>
</principal-award-recipient>
</award-group>
<award-group id="award002">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/100000001</institution-id>
<institution>National Science Foundation</institution>
</institution-wrap>
</funding-source>
<award-id>CCF-0939370</award-id>
<principal-award-recipient>
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-3045-265X</contrib-id>
<name name-style="western">
<surname>Lynch</surname> <given-names>Nancy</given-names></name>
</principal-award-recipient>
</award-group>
<award-group id="award003">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/100000001</institution-id>
<institution>National Science Foundation</institution>
</institution-wrap>
</funding-source>
<award-id>CCF-1461559</award-id>
<principal-award-recipient>
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-3045-265X</contrib-id>
<name name-style="western">
<surname>Lynch</surname> <given-names>Nancy</given-names></name>
</principal-award-recipient>
</award-group>
<award-group id="award004">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/100006831</institution-id>
<institution>U.S. Air Force</institution>
</institution-wrap>
</funding-source>
<award-id>FA9550-13-1-0042</award-id>
<principal-award-recipient>
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-3045-265X</contrib-id>
<name name-style="western">
<surname>Lynch</surname> <given-names>Nancy</given-names></name>
</principal-award-recipient>
</award-group>
<award-group id="award005">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/100000001</institution-id>
<institution>National Science Foundation</institution>
</institution-wrap>
</funding-source>
<award-id>IOS-3014230</award-id>
<principal-award-recipient>
<name name-style="western">
<surname>Dornhaus</surname> <given-names>Anna</given-names></name>
</principal-award-recipient>
</award-group>
<funding-statement>RN is funded by the Wyss Institute for Biologically Inspired Engineering, Harvard University (<ext-link ext-link-type="uri" xlink:href="https://wyss.harvard.edu/" xlink:type="simple">https://wyss.harvard.edu/</ext-link>). AD is funded by the National Science Foundation (<ext-link ext-link-type="uri" xlink:href="https://www.nsf.gov/" xlink:type="simple">https://www.nsf.gov/</ext-link>) Awards number IOS-3014230. NL, TR, and HS are funded by the National Science Foundation (<ext-link ext-link-type="uri" xlink:href="https://www.nsf.gov/" xlink:type="simple">https://www.nsf.gov/</ext-link>) Awards numbers CCF-0939370 and CCF-1461559, and by the Air Force Office of Scientific Research (<ext-link ext-link-type="uri" xlink:href="http://www.wpafb.af.mil/afrl/afosr" xlink:type="simple">http://www.wpafb.af.mil/afrl/afosr</ext-link>) Contract Number: FA9550-13-1-0042. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
</funding-group>
<counts>
<fig-count count="2"/>
<table-count count="4"/>
<page-count count="29"/>
</counts>
<custom-meta-group>
<custom-meta>
<meta-name>PLOS Publication Stage</meta-name>
<meta-value>vor-update-to-uncorrected-proof</meta-value>
</custom-meta>
<custom-meta>
<meta-name>Publication Update</meta-name>
<meta-value>2017-12-28</meta-value>
</custom-meta>
<custom-meta id="data-availability">
<meta-name>Data Availability</meta-name>
<meta-value>All relevant data are within the paper and its Supporting Information files.</meta-value>
</custom-meta>
</custom-meta-group>
</article-meta>
</front>
<body>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<p>Many systems in biology and engineering, from cells to mobile networks and human societies, consist of several or many interacting units that contribute ‘work’ towards a central goal [<xref ref-type="bibr" rid="pcbi.1005904.ref001">1</xref>–<xref ref-type="bibr" rid="pcbi.1005904.ref006">6</xref>]. Each of these systems employs a ‘task allocation mechanism’, i.e., individual workers choose, or are allocated to, a specific part of the total workload, a task, which they then attempt to complete. The simplest such task allocation mechanism might be one where each individual picks a task randomly; another simple (from an algorithm standpoint) mechanism might be one where each individual is preprogrammed to always pick a defined task. For example, in a simple multicellular organism such as the alga Gonium [<xref ref-type="bibr" rid="pcbi.1005904.ref007">7</xref>], each cell processes nutrients that it happens to encounter, and each cell is equally likely to reproduce. Conversely, a car may be made up of lots of elements that need to work together to make the car run, but these elements have no flexibility with regard to how they contribute to this goal: each part fulfills its preprogrammed and unchangeable function. However, most biological systems, and many engineered ones, do not behave according to either of these extremes. Instead, individuals have to choose how to contribute, and may use various types of information about the need for different types of work to make this choice (note that we are using the term ‘choice’ in the sense of possessing an algorithm that leads to task selection, and do not imply free will). The goals of any such task allocation mechanism are to achieve efficiency and robustness of system function. For example, in a developing embryo, multiple cells have to select which organs or tissues to develop into [<xref ref-type="bibr" rid="pcbi.1005904.ref008">8</xref>]. The task allocation mechanism used has to ensure that the right cells are allocated to all necessary organs; at the same time, it has to tolerate the occasional loss of cells. Similarly, in cloud computing, the demand for different types of computation may change dynamically over time, and so might the availability of individual processors [<xref ref-type="bibr" rid="pcbi.1005904.ref009">9</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref010">10</xref>]. The ideal task-allocation mechanism used here again has to achieve a match of allocated processors with current needs, which likely requires repeated re-allocation.</p>
<p>Is task allocation a difficult problem, and does it matter which algorithm is chosen? If task allocation is an easy problem, then the match of work to workers should be close enough to the theoretical optimum that the efficiency and robustness of the evolved biological systems and designed/engineered systems are not substantially reduced. However, there is evidence from theoretical computer science that indicates that task allocation (referred to as ‘resource allocation’) is difficult [<xref ref-type="bibr" rid="pcbi.1005904.ref011">11</xref>–<xref ref-type="bibr" rid="pcbi.1005904.ref013">13</xref>] in that it requires a non-negligible amount of resources (such as time, memory, and/or communication messages). In particular, [<xref ref-type="bibr" rid="pcbi.1005904.ref012">12</xref>] shows that if individuals also differ in how well they can perform different types of work, then in the model they consider, task allocation is an NP-hard problem. Another line of evidence for the idea that task allocation is difficult is the number of workers in distributed systems that are in fact not allocated to any tasks [<xref ref-type="bibr" rid="pcbi.1005904.ref014">14</xref>]. In social insect colonies in particular, a large fraction of workers do not appear to work [<xref ref-type="bibr" rid="pcbi.1005904.ref015">15</xref>]; in addition, at any point in time, there is another substantial group of individuals who are thought to be actively looking for work [<xref ref-type="bibr" rid="pcbi.1005904.ref016">16</xref>]. This may indicate either that these workers are in excess of the number needed to perform tasks, or that they are result of a task allocation mechanism that either costs time (in the form of workers looking for work) or produces inadequate allocation (unemployed workers that could be employed). Either way, this would indicate that task allocation is not an easy problem (several other hypotheses, unrelated to task allocation, have also been proposed [<xref ref-type="bibr" rid="pcbi.1005904.ref015">15</xref>]). In distributed computing, extra computing devices (in addition to the number necessary to complete the tasks) are often used to achieve fault tolerance and increase efficiency by replicating information and computation over multiple devices [<xref ref-type="bibr" rid="pcbi.1005904.ref009">9</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref010">10</xref>]. Both of these phenomena might indicate that task allocation is neither effective nor fast: if task allocation were easy to achieve quickly, then there would not be a need for costly buffering. If task allocation is a difficult problem, we would expect to see complex systems employ imperfect mechanisms that lead to approximate solutions, or which sometimes fail to allocate workers to tasks correctly, or we might see additional strategies that compensate for mistakes of imperfect task allocation, or trade-offs between the resources invested and the quality of task allocation achieved. Thus, in these cases we expect the chosen task allocation mechanism to contribute significantly to system performance or biological fitness. It will not then be possible to understand the evolution of system organization, or to design an efficient and robust system, without also understanding the constraints imposed by the process of task allocation.</p>
<p>Here we aim to contribute to an understanding of what limits flexible and robust task allocation. To do this, we develop a model of task allocation in social insect colonies. We are specifically interested first in how group size, i.e. the number of individuals that may be allocated to work, affects the difficulty of correct task allocation, and second, in the effects of having more workers available than work (which would lead to inactive workers). We also discuss the effect of the number of distinct task types to which workers have to be allocated. We quantify performance of three generalized task allocation mechanisms that differ in the amount of information available to workers about the demand for work in different tasks. We are thinking of our model as representing individual insect workers making choices among such tasks as foraging or brood care. However, our model is kept general in many respects, and is thus likely to apply to many similar systems where individuals are making choices about tasks using local information.</p>
<p>Group size is typically thought to be a central factor in determining complex system function [<xref ref-type="bibr" rid="pcbi.1005904.ref017">17</xref>]: multicellular organisms [<xref ref-type="bibr" rid="pcbi.1005904.ref018">18</xref>], human societies and organizations [<xref ref-type="bibr" rid="pcbi.1005904.ref019">19</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref020">20</xref>], and social and computer networks [<xref ref-type="bibr" rid="pcbi.1005904.ref021">21</xref>] all have been argued to develop more complexity, acquire new functionalities, and be competitively superior at larger group sizes, and all of this has also been argued for social insect colonies [<xref ref-type="bibr" rid="pcbi.1005904.ref022">22</xref>]. In many cases, although not unequivocally [<xref ref-type="bibr" rid="pcbi.1005904.ref019">19</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref022">22</xref>], larger group size has been associated with more specialized, and possibly less flexible, individuals within the group; this may result from the smaller variance typically experienced by larger groups because of the ‘law of large numbers’ [<xref ref-type="bibr" rid="pcbi.1005904.ref023">23</xref>]. Larger groups may also benefit from ‘economies of scale’ when there are fixed costs that do not scale linearly with the number of individuals [<xref ref-type="bibr" rid="pcbi.1005904.ref024">24</xref>]; for example, broadcast signals reach more individuals in larger groups at the same cost [<xref ref-type="bibr" rid="pcbi.1005904.ref025">25</xref>]. Biological accounts of the evolution of larger groups, at any level of organization, typically focus on these benefits of group size [<xref ref-type="bibr" rid="pcbi.1005904.ref017">17</xref>]. In computer science, on the other hand, research has often focused on the costs of group size [<xref ref-type="bibr" rid="pcbi.1005904.ref013">13</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref026">26</xref>]. Generally speaking, algorithms that require interactions between individuals take much longer to execute in larger groups, because the number of possible interactions increases faster than linearly with group size (with <italic>N</italic><sup>2</sup> for pairwise interactions, exponentially when any number of interactants is possible). Indeed this effect of group size on ‘naive’ distributed problem-solving algorithms is so great that the group size is typically equated with ‘problem size’, and the performance of algorithms is measured mainly in terms of how strongly they depend on group size or other measures closely related to group size [<xref ref-type="bibr" rid="pcbi.1005904.ref013">13</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref027">27</xref>]. This makes sense if one assumes that the effect of group size will outweigh the effects of any constant factors on the performance of the algorithm, even for moderately large groups.</p>
<p>As stated above, we are using social insect colonies as a model system to study the effect of group size on the difficulty of task allocation. Social insects such as bees, ants, wasps, and termites typically live in colonies that contain one or a few queens, who are the source of colony reproduction, and many, anywhere from a handful to millions of workers, who do not reproduce but complete all other tasks [<xref ref-type="bibr" rid="pcbi.1005904.ref028">28</xref>–<xref ref-type="bibr" rid="pcbi.1005904.ref030">30</xref>]. These tasks include foraging (finding and collecting food), nest building and repair, brood care (caring for immature individuals; Hymenopteran insects such as bees and ants spend ≈ 10 − 30% of their lifespan in an immature stage in which they cannot move and have to be cleaned, fed, defended, and kept at a tolerable temperature much like the most dependent mammals in their infant stage), colony defense, and various other tasks that may include thermoregulation (such as by ventilation or heating), nest cleaning, undertaking (removing dead individuals), etc. [<xref ref-type="bibr" rid="pcbi.1005904.ref015">15</xref>]. The need for work in these different tasks typically fluctuates in daily and seasonal patterns as well as stochastically [<xref ref-type="bibr" rid="pcbi.1005904.ref031">31</xref>].</p>
<p>Social insect colonies are self-organized, meaning that neither the queens nor any other workers ‘direct’ the task choices of other workers, although interactions between individuals such as communication signals and aggression may affect task selection [<xref ref-type="bibr" rid="pcbi.1005904.ref029">29</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref032">32</xref>]. There are more than 10000 species of ants alone, and different species of social insects may use different task allocation mechanisms. Any task allocation mechanism consists of two parts: the traits of individuals that predispose them to particular tasks, and the behavioral rules that lead them to select a particular task at a given moment (the individual-level algorithm; [<xref ref-type="bibr" rid="pcbi.1005904.ref033">33</xref>]). In social insects, body size, age, physiological and nutritional status, sensory abilities, and other internal factors are thought to create variation among individuals in task preferences and skills; in addition, individual experience, interactions with other workers, spatial and hierarchical position in the colony, and random encounters with tasks will do so as well, in the short and long term [<xref ref-type="bibr" rid="pcbi.1005904.ref014">14</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref032">32</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref034">34</xref>]. In different species, some or all of these factors may play a role in task allocation, and to differing degrees. The behavioral rule set, i.e. the algorithm, by which individuals choose a task to work on in the moment, is typically thought to involve a comparison between an individual’s task preferences and the need for a particular task; this is sometimes referred to as the ‘task stimulus response threshold mechanism’ (because workers are thought to have different thresholds at which they decide to work on a task, depending on the level of ‘task stimulus’ which communicates demand for work in the task, [<xref ref-type="bibr" rid="pcbi.1005904.ref035">35</xref>]). However, it is worth noting that the actual precise algorithm is seldom defined in the insect literature; e.g. ‘thresholds’ may actually be continuous probabilistic functions, and it is unclear how multiple task stimuli are evaluated (in random order, or at the same time, and do they interact or not). It is also typically unclear how the factors listed above interact to produce variation in preferences across tasks or across individuals; e.g. are the preferences for different tasks independent of one another or not [<xref ref-type="bibr" rid="pcbi.1005904.ref036">36</xref>]. All of this may also vary across species.</p>
<p>Despite this uncertainty about the precise mechanism, the fact that social insects achieve task allocation is well studied. Workers in a colony specialize to a large or small degree on different tasks, and may switch tasks as needed [<xref ref-type="bibr" rid="pcbi.1005904.ref037">37</xref>], although this may come at additional cost [<xref ref-type="bibr" rid="pcbi.1005904.ref038">38</xref>]. Colonies are typically able to effectively compensate for worker loss ([<xref ref-type="bibr" rid="pcbi.1005904.ref036">36</xref>], although see [<xref ref-type="bibr" rid="pcbi.1005904.ref039">39</xref>]) or changes in demand for different tasks [<xref ref-type="bibr" rid="pcbi.1005904.ref014">14</xref>]. However, it is also the case that inactive workers are common: at any point, often &gt; 50%, sometimes &gt; 70%, of the colony appear not to be performing any tasks [<xref ref-type="bibr" rid="pcbi.1005904.ref015">15</xref>]. This may be in part due to need for rest, selfish reproduction by workers [<xref ref-type="bibr" rid="pcbi.1005904.ref040">40</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref041">41</xref>], or immaturity of workers [<xref ref-type="bibr" rid="pcbi.1005904.ref042">42</xref>]; but it has also been suggested that completely inactive and ‘walking’ (without apparently getting anything done) workers may either be looking for work and failing to find it [<xref ref-type="bibr" rid="pcbi.1005904.ref016">16</xref>], or in fact be a surplus of workers not necessary to complete the work of the colony [<xref ref-type="bibr" rid="pcbi.1005904.ref014">14</xref>]. Inactive workers, i.e. units within a complex system that are not contributing, may also be common elsewhere, both in biology and engineering [<xref ref-type="bibr" rid="pcbi.1005904.ref043">43</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref044">44</xref>]. Here we examine the effect of such a buffer of apparently redundant workers on task allocation efficiency.</p>
<p>This study aims to contribute to understanding why social insects evolved the task allocation mechanisms that they did, and, more generally, what limits effective task allocation in distributed sytems. We contribute to these aims by measuring the performance of task allocation mechanisms under different assumptions. To achieve this, we derive how quickly task allocation can be achieved using distributed computing theory methods to analyze algorithm performances. We use a generalized task allocation mechanism with three different assumptions about how individual workers can acquire information about the need for more work in specific tasks (what we call the ‘deficit’). This approach then leads us to insights about whether and how task allocation is limited by group size, the relationship of group size to the total need for work (what we call the ‘demand’), the information available to workers, the number of tasks, and how precisely the colony must match the allocation of workers to demands for work across tasks. The rest of this paper is organized as follows: in the Methods section, we describe the tools and techniques we use from distributed computing theory, together with a formal model of the task allocation system we consider; in the Results section, we mathematically derive bounds (that is upper limits) on the time for ants to allocate themselves to tasks in the various versions of our formal model, and also provide some intuitive explanations and numerical examples of the results; in the Discussion section, we emphasize the implications of our results for actual ant and bee species and we address some caveats and open questions.</p>
</sec>
<sec id="sec002" sec-type="materials|methods">
<title>Methods</title>
<p>In this paper, we use modeling and analysis techniques from the field of theoretical distributed computing to study the difficulty of task allocation in insect colonies. Distributed computing is a field that typically studies networked computers that jointly, but in a self-organized manner, solve a computational problem [<xref ref-type="bibr" rid="pcbi.1005904.ref013">13</xref>]. Similar to biological complex systems, the individual computers may pass messages to each other, but will be otherwise acting independently. We believe that many of the insights and tools from the field of distributed computing theory will be directly useful and informative for biology, and some recent studies have started to apply them to biological problems ([<xref ref-type="bibr" rid="pcbi.1005904.ref012">12</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref045">45</xref>–<xref ref-type="bibr" rid="pcbi.1005904.ref049">49</xref>]).</p>
<p>In distributed computing theory and in this paper, models are generally abstract, discrete and probabilistic; moreover, they are modular in that each individual is modeled independently from other individuals, from the environment (including the tasks), and from the information about tasks the environment may provide to individuals. In these models, we design distributed algorithms and assign an independent copy of the algorithm to run at each individual. We analyze the algorithms mathematically, using proof techniques from probability theory and algorithm complexity, to derive guarantees on the solvability and efficiency of task allocation (measured as the time for workers to allocate themselves correctly to tasks). The specific results we present have both a worst-case and an average-case flavor. The worst-case aspect of the results refers to the possible initial values of the parameters in the system; in other words, we do not measure the performance of our algorithms with respect to the expected average performance given some distribution of starting environments, but instead consider how well the algorithm will do with the worst possible starting conditions (e.g. with respect to the distribution of demands across different task types). The average-case aspect of the results is with respect to the probability distribution of the actual decisions of the workers and the probabilistic feedback they receive from the environment. We elaborate more on this distinction in the Informal Definitions and descriptions section.</p>
<sec id="sec003">
<title>Our approach</title>
<p>The specific abstraction of the task allocation problem that we study involves a distributed process of allocating all workers to tasks with the goal of satisfying the demand for each task. The demand for each task can be thought of as a work-rate required to keep the task satisfied. We consider all workers to be equal in skill level and preferences. While this is an abstraction, we focus here on simply the challenge of allocating generalist workers among tasks. We do not attempt to model how the demand for a task is computed or measured empirically. Instead, we assume that as a result of workers trying to maximize the fitness of the colony, there is some optimal number of workers performing each task, and this is what the workers should attempt to match.</p>
<p>At each time step, each worker decides what task to work on based on simple feedback from the environment informing the worker of the state of the tasks. In particular, we consider two specific types of environment feedback: (1) whether the worker is successful at its current task, and (2) which task does the work choose next. We analyze whether this general algorithm is able to successfully allocate the workers so that all tasks are satisfied, and the time for this process to terminate. In particular, we focus on upper bounds for the time to satisfy all tasks (i.e. how long it is expected to take given the worst possible starting conditions) as a function of colony size, the number of tasks, and the total amount of work in the presence or absence of extra workers (beyond the minimum to satisfy all tasks) in the colony.</p>
</sec>
<sec id="sec004">
<title>Informal definitions and descriptions</title>
<sec id="sec005">
<title>Model</title>
<p>We consider a setting in which all workers are identical and each worker can supply one unit of work to each task type (brood care, foraging, nest maintenance, etc.). For brevity, for the rest of the paper, we will refer to tasks types as <italic>tasks</italic>.</p>
<p>At the start of the re-allocation process, each task is characterized by an integer-valued demand, and we consider a task to be satisfied when the number of units of work provided to the task is at least as much as the demand of the task. In order to guarantee that it is possible to satisfy the demands of all tasks, we assume that the number of workers is at least as large as the total sum of all demands.</p>
<p>We also assume the workers perform actions in lock step and that each such step is sufficiently long so that the workers can re-evaluate the state of the environment at the end of each round, which includes the effect of the work performed by other workers in that round. Based on that information, at the end of each step, each worker decides what action to perform (what task to work on) in the next step. We measure the efficiency of the re-allocation process as the number of steps necessary for the workers to re-allocate to the tasks in a way that matches or exceeds the demands (we term this ‘successful reallocation’).</p>
</sec>
<sec id="sec006">
<title>Feedback about task demands</title>
<p>We abstract away from actual low-level mechanisms that workers use to acquire knowledge about the environment; instead, we focus on the <italic>information content</italic> of the environment feedback. Therefore, we can model feedback that is minimal and probabilistic. Our goal is to provide only limited information about the state of the environment.</p>
<p>In particular, we consider environment feedback that consists of two components: <italic>success</italic> and <italic>choice</italic>. The first component, <italic>success</italic>, informs each worker whether it is <italic>successful</italic> at the task it is currently working on (i.e. whether its work was needed there), and the second component, <italic>choice</italic>, provides each worker with an alternative task to work on, in case it is not successful at its current task. From a biological perspective, the separation between these two components is motivated by the two main ways a worker interacts with its environment: (1) from attempting to work on some task, a worker learns whether its work is needed, and (2) from randomly interacting with tasks in the nest, it may perceive need for work in tasks it is not active in. We consider the following specifications for <italic>success</italic> and <italic>choice</italic>.</p>
<p><italic>Success feedback:</italic> We assume that for a given time step and a given task, if the number of workers working on this task is less than or equal to the demand of the task, then all workers working on the task are ‘successful’. Otherwise, if more workers are working on the task than the demand requires, then we assume <italic>success</italic> informs only as many workers as needed to satisfy the demand that they are successful, and it informs the rest of the workers working on the task that they are unsuccessful. Since workers are identical and do not store any work history (similarly to a Markov process), it is not important which workers are the successful ones and which workers are the unsuccessful ones among all the workers working on some task, as long as the number of successful workers does not exceed the demand of the task.</p>
<p>A good analogy to the <italic>success</italic> feedback is the game of musical chairs: the number of chairs corresponds to the demand of the task, and the number of workers working on the task corresponds to the number of people playing the game. In musical chairs, all players who manage to find a seat when the music stops continue to the next round; similarly, the workers that manage to complete some amount of work that contributed to decreasing the demand are considered successful.</p>
<p>As a result, <italic>success</italic> provides each worker with implicit information about the amount of work needed for the task without directly informing the worker of the exact value of that amount.</p>
<p><italic>Choice feedback:</italic> For the second component, <italic>choice</italic>, of the environment feedback, we assume workers determine an alternative task to work on by encountering tasks randomly. We model three probability distributions for the <italic>choice</italic> component.</p>
<p>The simplest way to model a worker encountering a random task in the nest is to assume <italic>choice</italic> provides the worker with (1) a uniformly random task (that is, each task is equally likely to be chosen). We think of the uniform distribution as a very natural way to choose a task without any information about the set of tasks or their demands. Other distributions imply some knowledge about parameters of the distribution. For example, the normal distribution implies we have some information about the mean and variance of the distribution. Even more importantly, since our random variable is discrete, the normal distribution is not a good choice because we do not assume any ‘ordering’ of the tasks. Thus, the ‘uniform’ distribution here simply means that each task is chosen with equal probability. Alternatively, we might think workers recognize tasks that need work, and <italic>choice</italic> might provide (2) a uniformly random task only among the unsatisfied tasks. Finally, we might think that tasks provide information on their level of demand, and thus workers may be able to choose (3) a task that needs more work compared to other tasks. Option (1) implies that workers initially choose a task with no information on the demand for work in different tasks. Options (2) and (3) imply that workers can sense which tasks need work before engaging in them, e.g. through a task stimulus produced by unsatisfied tasks such as pheromone produced by hungry (unfed) brood (indicating need for brood care). Since we assume that in all cases workers will discover whether their contribution was actually needed through the ‘success feedback’ mechanism, options (1) and (2) imply that tasks are ultimately checked for demand one at a time, i.e. with a cost of one round per task checked, while in option (3) workers can sense demand for all tasks at once.</p>
<p>See <xref ref-type="table" rid="pcbi.1005904.t001">Table 1</xref> for an example execution of the task allocation system.</p>
<table-wrap id="pcbi.1005904.t001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005904.t001</object-id>
<label>Table 1</label>
<caption>
<title>Sample execution of a task allocation in our model.</title>
</caption>
<alternatives>
<graphic id="pcbi.1005904.t001g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005904.t001" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="center"/>
<th align="center">Inactive Workers</th>
<th align="center">Task 1<break/>⋆⋆</th>
<th align="center">Task 2<break/>⋆ ⋆ ⋆⋆</th>
<th align="center">Task 3<break/>⋆</th>
<th align="center">Task 4<break/>⋆ ⋆ ⋆</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Time 0:</td>
<td align="center">• • • • • • • • • • ••</td>
<td align="center">∘∘</td>
<td align="center">• ∘ ∘∘</td>
<td align="center">∘</td>
<td align="center">• ∘ ∘</td>
</tr>
<tr>
<td align="center">Time 1:</td>
<td align="center">• • • • • • • • ••</td>
<td align="center">•∘</td>
<td align="center">• ∘ ∘∘</td>
<td align="center">•</td>
<td align="center">• ∘ ∘</td>
</tr>
<tr>
<td align="center">Time 2:</td>
<td align="center">• • • • ••</td>
<td align="center">•∘</td>
<td align="center">• • ∘∘</td>
<td align="center">•</td>
<td align="center">• • ∘</td>
</tr>
<tr>
<td align="center">Time 3:</td>
<td align="center">• • ••</td>
<td align="center">•∘</td>
<td align="center">• • ∘∘</td>
<td align="center">• • •</td>
<td align="center">• • ∘</td>
</tr>
<tr>
<td align="center">Time 4:</td>
<td align="center">••</td>
<td align="center">••</td>
<td align="center">• • ••</td>
<td align="center">•</td>
<td align="center">• • •</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t001fn001">
<p>Sample execution of a task allocation in our model. The stars denote the demand of each task, the empty circles denote unsatisfied units of work, and the solid circles denote workers working on specific tasks. The execution begins at time 0 when only two workers are working on tasks 2 and 4. Then, at time 1 some workers join tasks 1 and 3. At time 2, more workers join all tasks. At time 3, too many workers join Task 3 and only one of them is successful because the demand for the task is 1. Finally, at time 4 all tasks are satisfied. The remaining workers indicate that the size of the colony is greater that the total sum of the demands of all tasks.</p>
</fn>
</table-wrap-foot>
</table-wrap>
</sec>
<sec id="sec007">
<title>Performance measure</title>
<p>In all three of the options for the <italic>choice</italic> component, keeping the <italic>success</italic> component the same, we are interested in upper bounds on (that is, the maximum value of, and thus the worst-case for) the time until workers are correctly re-allocated such that the demands of the tasks are satisfied. It is important to note that our results have both a worst-case flavor (in terms of the initial configuration of the system) and average-case flavor (in terms of the probability distribution defined by the <italic>choice</italic> component).</p>
<p>The worst-case analysis refers to the initial assignment of workers to tasks as well as the demands of the tasks. So, when we say that for some scenario the running time is at most <italic>t</italic>, informally, it implies that for any possible initial configuration of task demands and assignment of workers to tasks, starting from that configuration, it takes time at most <italic>t</italic> to re-allocate the workers correctly. It is not always clear whether there exists an initial configuration (assignment of workers to tasks and task demands) that results in a re-allocation of exactly time <italic>t</italic>; it is also not straightforward to identify the initial configuration that requires the most rounds for workers to re-allocate correctly (the ‘worst-case’ initial configuration). In other words, we do not average the time to re-allocate over all possible initial configurations. Averaging over all possible initial configurations would be a challenging task given that the space of such initial configurations is very large; moreover, we would have to assume all initial configurations are equally likely to arise, which may not necessarily be a reasonable assumption.</p>
<p>The average-case (or more generally, probabilistic) analysis refers to the fact that we use the distribution of outputs of the <italic>choice</italic> component. So, when we say that for some scenario with probability at least <italic>p</italic> the running time is at most <italic>t</italic>, informally, it implies that we took into account all possible outputs of <italic>choice</italic> and their likelihood in order to calculate <italic>t</italic>. In other words, it is possible that the workers do not re-allocate within time <italic>t</italic> (or ever), but the probability of that happening is less that 1 − <italic>p</italic> (usually extremely small). Analyzing the running time in such a probabilistic way is a manageable task because we know exactly what the distribution of outputs of <italic>choice</italic> is for each of the three options and at each step.</p>
</sec>
</sec>
<sec id="sec008">
<title>Formal definitions</title>
<p>See <xref ref-type="supplementary-material" rid="pcbi.1005904.s001">S1 Text</xref> for a more detailed version of this section.</p>
<p>Let <italic>A</italic> denote the set of workers and <italic>T</italic> denote the set of tasks. Each task <italic>i</italic> ∈ <italic>T</italic> has an integer demand <italic>d</italic><sub><italic>i</italic></sub> that represents the minimum number of workers required to work on task <italic>i</italic> in order to satisfy the task. Let <italic>w</italic><sub><italic>i</italic></sub> denote the total number of worker units of work currently supplied to task <italic>i</italic>. Let <inline-formula id="pcbi.1005904.e001"><alternatives><graphic id="pcbi.1005904.e001g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e001" xlink:type="simple"/><mml:math display="inline" id="M1"><mml:mover><mml:mi>w</mml:mi> <mml:mo accent="true">→</mml:mo></mml:mover></mml:math></alternatives></inline-formula> and <inline-formula id="pcbi.1005904.e002"><alternatives><graphic id="pcbi.1005904.e002g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e002" xlink:type="simple"/><mml:math display="inline" id="M2"><mml:mover><mml:mi>d</mml:mi> <mml:mo accent="true">→</mml:mo></mml:mover></mml:math></alternatives></inline-formula> denote the vectors of <italic>w</italic><sub><italic>i</italic></sub> and <italic>d</italic><sub><italic>i</italic></sub> values, respectively, for each 1 ≤ <italic>i</italic> ≤ |<italic>T</italic>|. The <inline-formula id="pcbi.1005904.e003"><alternatives><graphic id="pcbi.1005904.e003g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e003" xlink:type="simple"/><mml:math display="inline" id="M3"><mml:mover><mml:mi>d</mml:mi> <mml:mo accent="true">→</mml:mo></mml:mover></mml:math></alternatives></inline-formula> vector is static, while <inline-formula id="pcbi.1005904.e004"><alternatives><graphic id="pcbi.1005904.e004g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e004" xlink:type="simple"/><mml:math display="inline" id="M4"><mml:mover><mml:mi>w</mml:mi> <mml:mo accent="true">→</mml:mo></mml:mover></mml:math></alternatives></inline-formula> changes over time depending on the different tasks workers choose to work on. Clearly, in order for all demands to be met, there should be sufficiently many workers in the colony. We assume that there exists a real <italic>c</italic> ≥ 1 such that |<italic>A</italic>| = <italic>c</italic> ⋅ ∑<sub><italic>i</italic>∈<italic>T</italic></sub> <italic>d</italic><sub><italic>i</italic></sub>.</p>
<sec id="sec009">
<title>Feedback</title>
<p>We consider two feedback components, <italic>success</italic> and <italic>choice</italic>, that provide each worker with a boolean in {0, 1} and a task in <italic>T</italic> ∪ {⊥}, respectively, determined based on <inline-formula id="pcbi.1005904.e005"><alternatives><graphic id="pcbi.1005904.e005g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e005" xlink:type="simple"/><mml:math display="inline" id="M5"><mml:mover><mml:mi>w</mml:mi> <mml:mo accent="true">→</mml:mo></mml:mover></mml:math></alternatives></inline-formula> and <inline-formula id="pcbi.1005904.e006"><alternatives><graphic id="pcbi.1005904.e006g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e006" xlink:type="simple"/><mml:math display="inline" id="M6"><mml:mover><mml:mi>d</mml:mi> <mml:mo accent="true">→</mml:mo></mml:mover></mml:math></alternatives></inline-formula>. The output values of <italic>success</italic> and <italic>choice</italic> are determined according to some probability distributions.</p>
</sec>
<sec id="sec010">
<title>Workers</title>
<p>Each worker <italic>a</italic> ∈ <italic>A</italic> has a state <italic>q</italic> ∈ <italic>Q</italic> = {<italic>q</italic><sub>⊥</sub>, <italic>q</italic><sub>1</sub>, <italic>q</italic><sub>2</sub>, ⋯, <italic>q</italic><sub>|<italic>T</italic>|</sub>} at each point in time, where <italic>q</italic><sub>⊥</sub> indicates that worker <italic>a</italic> is not working on any task and each state <italic>q</italic><sub><italic>i</italic></sub>, for <italic>i</italic> ∈ {1, ⋯, |<italic>T</italic>|}, indicates that worker <italic>a</italic> is working on task <italic>i</italic>. Each worker is modeled as a finite state machine with transition function <italic>δ</italic>: <italic>Q</italic> × ({0, 1} × (<italic>T</italic> ∪ {⊥})) → <italic>Q</italic>; in other words, each worker’s new state is determined by its old state and its inputs from the <italic>success</italic> and <italic>choice</italic> components. Let <italic>q</italic> be the current state of some worker <italic>a</italic>, and let <italic>q</italic>′ be the resulting state of worker <italic>a</italic> after applying <italic>δ</italic>. In each step, <italic>q</italic>′ is determined as follows: <italic>q</italic>′ = <italic>q</italic> if <italic>success</italic> outputs 1, and <italic>q</italic>′ = <italic>q</italic><sub><italic>i</italic></sub> if <italic>success</italic> outputs 0 and <italic>choice</italic> outputs <italic>i</italic> ∈ <italic>T</italic> ∪ {⊥}.</p>
</sec>
<sec id="sec011">
<title>Execution</title>
<p>The execution of any algorithm solving the task allocation problem starts at time 0 and proceeds in synchronous rounds, such that each round <italic>r</italic> + 1, for <italic>r</italic> ≥ 0, denotes the transition from time <italic>r</italic> to time <italic>r</italic> + 1. In each round <italic>r</italic> + 1, the <italic>success</italic> and <italic>choice</italic> components provide each worker with a boolean and a task. Each worker component performs a state transition using its <italic>δ</italic> transition function and performs some amount of work on the task associated with its state.</p>
</sec>
<sec id="sec012">
<title>Problem statement</title>
<p>A task <italic>i</italic> ∈ <italic>T</italic> is <italic>satisfied</italic> at time <italic>r</italic> if <italic>d</italic><sub><italic>i</italic></sub> ≤ <italic>w</italic><sub><italic>i</italic></sub>(<italic>r</italic>). An algorithm satisfies all tasks by time <italic>r</italic> ≥ 0 if for each <italic>r</italic>′ ≥ <italic>r</italic>, all tasks <italic>i</italic> ∈ <italic>T</italic> are satisfied at time <italic>r</italic>′.</p>
<p>The specification of <italic>success</italic> and some of the specifications of <italic>choice</italic> in this section are inspired by the biological model by Pacala et al. [<xref ref-type="bibr" rid="pcbi.1005904.ref050">50</xref>] and simplified for the sake of easier analysis.</p>
</sec>
<sec id="sec013">
<title>Success component</title>
<p>The <italic>success</italic> component determines whether each worker is successful at the task it is currently working on and allows excess workers working on a satisfied task to switch to another task. Throughout this paper, we consider <italic>success</italic> components that satisfy the following conditions in each execution and at each time <italic>r</italic> of the execution: for each task <italic>i</italic> ∈ <italic>T</italic>, |{<italic>a</italic>∣<italic>a</italic> is in state <italic>q</italic><sub><italic>i</italic></sub> at time <italic>r</italic> and receives 1 from the <italic>success</italic> component in round <italic>r</italic> + 1}| = min(<italic>d</italic><sub><italic>i</italic></sub>, <italic>w</italic><sub><italic>i</italic></sub>(<italic>r</italic>)). Also, each worker in state <italic>q</italic><sub>⊥</sub> at time <italic>r</italic> receives 0 from <italic>success</italic> in round <italic>r</italic> + 1.</p>
</sec>
<sec id="sec014">
<title>Choice component</title>
<p>The <italic>choice</italic> component returns a candidate task to each worker as an alternative task to work on. We consider three different specifications of <italic>choice</italic>:</p>
<list list-type="order">
<list-item>
<p><italic>choice</italic> returns a task drawn from all the tasks in <italic>T</italic> uniformly at random (with probability 1/|<italic>T</italic>|).</p>
</list-item>
<list-item>
<p><italic>choice</italic> returns a task drawn from the set of unsatisfied tasks, <italic>U</italic>(<italic>r</italic>) = {<italic>i</italic>∣<italic>d</italic><sub><italic>i</italic></sub> &gt; <italic>w</italic><sub><italic>i</italic></sub>(<italic>r</italic>)}, uniformly at random. If there is no such task, then <italic>choice</italic> returns ⊥.</p>
</list-item>
<list-item>
<p><italic>choice</italic> returns a task <italic>i</italic> drawn from the set of all unsatisfied tasks with probability (<italic>d</italic><sub><italic>i</italic></sub> − <italic>w</italic><sub><italic>i</italic></sub>(<italic>r</italic>))/∑<sub><italic>j</italic>∈<italic>U</italic>(<italic>r</italic>)</sub>(<italic>d</italic><sub><italic>j</italic></sub> − <italic>w</italic><sub><italic>j</italic></sub>(<italic>r</italic>)). This option corresponds to the scenario where workers can somehow sense the need to work on each task, and are more likely to work on tasks with high deficit <italic>d</italic><sub><italic>i</italic></sub> − <italic>w</italic><sub><italic>i</italic></sub>(<italic>r</italic>) compared to the total deficit of all unsatisfied tasks ∑<sub><italic>j</italic>∈<italic>U</italic>(<italic>r</italic>)</sub>(<italic>d</italic><sub><italic>j</italic></sub> − <italic>w</italic><sub><italic>j</italic></sub>(<italic>r</italic>)).</p>
</list-item>
</list>
</sec>
</sec>
</sec>
<sec id="sec015" sec-type="results">
<title>Results</title>
<p>First, we present the formal statement of our results, together with simple proof overviews. We start by introducing a few general facts about the task allocation system, like properties of the <italic>success</italic> and <italic>choice</italic> feedback, and simple results about the the general growth of the level of satisfaction of each task. Next, we describe the main results corresponding to each of the three options for the <italic>choice</italic> components. For each such option, we present the formal result on how much time is required for workers to correctly re-allocate, and then describe informally the main arguments of the proofs. The full proofs of all the results are available in <xref ref-type="supplementary-material" rid="pcbi.1005904.s002">S2 Text</xref>. Readers uninterested in the specific mathematical arguments can skip to the Non-technical Summary of Results section. Finally, in the Numerical results section, we provide numerical examples that illustrate our results with respect to concrete values of the parameters.</p>
<sec id="sec016">
<title>General facts</title>
<p>In this section, we give some basic definitions and results that will be used in the subsequent analyses of the convergence times for the various <italic>choice</italic> options.</p>
<p>A task is <italic>satisfied</italic> at time <italic>r</italic> if <italic>d</italic><sub><italic>i</italic></sub> ≤ <italic>w</italic><sub><italic>i</italic></sub>(<italic>r</italic>). Let <italic>S</italic>(<italic>r</italic>) denote the set of satisfied tasks at time <italic>r</italic>. Let <italic>U</italic>(<italic>r</italic>) = <italic>T</italic> \ <italic>S</italic>(<italic>r</italic>) denote the set of unsatisfied tasks at time <italic>r</italic>. For each task <italic>i</italic> ∈ <italic>T</italic> and each time <italic>r</italic>, let Φ<sub><italic>i</italic></sub>(<italic>r</italic>) = max{0, (<italic>d</italic><sub><italic>i</italic></sub> − <italic>w</italic><sub><italic>i</italic></sub>(<italic>r</italic>))} be the <italic>deficit</italic> of task <italic>i</italic> at time <italic>r</italic>. If <italic>i</italic> ∈ <italic>U</italic>(<italic>r</italic>), then Φ<sub><italic>i</italic></sub>(<italic>r</italic>) = <italic>d</italic><sub><italic>i</italic></sub> − <italic>w</italic><sub><italic>i</italic></sub>(<italic>r</italic>). We define the <italic>total deficit</italic> at time <italic>r</italic>:
<disp-formula id="pcbi.1005904.e007"><alternatives><graphic id="pcbi.1005904.e007g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e007" xlink:type="simple"/><mml:math display="block" id="M7"><mml:mtable displaystyle="true"><mml:mtr><mml:mtd columnalign="right"><mml:mrow><mml:mo>Φ</mml:mo> <mml:mrow><mml:mo>(</mml:mo> <mml:mi>r</mml:mi> <mml:mo>)</mml:mo></mml:mrow> <mml:mo>=</mml:mo> <mml:munder><mml:mo>∑</mml:mo> <mml:mrow><mml:mi>i</mml:mi> <mml:mo>∈</mml:mo> <mml:mi>T</mml:mi></mml:mrow></mml:munder> <mml:msub><mml:mo>Φ</mml:mo> <mml:mi>i</mml:mi></mml:msub> <mml:mrow><mml:mo>(</mml:mo> <mml:mi>r</mml:mi> <mml:mo>)</mml:mo></mml:mrow> <mml:mo>.</mml:mo></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:math></alternatives></disp-formula>
Define a worker to be <italic>inactive</italic> in round <italic>r</italic>, for <italic>r</italic> &gt; 0, if it is in state <italic>q</italic><sub>⊥</sub> at time <italic>r</italic> − 1 or if it receives 0 from <italic>success</italic> in round <italic>r</italic>. In other words, a worker is inactive if it is not working on any task, or if it unsuccessful at the current task it is working on.</p>
<p>For a full list of the parameters used in the model and analysis, see <xref ref-type="table" rid="pcbi.1005904.t002">Table 2</xref>.</p>
<table-wrap id="pcbi.1005904.t002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005904.t002</object-id>
<label>Table 2</label>
<caption>
<title>Summary of parameters in the task allocation model and analysis.</title>
</caption>
<alternatives>
<graphic id="pcbi.1005904.t002g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005904.t002" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left">Symbol</th>
<th align="left">Parameter definition</th>
<th align="left">Plausible range</th>
<th align="left">Explanation for range</th>
<th align="left">References</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">|<italic>T</italic>|</td>
<td align="left">number of tasks</td>
<td align="left">[2, 20]</td>
<td align="left">At low end if conceived of as the number of distinct worker task groups; at higher end if all ‘identifiable’ worker activities are included.</td>
<td align="left">[<xref ref-type="bibr" rid="pcbi.1005904.ref015">15</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref051">51</xref>–<xref ref-type="bibr" rid="pcbi.1005904.ref053">53</xref>]</td>
</tr>
<tr>
<td align="left">Φ</td>
<td align="left">initial deficit</td>
<td align="left">[5, 500]</td>
<td align="left">Considerable variation across species and situations; what is empirically measured is the number of workers actually re-allocated or activated.</td>
<td align="left">[<xref ref-type="bibr" rid="pcbi.1005904.ref031">31</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref054">54</xref>–<xref ref-type="bibr" rid="pcbi.1005904.ref057">57</xref>]</td>
</tr>
<tr>
<td align="left">|<italic>A</italic>|</td>
<td align="left">number of workers</td>
<td align="left">[2, 20 million]</td>
<td align="left">Most species are in the 10-500 range for total colony size.</td>
<td align="left">[<xref ref-type="bibr" rid="pcbi.1005904.ref022">22</xref>]</td>
</tr>
<tr>
<td align="left"><italic>D</italic></td>
<td align="left">total task demands</td>
<td align="left">[2, 20 million]</td>
<td align="left">We assumed here that the demand for work, measured in insect workloads, is in the same range as the colony size (see section 4.3 for discussion).</td>
<td align="left">[<xref ref-type="bibr" rid="pcbi.1005904.ref022">22</xref>]</td>
</tr>
<tr>
<td align="left"><italic>c</italic></td>
<td align="left">extra workers (|<italic>A</italic>|/<italic>D</italic>)</td>
<td align="left">[1, 2]</td>
<td align="left">Since <italic>D</italic> has not been empirically measured, neither has <italic>c</italic>. If we assume ‘inactive’ workers may be in excess of work that needs to be performed, values in the entire range are plausible.</td>
<td align="left">[<xref ref-type="bibr" rid="pcbi.1005904.ref015">15</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref052">52</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref058">58</xref>–<xref ref-type="bibr" rid="pcbi.1005904.ref060">60</xref>]</td>
</tr>
<tr>
<td align="left">1 − <italic>δ</italic></td>
<td align="left">success probability</td>
<td align="left">[0.5, 0.95]</td>
<td align="left">To our knowledge, no attempts to estimate delta or epsilon exist. Our estimates are simply based on the assumption that in some cases, e.g. defense, colonies would need to be ‘very’ certain that approximately the correct number of workers are allocated to the task at hand; in other cases, such as foraging, colonies may only need moderate certainty that task allocation is successful.</td>
<td align="center"/>
</tr>
<tr>
<td align="left">1 − <italic>ϵ</italic></td>
<td align="left">fraction of deficit to be satisfied</td>
<td align="left">[0.7, 0.9]</td>
<td align="left"><italic>ϵ</italic> reflects the degree to which the demand for work in a task is exactly matched. Given the high degree of stochasticity observed in task allocation in social insects, we assumed here that 1 − <italic>ϵ</italic> is not required to be ‘very’ close to 1 in most cases.</td>
<td align="left">[<xref ref-type="bibr" rid="pcbi.1005904.ref054">54</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref061">61</xref>]</td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
<p>Based on the basic properties of the <italic>success</italic> and <italic>choice</italic> components, we can establish the following facts:</p>
<list list-type="order">
<list-item>
<p>The number of work units supplied to a given task <italic>i</italic> ∈ <italic>T</italic> is non-decreasing.</p>
</list-item>
<list-item>
<p>For each <italic>r</italic> ≥ 0, |<italic>U</italic>(<italic>r</italic>)| ≥ |<italic>U</italic>(<italic>r</italic> + 1)| and |<italic>S</italic>(<italic>r</italic>)| ≤ |<italic>S</italic>(<italic>r</italic> + 1)| (follows from fact 1). In other words, the number of unsatisfied tasks never increases and the number of satisfied tasks never decreases.</p>
</list-item>
<list-item>
<p>For each <italic>r</italic> ≥ 0, Φ<sub><italic>i</italic></sub>(<italic>r</italic>) ≥ Φ<sub><italic>i</italic></sub>(<italic>r</italic> + 1). The deficit of each task never increases.</p>
</list-item>
<list-item>
<p>By the assumption that |<italic>A</italic>| = <italic>c</italic> ⋅ ∑<sub><italic>i</italic>∈<italic>T</italic></sub> <italic>d</italic><sub><italic>i</italic></sub>, the number of inactive workers in round <italic>r</italic> + 1 is at least <italic>c</italic> ⋅ Φ(<italic>r</italic>). So, the more total deficit, the more inactive workers we have.</p>
</list-item>
<list-item>
<p>If the probability to satisfy a task in round <italic>r</italic> + 1 is at least <italic>p</italic>, then <inline-formula id="pcbi.1005904.e008"><alternatives><graphic id="pcbi.1005904.e008g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e008" xlink:type="simple"/><mml:math display="inline" id="M8"><mml:mrow><mml:mstyle mathvariant="double-struck"><mml:mi>E</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">[</mml:mo> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mi>U</mml:mi> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mi>r</mml:mi> <mml:mo>+</mml:mo> <mml:mn>1</mml:mn> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mo form="postfix" stretchy="false">]</mml:mo> <mml:mo>≤</mml:mo> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mi>U</mml:mi> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mi>r</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mo>⋅</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>−</mml:mo> <mml:mi>p</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula> and <inline-formula id="pcbi.1005904.e009"><alternatives><graphic id="pcbi.1005904.e009g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e009" xlink:type="simple"/><mml:math display="inline" id="M9"><mml:mrow><mml:mstyle mathvariant="double-struck"><mml:mi>E</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">[</mml:mo> <mml:mo>Φ</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mi>r</mml:mi> <mml:mo>+</mml:mo> <mml:mn>1</mml:mn> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">]</mml:mo> <mml:mo>≤</mml:mo> <mml:mo>Φ</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mi>r</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo>⋅</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>−</mml:mo> <mml:mi>p</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>. In other words, if we know the probability with which each task gets satisfied in a given round, we can calculate the expected number of unsatisfied tasks and the expected total deficit in the next round.</p>
</list-item>
<list-item>
<p>If <italic>choice</italic> always returns an unsatisfied task to each worker, then the workers re-allocate successfully in at most |<italic>T</italic>| rounds.</p>
</list-item>
</list>
<p>Next, we analyze the three variations of the <italic>choice</italic> component.</p>
</sec>
<sec id="sec017">
<title>Uniformly random tasks</title>
<p>In this section, we consider the first option for the <italic>choice</italic> component, where in each round <italic>choice</italic> returns a task <italic>i</italic> with probability 1/|<italic>T</italic>|. This section includes only proof overviews and approximate running times. For detailed proofs of the results in this section, refer to <xref ref-type="supplementary-material" rid="pcbi.1005904.s002">S2 Text</xref>.</p>
<p>One of the main results for this option of the <italic>choice</italic> component states that for any success probability 1 − <italic>δ</italic> that we choose, the time until workers re-allocate correctly is at most <inline-formula id="pcbi.1005904.e010"><alternatives><graphic id="pcbi.1005904.e010g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e010" xlink:type="simple"/><mml:math display="inline" id="M10"><mml:mrow><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mi>T</mml:mi> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:msup><mml:mi>c</mml:mi> <mml:mrow><mml:mo>−</mml:mo> <mml:mn>1</mml:mn></mml:mrow></mml:msup> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mtext>ln</mml:mtext><mml:mspace width="4pt"/> <mml:mo>Φ</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>0</mml:mn> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo>+</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>δ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>. We can see the time is linearly proportional to the number of tasks |<italic>T</italic>|, logarithmically proportional to the total amount of work needed (Φ(0)) and the inverse of the failure probability, and inversely proportional to <italic>c</italic>, the ratio of the colony size to the total sum of demands of tasks.</p>
<p><bold>Theorem 1.</bold> <italic>For any δ</italic>, 0 &lt; <italic>δ</italic> &lt; 1, <italic>with probability at least</italic> 1 − <italic>δ, all tasks are satisfied by time</italic> <inline-formula id="pcbi.1005904.e011"><alternatives><graphic id="pcbi.1005904.e011g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e011" xlink:type="simple"/><mml:math display="inline" id="M11"><mml:mrow><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mi>T</mml:mi> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:msup><mml:mi>c</mml:mi> <mml:mrow><mml:mo>−</mml:mo> <mml:mn>1</mml:mn></mml:mrow></mml:msup> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mtext>ln</mml:mtext><mml:mspace width="4pt"/> <mml:mo>Φ</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>0</mml:mn> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo>+</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>δ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>.</p>
<p><italic>Proof Idea:</italic> We know that the number of inactive workers in round <italic>r</italic> + 1 is at least <italic>c</italic> ⋅ Φ(<italic>r</italic>) (by fact 4). By the definition of <italic>choice</italic> in this section, each inactive worker starts working on each task <italic>i</italic> with probability 1/|<italic>T</italic>|. Therefore, we can show that, in each round, the expected number of new workers to join each unsatisfied task is at least <italic>c</italic> ⋅ Φ(<italic>r</italic>)/|<italic>T</italic>|.</p>
<p>First, consider the case when <italic>c</italic> ≤ 2|<italic>T</italic>| and consider some time <italic>r</italic>. After some workers join task <italic>i</italic> in round <italic>r</italic> + 1, it is not guaranteed that the entire new set of workers remains working on task <italic>i</italic> because some workers may be unsuccessful if task <italic>i</italic> does not require that many workers. Assuming <italic>c</italic> ≤ 2|<italic>T</italic>|, since the total deficit is Φ(<italic>r</italic>) and there are |<italic>T</italic>| tasks, we can show that in expectation the total deficit in the next round is at least <italic>c</italic> ⋅ Φ(<italic>r</italic>)/|<italic>T</italic>| (which can be 0 if all tasks are satisfied). Therefore, in expectation, at least <italic>c</italic> ⋅ Φ(<italic>r</italic>)/|<italic>T</italic>| of the new workers that join tasks will remain working on them. This implies that the expected total deficit Φ(<italic>r</italic>) decreases by approximately <italic>c</italic> ⋅ Φ(<italic>r</italic>)/|<italic>T</italic>| in round <italic>r</italic> + 1.</p>
<p>Next, we consider the case of <italic>c</italic> &gt; 2|<italic>T</italic>|. We can express <italic>c</italic> as a multiple of |<italic>T</italic>|: <italic>c</italic> = <italic>c</italic>′ ⋅ |<italic>T</italic>| for some <italic>c</italic>′ &gt; 2. We can show that in each round, the probability to satisfy each task is at least some constant, and consequently (using fact 5 above), we conclude that the expected number of unsatisfied tasks and the total deficit decrease by a constant fraction in each round.</p>
<p>Finally, we start at time 0, when the total deficit is Φ(0), and inductively apply the conclusions above in the cases of <italic>c</italic> ≤ 2|<italic>T</italic>| and <italic>c</italic> &gt; 2|<italic>T</italic>|. By facts 2 and 3, we know that both |<italic>U</italic>| and Φ are non-increasing, so we just need to analyze how fast they decrease. For the case of <italic>c</italic> ≤ 2|<italic>T</italic>|, the expected total deficit Φ(<italic>r</italic>) decreases by approximately <italic>c</italic> ⋅ Φ(<italic>r</italic>)/|<italic>T</italic>| in each round <italic>r</italic> + 1. So it will take approximately (|<italic>T</italic>|/<italic>c</italic>) ln Φ(0) rounds until the total deficit decreases to 0. To turn this into a more formal probabilistic claim, we can add approximately ln(1/<italic>δ</italic>) rounds, for some 0 &lt; <italic>δ</italic> &lt; 1, in order to ensure that the tasks are satisfied not only in expectation, but with probability at least 1 − <italic>δ</italic>. This trick works by applying a simple Markov bound (see <xref ref-type="supplementary-material" rid="pcbi.1005904.s002">S2 Text</xref>).</p>
<p>The second main result for this option of the <italic>choice</italic> component studies the time until workers re-allocate in such a way that, for any success probability 1 − <italic>δ</italic> and any fraction <italic>ϵ</italic> that we choose, a (1 − <italic>ϵ</italic>)-fraction of the total work Φ(0) is satisfied with probability at least 1 − <italic>δ</italic>. The time to re-allocate in this case is at most <inline-formula id="pcbi.1005904.e012"><alternatives><graphic id="pcbi.1005904.e012g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e012" xlink:type="simple"/><mml:math display="inline" id="M12"><mml:mrow><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mi>T</mml:mi> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:msup><mml:mi>c</mml:mi> <mml:mrow><mml:mo>−</mml:mo> <mml:mn>1</mml:mn></mml:mrow></mml:msup> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>ϵ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo>+</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>δ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>. Similarly to the first result in this section, the time is linearly proportional to the number of tasks |<italic>T</italic>|, logarithmcally proportional to the inverse of the failure probability, and inversely proportional to <italic>c</italic>, the ratio of the colony size to the total sum of demands of tasks. However, here, we do not have a dependence on Φ(0), but only a logarithmic dependence on 1/<italic>ϵ</italic>.</p>
<p><bold>Theorem 2.</bold> <italic>For any δ and ϵ</italic>, 0 &lt; <italic>δ, ϵ</italic> &lt; 1, <italic>with probability at least</italic> 1 − <italic>δ, the deficit at time</italic> <inline-formula id="pcbi.1005904.e013"><alternatives><graphic id="pcbi.1005904.e013g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e013" xlink:type="simple"/><mml:math display="inline" id="M13"><mml:mrow><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mi>T</mml:mi> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:msup><mml:mi>c</mml:mi> <mml:mrow><mml:mo>−</mml:mo> <mml:mn>1</mml:mn></mml:mrow></mml:msup> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>ϵ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo>+</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>δ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula> <italic>is at most ϵ</italic> ⋅ Φ(0).</p>
<p><italic>Proof Idea:</italic> Following the same structure as the proof above, we can also compute the number of rounds until the tasks are satisfied approximately. Suppose we only want a (1 − <italic>ϵ</italic>) fraction of Φ(0) to be satisfied for 0 &lt; <italic>ϵ</italic> &lt; 1. Recall that for <italic>c</italic> ≤ 2|<italic>T</italic>|, the expected total deficit Φ(<italic>r</italic>) decreases by approximately <italic>c</italic> ⋅ Φ(<italic>r</italic>)/|<italic>T</italic>| in each round <italic>r</italic> + 1. So it will take only (|<italic>T</italic>|/<italic>c</italic>)(ln(1/<italic>ϵ</italic>) + ln(1/<italic>δ</italic>)) rounds to ensure this is true with probability at least 1 − <italic>δ</italic> (again, the ln(1/<italic>δ</italic>) factor is to ensure the probability guarantee).</p>
<p>For the case of <italic>c</italic> &gt; 2|<italic>T</italic>|, we proceed similarly. Recall that in this case <italic>c</italic>′ = <italic>c</italic>/|<italic>T</italic>| and the expected number of unsatisfied tasks and the total deficit decrease by a constant fraction in each round (this constant depends on <italic>c</italic>′). So, with probability at least 1 − <italic>δ</italic>, all tasks are satisfied by time approximately (1/<italic>c</italic>′)(min{ln |<italic>T</italic>|, ln Φ(0)} + ln(1/<italic>δ</italic>)). The reason for having a minimum is to take advantage of the smaller value between |<italic>T</italic>| and Φ(0). And similarly, if we only want to satisfy the tasks approximately the ln Φ(0) term turns into ln (1/<italic>ϵ</italic>).</p>
</sec>
<sec id="sec018">
<title>Uniformly random unsatisfied tasks</title>
<p>In this section, we consider the second option for the <italic>choice</italic> component where in each round <italic>choice</italic> returns a task <italic>i</italic> ∈ <italic>U</italic>(<italic>r</italic>) with probability 1/|<italic>U</italic>(<italic>r</italic>)|. This section includes only proof overviews and approximate running times. For detailed proofs of the results in this section, refer to <xref ref-type="supplementary-material" rid="pcbi.1005904.s002">S2 Text</xref>.</p>
<p>One of the main results for this option of the <italic>choice</italic> component states that for <italic>c</italic> ≥ 1 and any success probability 1 − <italic>δ</italic> that we choose, the time until workers re-allocate correctly is at most <inline-formula id="pcbi.1005904.e014"><alternatives><graphic id="pcbi.1005904.e014g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e014" xlink:type="simple"/><mml:math display="inline" id="M14"><mml:mrow><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mtext>ln</mml:mtext><mml:mspace width="4pt"/> <mml:mo>Φ</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>0</mml:mn> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo>+</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>δ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>. We can see the time is logarithmically proportional to the total amount of work needed (Φ(0)) and the inverse of the failure probability. Since <italic>c</italic> may be extremely close to 1, we do not get any effect of <italic>c</italic> in this result.</p>
<p><bold>Theorem 3.</bold> <italic>For c</italic> ≥ 1 <italic>and for any δ</italic>, 0 &lt; <italic>δ</italic> &lt; 1, <italic>with probability at least</italic> 1 − <italic>δ, all tasks are satisfied by time</italic> <inline-formula id="pcbi.1005904.e015"><alternatives><graphic id="pcbi.1005904.e015g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e015" xlink:type="simple"/><mml:math display="inline" id="M15"><mml:mrow><mml:mtext>min</mml:mtext> <mml:mo form="prefix" stretchy="false">{</mml:mo> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mi>T</mml:mi> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mo>,</mml:mo> <mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mtext>ln</mml:mtext><mml:mspace width="4pt"/> <mml:mo>Φ</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>0</mml:mn> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo>+</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>δ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">}</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>.</p>
<p><italic>Proof Idea:</italic> Suppose <italic>c</italic> ≥ 1 and consider some time <italic>r</italic>. We can show that in round <italic>r</italic> + 1 at least one of the following happens: (1) the total deficit decreases by a constant fraction, or (2) the number of unsatisfied tasks decreases by a constant fraction. To show the first property holds, we consider tasks with a fairly high deficit, which are not likely to get satisfied in one round. We show that the number of new workers joining such tasks is enough to decrease the total deficit by a constant fraction. To show the second property (the number of unsatisfied tasks decreases by a constant fraction), we focus on tasks with fairly low deficit which are likely to get satisfied within one round. We can show that these tasks are enough to decrease the total number of unsatisfied tasks by a constant fraction in one round. For showing both (1) and (2), we first prove a bound on the probability to satisfy any given task in a single round and then use fact 5 to get a bound on the expected number of unsatisfied tasks and the expected total deficit.</p>
<p>Finally, we start at time 0, when the total deficit is Φ(0) and the number of unsatisfied tasks is at most |<italic>T</italic>|, and inductively apply the two results above. By facts 2 and 3, we know that both |<italic>U</italic>| and Φ are non-increasing, so we just need to analyze how fast they decrease. If it is the case that the expected total deficit Φ(<italic>r</italic>) decreases by a constant factor in each round, then it will take approximately ln Φ(0) rounds until the total deficit decreases to 0. If it is the case that the number of unsatisfied tasks decrease by a constant factor in each round, then it will take approximately ln |<italic>U</italic>(0)| rounds until the total deficit decreases to 0. Since Φ(0) ≥ |<italic>U</italic>(0)|, we know either Φ(0) or |<italic>U</italic>(0)| will decrease to 0 in approximately 2 ln Φ(0) rounds. To turn this into a more formal probabilistic claim, we can add approximately ln (1/<italic>δ</italic>) rounds, for some 0 &lt; <italic>δ</italic> &lt; 1, in order to ensure that the tasks are satisfied not only in expectation, but with probability at least 1 − <italic>δ</italic>. This trick works by applying a simple Markov bound (see <xref ref-type="supplementary-material" rid="pcbi.1005904.s002">S2 Text</xref>). The minimum in the final bound follows by fact 6 in the General Facts section.</p>
<p>The second main result for this option of the <italic>choice</italic> component states that for <italic>c</italic> &gt; 1 and any success probability 1 − <italic>δ</italic> that we choose, the time until workers re-allocate correctly is at most <inline-formula id="pcbi.1005904.e016"><alternatives><graphic id="pcbi.1005904.e016g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e016" xlink:type="simple"/><mml:math display="inline" id="M16"><mml:mrow><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mspace width="4pt"/><mml:mi>c</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mtext>ln</mml:mtext><mml:mspace width="4pt"/> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mi>T</mml:mi> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mo>+</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>δ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>. Similarly to the result above, the time is logarithmically proportional to the total amount of work (Φ(0)) needed initially, and the inverse of the failure probability. Now, <italic>c</italic> is strictly greater than 1, so we see that the time is also inversely proportional to the natural logarithm of <italic>c</italic>.</p>
<p><bold>Theorem 4.</bold> <italic>For c</italic> &gt; 1 <italic>and for any δ</italic>, 0 &lt; <italic>δ</italic> &lt; 1, <italic>with probability at least</italic> 1 − <italic>δ, all tasks are satisfied by time</italic> <inline-formula id="pcbi.1005904.e017"><alternatives><graphic id="pcbi.1005904.e017g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e017" xlink:type="simple"/><mml:math display="inline" id="M17"><mml:mrow><mml:mtext>min</mml:mtext> <mml:mo form="prefix" stretchy="false">{</mml:mo> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mi>T</mml:mi> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mo>,</mml:mo> <mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mspace width="4pt"/><mml:mi>c</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mtext>ln</mml:mtext><mml:mspace width="4pt"/> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mi>T</mml:mi> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mo>+</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>δ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">}</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>.</p>
<p><italic>Proof Idea:</italic> Suppose <italic>c</italic> &gt; 1 and consider some time <italic>r</italic>. Unlike the case of <italic>c</italic> ≥ 1, where in round <italic>r</italic> + 1 either the total deficit or the number of unsatisfied tasks decreases by a constant fraction, here we can show that the number of unsatisfied tasks decreases by at least a constant fraction in round <italic>r</italic> + 1. We consider all tasks with a fairly low deficit, which are likely to get satisfied in a single round. The total deficit at time <italic>r</italic> is Φ(<italic>r</italic>), and the total number of inactive workers in round <italic>r</italic> + 1 is at least <italic>c</italic> ⋅ Φ(<italic>r</italic>). The fact that the number of inactive workers is at least a constant fraction greater than the total deficit lets us show that the expected number of low-deficit tasks is at least a constant fraction of all unsatisfied tasks. Therefore, by satisfying these low-deficit tasks the number of unsatisfied tasks decreases by a constant fraction in expectation. Again, we can show this by proving a bound on the probability to satisfy any given task and then using fact 5. The value of that constant fraction by which the number of unsatisfied tasks decreases is what determines the dependence of the running time on 1/ln <italic>c</italic> in this case.</p>
<p>Finally, we start at time 0, when the total deficit is Φ(0) and the number of unsatisfied tasks is |<italic>U</italic>(0)|, and inductively apply the result above to show that the workers will re-allocate correctly within <inline-formula id="pcbi.1005904.e018"><alternatives><graphic id="pcbi.1005904.e018g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e018" xlink:type="simple"/><mml:math display="inline" id="M18"><mml:mrow><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mtext>ln</mml:mtext><mml:mspace width="4pt"/> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mi>U</mml:mi> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>0</mml:mn> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mo>+</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>δ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula> rounds. Note that ln |<italic>U</italic>(0)| ≤ ln |<italic>T</italic>| and ln |<italic>U</italic>(0)| ≤ Φ(0). The minimum in the final bound follows by fact 6 in the General Facts section.</p>
<p>We can combine the results of the two theorems in this section. Clearly, if <italic>c</italic> is extremely close to 1, the 1/ln <italic>c</italic> term becomes very large, and in the limit the running time becomes ∞. Therefore, we can take the minimum of the running times in the cases of <italic>c</italic> ≥ 1 and <italic>c</italic> &gt; 1 to get the overall running time of the algorithm. Essentially, the running time is determined mostly by the case of <italic>c</italic> &gt; 1, except for the small range of values for <italic>c</italic> when <italic>c</italic> is very close to 1.</p>
</sec>
<sec id="sec019">
<title>Unsatisfied tasks prioritized by deficit</title>
<p>In this section, we consider the third option for the <italic>choice</italic> component where in each round <italic>choice</italic> returns a task <italic>i</italic> ∈ <italic>U</italic>(<italic>r</italic>) with probability (<italic>d</italic><sub><italic>i</italic></sub> − <italic>w</italic><sub><italic>i</italic></sub>(<italic>r</italic>))/Φ(<italic>r</italic>). This section includes only proof overviews and approximate running times. For detailed proofs of the results in this section, refer to <xref ref-type="supplementary-material" rid="pcbi.1005904.s002">S2 Text</xref>.</p>
<p>One of the main results for this option of the <italic>choice</italic> component states that for <italic>c</italic> ≥ 1 and any success probability 1 − <italic>δ</italic> that we choose, the time until workers re-allocate correctly is at most <inline-formula id="pcbi.1005904.e019"><alternatives><graphic id="pcbi.1005904.e019g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e019" xlink:type="simple"/><mml:math display="inline" id="M19"><mml:mrow><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mspace width="4pt"/><mml:mo>Φ</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>0</mml:mn> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo>+</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>δ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>. We can see the time is logarithmically proportional to the total amount of work needed (Φ(0)) and the inverse of the failure probability. Since <italic>c</italic> may be extremely close to 1, we do not get any effect of <italic>c</italic> in this result.</p>
<p><bold>Theorem 5.</bold> <italic>For c</italic> ≥ 1 <italic>and for any δ</italic>, 0 &lt; <italic>δ</italic> &lt; 1, <italic>with probability at least</italic> 1 − <italic>δ, all tasks are satisfied by time</italic> <inline-formula id="pcbi.1005904.e020"><alternatives><graphic id="pcbi.1005904.e020g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e020" xlink:type="simple"/><mml:math display="inline" id="M20"><mml:mrow><mml:mtext>min</mml:mtext> <mml:mo form="prefix" stretchy="false">{</mml:mo> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mi>T</mml:mi> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mo>,</mml:mo> <mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mtext>log</mml:mtext> <mml:mo>Φ</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>0</mml:mn> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo>+</mml:mo> <mml:mtext>log</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>δ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">}</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>.</p>
<p><italic>Proof Idea:</italic> Since an inactive worker starts working on a task <italic>i</italic> with probability (<italic>d</italic><sub><italic>i</italic></sub> − <italic>w</italic><sub><italic>i</italic></sub>(<italic>r</italic>))/Φ(<italic>r</italic>), and since there are at least Φ(<italic>r</italic>) inactive workers in round <italic>r</italic> + 1, the expected number of new workers to join task <italic>i</italic> in round <italic>r</italic> + 1 is at least a constant fraction of <italic>d</italic><sub><italic>i</italic></sub> − <italic>w</italic><sub><italic>i</italic></sub>(<italic>r</italic>), which is exactly the deficit of the task at time <italic>r</italic>. We can show that each task is satisfied in round <italic>r</italic> + 1 with probability 1/2, and so, by fact 5 the total number of unsatisfied tasks and the total deficit decreases by half in expectation. Finally, we start at time 0, when the total deficit is Φ(0) and inductively apply the observation above to show that the workers will re-allocate correctly in approximately logΦ(0) rounds. The minimum in the final bound follows by fact 6 in the General Facts section.</p>
<p>The second main result for this option of the <italic>choice</italic> component states that for <italic>c</italic> &gt; 1 and any success probability 1 − <italic>δ</italic> that we choose, the time until workers re-allocate correctly is at most <inline-formula id="pcbi.1005904.e021"><alternatives><graphic id="pcbi.1005904.e021g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e021" xlink:type="simple"/><mml:math display="inline" id="M21"><mml:mrow><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>c</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mtext>ln</mml:mtext><mml:mspace width="4pt"/> <mml:mo>Φ</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>0</mml:mn> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo>+</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>δ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>. Similarly to the result above, the time is logarithmically proportional to the total amount of work needed (Φ(0)) and the inverse of the failure probability. Now, <italic>c</italic> is strictly greater than 1, so we see that the time is also inversely proportional to the natural logarithm of <italic>c</italic>.</p>
<p><bold>Theorem 6.</bold> <italic>For c</italic> &gt; 1 <italic>and for any δ</italic>, 0 &lt; <italic>δ</italic> &lt; 1, <italic>with probability at least</italic> 1 − <italic>δ, all tasks are satisfied by time</italic> <inline-formula id="pcbi.1005904.e022"><alternatives><graphic id="pcbi.1005904.e022g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e022" xlink:type="simple"/><mml:math display="inline" id="M22"><mml:mrow><mml:mtext>min</mml:mtext> <mml:mo form="prefix" stretchy="false">{</mml:mo> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mi>T</mml:mi> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mo>,</mml:mo> <mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>c</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mtext>ln</mml:mtext><mml:mspace width="4pt"/> <mml:mo>Φ</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>0</mml:mn> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo>+</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>δ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">}</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>.</p>
<p><italic>Proof Idea:</italic> For the case of <italic>c</italic> &gt; 1, similarly to the case of <italic>c</italic> ≥ 1, we show that each task is satisfied with a constant probability, so the number of unsatisfied tasks and the total deficit decrease by a constant fraction in each round. The value of that constant fraction is what let us show that the running time depends on 1/<italic>c</italic>. The minimum in the final bound follows by fact 6 in the General Facts section.</p>
<p>We can combine the results the two theorems in this section. Clearly, if <italic>c</italic> is extremely close to 1, the 1/<italic>c</italic> term becomes very large, and in the limit the running time becomes ∞. Therefore, we can take the minimum of the running times in the cases of <italic>c</italic> ≥ 1 and <italic>c</italic> &gt; 1.</p>
<sec id="sec020">
<title>Introducing noise</title>
<p>Suppose the <italic>success</italic> component is not completely reliable and it can flip the 0/1 bits of at most 0 ≤ <italic>z</italic> ≤ |<italic>A</italic>| workers in round <italic>r</italic> + 1. Moreover, we assume the information needed to determine the outputs of the <italic>choice</italic> component in the same round is based on the state variables at time <italic>r</italic>. That is, the <italic>choice</italic> component does not incorporate the <italic>z</italic> potential mistakes into its outputs. Also, suppose the <italic>choice</italic> component is also not completely reliable and can change the probability of outputting task <italic>i</italic> from exactly Φ<sub><italic>i</italic></sub>(<italic>r</italic>)/Φ(<italic>r</italic>) to any value larger than (1 − <italic>y</italic>)(Φ<sub><italic>i</italic></sub>(<italic>r</italic>)/Φ(<italic>r</italic>)) for any 0 ≤ <italic>y</italic> &lt; 1 while still maintaining a probability distribution over all the tasks.</p>
<p>Although it is no longer possible to guarantee that all tasks are satisfied, we can show that the deficit does not exceed <italic>z</italic>, and the time to achieve this increases as <italic>y</italic> approaches 1. For any success probability 1 − <italic>δ</italic> that we choose and any noise parameters <italic>y</italic> and <italic>z</italic> (within the permitted ranges), we study the time until workers re-allocate in such a way that at most <italic>z</italic> units of work remain unsatisfied. Similarly to above, the time is logarithmically proportional to the total amount of work needed (Φ(0)) and the inverse of the failure probability. Additionally, for the case of <italic>c</italic> ≥ 1 (in particular when <italic>c</italic> is very close to 1) the time is inversely proportional to ln (1/<italic>y</italic>), a value that gets extremely large as <italic>y</italic> gets very close to 1. In the case of <italic>c</italic> &gt; 1, the time is inversely proportional to <italic>c</italic> and does not have the dependence on <italic>y</italic>.</p>
<p><bold>Theorem 7.</bold> <italic>For c</italic> ≥ 1, <italic>for any δ</italic>, 0 &lt; <italic>δ</italic> &lt; 1, <italic>and for</italic> <inline-formula id="pcbi.1005904.e023"><alternatives><graphic id="pcbi.1005904.e023g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e023" xlink:type="simple"/><mml:math display="inline" id="M23"><mml:mrow><mml:mi>r</mml:mi> <mml:mo>=</mml:mo> <mml:mtext>min</mml:mtext> <mml:mo form="prefix" stretchy="false">{</mml:mo> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mi>T</mml:mi> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mo>,</mml:mo> <mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>y</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mspace width="4pt"/><mml:mo>Φ</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>0</mml:mn> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo>+</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>δ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">}</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>, Pr[Φ(<italic>r</italic>) ≤ <italic>z</italic>] ≥ 1 − <italic>δ</italic>.</p>
<p><italic>Proof Idea:</italic> Similarly to the proofs in the previous sections, we need to get a statement on how quickly the expected value of the total deficit decreases. Here, we get a similar result; however, the rate of decrease of the total deficit also depends on the parameters of the noise <italic>y</italic> and <italic>z</italic>. In particular, we can show that in each round, the expected total deficit decreases by a 1 − (3 + <italic>y</italic>)/4 fraction (note that this extremely small as <italic>y</italic> gets close to 1) and it may never go lower than <italic>z</italic>. The minimum in the final bound follows by fact 6 in the General Facts section.</p>
<p>With the above result in mind, we can apply the usual strategy of starting at time 0 when the total deficit is Φ(0) and inductively applying the claim above. The time until the workers re-allocate correctly (with the exception of at most <italic>z</italic> units of work) is approximately (1/ln(1/<italic>y</italic>))(ln Φ(0) + ln(1/<italic>δ</italic>)).</p>
<p><bold>Theorem 8.</bold> <italic>For c</italic> &gt; 1, <italic>for any δ</italic>, 0 &lt; <italic>δ</italic> &lt; 1, <italic>and for</italic> <inline-formula id="pcbi.1005904.e024"><alternatives><graphic id="pcbi.1005904.e024g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e024" xlink:type="simple"/><mml:math display="inline" id="M24"><mml:mrow><mml:mi>r</mml:mi> <mml:mo>=</mml:mo> <mml:mtext>min</mml:mtext> <mml:mo form="prefix" stretchy="false">{</mml:mo> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mi>T</mml:mi> <mml:mo form="prefix" stretchy="false">|</mml:mo> <mml:mo>,</mml:mo> <mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>c</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mtext>ln</mml:mtext><mml:mspace width="4pt"/> <mml:mo>Φ</mml:mo> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>0</mml:mn> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo>+</mml:mo> <mml:mtext>ln</mml:mtext> <mml:mo form="prefix" stretchy="false">(</mml:mo> <mml:mn>1</mml:mn> <mml:mo>/</mml:mo> <mml:mi>δ</mml:mi> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">)</mml:mo> <mml:mo form="postfix" stretchy="false">}</mml:mo></mml:mrow></mml:math></alternatives></inline-formula>, Pr[Φ(<italic>r</italic>) ≤ <italic>z</italic>] ≥ 1 − <italic>δ</italic>.</p>
<p><italic>Proof Idea:</italic> Similarly to the previous sections, we can show a similar result for <italic>c</italic> &gt; 1. We show that the probability to satisfy each task in each round is some constant that depends on <italic>c</italic> and that determines the 1/<italic>c</italic> factor in the running time. Then, we show that the expected total deficit decreases by a constant fraction (that also depends on <italic>c</italic>) and it may never go lower than <italic>z</italic>. Note that, unlike the case of <italic>c</italic> ≥ 1, here the ‘extra workers’ help cancel the effect of <italic>y</italic> on the running time. Finally, we start at time 0 when the total deficit is Φ(0) and inductively apply the claim above. The time until the workers re-allocate correctly (with the exception of at most <italic>z</italic> units of work) is approximately (1/<italic>c</italic>)(ln Φ(0) + ln(1/<italic>δ</italic>)). The minimum in the final bound follows by fact 6 in the General Facts section.</p>
<p>As in the previous sections, we can combine the above two theorems by taking a minimum.</p>
</sec>
</sec>
<sec id="sec021">
<title>Non-technical summary of results</title>
<p>For the various options for the <italic>choice</italic> feedback component (keeping the <italic>success</italic> component the same), we study the time to correctly re-allocate all workers: the number of steps workers need to take until the demands of all tasks are satisfied or over-satisfied. In particular, we show three types of results, which differ in precisely what conditions are set on this performance measure (rows in <xref ref-type="table" rid="pcbi.1005904.t003">Table 3</xref>).</p>
<table-wrap id="pcbi.1005904.t003" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005904.t003</object-id>
<label>Table 3</label>
<caption>
<title>Summary of results.</title>
</caption>
<alternatives>
<graphic id="pcbi.1005904.t003g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005904.t003" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="center"/>
<th align="center">option (1)</th>
<th align="center">option (2)</th>
<th align="center">option (3)</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">satisfy all Φ work with prob. 1 − <italic>δ</italic></td>
<td align="center"><inline-formula id="pcbi.1005904.e025"><alternatives><graphic id="pcbi.1005904.e025g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e025" xlink:type="simple"/><mml:math display="inline" id="M25"><mml:mrow><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle><mml:mo form="prefix" stretchy="false">(</mml:mo><mml:mo form="prefix" stretchy="false">|</mml:mo><mml:mi>T</mml:mi><mml:mo form="prefix" stretchy="false">|</mml:mo><mml:mo form="prefix" stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:mi>c</mml:mi><mml:mo form="postfix" stretchy="false">)</mml:mo><mml:mo form="postfix" stretchy="false">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula><break/>(ln Φ + ln (1/<italic>δ</italic>))</td>
<td align="center">min{|<italic>T</italic>|,<break/><inline-formula id="pcbi.1005904.e027"><alternatives><graphic id="pcbi.1005904.e027g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e027" xlink:type="simple"/><mml:math display="inline" id="M27"><mml:mrow><mml:mo form="prefix" stretchy="false">(</mml:mo><mml:mtext>min</mml:mtext><mml:mo form="prefix" stretchy="false">{</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle><mml:mo form="prefix" stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:mtext>ln</mml:mtext><mml:mspace width="4pt"/><mml:mi>c</mml:mi><mml:mo form="postfix" stretchy="false">)</mml:mo><mml:mo form="postfix" stretchy="false">}</mml:mo><mml:mo>⋅</mml:mo></mml:mrow></mml:math></alternatives></inline-formula><break/>(ln Φ + ln (1/<italic>δ</italic>)))}</td>
<td align="center"><inline-formula id="pcbi.1005904.e026"><alternatives><graphic id="pcbi.1005904.e026g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e026" xlink:type="simple"/><mml:math display="inline" id="M26"><mml:mrow><mml:mtext>min</mml:mtext><mml:mo form="prefix" stretchy="false">{</mml:mo><mml:mo form="prefix" stretchy="false">|</mml:mo><mml:mi>T</mml:mi><mml:mo form="prefix" stretchy="false">|</mml:mo><mml:mo>,</mml:mo><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle><mml:mo form="prefix" stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:mi>c</mml:mi><mml:mo form="postfix" stretchy="false">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula><break/>(ln Φ + ln (1/<italic>δ</italic>))}</td>
</tr>
<tr>
<td align="center">satisfy Φ(1 − <italic>ϵ</italic>) work with prob. 1 − <italic>δ</italic></td>
<td align="center"><inline-formula id="pcbi.1005904.e028"><alternatives><graphic id="pcbi.1005904.e028g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e028" xlink:type="simple"/><mml:math display="inline" id="M28"><mml:mrow><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle><mml:mo form="prefix" stretchy="false">(</mml:mo><mml:mo form="prefix" stretchy="false">|</mml:mo><mml:mi>T</mml:mi><mml:mo form="prefix" stretchy="false">|</mml:mo><mml:mo form="prefix" stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:mi>c</mml:mi><mml:mo form="postfix" stretchy="false">)</mml:mo><mml:mo form="postfix" stretchy="false">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula><break/>(ln (1/<italic>ϵ</italic>) + ln (1/<italic>δ</italic>))</td>
<td align="center">min{|<italic>T</italic>|,<break/><inline-formula id="pcbi.1005904.e030"><alternatives><graphic id="pcbi.1005904.e030g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e030" xlink:type="simple"/><mml:math display="inline" id="M30"><mml:mrow><mml:mo form="prefix" stretchy="false">(</mml:mo><mml:mtext>min</mml:mtext><mml:mo form="prefix" stretchy="false">{</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle><mml:mo form="prefix" stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:mtext>ln</mml:mtext><mml:mspace width="4pt"/><mml:mi>c</mml:mi><mml:mo form="postfix" stretchy="false">)</mml:mo><mml:mo form="postfix" stretchy="false">}</mml:mo><mml:mo>⋅</mml:mo></mml:mrow></mml:math></alternatives></inline-formula><break/>(ln (1/<italic>ϵ</italic>) + ln (1/<italic>δ</italic>)))}</td>
<td align="center"><inline-formula id="pcbi.1005904.e029"><alternatives><graphic id="pcbi.1005904.e029g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e029" xlink:type="simple"/><mml:math display="inline" id="M29"><mml:mrow><mml:mtext>min</mml:mtext><mml:mo form="prefix" stretchy="false">{</mml:mo><mml:mo form="prefix" stretchy="false">|</mml:mo><mml:mi>T</mml:mi><mml:mo form="prefix" stretchy="false">|</mml:mo><mml:mo>,</mml:mo><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle><mml:mo form="prefix" stretchy="false">(</mml:mo><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:mi>c</mml:mi><mml:mo form="postfix" stretchy="false">)</mml:mo></mml:mrow></mml:math></alternatives></inline-formula><break/>(ln (1/<italic>ϵ</italic>) + ln (1/<italic>δ</italic>))}</td>
</tr>
<tr>
<td align="center">satisfy Φ − <italic>z</italic> work under uncertainty</td>
<td align="center">did not analyze</td>
<td align="center">did not analyze</td>
<td align="center">min{|<italic>T</italic>|,<break/>(ln Φ + ln (1/<italic>δ</italic>))<break/><inline-formula id="pcbi.1005904.e031"><alternatives><graphic id="pcbi.1005904.e031g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005904.e031" xlink:type="simple"/><mml:math display="inline" id="M31"><mml:mrow><mml:mstyle mathvariant="script"><mml:mi>O</mml:mi></mml:mstyle><mml:mo form="prefix" stretchy="false">(</mml:mo><mml:mtext>max</mml:mtext><mml:mo form="prefix" stretchy="false">{</mml:mo><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:mi>c</mml:mi><mml:mo>,</mml:mo></mml:mrow></mml:math></alternatives></inline-formula><break/>1/ln (1/<italic>y</italic>)})}</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t003fn001">
<p>The values in the table are upper bounds on the time for workers to achieve a task allocation that fulfills the criteria in the first column, given a particular option for the choice feedback. Results are presented in ‘big O’ (asymptotic) notation, which only gives the type of dependence on particular parameters, without specifying constant factors. This helps emphasize the parameters the results depend on, and does not give any information on the exact values of the running times. For precise values of these results, see the Numerical results section and <xref ref-type="supplementary-material" rid="pcbi.1005904.s002">S2 Text</xref>.</p>
</fn>
</table-wrap-foot>
</table-wrap>
<p>First, we consider the case where the demand <italic>D</italic> has to be fully satisfied with a high probability (1 − <italic>δ</italic>). For this case, in options (2) and (3), we see that if the number of task types (|<italic>T</italic>|) is small, the time to allocation only depends on this parameter (see also <xref ref-type="table" rid="pcbi.1005904.t004">Table 4</xref>). If the number of task types is high, we see a positive (logarithmic) dependence of the time to correctly re-allocate all workers on the deficit across all tasks (i.e. the value of Φ). That is, correct allocation takes longer if more workers have to be re-allocated; this relationship is not linear but saturates over time. In the case of option (1) (where workers can only check for demand in different tasks sequentially rather than instantaneously), we also see a linear positive dependence on the number of tasks |<italic>T</italic>|. Finally, as the workers-to-work-ratio (<italic>c</italic>) increases, the time to re-allocate all workers decreases: this means that if there are ‘extra workers’ (workers in excess of the total demand for work), task allocation becomes faster. In options (1) and (3), that dependence is approximately 1/<italic>c</italic>, and in option (2), the dependence is slightly weaker: 1/ln <italic>c</italic> (<xref ref-type="fig" rid="pcbi.1005904.g001">Fig 1</xref>). However, note that extra ants do not contribute towards a faster task allocation until <italic>c</italic> is large enough (approximately until <italic>c</italic> ≥ <italic>e</italic>).</p>
<fig id="pcbi.1005904.g001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005904.g001</object-id>
<label>Fig 1</label>
<caption>
<title>Time for workers to re-allocate as a function of <italic>c</italic>.</title>
<p>The three plots indicate the times until workers re-allocate successfully for options (1), (2), and (3) of the <italic>chocie</italic> component as a function of <italic>c</italic>. The <italic>x</italic>-axis denotes the value of <italic>c</italic>, and the <italic>y</italic> axis denotes the time for workers to re-allocate. For options (1) and (3) the plotted function is approximately 1/<italic>c</italic> multiplied by the corresponding time to re-allocate for <italic>c</italic> = 1. For option (2), the plotted function is approximately 1/ln <italic>c</italic>, truncated at the time for workers to re-allocate for <italic>c</italic> = 1.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005904.g001" xlink:type="simple"/>
</fig>
<table-wrap id="pcbi.1005904.t004" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005904.t004</object-id>
<label>Table 4</label>
<caption>
<title>Numerical results.</title>
</caption>
<alternatives>
<graphic id="pcbi.1005904.t004g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005904.t004" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="center">Insect name</th>
<th align="center">|<italic>T</italic>|</th>
<th align="center"><italic>c</italic></th>
<th align="center">Φ</th>
<th align="center">1 − <italic>δ</italic></th>
<th align="center">1 − <italic>ϵ</italic></th>
<th align="center">(1)</th>
<th align="center">(2)</th>
<th align="center">(3)</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Honey bee (Apis mellifera) predator attack</td>
<td align="center">10</td>
<td align="char" char=".">1.3</td>
<td align="center">5000</td>
<td align="char" char=".">0.95</td>
<td align="char" char=".">0.7</td>
<td align="center">708.49<break/>(258.44)</td>
<td align="center">10<break/>(10)</td>
<td align="center">6.32<break/>(4.73)</td>
</tr>
<tr>
<td align="center">Honey bee (Apis mellifera) change in foraging conditions</td>
<td align="center">10</td>
<td align="char" char=".">1.3</td>
<td align="center">150</td>
<td align="char" char=".">0.8</td>
<td align="char" char=".">0.7</td>
<td align="center">407.39<break/>(173.13)</td>
<td align="center">10<break/>(10)</td>
<td align="center">4.93<break/>(3.35)</td>
</tr>
<tr>
<td align="center">Rock ants (Temnothorax rugutulus) change in foraging conditions</td>
<td align="center">4</td>
<td align="char" char=".">1.7</td>
<td align="center">5</td>
<td align="char" char=".">0.5</td>
<td align="char" char=".">0.7</td>
<td align="center">43.34<break/>(35.71)</td>
<td align="center">4<break/>(4)</td>
<td align="center">2.69<break/>(2.43)</td>
</tr>
<tr>
<td align="center">Rock ants (Temnothorax rugutulus) emigration after nest breakdown</td>
<td align="center">4</td>
<td align="char" char=".">1.7</td>
<td align="center">25</td>
<td align="char" char=".">0.9</td>
<td align="char" char=".">0.9</td>
<td align="center">103.93<break/>(86.69)</td>
<td align="center">4<break/>(4)</td>
<td align="center">4<break/>(4)</td>
</tr>
<tr>
<td align="center">Bumble bee (Bombus impatiens)</td>
<td align="center">8</td>
<td align="char" char=".">1.5</td>
<td align="center">5</td>
<td align="char" char=".">0.9</td>
<td align="char" char=".">0.75</td>
<td align="center">166.91<break/>(157.39)</td>
<td align="center">8<break/>(8)</td>
<td align="center">4.62<break/>(4.3)</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t004fn001">
<p>We calculated the time to successful allocation, in the three options of our model, using numerical parameter values that approximate the conditions in some example cases of task re-allocation in social insects. For each option, we calculate the number of rounds until the entire demand <italic>D</italic> (consequently, the entire initial deficit Φ) is satisfied and, in parentheses, the number of rounds until a (1 − <italic>ϵ</italic>) ⋅ Φ fraction of the demand is satisfied. These are not intended to be exact time estimates; the values for <italic>c</italic>, <italic>δ</italic>, and <italic>ϵ</italic> have not been estimated empirically for any species, nor is it clear how long a ‘round’ precisely should be. The intent, here, is to check whether task allocation might take a significant amount of time in realistic scenarios (and thus be considered a difficult problem, and its solutions, i.e. task allocation algorithms, subject to natural selection). These numerical estimates also serve to illustrate how the different parameters affect the time to successful reallocation in a realistic context of other parameter values.</p>
</fn>
</table-wrap-foot>
</table-wrap>
<p>Second, we studied the time until the demand <italic>D</italic> in different tasks is satisfied approximately (to within a (1 − <italic>ϵ</italic>) fraction) rather than exactly as above (but still with high probability of 1 − <italic>δ</italic>). In general, the effect of different parameters on performance is similar to the case where task demands are satisfied exactly. However, we show that in this case, for all options of <italic>choice</italic>, surprisingly, the time to re-allocate all workers does not depend on the total deficit (Φ) at all. Instead, it depends on the value of <italic>ϵ</italic>. In particular, the smaller <italic>ϵ</italic> gets, the more accurately we need to re-allocate all workers, leading to a longer time to do so, until the same time as for the exact case is reached (as in the first row in <xref ref-type="table" rid="pcbi.1005904.t004">Table 4</xref>).</p>
<p>The results in both cases (exact and approximate matching of task demands) are the same for <italic>ϵ</italic> = 1/Φ. This implies that for very large Φ, <italic>ϵ</italic> needs to be very small in order to have equal values in the two rows. Approximate task allocation is achieved faster than precisely accurate task allocation when Φ &gt; 1/<italic>ϵ</italic>.</p>
<p>Finally, for the third option of the <italic>choice</italic> component, we also study the time to re-allocate all workers under some noise in the <italic>success</italic> and <italic>choice</italic> components. In particular, we assume the <italic>success</italic> component can make a limited number of ‘mistakes’ (at most <italic>z</italic> flipped bits from 0 to 1 and vice versa) and the <italic>choice</italic> component may return a task with a probability slightly larger or smaller than we require in option (3) (change the probability of a task being suggested to a worker by at most a factor of 1 − <italic>y</italic>). We show that the best the workers can do in re-allocating is to satisfy all but <italic>z</italic> units of work, and the time to reach such a re-allocation increases as the range of the probabilities of <italic>choice</italic> increases.</p>
</sec>
<sec id="sec022">
<title>Numerical results</title>
<p>Here, we choose some sample values for the parameters in the model and calculate numerical results (<xref ref-type="table" rid="pcbi.1005904.t004">Table 4</xref> and <xref ref-type="fig" rid="pcbi.1005904.g002">Fig 2</xref>). The expressions used to generate these values roughly correspond to the first two rows of the table in <xref ref-type="table" rid="pcbi.1005904.t003">Table 3</xref>, with the difference that here the values are exact upper bounds and not asymptotic (big-oh) notation (see <xref ref-type="supplementary-material" rid="pcbi.1005904.s002">S2 Text</xref> for how they are calculated).</p>
<fig id="pcbi.1005904.g002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005904.g002</object-id>
<label>Fig 2</label>
<caption>
<title>Time for workers to allocate as a function of <italic>c</italic> and 1 − <italic>δ</italic>.</title>
<p>The two plots indicate the times until workers re-allocate successfully for options (1), (2), and (3) of the <italic>chocie</italic> component as a function of <italic>c</italic> and 1 − <italic>δ</italic> respectively, with specific parameter values assumed (compare the left plot to <xref ref-type="fig" rid="pcbi.1005904.g001">Fig 1</xref>). For both plots, we assume |<italic>T</italic>| = 4, Φ = 10, and <italic>ϵ</italic> = 0. Additionally, for the plot on the left, we assume 1 − <italic>δ</italic> = 0.99, and for the plot on the right, we assume <italic>c</italic> = 1. For the plot on the left, the y-intercept for option (1) (corresponding to <italic>c</italic> = 1) is approximately 221 (and thus this is also the value for option 1 at 1 − <italic>δ</italic> = 0.99 in the right plot.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005904.g002" xlink:type="simple"/>
</fig>
<p>The most obvious pattern here is that task allocation takes a lot more rounds under option (1) (workers are not able to assess quickly which tasks need more work) than under options (2) and (3) for choice. Is task allocation then a ‘difficult’ problem that requires a significant amount of time? This depends on how long, in real time, a ‘round’ is. If workers require time on the order of minutes to choose a task, attempt to perform work in it, and assess whether they have successfully contributed to the colony with this work, then the results for option (1) imply that a colony will need one or several hours to correctly match workers to tasks when the demand for work in the different tasks changes. For the examples given here, that would imply a definite cost, in terms of not being able to maintain a correct match of workers to the tasks that need work (since the level of demand for work is likely to change more frequently than every few hours, or because a lag in matching demand in the realm of hours implies a significant cost). If workers only require seconds to assess demand for work across all tasks (e.g. because task stimuli are volatile pheromones, or global variables like temperature), and can choose a task based on this information, then the time cost of correct allocation in options (2) and (3) is likely insignificant. This would imply that a correct allocation can be achieved quickly, and thus workers should be dynamically and optimally reallocated to changing demands on a timescale of less than a minute.</p>
<p>Another pattern emerging from these calculations is that under options (2) and (3) for choice, it is primarily the number of task types (|<italic>T</italic>|) that affects how fast task allocation proceeds. Neither the number of extra workers (<italic>c</italic>) nor the size of the initial work deficit (Φ) play a major role; also neither does <italic>ϵ</italic>, i.e. allowing a small amount of error in allocation does not decrease the time to successful reallocation in a meaningful way. How accurate are these conclusions, given that we are only examining somewhat arbitrarily chosen parameter combinations? Our results in <xref ref-type="table" rid="pcbi.1005904.t003">Table 3</xref> give a more complete picture, as do the plots in <xref ref-type="fig" rid="pcbi.1005904.g002">Fig 2</xref>; this table is only intended as an illustration of the results. However, the parameter values illustrated here are not entirely arbitrary, but represent best-guesses given empirical data (see <xref ref-type="table" rid="pcbi.1005904.t004">Table 4</xref>). For example, many authors have tried to examine the number of task types in social insects, and our results cover the range generally found (2–30; <xref ref-type="table" rid="pcbi.1005904.t004">Table 4</xref>).</p>
</sec>
</sec>
<sec id="sec023" sec-type="conclusions">
<title>Discussion</title>
<p>Modeling, in general, can serve different purposes in the scientific process [<xref ref-type="bibr" rid="pcbi.1005904.ref062">62</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref063">63</xref>]. Our paper has the goal of examining, first, whether ‘task allocation’, i.e. the process of using a distributed, self-organized algorithm to dynamically match workers to work, is a difficult problem, and second, what factors determine the optimal algorithm to achieve such task allocation. Our paper thus aims to provide a ‘proof of principle’ sensu [<xref ref-type="bibr" rid="pcbi.1005904.ref063">63</xref>]: namely, we aim to show under which factors should be expected, or not expected, to affect the performance of task allocation mechanisms given certain assumptions. Next, we survey the relevant work on theoretical modeling and empirical studies of task allocation; then, we discuss our results, and examine the assumptions we made in the model to achieve them.</p>
<sec id="sec024">
<title>Related work</title>
<p>The process of task allocation and its typical outcome, division of labor, have received a lot of attention in the social insect literature. Empirical studies typically focus on determining the individual traits or experiences that shape, or at least correlate with, individual task specialization: e.g. when larger or older individuals are more likely to forage (e.g. [<xref ref-type="bibr" rid="pcbi.1005904.ref053">53</xref>]) or when interaction rates or positive experience in performing a task affect task choices [<xref ref-type="bibr" rid="pcbi.1005904.ref032">32</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref064">64</xref>]. Generally the re-allocation of workers to tasks after changes in the demand for work often needs to happen on a time scale that is shorter than the production of new workers (which, in bees or ants, takes weeks or months, [<xref ref-type="bibr" rid="pcbi.1005904.ref065">65</xref>]), and indeed empirical studies have found that the traits of new workers do not seem to be modulated by colonies to match the need for work in particular tasks [<xref ref-type="bibr" rid="pcbi.1005904.ref066">66</xref>]. Therefore, more recent empirical and most modeling studies focus on finding simple, local behavior rules that generate individual task specialization (i.e. result in division of labor at the colony level), while simultaneously also enabling group-level responsiveness to the changing needs for work in different tasks [<xref ref-type="bibr" rid="pcbi.1005904.ref035">35</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref067">67</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref068">68</xref>]. For example, in classic papers, Bonabeau et al. [<xref ref-type="bibr" rid="pcbi.1005904.ref069">69</xref>] showed theoretically that differing task stimulus response thresholds among workers enable both task specialization and a flexible group-level response to changing task needs; and Tofts and others [<xref ref-type="bibr" rid="pcbi.1005904.ref070">70</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref071">71</xref>] showed that if workers inhabit mutually-avoiding spatial fidelity zones, and tasks are spread over a work surface, this also enables both task specialization and flexible response to changing needs for work.</p>
<p>In this paper we examined how well we should expect task allocation to be able to match actual demands for work, and how this will depend on group size and the number of ‘extra’, thus inactive, workers. Neither of the modeling studies cited above explicitly considered whether task allocation is improved or hindered by colony size and inactive workers. In addition, while several studies find increasing levels of individual specialization in larger groups, the empirical literature overall does not show a consensus on how task allocation or the proportion of inactive workers is or should be affected by group size (reviewed in [<xref ref-type="bibr" rid="pcbi.1005904.ref014">14</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref022">22</xref>]).</p>
<p>In general, few studies have cosidered the efficiency of the task allocation process itself, and how it relates to the algorithm employed [<xref ref-type="bibr" rid="pcbi.1005904.ref072">72</xref>], often in the context of comparing bio-(ant-)inspired algorithms to algorithms of an entirely different nature [<xref ref-type="bibr" rid="pcbi.1005904.ref073">73</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref074">74</xref>]. For example, Pereira and Gordon, assuming task allocation by social interactions, demonstrate that speed and accuracy of task allocation may trade off against each other, mediated by group size, and thus ‘optimal’ allocation of workers to tasks is not achieved [<xref ref-type="bibr" rid="pcbi.1005904.ref072">72</xref>]. Duarte et al. also find that task allocation by response thresholds does not achieve optimal allocation, and they also find no effect of colony size on task allocation performance [<xref ref-type="bibr" rid="pcbi.1005904.ref075">75</xref>]. Some papers on task allocation in social insects do not examine how group size <italic>per se</italic> influences task allocation, but look at factors such as the potential for selfish worker motives [<xref ref-type="bibr" rid="pcbi.1005904.ref076">76</xref>], which may be affected by group size, and which imply that the task allocation algorithm is not shaped by what maximizes collective outcomes. When interpreting modeling studies on task allocation, it is also important to consider whether the number of inactive workers is an outcome emerging from particular studied task allocation mechanisms, or whether it is an assumption put into the model to study its effect on efficiency of task allocation. In our study, we examined how an assumed level of ‘superfluous’, thus by definition ‘inactive’, workers would affect the efficiency of re-allocating workers to tasks after demands had changed.</p>
<p>While the above models concern the general situation of several tasks, such as building, guarding, and brood care, being performed in parallel but independently of one another, several published models of task allocation specifically consider the case of task partitioning [<xref ref-type="bibr" rid="pcbi.1005904.ref077">77</xref>], defined in the social insect literature as a situation where, in an assembly-line fashion, products of one task have to be directly passed to workers in the next task, such that a tight integration of the activity in different tasks is required. This is, for example, the case in wasp nest building, where water and pulp are collected by different foragers, these then have to be handed to a construction worker (who mixes the materials and applies them to the nest). Very limited buffering is possible because the materials are not stored externally to the workers, and a construction worker cannot proceed with its task until it receives a packet of water and pulp. One would expect different, better-coordinated mechanisms of task allocation to be at work in this case. In task partitioning situations, a higher level of noise (variation in availability of materials, or in worker success at procuring them) increases the optimal task switching rate as well as the number of inactive workers, although this might reverse at very high noise levels [<xref ref-type="bibr" rid="pcbi.1005904.ref078">78</xref>]. Generally larger groups are expected to experience relatively lower levels of noise [<xref ref-type="bibr" rid="pcbi.1005904.ref079">79</xref>]. In this line of reasoning, inactive workers are seen as serving a function as ‘buffer’ (or ‘common stomach’, as they can hold materials awaiting work) [<xref ref-type="bibr" rid="pcbi.1005904.ref079">79</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref080">80</xref>]; this implies that as noise or task switching rate increase, so does the benefit (and optimal number) of inactive workers.</p>
</sec>
<sec id="sec025">
<title>Does task allocation matter?</title>
<p>Is task allocation a difficult problem, and does it matter which algorithm is chosen? If task allocation is an easy problem, then the match of work to workers can be achieved without significant costs. If task allocation is difficult, on the other hand, the choice of task allocation algorithm matters for system performance; in biological systems where this is the case, we would expect task allocation mechanisms to be under strong selection, and their evolution to reflect the specific ecological context of the system. In social insect colonies, for example, task allocation mechanisms appear to differ between species—this could be the case because they are not under selection, and different species happen to have hit on different, equally good, solutions, or because they are under selection, and different species have different requirements (e.g. because they differ in the frequency with which demand for work in different tasks changes). There is some evidence that even brief mismatches of work to workers, i.e. incorrect task allocation, can be detrimental in certain species (e.g. because brood do not develop well when briefly not thermoregulated [<xref ref-type="bibr" rid="pcbi.1005904.ref081">81</xref>]).</p>
<p>Here we estimate the time to correct allocation for several species and contexts (<xref ref-type="table" rid="pcbi.1005904.t004">Table 4</xref>). For example, we estimate that when a honey bee colony is attacked by a large predator, and 5000 (±30%) bees should ideally be allocated to defense, the time to achieve this within our generalized task allocation algorithm would be around 5 − 10 rounds if all bees can directly sense the need for more defenders (options (2) or (3)), and 700 rounds if they cannot (and only arrive in the defense task because they randomly tested different tasks in different rounds, option (1)). Since this particular situation requires a quick collective response, the difference between option (1) and options (2) or (3) appears meaningful, regardless of whether a ‘round’ takes minutes or seconds to complete. In another example, a change in foraging conditions in the case of rock ants (Temnothorax) may imply that only five additional workers need to be allocated to the task of foraging; however, in that system it appears likely that individuals need on the order of a minute rather than seconds to assess both the state of their environment and whether their own task performance is successful (in the sense of fulfilling a demand). If that is the case, a delay of 40 rounds may also be a meaningful and costly delay to appropriately exploiting novel food sources, for example. In all cases, the main effect on the difficulty of task allocation is whether or not individuals can assess the demand across different tasks simultaneously (instead of only in the one task they are working on), and what time period a ‘round’ in our model corresponds to (i.e. how long it takes a worker to assess whether its current work is needed, i.e. whether it is ‘successful’ in the task according to the terms used in our model). In addition, the costs as presented in <xref ref-type="table" rid="pcbi.1005904.t004">Table 4</xref> have to be paid each time the demands for work in different tasks change, and workers have to be reallocated to match these new demands. Overall, our calculations show that realistic parameter estimates can lead to potentially meaningful costs of slow task allocation. Our calculations are pretty coarse however, as the precise values of many of the parameters are not known (however see <xref ref-type="table" rid="pcbi.1005904.t002">Table 2</xref> for references on parameter estimates). More empirical work in this area would be useful.</p>
<p>Our work also addresses a more general question. Division of labor is widespread in complex systems from developing embryos to human organizations; it implies a degree of individual specialization, i.e. more or less consistent differences between individuals in the tasks chosen. Division of labor is often associated with ‘progress’ or ‘increase in complexity’ (e.g. [<xref ref-type="bibr" rid="pcbi.1005904.ref017">17</xref>]). All systems with division of labor must implement some algorithm that lets individuals choose their task. How do these task allocation algorithms evolve, i.e. which external or internal conditions select for which kinds of mechanism? For example, under which conditions and in which systems do the best task allocation algorithms produce highly specialized workers, insensitive to small changes in demands across tasks? One might argue that in a system with highly specialized workers, the cost of allocation mismatch is never more than the average allocation minus current demands, because the system can make specialized workers in the correct proportion for the average expected allocation. Any algorithm that allows workers to be fully generalist, i.e. to freely switch between any tasks, must ensure that the mismatch of workers to demands is not on average greater than that. Understanding more about why particular task allocation mechanisms are selected for would thus increase our understanding about the evolution of specialization and division of labor more generally.</p>
</sec>
<sec id="sec026">
<title>Colony size does not affect ease of task allocation</title>
<p>Does colony size lead to a change in which task allocation algorithms perform well, and does it lead to selection for specialization? The answers to these questions are not straightforward (and neither are the empirical results on this [<xref ref-type="bibr" rid="pcbi.1005904.ref022">22</xref>]). Contrary perhaps to conventional wisdom in both biology and computer science, we do not find a direct dependence of the time to solve the task allocation problem on ‘colony size’ or ‘problem size’, if we assume that the total amount of work scales linearly with the number of workers (<italic>c</italic> = |<italic>A</italic>|/<italic>D</italic>, the number of workers per work available, is constant across different |<italic>A</italic>|). This holds even if all work only has to be satisfied with a certain probability, and if only close to the total needed work has to be satisfied. This result is perhaps logical because we implemented neither the type of noise that would lead to a benefit of large numbers (where the relative amount of variation in environments experienced decreases with colony size), nor did we implement any economies of scale (there are no broadcast signals; we did not model any communication explicitly, and if the task feedback is thought of as the result of communication, we did not implement any constant costs with colony size). No matter how logical in hindsight however, this was not what we had intuitively expected nor what is sometimes suggested in the literature [<xref ref-type="bibr" rid="pcbi.1005904.ref022">22</xref>].</p>
<p>If we find empirically that in some systems the level of specialization or the task allocation mechanism implemented change with colony size, some factors not modeled here have to be at play: e.g. fixed costs leading to economies of scale, or non-linear scaling in the effectiveness of communication. For example, it may be that the feedback on whether an individual worker contributes to reducing a deficit depends on social interactions that do not scale linearly with colony size. This is plausible of course (and has been demonstrated empirically in some cases, e.g. [<xref ref-type="bibr" rid="pcbi.1005904.ref050">50</xref>]). Importantly however, it is not obvious that task allocation will perform better at larger colony sizes in all systems. It is worth noting that even if the time to correct allocation did change with colony size, this does not make obvious predictions for the evolution of division of labor (the degree to which workers should be specialized). If task allocation is difficult (takes a long time), it may be that colonies abandon the attempt to dynamically reallocate workers at all, and instead employ specialized, ‘preprogrammed’ workers in proportions of the average expected demands across tasks.</p>
</sec>
<sec id="sec027">
<title>The amount of work available per worker affects ease of task allocation</title>
<p>We discover that to understand the dependence of task allocation on the number of workers in the colony (|<italic>A</italic>|), actually what we really need to know is (<italic>D</italic>), the total amount of work that needs to be done. Note that <italic>D</italic> refers to currently open tasks, thus is not likely to be ‘unlimited’; in social insects, if nothing else, in the short term, available work will be limited by the queen’s egg laying rate. This total amount of work available (or necessary) has not been studied explicitly either empirically or in models of social insect task allocation, with few exceptions [<xref ref-type="bibr" rid="pcbi.1005904.ref028">28</xref>]. So, we do not have a good understanding of how <italic>D</italic> behaves with |<italic>A</italic>| intra- or inter-specifically. Here we have simply assumed that |<italic>A</italic>|/<italic>D</italic> is constant, but this may well not generally be so: previous studies and conceptual papers have suggested either that larger colonies are relatively less productive, perhaps suggesting that less work is available per worker, or that they are more productive (because they are capitalizing on some economies of scale) — it is unclear what the latter would imply for the amount of work per worker available. One interesting new hypothesis here is that the evolution of task allocation across social insects may, in part, be driven by the factors that limit productivity -– e.g. is the colony raising brood at near the queen’s maximal egg laying rate? In this case <italic>D</italic> may increase less than linearly with increasing colony size, and thus task allocation may become easier, even trivial, at higher colony sizes. Our modeling study thus suggests a new hypothesis (one for the purposes of modeling more generally, [<xref ref-type="bibr" rid="pcbi.1005904.ref082">82</xref>]), by providing the insight that a previously ignored variable impacts the outcome of a well-studied process.</p>
</sec>
<sec id="sec028">
<title>‘Extra’ workers make task allocation faster</title>
<p>Our results also suggest that <italic>c</italic> (the ratio of |<italic>A</italic>|/<italic>D</italic>, or the number of workers divided by the amount of work available) matters, and higher <italic>c</italic> generally leads to faster allocation time. Thus colonies may benefit from having more workers available than work. This is a novel hypothesis for the existence of ‘inactive’ workers in social insect colonies and other complex systems [<xref ref-type="bibr" rid="pcbi.1005904.ref014">14</xref>]. That is, colonies may produce more workers than needed to complete available work simply in order to speed up the process of (re-)allocating workers to work, and thus potentially reducing costs of temporary mismatches of workers with needed work. In other words, inactive, ‘surplus’ workers in colonies may increase colony flexibility and how close colonies get to an ‘optimal’ task allocation in environments where task demands often change and workers frequently have to be reallocated. The benefit of extra workers (higher <italic>c</italic>) does not depend on colony size (|<italic>A</italic>|), thus we would expect both large and small colonies to have as many extra workers as they can afford. Although the dependence on <italic>c</italic> varies with task allocation algorithm (it is least strong in option (2)), higher <italic>c</italic> is always beneficial.</p>
<p>Apparently inactive workers are common in social insect colonies. While these workers may be selfish [<xref ref-type="bibr" rid="pcbi.1005904.ref040">40</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref041">41</xref>] or immature [<xref ref-type="bibr" rid="pcbi.1005904.ref042">42</xref>], or temporarily unemployed due to fluctuating total demand [<xref ref-type="bibr" rid="pcbi.1005904.ref014">14</xref>], our work here thus implies that they may also be present simply to improve task allocation. That is, colonies may produce extra workers such that some workers are ‘unemployed’ at all times on average, but so that the time to correct reallocation of workers when demands across tasks change is minimal. This is a novel hypothesis for the function of inactive workers in complex systems more generally.</p>
</sec>
<sec id="sec029">
<title>The number of task types matters</title>
<p>It is intuitive that task allocation may be more difficult if workers have to choose among many different possible tasks to perform (high |<italic>T</italic>|). However, we show that the effects of |<italic>T</italic>| are mixed and depend both on the information available to workers and the actual combination of parameter values, particularly on the size of |<italic>T</italic>|. Specifically, in the parameter ranges we explored numerically (based on empirically plausible parameter values), the time to correctly allocated workers to tasks depends linearly on the number of task types for options (1) and (2), and not at all for option (3). In option (1), where workers effectively have to ‘test’ tasks sequentially to discover where work is needed (because they only find out through the <italic>success</italic> mechanism), |<italic>T</italic>| always enters into performance as a linear factor. This would be the case for example if workers have to walk to different locations in the nest, or if they have to invest some other significant effort into assessing demand for each specific task. In options (2) and (3), workers can effectively assess demand across all tasks in parallel; this may be the case if task demand is communicated through global stimuli, such as temperature or volatile pheromone levels. In such a case, the number of task types matters only if it is lower than the second term in the minimum function (for example, see Corollary C.6 in <xref ref-type="supplementary-material" rid="pcbi.1005904.s002">S2 Text</xref>). Thus, whether the number of task types affects task allocation performance depends on the context of other parameter values.</p>
<p>What do we know about |<italic>T</italic>| empirically? Several authors have attempted to quantify this number (see <xref ref-type="table" rid="pcbi.1005904.t002">Table 2</xref>). However, empirically studies have often acknowledged that what are ‘separate tasks’ and what are just elements of the same task is difficult to define, and that this may lead to number estimates that are quite subjective. In our model, workers within the same task are assumed to immediately (within one round) correctly distribute the work among themselves, whereas the demand for work in a different task is only assessed via the <italic>choice</italic> and <italic>success</italic> feedback mechanisms as defined above. So, one may think, for example, of each item to be worked on as a ‘task’ (e.g. each larva that needs tending and feeding, or each breach in the wall), in which case |<italic>T</italic>| might be a quite large number; or one may think that all larvae are part of the single task of brood care, and all places in the wall that need repair are part of the task of nest building, in which case |<italic>T</italic>| is likely to be a small number (perhaps below 20, or even below 10). Which is the more appropriate way of counting tasks, in the context of our model, depends on whether, for example, each ant worker dedicated to brood care will be able to immediately assess which particular larvae need care, not loosing time in arriving at a consensus with other brood care workers about who is tending to which exact brood item, or alternatively where each brood care worker can jointly and concurrently contribute to the work in that task without internal coordination required at the timescale of overall task allocation.</p>
</sec>
<sec id="sec030">
<title>Assumptions made in our approach</title>
<p>The results presented in this paper were derived using methods from the field of theoretical distributed computing. The problems considered in this field are very similar to those that are relevant in the biological study of distributed systems—and almost all biological units, from cells with their metabolic and molecular networks to ecosystems, are really distributed systems. We believe that the techniques and results from theoretical distributed computing may lead to many novel approaches and insights in biology in the future, and interdisciplinary work in this area is increasing [<xref ref-type="bibr" rid="pcbi.1005904.ref029">29</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref046">46</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref047">47</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref083">83</xref>, <xref ref-type="bibr" rid="pcbi.1005904.ref084">84</xref>]. In particular, research in theoretical distributed computing has examined the limitations of distributed algorithms, for example in such contexts as distributed task allocation as we study here.</p>
<p>Generally, this field analytically derives results about models that often assume stochastic individual behavior, and in particular quantifies system-level performance given specific individual algorithms (i.e. behavioral rules). Here, we have analyzed how our model, a generalized form of an insect-inspired task allocation algorithm, performs in terms of how long it takes to correctly allocate workers to different task types which need work. We have allowed for approximate solutions, by looking at the time to allocating workers correctly only with a certain minimum probability (1 − <italic>δ</italic>), and only to within <italic>ϵ</italic> of the best allocation. We have also allowed for errors in the demand assessment function, e.g. if workers make mistakes when assessing whether they are needed in a particular task. We have made the assumption that the relevant measure of how well a task allocation mechanism performs is related to the time to correct allocation, that is the time until workers are matched to tasks that need work. Other performance measures are possible, such as assessing how quickly the task-worker match approaches an ideal allocation, or how good the match can ever get; or entirely different parameters may be under selection, such as how much workers have to switch tasks [<xref ref-type="bibr" rid="pcbi.1005904.ref038">38</xref>], how well workers prioritize more important tasks over unimportant ones, or how much information workers need to collect in order to allocate correctly.</p>
<p>Second, our approach makes another assumption about how the performance of a task allocation mechanism is measured: we only quantify this performance for the worst-case inputs, namely the configuration of task deficits (i.e. the distribution of unfulfilled demands across tasks) that leads to the longest possible time to re-allocate. Thus, while stochasticity in worker decisions and information is taken into account and expected results derived, we do not make any assumptions about what configuration of task deficits workers are likely to encounter. If this was known, more precise expectations for performance could be derived. In distributed computing theory, there is a general assumption that such a worst-case scenario (generally called the upper bound of performance) is a good measure of algorithm performance; however it does not need to be close to the overall expected case.</p>
<p>Finally, we make the crucial assumption that all workers are identical in preferences and skills. Thus, our model represents a system of flexible, homogeneous workers. If workers randomly differed in their ability to perform different tasks, matching them optimally to tasks with changing demands for work becomes an extremely hard problem [<xref ref-type="bibr" rid="pcbi.1005904.ref012">12</xref>]. On the other hand, worker skills in a task may be linked to their preferences for that task, either because these are innately linked, or because workers learn to prefer the tasks they do well, or learn to do the tasks well they prefer [<xref ref-type="bibr" rid="pcbi.1005904.ref085">85</xref>]. How much the dynamic (re-)allocation of workers in response to changing demands in different tasks is affected by such worker heterogeneity remains to be analyzed.</p>
</sec>
<sec id="sec031">
<title>Conclusion</title>
<p>We mathematically derived how the time it takes to correctly allocate workers to work is affected by several factors, such as colony size and the number of ‘extra’ workers. We make only minimal assumptions about the algorithm used, and we explore several ways of measuring performance of task allocation, which means these relationships should hold fairly generally. Our model brings several insights. First, costs or benefits of group size do not arise in task allocation ‘automatically’, that is from minimal assumptions such as ours. Second, such a result clarifies our thinking and suggests how, for example, colony-size-dependencies may occur (e.g. if information on work deficits is communicated faster in larger colonies), thus guiding future research as well as identifying which variables qualitatively affect system behavior. One such variable is the amount of work available; this has not been considered in previous empirical studies but appears to be a crucial factor affecting the evolution of task allocation algorithms [<xref ref-type="bibr" rid="pcbi.1005904.ref028">28</xref>]. Third, the model results have generated a novel hypothesis for the existence of inactive workers in social insect colonies [<xref ref-type="bibr" rid="pcbi.1005904.ref014">14</xref>], namely that they may serve to speed up the task allocation process. It now can be studied whether this may be the reason for their evolution. All of these results are derived analytically, using approaches from theoretical distributed computing, without the need for parameter estimation such as would be necessary in a simulation study. In summary, our ‘proof of concept’ model sensu [<xref ref-type="bibr" rid="pcbi.1005904.ref063">63</xref>] helps to identify how limitations and processes at the individual level can affect group level processes in a distributed system.</p>
</sec>
</sec>
<sec id="sec032">
<title>Supporting information</title>
<supplementary-material id="pcbi.1005904.s001" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005904.s001" xlink:type="simple">
<label>S1 Text</label>
<caption>
<title>Formal definitions.</title>
<p>We provide mathematically rigorous definitions of our task allocation model.</p>
<p>(PDF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1005904.s002" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005904.s002" xlink:type="simple">
<label>S2 Text</label>
<caption>
<title>Full proofs.</title>
<p>We provide full formal proofs of the mathematical statements in the Results section.</p>
<p>(PDF)</p>
</caption>
</supplementary-material>
</sec>
</body>
<back>
<ack>
<p>We wish to thank the organizers of the annual ‘Biological Distributed Algorithms’ workshop for creating a venue to encourage biology-computer science interaction and collaboration.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pcbi.1005904.ref001">
<label>1</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Becker</surname> <given-names>GS</given-names></name>, <name name-style="western"><surname>Murphy</surname> <given-names>KM</given-names></name>. <chapter-title>The division of labor, coordination costs, and knowledge</chapter-title>. In: <source>Human Capital: A Theoretical and Empirical Analysis with Special Reference to Education</source> (<edition>3rd Edition</edition>). <publisher-name>The University of Chicago Press</publisher-name>; <year>1994</year>. p. <fpage>299</fpage>–<lpage>322</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref002">
<label>2</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Gerkey</surname> <given-names>BP</given-names></name>, <name name-style="western"><surname>Matarić</surname> <given-names>MJ</given-names></name>. <article-title>A Formal Analysis and Taxonomy of Task Allocation in Multi-Robot Systems</article-title>. <source>The International Journal of Robotics Research</source>. <year>2004</year>;<volume>23</volume>(<issue>9</issue>):<fpage>939</fpage>–<lpage>954</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1177/0278364904045564" xlink:type="simple">10.1177/0278364904045564</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref003">
<label>3</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lindbeck</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Snower</surname> <given-names>DJ</given-names></name>. <article-title>Multitask Learning and the Reorganization of Work: From Tayloristic to Holistic Organization</article-title>. <source>Journal of Labor Economics</source>. <year>2000</year>;<volume>18</volume>(<issue>3</issue>):<fpage>353</fpage>–<lpage>376</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1086/209962" xlink:type="simple">10.1086/209962</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref004">
<label>4</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Maynard Smith</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Szathmáry</surname> <given-names>E</given-names></name>. <source>The Major Transitions in Evolution</source>. <publisher-name>Oxford University Press</publisher-name>; <year>1995</year>.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref005">
<label>5</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Older</surname> <given-names>MT</given-names></name>, <name name-style="western"><surname>Waterson</surname> <given-names>PE</given-names></name>, <name name-style="western"><surname>Clegg</surname> <given-names>CW</given-names></name>. <article-title>A critical assessment of task allocation methods and their applicability</article-title>. <source>Ergonomics</source>. <year>1997</year>;<volume>40</volume>(<issue>2</issue>):<fpage>151</fpage>–<lpage>171</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1080/001401397188279" xlink:type="simple">10.1080/001401397188279</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref006">
<label>6</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Smith</surname> <given-names>A</given-names></name>. <source>The Wealth of Nations</source>. <publisher-name>W. Strahan and T. Cadell</publisher-name>, <publisher-loc>London</publisher-loc>; <year>1776</year>.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref007">
<label>7</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Herron</surname> <given-names>MD</given-names></name>, <name name-style="western"><surname>Hackett</surname> <given-names>JD</given-names></name>, <name name-style="western"><surname>Aylward</surname> <given-names>FO</given-names></name>, <name name-style="western"><surname>Michod</surname> <given-names>RE</given-names></name>. <article-title>Triassic origin and early radiation of multicellular volvocine algae</article-title>. <source>Proceedings of the National Academy of Sciences</source>. <year>2009</year>;<volume>106</volume>(<issue>9</issue>):<fpage>3254</fpage>–<lpage>3258</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1073/pnas.0811205106" xlink:type="simple">10.1073/pnas.0811205106</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref008">
<label>8</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Artavanis-Tsakonas</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Rand</surname> <given-names>MD</given-names></name>, <name name-style="western"><surname>Lake</surname> <given-names>RJ</given-names></name>. <article-title>Notch Signaling: Cell Fate Control and Signal Integration in Development</article-title>. <source>Science</source>. <year>1999</year>;<volume>284</volume>(<issue>5415</issue>):<fpage>770</fpage>–<lpage>776</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1126/science.284.5415.770" xlink:type="simple">10.1126/science.284.5415.770</ext-link></comment> <object-id pub-id-type="pmid">10221902</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref009">
<label>9</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Dean</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Ghemawat</surname> <given-names>S</given-names></name>. <article-title>MapReduce: simplified data processing on large clusters</article-title>. <source>Communications of the ACM</source>. <year>2008</year>;<volume>51</volume>(<issue>1</issue>):<fpage>107</fpage>–<lpage>113</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1145/1327452.1327492" xlink:type="simple">10.1145/1327452.1327492</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref010">
<label>10</label>
<mixed-citation publication-type="other" xlink:type="simple">Hunt P, Konar M, Junqueira FP, Reed B. ZooKeeper: Wait-free Coordination for Internet-scale Systems. In: USENIX Annual Technical Conference. vol. 8; 2010. p. 9.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref011">
<label>11</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Georgiou</surname> <given-names>C</given-names></name>. <source>Do-All Computing in Distributed Systems: Cooperation in the Presence of Adversity</source>. <publisher-name>Springer Science &amp; Business Media</publisher-name>; <year>2007</year>.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref012">
<label>12</label>
<mixed-citation publication-type="other" xlink:type="simple">Cornejo A, Dornhaus AR, Lynch NA, Nagpal R. Task Allocation in Ant Colonies. In: Proceedings of the 2014 Symposium on Distributed Computing (DISC); 2014. p. 46–60.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref013">
<label>13</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Lynch</surname> <given-names>NA</given-names></name>. <source>Distributed algorithms</source>. <publisher-name>Morgan Kaufmann</publisher-name>; <year>1996</year>.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref014">
<label>14</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Charbonneau</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>. <article-title>When doing nothing is something. How task allocation mechanisms compromise between flexibility, efficiency, and inactive agents</article-title>. <source>Journal of Bioeconomics</source>. <year>2015</year>;<volume>17</volume>:<fpage>217</fpage>–<lpage>242</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/s10818-015-9205-4" xlink:type="simple">10.1007/s10818-015-9205-4</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref015">
<label>15</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Charbonneau</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>. <article-title>Workers ‘specialized’ on inactivity: behavioral consistency of inactive workers and their role in task allocation</article-title>. <source>Behavioral Ecology and Sociobiology</source>. <year>2015</year>;published online. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/s00265-015-1958-1" xlink:type="simple">10.1007/s00265-015-1958-1</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref016">
<label>16</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Johnson</surname> <given-names>BR</given-names></name>. <article-title>Global information sampling in the honey bee</article-title>. <source>Naturwissenschaften</source>. <year>2008</year>;<volume>95</volume>(<issue>6</issue>):<fpage>523</fpage>–<lpage>530</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/s00114-008-0354-3" xlink:type="simple">10.1007/s00114-008-0354-3</ext-link></comment> <object-id pub-id-type="pmid">18330538</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref017">
<label>17</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Bonner</surname> <given-names>JT</given-names></name>. <source>Why size matters: from bacteria to blue whales</source>. <publisher-name>Princeton University Press</publisher-name>; <year>2011</year>.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref018">
<label>18</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Herron</surname> <given-names>MD</given-names></name>, <name name-style="western"><surname>Michod</surname> <given-names>RE</given-names></name>. <article-title>Evolution of Complexity in the Volvocine Algae: Transitions in Individuality through Darwin’s Eye</article-title>. <source>Evolution</source>. <year>2008</year>;<volume>62</volume>(<issue>2</issue>):<fpage>436</fpage>–<lpage>451</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1111/j.1558-5646.2007.00304.x" xlink:type="simple">10.1111/j.1558-5646.2007.00304.x</ext-link></comment> <object-id pub-id-type="pmid">18031303</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref019">
<label>19</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Hall</surname> <given-names>RH</given-names></name>, <name name-style="western"><surname>Johnson</surname> <given-names>NJ</given-names></name>, <name name-style="western"><surname>Haas</surname> <given-names>JE</given-names></name>. <article-title>Organizational Size, Complexity, and Formalization</article-title>. <source>American Sociological Review</source>. <year>1967</year>;<volume>32</volume>(<issue>6</issue>):<fpage>903</fpage>–<lpage>912</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.2307/2092844" xlink:type="simple">10.2307/2092844</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref020">
<label>20</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Moch</surname> <given-names>MK</given-names></name>, <name name-style="western"><surname>Morse</surname> <given-names>EV</given-names></name>. <article-title>Size, Centralization and Organizational Adoption of Innovations</article-title>. <source>American Sociological Review</source>. <year>1977</year>;<volume>42</volume>(<issue>5</issue>):<fpage>716</fpage>–<lpage>725</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.2307/2094861" xlink:type="simple">10.2307/2094861</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref021">
<label>21</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Easley</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Kleinberg</surname> <given-names>J</given-names></name>. <source>Networks, crowds, and markets: Reasoning about a highly connected world</source>. <publisher-name>Cambridge University Press</publisher-name>; <year>2010</year>.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref022">
<label>22</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Powell</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Bengston</surname> <given-names>S</given-names></name>. <article-title>Group size and its effects on collective organization</article-title>. <source>Annual review of entomology</source>. <year>2012</year>;<volume>57</volume>:<fpage>123</fpage>–<lpage>141</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1146/annurev-ento-120710-100604" xlink:type="simple">10.1146/annurev-ento-120710-100604</ext-link></comment> <object-id pub-id-type="pmid">21888521</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref023">
<label>23</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Klugl</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Oechslein</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Puppe</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Chittka</surname> <given-names>L</given-names></name>. <article-title>Benefits of recruitment in honey bees: effects of ecology and colony size in an individual-based model</article-title>. <source>Behavioral Ecology</source>. <year>2006</year>;<volume>17</volume>(<issue>3</issue>):<fpage>336</fpage>–<lpage>344</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/beheco/arj036" xlink:type="simple">10.1093/beheco/arj036</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref024">
<label>24</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Garicano</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Hubbard</surname> <given-names>TN</given-names></name>. <article-title>Specialization, Firms, and Markets: The Division of Labor within and between Law Firms</article-title>. <source>Journal of Law, Economics, and Organization</source>. <year>2009</year>;<volume>25</volume>(<issue>2</issue>):<fpage>339</fpage>–<lpage>371</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/jleo/ewn003" xlink:type="simple">10.1093/jleo/ewn003</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref025">
<label>25</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Beckers</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Goss</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Deneubourg</surname> <given-names>JL</given-names></name>, <name name-style="western"><surname>Pasteels</surname> <given-names>JM</given-names></name>. <article-title>Colony size, communication and ant foraging strategy</article-title>. <source>Psyche</source>. <year>1989</year>;<volume>96</volume>:<fpage>239</fpage>–<lpage>256</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1155/1989/94279" xlink:type="simple">10.1155/1989/94279</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref026">
<label>26</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Cormen</surname> <given-names>TH</given-names></name>, <name name-style="western"><surname>Leiserson</surname> <given-names>CE</given-names></name>, <name name-style="western"><surname>Rivest</surname> <given-names>RL</given-names></name>, <name name-style="western"><surname>Stein</surname> <given-names>C</given-names></name>. <source>Introduction to Algorithms</source>. <publisher-name>MIT Press</publisher-name>; <year>2009</year>.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref027">
<label>27</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Attiya</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Welch</surname> <given-names>J</given-names></name>. <source>Distributed computing: fundamentals, simulations, and advanced topics</source>. <volume>vol. 19</volume>. <publisher-name>John Wiley &amp; Sons</publisher-name>; <year>2004</year>.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref028">
<label>28</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>. <article-title>Finding optimal collective strategies using individual-based simulations: colony organization in social insects</article-title>. <source>Mathematical and Computer Modelling of Dynamical Systems</source>. <year>2012</year>;<volume>18</volume>(<issue>1</issue>):<fpage>25</fpage>–<lpage>37</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1080/13873954.2011.601422" xlink:type="simple">10.1080/13873954.2011.601422</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref029">
<label>29</label>
<mixed-citation publication-type="other" xlink:type="simple">Dornhaus A, Korman A, Feinerman O. Distributed problem solving—applying computer science to learn about a biological complex system: social insect colonies. in prep;.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref030">
<label>30</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Wilson</surname> <given-names>EO</given-names></name>. <source>The insect societies</source>. <publisher-loc>Cambridge</publisher-loc>: <publisher-name>Belknap Press of Harvard University Press</publisher-name>; <year>1971</year>.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref031">
<label>31</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Seeley</surname> <given-names>TD</given-names></name>. <chapter-title>Honeybee ecology</chapter-title>. <source>A study of adaptation in social life</source>. <publisher-name>Princeton University Press</publisher-name>; <year>1985</year>.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref032">
<label>32</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Gordon</surname> <given-names>DM</given-names></name>. <article-title>The organization of work in social insect colonies</article-title>. <source>Nature</source>. <year>1996</year>;<volume>380</volume>(<issue>14 March</issue>):<fpage>121</fpage>–<lpage>124</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/380121a0" xlink:type="simple">10.1038/380121a0</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref033">
<label>33</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Jeanne</surname> <given-names>RL</given-names></name>. <article-title>Division of labor is not a process or a misleading concept</article-title>. <source>Behavioral Ecology and Sociobiology</source>. <year>2016</year>;<volume>70</volume>(<issue>7</issue>):<fpage>1109</fpage>–<lpage>1112</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/s00265-016-2146-7" xlink:type="simple">10.1007/s00265-016-2146-7</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref034">
<label>34</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Duarte</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Weissing</surname> <given-names>FJ</given-names></name>, <name name-style="western"><surname>Pen</surname> <given-names>I</given-names></name>, <name name-style="western"><surname>Keller</surname> <given-names>L</given-names></name>. <article-title>An evolutionary perspective on self-organized division of labor in social insects</article-title>. <source>Annual Review of Ecology, Evolution, and Systematics</source>. <year>2011</year>;<volume>42</volume>:<fpage>91</fpage>–<lpage>110</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1146/annurev-ecolsys-102710-145017" xlink:type="simple">10.1146/annurev-ecolsys-102710-145017</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref035">
<label>35</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Beshers</surname> <given-names>SN</given-names></name>, <name name-style="western"><surname>Fewell</surname> <given-names>JH</given-names></name>. <article-title>Models of division of labor in social insects</article-title>. <source>Annual review of entomology</source>. <year>2001</year>;<volume>46</volume>(<issue>1</issue>):<fpage>413</fpage>–<lpage>440</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1146/annurev.ento.46.1.413" xlink:type="simple">10.1146/annurev.ento.46.1.413</ext-link></comment> <object-id pub-id-type="pmid">11112175</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref036">
<label>36</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Pinter-Wollman</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Hubler</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Holley</surname> <given-names>JA</given-names></name>, <name name-style="western"><surname>Franks</surname> <given-names>NR</given-names></name>, <name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>. <article-title>How is activity distributed among and within tasks in Temnothorax ants?</article-title> <source>Behavioral Ecology and Sociobiology</source>. <year>2012</year>;<volume>66</volume>(<issue>10</issue>):<fpage>1407</fpage>–<lpage>1420</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/s00265-012-1396-2" xlink:type="simple">10.1007/s00265-012-1396-2</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref037">
<label>37</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Gordon</surname> <given-names>DM</given-names></name>. <article-title>Dynamics of task switching in harvester ants</article-title>. <source>Animal Behaviour</source>. <year>1989</year>;<volume>38</volume>(<issue>2</issue>):<fpage>194</fpage>–<lpage>204</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/S0003-3472(89)80082-X" xlink:type="simple">10.1016/S0003-3472(89)80082-X</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref038">
<label>38</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Leighton</surname> <given-names>GM</given-names></name>, <name name-style="western"><surname>Charbonneau</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>. <article-title>Task switching is associated with temporal delays in Temnothorax rugatulus ants</article-title>. <source>Behavioral Ecology</source>. <year>2016</year>;<volume>28</volume>(<issue>1</issue>):<fpage>319</fpage>–<lpage>327</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/beheco/arw162" xlink:type="simple">10.1093/beheco/arw162</ext-link></comment> <object-id pub-id-type="pmid">28127225</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref039">
<label>39</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Charbonneau</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>. <source>Who needs ‘lazy’ workers? Inactive workers act as a ‘reserve’ labor force, but inactive workers are not replaced when they are removed</source>. submitted;. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pone.0184074" xlink:type="simple">10.1371/journal.pone.0184074</ext-link></comment> <object-id pub-id-type="pmid">28877229</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref040">
<label>40</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Charbonneau</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Hillis</surname> <given-names>NB</given-names></name>, <name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>. <source>Are ‘lazy’ ants selfish? Testing whether highly inactive workers invest more in their own reproduction than highly active workers</source>. submitted;.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref041">
<label>41</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Jandt</surname> <given-names>JM</given-names></name>, <name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>. <article-title>Competition and cooperation: bumblebee spatial organization and division of labor may affect worker reproduction late in life</article-title>. <source>Behavioral Ecology and Sociobiology</source>. <year>2011</year>;<volume>65</volume>:<fpage>2341</fpage>–<lpage>2349</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/s00265-011-1244-9" xlink:type="simple">10.1007/s00265-011-1244-9</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref042">
<label>42</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Charbonneau</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Nguyen</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Shin</surname> <given-names>MC</given-names></name>, <name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>. <article-title>Who are the’lazy’ ants? Concurrently testing multiple hypotheses for the function of inactivity in social insects</article-title>. <source>Scientific Reports</source>. submitted;.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref043">
<label>43</label>
<mixed-citation publication-type="other" xlink:type="simple">Armbrust M, Fox A, Griffith R, Joseph AD, Katz RH, Konwinski A, et al. Above the clouds: A Berkeley view of cloud computing. EECS Department, University of California, Berkeley; 2009. UCB/EECS-2009-28.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref044">
<label>44</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Varia</surname> <given-names>J</given-names></name>. <source>Architecting for the cloud: Best practices</source>. <publisher-name>Amazon Web Services</publisher-name>. <year>2010</year>;.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref045">
<label>45</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Afek</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Alon</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Barad</surname> <given-names>O</given-names></name>, <name name-style="western"><surname>Hornstein</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Barkai</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Bar-Joseph</surname> <given-names>Z</given-names></name>. <article-title>A biological solution to a fundamental distributed computing problem</article-title>. <source>Science</source>. <year>2011</year>;<volume>331</volume>(<issue>6014</issue>):<fpage>183</fpage>–<lpage>185</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1126/science.1193210" xlink:type="simple">10.1126/science.1193210</ext-link></comment> <object-id pub-id-type="pmid">21233379</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref046">
<label>46</label>
<mixed-citation publication-type="other" xlink:type="simple">Feinerman O, Korman A. Memory lower bounds for randomized collaborative search and implications for biology. In: International Symposium on Distributed Computing. Springer; 2012. p. 61–75.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref047">
<label>47</label>
<mixed-citation publication-type="other" xlink:type="simple">Feinerman O, Korman A. Theoretical distributed computing meets biology: A review. In: International Conference on Distributed Computing and Internet Technology. Springer; 2013. p. 1–18.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref048">
<label>48</label>
<mixed-citation publication-type="other" xlink:type="simple">Feinerman O, Korman A, Lotker Z, Sereni JS. Collaborative search on the plane without communication. In: Proceedings of the 2012 ACM Symposium on Principles of Distributed Computing. ACM; 2012. p. 77–86.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref049">
<label>49</label>
<mixed-citation publication-type="other" xlink:type="simple">Lenzen C, Lynch N, Newport C, Radeva T. Trade-offs between selection complexity and performance when searching the plane without communication. In: Proceedings of the ACM Symposium on Principles of Distributed Computing. ACM; 2014. p. 252–261.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref050">
<label>50</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Pacala</surname> <given-names>SW</given-names></name>, <name name-style="western"><surname>Gordon</surname> <given-names>DM</given-names></name>, <name name-style="western"><surname>Godfray</surname> <given-names>HCJ</given-names></name>. <article-title>Effects of social group size on information transfer and task allocation</article-title>. <source>Evolutionary Ecology</source>. <year>1996</year>;<volume>10</volume>:<fpage>127</fpage>–<lpage>165</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/BF01241782" xlink:type="simple">10.1007/BF01241782</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref051">
<label>51</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Wilson</surname> <given-names>EO</given-names></name>. <article-title>Behavioral discretization and the number of castes in an ant species</article-title>. <source>Behavioral Ecology and Sociobiology</source>. <year>1976</year>;<volume>1</volume>(<issue>2</issue>):<fpage>141</fpage>–<lpage>154</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/BF00299195" xlink:type="simple">10.1007/BF00299195</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref052">
<label>52</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Herbers</surname> <given-names>JM</given-names></name>. <article-title>Social organisation in Leptothorax ants: within-and between-species patterns</article-title>. <source>Psyche</source>. <year>1983</year>;<volume>90</volume>(<issue>4</issue>):<fpage>361</fpage>–<lpage>386</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1155/1983/52489" xlink:type="simple">10.1155/1983/52489</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref053">
<label>53</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Wilson</surname> <given-names>EO</given-names></name>. <article-title>Caste and division of labor in leaf-cutter ants (Hymenoptera: Formicidae: Atta) I. The overall pattern in A.sexdens</article-title>. <source>Behavioral Ecology and Sociobiology</source>. <year>1980</year>;<volume>7</volume>:<fpage>143</fpage>–<lpage>156</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/BF00299520" xlink:type="simple">10.1007/BF00299520</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref054">
<label>54</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Donaldson-Matasci</surname> <given-names>MC</given-names></name>, <name name-style="western"><surname>DeGrandi-Hoffman</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>. <article-title>Bigger is better: honeybee colonies as distributed information-gathering systems</article-title>. <source>Animal Behaviour</source>. <year>2013</year>;<volume>85</volume>(<issue>3</issue>):<fpage>585</fpage>–<lpage>592</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.anbehav.2012.12.020" xlink:type="simple">10.1016/j.anbehav.2012.12.020</ext-link></comment> <object-id pub-id-type="pmid">26213412</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref055">
<label>55</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Holley</surname> <given-names>JA</given-names></name>, <name name-style="western"><surname>Pook</surname> <given-names>VG</given-names></name>, <name name-style="western"><surname>Worswick</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Franks</surname> <given-names>NR</given-names></name>. <article-title>Why do not all workers work? Colony size and workload during emigrations in the ant Temnothorax albipennis</article-title>. <source>Behavioral Ecology and Sociobiology</source>. <year>2008</year>;<volume>63</volume>(<issue>1</issue>):<fpage>43</fpage>–<lpage>51</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/s00265-008-0634-0" xlink:type="simple">10.1007/s00265-008-0634-0</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref056">
<label>56</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>. <article-title>Specialization does not predict individual efficiency in an ant</article-title>. <source>PLoS Biology</source>. <year>2008</year>;<volume>6</volume>(<issue>11</issue>):<fpage>e285</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pbio.0060285" xlink:type="simple">10.1371/journal.pbio.0060285</ext-link></comment> <object-id pub-id-type="pmid">19018663</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref057">
<label>57</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Jandt</surname> <given-names>JM</given-names></name>, <name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>. <article-title>Bumblebee response thresholds and body size: does worker diversity increase colony performance?</article-title> <source>Animal Behaviour</source>. <year>2014</year>;<volume>87</volume>:<fpage>97</fpage>–<lpage>106</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref058">
<label>58</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Jandt</surname> <given-names>JM</given-names></name>, <name name-style="western"><surname>Huang</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>. <article-title>Weak specialization of workers inside a bumble bee (Bombus impatiens) nest</article-title>. <source>Behavioral Ecology and Sociobiology</source>. <year>2009</year>;<volume>63</volume>(<issue>12</issue>):<fpage>1829</fpage>–<lpage>1836</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/s00265-009-0810-x" xlink:type="simple">10.1007/s00265-009-0810-x</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref059">
<label>59</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Retana</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Cerdá</surname> <given-names>X</given-names></name>. <article-title>Social Organization of Cataglyphis cursor Ant Colonies (Hymenoptera, Formicidae): Inter-, and Intraspecific Comparisons</article-title>. <source>Ethology</source>. <year>1990</year>;<volume>84</volume>(<issue>2</issue>):<fpage>105</fpage>–<lpage>122</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1111/j.1439-0310.1990.tb00788.x" xlink:type="simple">10.1111/j.1439-0310.1990.tb00788.x</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref060">
<label>60</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Schmid-Hempel</surname> <given-names>P</given-names></name>. <article-title>Reproductive Competition and the Evolution of Work Load in Social Insects</article-title>. <source>The American Naturalist</source>. <year>1990</year>;<volume>135</volume>:<fpage>501</fpage>–<lpage>526</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1086/285059" xlink:type="simple">10.1086/285059</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref061">
<label>61</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Charbonneau</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Hillis</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>. <article-title>‘Lazy’ in nature: ant colony time budgets show high ‘inactivity’ in the field as well as in the lab</article-title>. <source>Insectes Sociaux</source>. <year>2015</year>;<volume>62</volume>(<issue>1</issue>):<fpage>31</fpage>–<lpage>35</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/s00040-014-0370-6" xlink:type="simple">10.1007/s00040-014-0370-6</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref062">
<label>62</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Gunawardena</surname> <given-names>J</given-names></name>. <article-title>Models in biology: ‘accurate descriptions of our pathetic thinking’</article-title>. <source>BMC Biology</source>. <year>2014</year>;<volume>12</volume>(<issue>1</issue>):<fpage>1</fpage>–<lpage>11</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/1741-7007-12-29" xlink:type="simple">10.1186/1741-7007-12-29</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref063">
<label>63</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Servedio</surname> <given-names>MR</given-names></name>, <name name-style="western"><surname>Brandvain</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Dhole</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Fitzpatrick</surname> <given-names>CL</given-names></name>, <name name-style="western"><surname>Goldberg</surname> <given-names>EE</given-names></name>, <name name-style="western"><surname>Stern</surname> <given-names>CA</given-names></name>, <etal>et al</etal>. <article-title>Not Just a Theory—The Utility of Mathematical Models in Evolutionary Biology</article-title>. <source>PLoS Biol</source>. <year>2014</year>;<volume>12</volume>(<issue>12</issue>):<fpage>e1002017</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pbio.1002017" xlink:type="simple">10.1371/journal.pbio.1002017</ext-link></comment> <object-id pub-id-type="pmid">25489940</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref064">
<label>64</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Ravary</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Lecoutey</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Kaminski</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Châline</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Jaisson</surname> <given-names>P</given-names></name>. <article-title>Individual experience alone can generate lasting division of labor in ants</article-title>. <source>Current Biology</source>. <year>2007</year>;<volume>17</volume>(<issue>15</issue>):<fpage>1308</fpage>–<lpage>1312</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.cub.2007.06.047" xlink:type="simple">10.1016/j.cub.2007.06.047</ext-link></comment> <object-id pub-id-type="pmid">17629482</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref065">
<label>65</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Hölldobler</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Wilson</surname> <given-names>EO</given-names></name>. <source>The ants</source>. <publisher-name>Harvard University Press</publisher-name>; <year>1990</year>.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref066">
<label>66</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Schmid-Hempel</surname> <given-names>P</given-names></name>. <article-title>Worker castes and adaptive demography</article-title>. <source>Journal of Evolutionary Biology</source>. <year>1992</year>;<volume>5</volume>(<issue>1</issue>):<fpage>1</fpage>–<lpage>12</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1046/j.1420-9101.1992.5010001.x" xlink:type="simple">10.1046/j.1420-9101.1992.5010001.x</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref067">
<label>67</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Calabi</surname> <given-names>P</given-names></name>. <article-title>Behavioral flexibility in Hymenoptera: a re-examination of the concept of caste</article-title>. <source>Advances in Myrmecology</source>. <year>1988</year>; p. <fpage>237</fpage>–<lpage>258</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref068">
<label>68</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Robinson</surname> <given-names>GE</given-names></name>. <article-title>Regulation of division of labor in insect societies</article-title>. <source>Annual Review of Entomology</source>. <year>1992</year>;<volume>37</volume>(<issue>1</issue>):<fpage>637</fpage>–<lpage>665</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1146/annurev.en.37.010192.003225" xlink:type="simple">10.1146/annurev.en.37.010192.003225</ext-link></comment> <object-id pub-id-type="pmid">1539941</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref069">
<label>69</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Bonabeau</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Theraulaz</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Deneubourg</surname> <given-names>JL</given-names></name>. <article-title>Fixed response thresholds and the regulation of division of labor in insect societies</article-title>. <source>Bulletin of Mathematical Biology</source>. <year>1998</year>;<volume>60</volume>(<issue>4</issue>):<fpage>753</fpage>–<lpage>807</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1006/bulm.1998.0041" xlink:type="simple">10.1006/bulm.1998.0041</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref070">
<label>70</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Franks</surname> <given-names>NR</given-names></name>, <name name-style="western"><surname>Tofts</surname> <given-names>C</given-names></name>. <article-title>Foraging for work: how tasks allocate workers</article-title>. <source>Animal Behaviour</source>. <year>1994</year>;<volume>48</volume>(<issue>2</issue>):<fpage>470</fpage>–<lpage>472</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1006/anbe.1994.1261" xlink:type="simple">10.1006/anbe.1994.1261</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref071">
<label>71</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Tofts</surname> <given-names>C</given-names></name>. <article-title>Algorithms for task allocation in ants. (A study of temporal polyethism: theory)</article-title>. <source>Bulletin of Mathematical Biology</source>. <year>1993</year>;<volume>55</volume>(<issue>5</issue>):<fpage>891</fpage>–<lpage>918</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/BF02460691" xlink:type="simple">10.1007/BF02460691</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref072">
<label>72</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Pereira</surname> <given-names>HM</given-names></name>, <name name-style="western"><surname>Gordon</surname> <given-names>DM</given-names></name>. <article-title>A trade-off in task allocation between sensitivity to the environment and response time</article-title>. <source>Journal of Theoretical Biology</source>. <year>2001</year>;<volume>208</volume>(<issue>2</issue>):<fpage>165</fpage>–<lpage>184</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1006/jtbi.2000.2210" xlink:type="simple">10.1006/jtbi.2000.2210</ext-link></comment> <object-id pub-id-type="pmid">11162062</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref073">
<label>73</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Campos</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Bonabeau</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Theraulaz</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Deneubourg</surname> <given-names>JL</given-names></name>. <article-title>Dynamic scheduling and division of labor in social insects</article-title>. <source>Adaptive Behavior</source>. <year>2000</year>;<volume>8</volume>(<issue>2</issue>):<fpage>83</fpage>–<lpage>95</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1177/105971230000800201" xlink:type="simple">10.1177/105971230000800201</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref074">
<label>74</label>
<mixed-citation publication-type="other" xlink:type="simple">Price R, Tino P. Evaluation of adaptive nature inspired task allocation against alternate decentralised multiagent strategies. In: Proceedings of the International Conference on Parallel Problem Solving from Nature. Springer; 2004. p. 982–990.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref075">
<label>75</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Duarte</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Pen</surname> <given-names>I</given-names></name>, <name name-style="western"><surname>Keller</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Weissing</surname> <given-names>FJ</given-names></name>. <article-title>Evolution of self-organized division of labor in a response threshold model</article-title>. <source>Behavioral Ecology and Sociobiology</source>. <year>2012</year>;<volume>66</volume>(<issue>6</issue>):<fpage>947</fpage>–<lpage>957</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/s00265-012-1343-2" xlink:type="simple">10.1007/s00265-012-1343-2</ext-link></comment> <object-id pub-id-type="pmid">22661824</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref076">
<label>76</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Bourke</surname> <given-names>A</given-names></name>. <article-title>Colony size, social complexity and reproductive conflict in social insects</article-title>. <source>Journal of Evolutionary Biology</source>. <year>1999</year>;<volume>12</volume>(<issue>2</issue>):<fpage>245</fpage>–<lpage>257</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1046/j.1420-9101.1999.00028.x" xlink:type="simple">10.1046/j.1420-9101.1999.00028.x</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref077">
<label>77</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Ratnieks</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Anderson</surname> <given-names>C</given-names></name>. <article-title>Task partitioning in insect societies</article-title>. <source>Insectes Sociaux</source>. <year>1999</year>;<volume>46</volume>(<issue>2</issue>):<fpage>95</fpage>–<lpage>108</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/s000400050119" xlink:type="simple">10.1007/s000400050119</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref078">
<label>78</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Hamann</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Karsai</surname> <given-names>I</given-names></name>, <name name-style="western"><surname>Schmickl</surname> <given-names>T</given-names></name>. <article-title>Time delay implies cost on task switching: A model to investigate the efficiency of task partitioning</article-title>. <source>Bulletin of Mathematical Biology</source>. <year>2013</year>;<volume>75</volume>(<issue>7</issue>):<fpage>1181</fpage>–<lpage>1206</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1007/s11538-013-9851-4" xlink:type="simple">10.1007/s11538-013-9851-4</ext-link></comment> <object-id pub-id-type="pmid">23666484</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref079">
<label>79</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Karsai</surname> <given-names>I</given-names></name>, <name name-style="western"><surname>Phillips</surname> <given-names>MD</given-names></name>. <article-title>Regulation of task differentiation in wasp societies: A bottom-up model of the“common stomach”</article-title>. <source>Journal of Theoretical Biology</source>. <year>2012</year>;<volume>294</volume>:<fpage>98</fpage>–<lpage>113</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.jtbi.2011.10.037" xlink:type="simple">10.1016/j.jtbi.2011.10.037</ext-link></comment> <object-id pub-id-type="pmid">22079942</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref080">
<label>80</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Karsai</surname> <given-names>I</given-names></name>, <name name-style="western"><surname>Runciman</surname> <given-names>A</given-names></name>. <article-title>The ‘common stomach’ as information source for the regulation of construction behaviour of the swarm</article-title>. <source>Mathematical and Computer Modelling of Dynamical Systems</source>. <year>2012</year>;<volume>18</volume>(<issue>1</issue>):<fpage>13</fpage>–<lpage>24</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1080/13873954.2011.601423" xlink:type="simple">10.1080/13873954.2011.601423</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref081">
<label>81</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Groh</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Tautz</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Rossler</surname> <given-names>W</given-names></name>. <article-title>Synaptic organization in the adult honey bee brain is influenced by brood-temperature control during pupal development</article-title>. <source>PNAS</source>. <year>2004</year>;<volume>101</volume>(<issue>12</issue>):<fpage>4268</fpage>–<lpage>4273</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1073/pnas.0400773101" xlink:type="simple">10.1073/pnas.0400773101</ext-link></comment> <object-id pub-id-type="pmid">15024125</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref082">
<label>82</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Franks</surname> <given-names>NR</given-names></name>, <name name-style="western"><surname>Dornhaus</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Marshall</surname> <given-names>JAR</given-names></name>, <name name-style="western"><surname>Dechaume-Mincharmont</surname> <given-names>FX</given-names></name>. <chapter-title>The dawn of a golden age in mathematical insect sociobiology</chapter-title>. <source>Organization of Insect Societies: From Genome to Sociocomplexity</source>. <year>2009</year>; p. <fpage>437</fpage>–<lpage>459</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref083">
<label>83</label>
<mixed-citation publication-type="other" xlink:type="simple">Feinerman O, Haeupler B, Korman A. Breathe before speaking: efficient information dissemination despite noisy, limited and anonymous communication. In: Proceedings of the 2014 ACM Symposium on Principles of Distributed Computing. ACM; 2014. p. 114–123.</mixed-citation>
</ref>
<ref id="pcbi.1005904.ref084">
<label>84</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Gelblum</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Pinkoviezky</surname> <given-names>I</given-names></name>, <name name-style="western"><surname>Fonio</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Ghosh</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Gov</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Feinerman</surname> <given-names>O</given-names></name>. <article-title>Ant groups optimally amplify the effect of transiently informed individuals</article-title>. <source>Nature Communications</source>. <year>2015</year>;<volume>6</volume>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/ncomms8729" xlink:type="simple">10.1038/ncomms8729</ext-link></comment> <object-id pub-id-type="pmid">26218613</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005904.ref085">
<label>85</label>
<mixed-citation publication-type="other" xlink:type="simple">Dornhaus A. Does learning increase or decrease behavioral variation? The role of experience in division of labor of the ant Temnothorax albipennis. in prep;.</mixed-citation>
</ref>
</ref-list>
</back>
</article>