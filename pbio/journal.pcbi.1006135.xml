<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN" "http://jats.nlm.nih.gov/publishing/1.1d3/JATS-journalpublishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="1.1d3" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id>
<journal-title-group>
<journal-title>PLOS Computational Biology</journal-title>
</journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-17-01945</article-id>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1006135</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Research Article</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Computational biology</subject><subj-group><subject>Genome analysis</subject><subj-group><subject>Transcriptome analysis</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Genetics</subject><subj-group><subject>Genomics</subject><subj-group><subject>Genome analysis</subject><subj-group><subject>Transcriptome analysis</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Information technology</subject><subj-group><subject>Data processing</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Statistics (mathematics)</subject><subj-group><subject>Statistical data</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Applied mathematics</subject><subj-group><subject>Algorithms</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Simulation and modeling</subject><subj-group><subject>Algorithms</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Mathematical and statistical techniques</subject><subj-group><subject>Statistical methods</subject><subj-group><subject>Multivariate analysis</subject><subj-group><subject>Principal component analysis</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Statistics (mathematics)</subject><subj-group><subject>Statistical methods</subject><subj-group><subject>Multivariate analysis</subject><subj-group><subject>Principal component analysis</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Programming languages</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software tools</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software tools</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Molecular biology</subject><subj-group><subject>Molecular biology techniques</subject><subj-group><subject>Sequencing techniques</subject><subj-group><subject>RNA sequencing</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Molecular biology techniques</subject><subj-group><subject>Sequencing techniques</subject><subj-group><subject>RNA sequencing</subject></subj-group></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>beachmat: A Bioconductor C++ API for accessing high-throughput biological data from a variety of R matrix types</article-title>
<alt-title alt-title-type="running-head">beachmat: A C++ API to access biological data from R matrices</alt-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-3564-4813</contrib-id>
<name name-style="western">
<surname>Lun</surname> <given-names>Aaron T. L.</given-names></name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Formal analysis</role>
<role content-type="http://credit.casrai.org/">Investigation</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Validation</role>
<role content-type="http://credit.casrai.org/">Visualization</role>
<role content-type="http://credit.casrai.org/">Writing – original draft</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Pagès</surname> <given-names>Hervé</given-names></name>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-7800-3848</contrib-id>
<name name-style="western">
<surname>Smith</surname> <given-names>Mike L.</given-names></name>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
</contrib-group>
<aff id="aff001">
<label>1</label>
<addr-line>Cancer Research UK Cambridge Institute, University of Cambridge, Li Ka Shing Centre, Cambridge, United Kingdom</addr-line>
</aff>
<aff id="aff002">
<label>2</label>
<addr-line>Fred Hutchinson Cancer Research Center, Seattle, Washington, United States of America</addr-line>
</aff>
<aff id="aff003">
<label>3</label>
<addr-line>European Molecular Biology Laboratory (EMBL), Genome Biology Unit, Heidelberg, Germany</addr-line>
</aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>Pertea</surname> <given-names>Mihaela</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1">
<addr-line>Johns Hopkins University, UNITED STATES</addr-line>
</aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>The authors have declared that no competing interests exist.</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">aaron.lun@cruk.cam.ac.uk</email></corresp>
</author-notes>
<pub-date pub-type="collection">
<month>5</month>
<year>2018</year>
</pub-date>
<pub-date pub-type="epub">
<day>3</day>
<month>5</month>
<year>2018</year>
</pub-date>
<volume>14</volume>
<issue>5</issue>
<elocation-id>e1006135</elocation-id>
<history>
<date date-type="received">
<day>22</day>
<month>11</month>
<year>2017</year>
</date>
<date date-type="accepted">
<day>10</day>
<month>4</month>
<year>2018</year>
</date>
</history>
<permissions>
<copyright-year>2018</copyright-year>
<copyright-holder>Lun et al</copyright-holder>
<license xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">
<license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pcbi.1006135"/>
<abstract>
<p>Biological experiments involving genomics or other high-throughput assays typically yield a data matrix that can be explored and analyzed using the R programming language with packages from the Bioconductor project. Improvements in the throughput of these assays have resulted in an explosion of data even from routine experiments, which poses a challenge to the existing computational infrastructure for statistical data analysis. For example, single-cell RNA sequencing (scRNA-seq) experiments frequently generate large matrices containing expression values for each gene in each cell, requiring sparse or file-backed representations for memory-efficient manipulation in R. These alternative representations are not easily compatible with high-performance C++ code used for computationally intensive tasks in existing R/Bioconductor packages. Here, we describe a C++ interface named <italic>beachmat</italic>, which enables agnostic data access from various matrix representations. This allows package developers to write efficient C++ code that is interoperable with dense, sparse and file-backed matrices, amongst others. We evaluated the performance of <italic>beachmat</italic> for accessing data from each matrix representation using both simulated and real scRNA-seq data, and defined a clear memory/speed trade-off to motivate the choice of an appropriate representation. We also demonstrate how beachmat can be incorporated into the code of other packages to drive analyses of a very large scRNA-seq data set.</p>
</abstract>
<funding-group>
<award-group id="award001">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/501100000289</institution-id>
<institution>Cancer Research UK</institution>
</institution-wrap>
</funding-source>
<award-id>A17197</award-id>
</award-group>
<award-group id="award002">
<funding-source>
<institution>The German Network for Bioinformatics Infrastructure</institution>
</funding-source>
<award-id>031A537 A</award-id>
</award-group>
<funding-statement>Aaron T. L. Lun was supported by core funding from Cancer Research UK (<ext-link ext-link-type="uri" xlink:href="https://www.cancerresearchuk.org" xlink:type="simple">https://www.cancerresearchuk.org</ext-link>, award no. 17197 to Dr. John Marioni), the University of Cambridge and Hutchison Whampoa Ltd. Mike L. Smith was funded by The German Network for Bioinformatics Infrastructure (<ext-link ext-link-type="uri" xlink:href="https://www.denbi.de" xlink:type="simple">https://www.denbi.de</ext-link>) Förderkennzeichen Nr. 031A537 B. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
</funding-group>
<counts>
<fig-count count="5"/>
<table-count count="0"/>
<page-count count="15"/>
</counts>
<custom-meta-group>
<custom-meta>
<meta-name>PLOS Publication Stage</meta-name>
<meta-value>vor-update-to-uncorrected-proof</meta-value>
</custom-meta>
<custom-meta>
<meta-name>Publication Update</meta-name>
<meta-value>2018-05-15</meta-value>
</custom-meta>
<custom-meta id="data-availability">
<meta-name>Data Availability</meta-name>
<meta-value>The Zeisel et al. mouse brain cell data set is available at <ext-link ext-link-type="uri" xlink:href="http://linnarssonlab.org/cortex" xlink:type="simple">http://linnarssonlab.org/cortex</ext-link>. The 1.3 million brain cell data set produced by 10X Genomics is available at <ext-link ext-link-type="uri" xlink:href="https://support.10xgenomics.com/single-cell-gene-expression/datasets/1.3.0/1M_neurons" xlink:type="simple">https://support.10xgenomics.com/single-cell-gene-expression/datasets/1.3.0/1M_neurons</ext-link>, or as an R package at <ext-link ext-link-type="uri" xlink:href="https://bioconductor.org/packages/TENxBrainData" xlink:type="simple">https://bioconductor.org/packages/TENxBrainData</ext-link>.</meta-value>
</custom-meta>
</custom-meta-group>
</article-meta>
</front>
<body>
<disp-quote><p>This is a <italic>PLOS Computational Biology</italic> Software paper.</p></disp-quote>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<p>The combination of the statistical programming language R [<xref ref-type="bibr" rid="pcbi.1006135.ref001">1</xref>] and the open-source Bioconductor project [<xref ref-type="bibr" rid="pcbi.1006135.ref002">2</xref>] represents a key platform for exploring and analyzing high-throughput biological data. R provides efficient, rigorously tested, open-source implementations of many statistical and numerical procedures. Its interactive nature lends itself to data exploration and research, while its programming features allow assembly of complex analyses. It is also extensible through the installation of optional “packages”, often contributed by the research community, which contain bespoke methods for specific scientific problems. In particular, the Bioconductor project [<xref ref-type="bibr" rid="pcbi.1006135.ref003">3</xref>] provides over a thousand packages for analyzing biological data in fields such as genomics, transcriptomics and proteomics. Packages are mostly written in R but can also include native code (in C/C++ or Fortran) for computationally intensive tasks. Use of native C++ code is facilitated by the <italic>Rcpp</italic> package [<xref ref-type="bibr" rid="pcbi.1006135.ref004">4</xref>], which simplifies the integration of package code with the R application programming interface (API).</p>
<p>A matrix of measurements is a common starting point in many analysis workflows for high-throughput biological data. A typical example is the expression matrix in transcriptomics data, where each row represents a gene, each column represents a sample and each entry represents the quantified expression (e.g., number of mapped reads, transcripts-per-million) for a gene in a sample. By default, this is represented in R as an “ordinary” matrix, where each entry is explicitly stored in random access memory (RAM) in a dense contiguous array. Alternatively, it can be represented as a sparse matrix using classes from the <italic>Matrix</italic> package [<xref ref-type="bibr" rid="pcbi.1006135.ref005">5</xref>], which saves memory by only storing non-zero entries. Another option is to use file-backed representations such as those in the <italic>bigmemory</italic> [<xref ref-type="bibr" rid="pcbi.1006135.ref006">6</xref>] or <italic>HDF5Array</italic> packages, where the data are stored in a file and parts of it are loaded into RAM upon request. For each representation, methods are provided in R for common operations such as subsetting, transposition and arithmetic, such that any downstream code for data processing can be agnostic to the exact representation of the matrix. This simplifies software development and improves interoperability.</p>
<p>The major benefit of alternative representations is that they allow efficient handling of large matrices in R without using large amounts of RAM to construct a dense array. This is particularly important for the effective analysis of biological data sets due to the increasing throughput of the experimental protocols. It is well known that the output of DNA sequencing machines has risen consistently over the past decade [<xref ref-type="bibr" rid="pcbi.1006135.ref007">7</xref>], which is compounded by the increasing complexity of the assays. For example, droplet-based protocols in single-cell transcriptomics [<xref ref-type="bibr" rid="pcbi.1006135.ref008">8</xref>–<xref ref-type="bibr" rid="pcbi.1006135.ref010">10</xref>] generate transcriptome-wide expression profiles for each of thousands or even millions of cells. Similar issues are encountered outside of transcriptomics, with single-cell ATAC-seq [<xref ref-type="bibr" rid="pcbi.1006135.ref011">11</xref>] and bisulfite sequencing [<xref ref-type="bibr" rid="pcbi.1006135.ref012">12</xref>] yielding genome-wide data (from individual genomic regions or base positions, respectively) for each cell. Analyses of these large data sets often involve an extended period of interactive data exploration where the matrix might be transformed, subsetted or rearranged. Given R’s copy-on-write semantics, matrix representations that achieve efficient memory usage throughout the course of an analysis are highly desirable.</p>
<p>Unfortunately, the use of alternative matrix representations is less straightforward for compiled code written in statically typed languages like C++. Existing interfaces for reading R matrices in C/C++ require the details of the matrix representation to be specified during compilation. This makes it difficult to write a single, general piece of code that can be applied to many different representations. Writing multiple versions of a function for different representations is difficult and unsustainable when more representations become available. The other option is to perform all processing in R to exploit the availability of common methods. However, this is an unappealing strategy for high-performance code. R is often slower than C++ by at least an order of magnitude for arbitrary programming tasks that cannot be “vectorized”, i.e., made to operate on all elements of a vector at once. This includes common procedures in biological data analysis such as looping across all samples or genes and performing arbitrarily complex operations on the sample- or gene-specific observations. The use of R alone would increase the computational time required to perform analyses, which is inconvenient for interactive analyses and unacceptable for large simulation studies. It would clearly be preferable to implement critical functions in native code wherever possible.</p>
<p>Here, we describe a C++ API named <italic>beachmat</italic> (using Bioconductor to handle Each Matrix Type), which enables C++ code to access R matrix data in a manner that is agnostic to the exact matrix representation. This allows package developers to implement computationally intensive algorithms in C++ that can be immediately applied to a wide range of R matrix classes including ordinary matrices, sparse matrices from the <italic>Matrix</italic> package, and HDF5-backed matrices from the <italic>HDF5Array</italic> package. Using simulated and real transcriptomics data, we assess the performance of <italic>beachmat</italic> for data access from each matrix representation. We show that each representation has specific strengths and weaknesses, with a clear memory-speed trade-off that motivates the use of alternative representations in different settings. We also demonstrate how <italic>beachmat</italic> can be used by other Bioconductor packages to enable the analysis of a very large single-cell RNA sequencing (scRNA-seq) data set. By operating synergistically with existing Bioconductor infrastructure, <italic>beachmat</italic> extends R’s capabilities for analyzing high-throughput biological data stored in large matrices.</p>
</sec>
<sec id="sec002" sec-type="materials|methods">
<title>Design and implementation</title>
<sec id="sec003">
<title>Overview</title>
<p>The <italic>beachmat</italic> API uses C++ classes to provide a common interface for data access from R matrix representations. For all representations of a given data type (e.g., integer, double-precision, character strings), we define a base class with common methods for data access. Each specific representation is associated with a derived class that provides customized implementations of the access methods. The intention is for a user to pass in an R matrix of any type, in the form of an <monospace>RObject</monospace> instance from the <italic>Rcpp</italic> API (<xref ref-type="fig" rid="pcbi.1006135.g001">Fig 1</xref>). <italic>beachmat</italic> then constructs an instance of the appropriate derived class, returning a pointer to the base class. This pointer is the same regardless of the representation and can be used in downstream C++ code to achieve run-time polymorphism.</p>
<fig id="pcbi.1006135.g001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006135.g001</object-id>
<label>Fig 1</label>
<caption>
<title>Schematic of the <italic>beachmat</italic> workflow.</title>
<p>Various matrix representations at the R level are passed as <monospace>RObject</monospace> instances to a C++ function. <italic>beachmat</italic> identifies the specific representation, constructs an instance of the appropriate C++ derived class, and returns a pointer to the base class. (In this case, a <monospace>numeric_matrix</monospace> pointer is returned for input matrices holding double-precision data.) This pointer can then be used in user-level code in a manner that is agnostic to the details of the original representation.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.g001" xlink:type="simple"/>
</fig>
<p>When access to a specific row or column (or a part thereof) is requested, the <italic>beachmat</italic> API will use representation-specific methods to fill a <italic>Rcpp</italic>-style <monospace>Vector</monospace> object with corresponding data values from the matrix. This copy-on-access strategy ensures that the API behaves consistently across different matrix representations, and provides flexibility for downstream applications by allowing in-place modifications to vector elements and guaranteeing contiguous data storage. It is also possible to avoid copying altogether when performing read-only data access from columns of ordinary or sparse matrices, improving efficiency in certain situations. Finally, a request for a specific entry of the matrix will directly return the corresponding data value.</p>
<p>While the <italic>beachmat</italic> API is agnostic to the matrix representation, it still needs to know the type of data that are stored in the matrix. We use C++ templating to recycle the code to define specific classes for common data types, i.e., logical, integer, double-precision floating point or character strings. The same methods are available for all classes of each data type, improving their ease of use for developers.</p>
</sec>
<sec id="sec004">
<title>Supported matrix representations</title>
<p>The simplest matrix representation is the ordinary R matrix, where data are stored in RAM as a contiguous dense array in column-major format. This is most commonly constructed with the base <monospace>matrix</monospace> function, though the <monospace>dgeMatrix</monospace> class from the <italic>Matrix</italic> package implements an equivalent representation. Both of these classes are supported by <italic>beachmat</italic>. Using simulated data (Section 1 of <xref ref-type="supplementary-material" rid="pcbi.1006135.s001">S1 Text</xref>), we measured the speed of row- or column-level data access from ordinary matrices with <italic>beachmat</italic>. Our results indicate that <italic>beachmat</italic> provides comparable performance to a reference <italic>Rcpp</italic> implementation (Section 2 of <xref ref-type="supplementary-material" rid="pcbi.1006135.s001">S1 Text</xref>, <xref ref-type="supplementary-material" rid="pcbi.1006135.s005">S1 Fig</xref>).</p>
<p><italic>beachmat</italic> also supports data access from sparse matrices in the compressed sparse column-orientated (CSC) format (Section 3.1 of <xref ref-type="supplementary-material" rid="pcbi.1006135.s001">S1 Text</xref>, <xref ref-type="supplementary-material" rid="pcbi.1006135.s006">S2 Fig</xref>), implemented in the <monospace>dgCMatrix</monospace> class from <italic>Matrix</italic>. This representation only stores non-zero values in RAM, which is highly memory-efficient for assays that yield many zeroes, e.g., scRNA-seq. When the density of non-zero entries is low, column access from CSC matrices can also be faster than the equivalent ordinary matrix (Section 3.2 of <xref ref-type="supplementary-material" rid="pcbi.1006135.s001">S1 Text</xref>, <xref ref-type="supplementary-material" rid="pcbi.1006135.s007">S3 Fig</xref>). However, row access from CSC matrices is more complex, as obtaining elements from an arbitrary row of the matrix involves a binary search for each column (Section 3.3 of <xref ref-type="supplementary-material" rid="pcbi.1006135.s001">S1 Text</xref>). We use a novel caching strategy to improve the efficiency of accessing data from consecutive rows by avoiding unnecessary binary searches (<xref ref-type="fig" rid="pcbi.1006135.g002">Fig 2</xref>). This provides a 4-fold increase in speed compared to a naive approach, as well as faster row-level access than the <italic>RcppArmadillo</italic> and <italic>RcppEigen</italic> APIs [<xref ref-type="bibr" rid="pcbi.1006135.ref013">13</xref>, <xref ref-type="bibr" rid="pcbi.1006135.ref014">14</xref>]. Our caching strategy also improves performance for non-consecutive row access (<xref ref-type="supplementary-material" rid="pcbi.1006135.s008">S4 Fig</xref>).</p>
<fig id="pcbi.1006135.g002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006135.g002</object-id>
<label>Fig 2</label>
<caption>
<title>Timing of access to consecutive rows of simulated CSC matrices using the caching method in <italic>beachmat</italic>, a naive binary search written in <italic>Rcpp</italic> or through the <italic>RcppArmadillo</italic> and <italic>RcppEigen</italic> APIs.</title>
<p>For reference, the access time for an equivalent ordinary matrix is also shown. (a) Access times with respect to the density of non-zero entries, for a matrix with 10000 rows and 1000 columns. (b) Access times with respect to the number of rows, for a matrix with 1000 columns and 1% non-zero entries. Each value shown above represents the time required to access all rows of the matrix, averaged across 10 iterations. Horizontal dotted lines represent 2-fold increases in time.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.g002" xlink:type="simple"/>
</fig>
<p>Another representation supported by <italic>beachmat</italic> is a file-backed matrix based on the hierarchical data format (HDF5) [<xref ref-type="bibr" rid="pcbi.1006135.ref015">15</xref>], implemented in the <monospace>HDF5Matrix</monospace> class from the <italic>HDF5Array</italic> package (Section 4 of <xref ref-type="supplementary-material" rid="pcbi.1006135.s001">S1 Text</xref>). This stores the entire data set in a HDF5 file, only retrieving subsets into RAM upon request. As a result, it is very memory-efficient but much slower than the other representations (<xref ref-type="supplementary-material" rid="pcbi.1006135.s009">S5 Fig</xref>). A key determinant of access speed is the layout of the HDF5 file, where data can be split into “chunks” for easier retrieval. Once read, chunks can be cached in memory to avoid redundant retrieval of data from the same chunk in adjacent rows or columns. To improve performance, <italic>beachmat</italic> automatically tunes the parameters of the HDF5 chunk cache to optimize data access from consecutive rows or columns (<xref ref-type="supplementary-material" rid="pcbi.1006135.s002">S2 Text</xref>). This allows <italic>beachmat</italic> to use the same rectangular chunking layout for row and column access (<xref ref-type="fig" rid="pcbi.1006135.g003">Fig 3</xref>) with performance comparable to pure row- and column-chunking layouts. We also provide functions to choose suitable chunk dimensions during file creation, when consecutive row or column access is expected downstream; as well as functions to convert to layouts that are well-suited for random row or column access (<xref ref-type="supplementary-material" rid="pcbi.1006135.s010">S6</xref> and <xref ref-type="supplementary-material" rid="pcbi.1006135.s011">S7</xref> Figs, <xref ref-type="supplementary-material" rid="pcbi.1006135.s003">S3 Text</xref>).</p>
<fig id="pcbi.1006135.g003" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006135.g003</object-id>
<label>Fig 3</label>
<caption>
<title>Timing of <italic>beachmat</italic>-based access to consecutive columns or rows of a simulated <monospace>HDF5Matrix</monospace> object constructed with different HDF5 file layouts, i.e., contiguous, row- or column-chunking, or 40 × 40 rectangular chunks.</title>
<p>(a) Column access times with respect to the number of columns, for a matrix with 1000 rows. (b) Row access times with respect to the number of rows, for a matrix with 100 columns. Each value shown above represents the time required to access the entirety of the matrix, averaged across 10 iterations. Horizontal dotted lines represent 2-fold increases in time.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.g003" xlink:type="simple"/>
</fig>
<p>Other representations are also supported, including packed symmetric matrices and matrices based on run-length encodings (see Section 5 of <xref ref-type="supplementary-material" rid="pcbi.1006135.s001">S1 Text</xref> for details). As a general rule, matrix representations that occupy more RAM provide faster data access, as data do not need to be unpacked or retrieved from file. The exception is that of sparse matrices with few non-zero entries, where the ability to ignore zeroes can dramatically improve performance for certain algorithms. Indeed, for a more complex operation like matrix multiplication, the use of sparse matrices is much faster than ordinary or HDF5-backed matrices (Section 6 of <xref ref-type="supplementary-material" rid="pcbi.1006135.s001">S1 Text</xref>, <xref ref-type="supplementary-material" rid="pcbi.1006135.s012">S8 Fig</xref>), though obviously this depends on the density of non-zero entries.</p>
</sec>
<sec id="sec005">
<title>Generating matrix output from C++</title>
<p>In addition to accessing data in existing matrices, the <italic>beachmat</italic> API allows C++ code to store data in various representations for output to R. For integer, logical, double-precision and character data, ordinary and HDF5-backed matrices can be constructed that are indistinguishable from those generated in R. Logical and double-precision data can also be stored in sparse format, where only true or non-zero values are retained in <monospace>lgCMatrix</monospace> or <monospace>dgCMatrix</monospace> instances, respectively. (The <italic>Matrix</italic> package does not support sparse integer or character matrices, so these are not considered.) The output representation can either be explicitly specified in the code, or it can be automatically chosen to match some input representation. To illustrate, consider a C++ function that accepts a matrix as input and returns a matrix of similar dimensions. If the input is an ordinary matrix, one might assume that there is enough RAM to also store the output as an ordinary matrix; whereas if the input is a <monospace>HDF5Matrix</monospace>, one could presume that the output would be similarly large, thus requiring a <monospace>HDF5Matrix</monospace> representation for the results. This means that results of processing in C++ can be returned in the most suitable representation for manipulation in R.</p>
</sec>
<sec id="sec006">
<title>Alternative strategies for matrix manipulation</title>
<p>An alternative to using <italic>beachmat</italic> is to write C++ code for ordinary matrices and apply it to submatrices (or “blocks”) of a given input matrix. Each block is coerced to an ordinary matrix before it is supplied to the C++ code. After looping across all blocks, the block-wise results are combined to obtain the final result for the entire matrix. This block processing strategy allows the application of C++ code while controlling RAM usage by storing only one block as an ordinary matrix at any given time. However, it requires coordination between R and C++ to keep track of the block that is being processed, to monitor intermediate variables that persist between blocks, and to combine the results in an appropriate manner. The need to ensure that R and C++ are interacting correctly at multiple points imposes a significant burden on the developer. Computational efficiency is also reduced by looping in R, multiple matrix coercions and repeated C++ function calls. The <italic>beachmat</italic> API provides a natural solution by moving the entire procedure into C++, simplifying development and maintenance.</p>
<p>Unlike the <italic>RcppArmadillo</italic> and <italic>RcppEigen</italic> APIs, <italic>beachmat</italic> does not provide any direct support for matrix operations such as multiplication or factorization. Rather, <italic>beachmat</italic> was developed for applications that treat an input matrix as a collection of (otherwise separate) column- or row-wise vectors. This is a common use case for data matrices generated by high-throughput biological experiments, where a function may need to loop over rows or columns to perform calculations for each assayed feature or sample, respectively. Indeed, most Bioconductor packages that use C++ (309 packages in release 3.6, based on the requirement for <italic>Rcpp</italic>) do not use <italic>RcppEigen</italic> or <italic>RcppArmadillo</italic> (required by 8 and 74 packages, respectively). This suggests that the lack of support for matrix operations in <italic>beachmat</italic> will not be a major hindrance to its utility in the Bioconductor development framework. In fact, a representation-agnostic API may not be practical for matrix operations that are not scalable for very large file-backed matrices. Switching to faster approximate approaches is a decision for the developer/user, not a low-level API like <italic>beachmat</italic>.</p>
</sec>
</sec>
<sec id="sec007" sec-type="results">
<title>Results</title>
<sec id="sec008">
<title>Use cases in single-cell RNA sequencing</title>
<p>Recent advances in scRNA-seq technologies have led to an explosion in the quantity of data that can be generated in routine experiments. Droplet-based methods such as Drop-Seq [<xref ref-type="bibr" rid="pcbi.1006135.ref008">8</xref>], inDrop [<xref ref-type="bibr" rid="pcbi.1006135.ref009">9</xref>] and GemCode [<xref ref-type="bibr" rid="pcbi.1006135.ref010">10</xref>] allow transcriptome-wide expression profiles involving 10,000-40,000 genes to be captured in each of thousands to millions of cells. Careful computational analysis is critical to extract meaningful biology from these data, but their sheer volume strains existing pipelines and methods designed for single-cell data processing. The data analysis challenge is compounded by the presence of large-scale projects such as the Human Cell Atlas [<xref ref-type="bibr" rid="pcbi.1006135.ref016">16</xref>], which aims to use single-cell ‘omics to profile every cell type in the human body. The increasing size of these data sets motivates the use of alternative matrix representations to store the data as well as the efficient implementation of analysis methods in native code. This presents itself as a highly relevant use case for <italic>beachmat</italic>, which we will explore in the following sections.</p>
</sec>
<sec id="sec009">
<title>Access times for a small brain data set</title>
<p>We evaluated the performance of <italic>beachmat</italic> with the different matrix representations on real scRNA-seq data from a study of the mouse brain by Zeisel <italic>et al</italic>. [<xref ref-type="bibr" rid="pcbi.1006135.ref017">17</xref>] (Section 1 of <xref ref-type="supplementary-material" rid="pcbi.1006135.s004">S4 Text</xref>). This data set contains integer expression values for 19972 genes in each of 3005 brain cells, derived from different regions of the brain and consisting of a diverse range of cell types. Only 18% of expression values in the matrix are non-zero, reflecting the low capture efficiencies in single-cell transcriptomics experiments [<xref ref-type="bibr" rid="pcbi.1006135.ref018">18</xref>]. The Zeisel <italic>et al</italic>. data set is not particularly large, especially in the context of droplet-based experiments that routinely generate transcriptome-wide data for tens of thousands of cells. However, for our purposes, the smaller number of cells in this data set is desirable as it means that each of the matrix representations—including those that are stored wholly in RAM—can be easily evaluated and compared.</p>
<p>We converted the Zeisel <italic>et al</italic>. data to the various matrix representations and measured the access speed for the row- or column-level data with <italic>beachmat</italic>. We observed similar results to those obtained with simulated data, recapitulating the different trade-offs between access speed and RAM usage across representations. Specifically, row and column accesses from an ordinary matrix were fastest, followed by accesses from a sparse matrix (<xref ref-type="fig" rid="pcbi.1006135.g004">Fig 4a and 4b</xref>). HDF5-backed matrices provided slowest access but also the smallest memory footprint (2 KB, compared to 480 MB for ordinary matrices and 130 MB for sparse matrices). The size of the HDF5 file was relatively small, requiring only 16-20 MB of space for each <monospace>HDF5Matrix</monospace> instance. We also recorded the time required to compute some gene- or cell-specific metrics (<xref ref-type="fig" rid="pcbi.1006135.g004">Fig 4c</xref>, Section 1 of <xref ref-type="supplementary-material" rid="pcbi.1006135.s004">S4 Text</xref>) commonly used in scRNA-seq data analysis. Our custom C++ functions based on <italic>beachmat</italic> were at least comparable to the built-in R functions, and were faster in some cases by avoiding a type conversion to a logical matrix.</p>
<fig id="pcbi.1006135.g004" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006135.g004</object-id>
<label>Fig 4</label>
<caption>
<title>Timing for data access and calculation of common metrics from various matrix representations of the mouse brain data set from Zeisel <italic>et al</italic>. [<xref ref-type="bibr" rid="pcbi.1006135.ref017">17</xref>].</title>
<p>(a) Time required to calculate the column sums for each representation by accessing data from each column. For <monospace>HDF5Matrix</monospace>, a column-chunked layout and a rectangular 200 × 200 layout were tested. (b) Time required to calculate the row sums for each representation by accessing data from each row. For <monospace>HDF5Matrix</monospace>, a row-chunked layout and a rectangular 200 × 200 layout were tested. (c) Time required to compute the library size per cell, the number of cells expressing each gene or the number of genes expressed in each cell, using C++ functions written with <italic>beachmat</italic> or the relevant built-in methods in R. Each value is an average of 10 repeated timings; standard errors were negligible and are not shown.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.g004" xlink:type="simple"/>
</fig>
<p>An appropriate choice of matrix representation depends on the context in which it is used. We could use purely in-RAM representations for optimal access speed, but this may not be practical for very large data sets. Even high-performance computing systems have their limits, especially when multiple copies of the matrix are generated throughout the course of an analysis. Sparse representations also become ineffective if sparsity-destroying operations (e.g., mean-centering, batch correction) are applied. In such cases, it may be preferable to sacrifice speed for reduced memory consumption by using file-backed representations such as <monospace>HDF5Matrix</monospace>. By incorporating <italic>beachmat</italic> into the C++ code, an R package can dynamically accept different matrix types appropriate for the size of the data set and computing environment.</p>
</sec>
<sec id="sec010">
<title>Analysis of the large 10X data set</title>
<p>To demonstrate the utility of <italic>beachmat</italic> for faciliting analyses of large data sets, we converted several functions in the <italic>scater</italic> [<xref ref-type="bibr" rid="pcbi.1006135.ref019">19</xref>] and <italic>scran</italic> packges [<xref ref-type="bibr" rid="pcbi.1006135.ref020">20</xref>] to use <italic>beachmat</italic> in their C++ code. We applied these functions to the 1.3 million brain cell data set from 10X Genomics (Section 2 of <xref ref-type="supplementary-material" rid="pcbi.1006135.s004">S4 Text</xref>). First, we called cell cycle phase with the <monospace>cyclone</monospace> method [<xref ref-type="bibr" rid="pcbi.1006135.ref021">21</xref>], which required access to each column (i.e., single cell) of the count matrix via <italic>beachmat</italic>. Most cells were identified as being in G1 phase (<xref ref-type="fig" rid="pcbi.1006135.g005">Fig 5a</xref>), consistent with the presence of differentiated neurons that are not actively cycling. Next, we applied the deconvolution method [<xref ref-type="bibr" rid="pcbi.1006135.ref022">22</xref>] to normalize for cell-specific biases, again using column-level data access. This yielded a size factor for each cell, which was generally well-correlated with the library size (<xref ref-type="fig" rid="pcbi.1006135.g005">Fig 5b</xref>). However, a few cells have size factors that are much smaller than expected based on their library sizes, and there is a modest amount of scatter around the size factor-library size trend. This is consistent with composition effects [<xref ref-type="bibr" rid="pcbi.1006135.ref023">23</xref>] caused by differential gene expression between cell subpopulations.</p>
<fig id="pcbi.1006135.g005" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006135.g005</object-id>
<label>Fig 5</label>
<caption>
<title>Analysis of the 10X 1.3 million brain cell data set.</title>
<p>(a) Cell cycle phase assignment, based on the G1 and G2M scores reported by <monospace>cyclone</monospace>. The intensity of colour is proportional to the density of cells at each plot location. Dashed lines indicate the score boundaries corresponding to each phase, and the number of assigned cells is also shown for each phase. (b) Size factor for each cell from the deconvolution method, plotted against the library size. Cells are coloured according to the deviation from the median log-ratio of the size factor to the library size across all cells. (c) Variance of the normalized log-expression values for each gene, plotted against the mean log-expression. The red line represents the mean-dependent trend fitted to all genes, while the blue line represents the mean-variance trend corresponding to Poisson noise. Orange points represent HVGs with variances above the red line, with the top 10 genes highlighted. (d) PCA plot generated from the HVG expression profiles of all cells. The variance explained by each of the first two principal components is shown in brackets.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.g005" xlink:type="simple"/>
</fig>
<p>We detected highly variable genes (HVGs) based on the variance of the log-normalized expression values for each gene [<xref ref-type="bibr" rid="pcbi.1006135.ref020">20</xref>]. We blocked on the sequencing library of origin for each cell to regress out technical factors of variation unrelated to biological heterogeneity. This was done on a gene-by-gene basis, and thus required row-level access to the log-expression matrix via <italic>beachmat</italic>. We identified a number of HVGs (<xref ref-type="fig" rid="pcbi.1006135.g005">Fig 5c</xref>), including genes involved in neuronal differentiation and function such as <italic>Neurod6</italic> [<xref ref-type="bibr" rid="pcbi.1006135.ref024">24</xref>] and <italic>Sox11</italic> [<xref ref-type="bibr" rid="pcbi.1006135.ref025">25</xref>]. Finally, we performed dimensionality reduction on the HVG expression profiles for all cells using randomized principal components analysis (PCA) [<xref ref-type="bibr" rid="pcbi.1006135.ref026">26</xref>]. Visualization of the first two principal components (PCs) showed clear substructure in the cell population (<xref ref-type="fig" rid="pcbi.1006135.g005">Fig 5d</xref>), reflecting the diversity of cell types in the mouse brain. Indeed, once PCA has been performed, the first 10-100 PCs for each cell can be used as a summary of its expression profile. This can be stored as an ordinary matrix and supplied directly to other R functions for clustering [<xref ref-type="bibr" rid="pcbi.1006135.ref027">27</xref>, <xref ref-type="bibr" rid="pcbi.1006135.ref028">28</xref>] or trajectory reconstruction [<xref ref-type="bibr" rid="pcbi.1006135.ref029">29</xref>]. At this point, memory usage ceases to be an issue and we only need to choose algorithms that are scalable with respect to the number of cells.</p>
<p>While a full characterisation of this data set is outside the scope of this article, it is clear that we can proceed through many parts of the scRNA-seq analysis pipeline using <italic>beachmat</italic>-driven C++ functions. By taking advantage of the file-backed <monospace>HDF5Matrix</monospace>, this analysis can be conducted in reasonable time on a desktop with modest specifications (see Section 3 of <xref ref-type="supplementary-material" rid="pcbi.1006135.s004">S4 Text</xref>). These features allow us to obtain biological insights that previously would have been inaccessible from R. We also note that the incorporation of the <italic>beachmat</italic> API only required small modifications to existing C++ code for scRNA-seq data analysis. This indicates that many established methods in the R/Bioconductor ecosystem can be easily and immediately extended to work with large data sets, enabling the statistically rigorous analysis of large single-cell data.</p>
</sec>
</sec>
<sec id="sec011">
<title>Availability and future directions</title>
<p>The <italic>beachmat</italic> package contains the C++ API and is available as part of version 3.6 of the Bioconductor project (<ext-link ext-link-type="uri" xlink:href="https://bioconductor.org/packages/beachmat" xlink:type="simple">https://bioconductor.org/packages/beachmat</ext-link>). It is straightforward to integrate <italic>beachmat</italic> into existing R packages, enabling arbitrary C++ code to accept many different matrix inputs without any further effort on the part of the developer. Our modifications to the <italic>scran</italic> and <italic>scater</italic> packages have enabled the analysis of a very large scRNA-seq data set in low-memory environments using file-backed representations, without significantly compromising speed for smaller data sets that can be held fully in memory. These modifications are now implemented in the latest versions of <italic>scran</italic> and <italic>scater</italic>, both of which can also be installed from Bioconductor.</p>
<p>The popularity of the R programming language stems, in part, from the ease with which it can be extended. Packages can be easily developed by the research community to implement cutting-edge algorithms for new data types. The increasing number of packages designed to analyze single-cell data (43 on Bioconductor at time of writing) provides a case in point. We anticipate that <italic>beachmat</italic> will be useful to developers of novel computationally intensive bioinformatics methods that need to access data from different matrices. While we have focused on scRNA-seq in this paper, analyses of other large matrices (e.g., genome-wide contact matrices in Hi-C data [<xref ref-type="bibr" rid="pcbi.1006135.ref030">30</xref>]) may also benefit from <italic>beachmat</italic>-driven code. We will also continue to develop <italic>beachmat</italic> to support data access from new formats such as Loom for scRNA-seq data (<ext-link ext-link-type="uri" xlink:href="http://loompy.org/" xlink:type="simple">http://loompy.org/</ext-link>).</p>
<p>We note that, for large single-cell data, the utility of <italic>beachmat</italic> for R package development ultimately depends on the scalability of the underlying algorithms for processing millions or even billions of cells. Most existing methods for scRNA-seq data analysis are designed to handle thousands of cells at best. Fortunately, we can make use of the existing expertise in the Bioconductor community to improve scalability. Highly multiplexed flow and mass cytometry experiments routinely generate low-dimensional data for millions of cells, and many Bioconductor packages are already available to analyze and interpret these data [<xref ref-type="bibr" rid="pcbi.1006135.ref031">31</xref>–<xref ref-type="bibr" rid="pcbi.1006135.ref033">33</xref>]. A low-rank representation of scRNA-seq data (e.g., after PCA) is similar to cytometric data in size and structure, suggesting that algorithms used in the latter can also be applied to the former. This presents an interesting avenue for future development of software based on <italic>beachmat</italic>.</p>
<p>All R/C++ code used to perform the simulations and real data analyses are also available on Github (<ext-link ext-link-type="uri" xlink:href="https://github.com/LTLA/MatrixEval2017" xlink:type="simple">https://github.com/LTLA/MatrixEval2017</ext-link>).</p>
</sec>
<sec id="sec012">
<title>Supporting information</title>
<supplementary-material id="pcbi.1006135.s001" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.s001" xlink:type="simple">
<label>S1 Text</label>
<caption>
<title>Performance of <italic>beachmat</italic> on different matrices.</title>
<p>(PDF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006135.s002" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.s002" xlink:type="simple">
<label>S2 Text</label>
<caption>
<title>Optimizing HDF5 chunk cache parameters.</title>
<p>(PDF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006135.s003" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.s003" xlink:type="simple">
<label>S3 Text</label>
<caption>
<title>Dealing with random access from a <monospace>HDF5Matrix</monospace>.</title>
<p>(PDF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006135.s004" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.s004" xlink:type="simple">
<label>S4 Text</label>
<caption>
<title>Methods for real data processing.</title>
<p>(PDF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006135.s005" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.s005" xlink:type="simple">
<label>S1 Fig</label>
<caption>
<title>Time required to access consecutive columns or rows of simulated ordinary matrices using the <italic>beachmat</italic> or <italic>Rcpp</italic> APIs.</title>
<p>(a) Column access time with respect to the number of columns, for a matrix with 10000 rows. Times are shown for <italic>beachmat</italic> with and without copying of matrix data. (b) Row access time with respect to the number of rows, for a matrix with 1000 columns. Each timing represents the average of 10 simulations, and involves accessing the entirety of the matrix. Intervals between the horizontal dotted lines represent 2-fold increases in time.</p>
<p>(PDF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006135.s006" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.s006" xlink:type="simple">
<label>S2 Fig</label>
<caption>
<title>A schematic of the column-sparse compressed matrix format, as implemented by the <monospace>dgCMatrix</monospace> class in the <italic>Matrix</italic> package.</title>
<p>The grey box represents a sparse matrix with zero entries indicated by the dots. The <monospace>x</monospace> vector stores all non-zero values, ordered in column-major format. The index of each element in <monospace>x</monospace> is shown in red. The <monospace>i</monospace> vector stores the row indices (blue) corresponding to the ordered non-zero values. The <monospace>p</monospace> vector stores the element index of the first non-zero value in each column (brown). The last element of <monospace>p</monospace> is always the total number of non-zero entries.</p>
<p>(PDF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006135.s007" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.s007" xlink:type="simple">
<label>S3 Fig</label>
<caption>
<title>Time required to access consecutive columns of simulated CSC matrices using <italic>beachmat</italic> or the <italic>RcppArmadillo</italic> and <italic>RcppEigen</italic> APIs, compared to an equivalent ordinary matrix with <italic>beachmat</italic>.</title>
<p>Timings were also recorded for a copy-free column access method for CSC matrices in <italic>beachmat</italic>. (a) Access times with respect to the density of non-zero entries as a percentage of all entries, for a matrix with 10000 rows and 1000 columns. (b) Access times with respect to the number of columns, for a matrix with 10000 rows and 1% density. Each timing represents the average of 10 simulations, and involves accessing all columns in the matrix. Horizontal dotted lines represent 2-fold increases in time.</p>
<p>(PDF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006135.s008" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.s008" xlink:type="simple">
<label>S4 Fig</label>
<caption>
<title>Time required to access non-consecutive rows of simulated CSC matrices using the caching method in <italic>beachmat</italic> or a naive binary search implemented in <italic>Rcpp</italic>, compared to an equivalent ordinary matrix with <italic>beachmat</italic>.</title>
<p>(a) Access times for ordered but non-consecutive rows, with respect to the number of rows in a matrix with 10000 rows and 1000 columns at 1% density. This involved accessing every 5<sup>th</sup> row and returning to the first unaccessed row, i.e., {1, 6, …, 9996, 2, 7, …}. (b) Access times for random rows, with respect to the number of rows in the matrix described previously. Each timing represents the average of 10 simulations, and involves accessing all rows in the matrix exactly once. Horizontal dotted lines represent 2-fold increases in time.</p>
<p>(PDF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006135.s009" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.s009" xlink:type="simple">
<label>S5 Fig</label>
<caption>
<title>Time required for <italic>beachmat</italic> to access consecutive rows or columns of a simulated HDF5-backed matrix using column/row-chunking or rectangular 100 × 100 chunks, compared to an equivalent ordinary matrix.</title>
<p>(a) Column access time with respect to the number of columns, for a dense matrix with 10000 rows. (b) Row access time with respect to the number of rows, for a dense matrix with 1000 columns. Each timing represents the average of 10 simulations, and involves accessing the entirety of the matrix. Horizontal dotted lines represent 2-fold increases in time.</p>
<p>(PDF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006135.s010" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.s010" xlink:type="simple">
<label>S6 Fig</label>
<caption>
<title>Time required to use <italic>beachmat</italic> to access random rows or columns of a simulated HDF5-backed matrix constructed with different HDF5 file layouts, i.e., contiguous, row- or column-chunking, or 40 × 40 rectangular chunks.</title>
<p>(a) Random column access times with respect to the number of columns, for a dense matrix with 1000 rows. (b) Random row access times with respect to the number of rows, for a dense matrix with 100 columns. Each row or column in the matrix was accessed exactly once in random order. Horizontal dotted lines represent 2-fold increases in time.</p>
<p>(PDF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006135.s011" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.s011" xlink:type="simple">
<label>S7 Fig</label>
<caption>
<title>Time required to convert from a column-based chunk layout to a row-based chunk layout, or vice versa, in HDF5-backed matrices.</title>
<p>Each chunk contained 5000 values along a single row or column (or set to the corresponding dimension of the matrix, if it was smaller than 5000). Conversion times were recorded with respect to increasing number of (a) columns for a dense matrix with 10000 rows, or (b) rows for a dense matrix with 1000 columns. All values represent the mean of 10 simulation iterations. Horizontal dotted lines represent 2-fold increases in time.</p>
<p>(PDF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006135.s012" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.s012" xlink:type="simple">
<label>S8 Fig</label>
<caption>
<title>Time required to perform matrix multiplication between square ordinary matrices, between sparse matrices or between a HDF5-backed matrix and an ordinary matrix, as a function of the order of the matrix.</title>
<p>Matrix multiplication was performed using a simple algorithm implemented in C++ with <italic>beachmat</italic>, or the representation-specific <monospace>%*%</monospace> operators in R. For sparse matrix multiplication, timings are also provided for an alternative algorithm implemented in <italic>beachmat</italic> that better exploits sparsity (II). Timings for the multiplication of two HDF5-backed matrices are shown for <italic>beachmat</italic> only, as the equivalent operation is not yet supported by <italic>DelayedArray</italic>.</p>
<p>(PDF)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1006135.s013" mimetype="application/zip" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006135.s013" xlink:type="simple">
<label>S1 Code</label>
<caption>
<title>R and C++ code used for all simulations, timings and analyses.</title>
<p>(ZIP)</p>
</caption>
</supplementary-material>
</sec>
</body>
<back>
<ack>
<p>We thank Martin Morgan, Andrew McDavid, Peter Hickey, Raphael Gottardo, Mike Jiang, Vince Carey, Kasper Hansen, John Readey and other members of the Bioconductor single-cell big data working group for useful discussions. We thank Davis McCarthy for his assistance with incorporating <italic>beachmat</italic> into <italic>scater</italic>. We also thank John Marioni and Wolfgang Huber for helpful comments on the manuscript.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pcbi.1006135.ref001">
<label>1</label>
<mixed-citation publication-type="other" xlink:type="simple">R Core Team. R: A Language and Environment for Statistical Computing; 2017. Available from: <ext-link ext-link-type="uri" xlink:href="https://www.R-project.org/" xlink:type="simple">https://www.R-project.org/</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1006135.ref002">
<label>2</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Gentleman</surname> <given-names>RC</given-names></name>, <name name-style="western"><surname>Carey</surname> <given-names>VJ</given-names></name>, <name name-style="western"><surname>Bates</surname> <given-names>DM</given-names></name>, <name name-style="western"><surname>Bolstad</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Dettling</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Dudoit</surname> <given-names>S</given-names></name>, <etal>et al</etal>. <article-title>Bioconductor: open software development for computational biology and bioinformatics</article-title>. <source>Genome Biol</source>. <year>2004</year>;<volume>5</volume>(<issue>10</issue>):<fpage>R80</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/gb-2004-5-10-r80" xlink:type="simple">10.1186/gb-2004-5-10-r80</ext-link></comment> <object-id pub-id-type="pmid">15461798</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref003">
<label>3</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Huber</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Carey</surname> <given-names>VJ</given-names></name>, <name name-style="western"><surname>Gentleman</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Anders</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Carlson</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Carvalho</surname> <given-names>BS</given-names></name>, <etal>et al</etal>. <article-title>Orchestrating high-throughput genomic analysis with Bioconductor</article-title>. <source>Nat Methods</source>. <year>2015</year>;<volume>12</volume>(<issue>2</issue>):<fpage>115</fpage>–<lpage>121</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/nmeth.3252" xlink:type="simple">10.1038/nmeth.3252</ext-link></comment> <object-id pub-id-type="pmid">25633503</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref004">
<label>4</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Eddelbuettel</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>François</surname> <given-names>R</given-names></name>. <article-title>Rcpp: Seamless R and C++ Integration</article-title>. <source>Journal of Statistical Software</source>. <year>2011</year>;<volume>40</volume>(<issue>8</issue>):<fpage>1</fpage>–<lpage>18</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.18637/jss.v040.i08" xlink:type="simple">10.18637/jss.v040.i08</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref005">
<label>5</label>
<mixed-citation publication-type="other" xlink:type="simple">Bates D, Maechler M. Matrix: Sparse and Dense Matrix Classes and Methods; 2017. Available from: <ext-link ext-link-type="uri" xlink:href="https://CRAN.R-project.org/package=Matrix" xlink:type="simple">https://CRAN.R-project.org/package=Matrix</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1006135.ref006">
<label>6</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Kane</surname> <given-names>MJ</given-names></name>, <name name-style="western"><surname>Emerson</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Weston</surname> <given-names>S</given-names></name>. <article-title>Scalable Strategies for Computing with Massive Data</article-title>. <source>Journal of Statistical Software</source>. <year>2013</year>;<volume>55</volume>(<issue>14</issue>):<fpage>1</fpage>–<lpage>19</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.18637/jss.v055.i14" xlink:type="simple">10.18637/jss.v055.i14</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref007">
<label>7</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Reuter</surname> <given-names>JA</given-names></name>, <name name-style="western"><surname>Spacek</surname> <given-names>DV</given-names></name>, <name name-style="western"><surname>Snyder</surname> <given-names>MP</given-names></name>. <article-title>High-throughput sequencing technologies</article-title>. <source>Mol Cell</source>. <year>2015</year>;<volume>58</volume>(<issue>4</issue>):<fpage>586</fpage>–<lpage>597</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.molcel.2015.05.004" xlink:type="simple">10.1016/j.molcel.2015.05.004</ext-link></comment> <object-id pub-id-type="pmid">26000844</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref008">
<label>8</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Macosko</surname> <given-names>EZ</given-names></name>, <name name-style="western"><surname>Basu</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Satija</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Nemesh</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Shekhar</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Goldman</surname> <given-names>M</given-names></name>, <etal>et al</etal>. <article-title>Highly Parallel Genome-wide Expression Profiling of Individual Cells Using Nanoliter Droplets</article-title>. <source>Cell</source>. <year>2015</year>;<volume>161</volume>(<issue>5</issue>):<fpage>1202</fpage>–<lpage>1214</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.cell.2015.05.002" xlink:type="simple">10.1016/j.cell.2015.05.002</ext-link></comment> <object-id pub-id-type="pmid">26000488</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref009">
<label>9</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Klein</surname> <given-names>AM</given-names></name>, <name name-style="western"><surname>Mazutis</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Akartuna</surname> <given-names>I</given-names></name>, <name name-style="western"><surname>Tallapragada</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Veres</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Li</surname> <given-names>V</given-names></name>, <etal>et al</etal>. <article-title>Droplet barcoding for single-cell transcriptomics applied to embryonic stem cells</article-title>. <source>Cell</source>. <year>2015</year>;<volume>161</volume>(<issue>5</issue>):<fpage>1187</fpage>–<lpage>1201</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.cell.2015.04.044" xlink:type="simple">10.1016/j.cell.2015.04.044</ext-link></comment> <object-id pub-id-type="pmid">26000487</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref010">
<label>10</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Zheng</surname> <given-names>GX</given-names></name>, <name name-style="western"><surname>Terry</surname> <given-names>JM</given-names></name>, <name name-style="western"><surname>Belgrader</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Ryvkin</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Bent</surname> <given-names>ZW</given-names></name>, <name name-style="western"><surname>Wilson</surname> <given-names>R</given-names></name>, <etal>et al</etal>. <article-title>Massively parallel digital transcriptional profiling of single cells</article-title>. <source>Nat Commun</source>. <year>2017</year>;<volume>8</volume>:<fpage>14049</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/ncomms14049" xlink:type="simple">10.1038/ncomms14049</ext-link></comment> <object-id pub-id-type="pmid">28091601</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref011">
<label>11</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Buenrostro</surname> <given-names>JD</given-names></name>, <name name-style="western"><surname>Wu</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Litzenburger</surname> <given-names>UM</given-names></name>, <name name-style="western"><surname>Ruff</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Gonzales</surname> <given-names>ML</given-names></name>, <name name-style="western"><surname>Snyder</surname> <given-names>MP</given-names></name>, <etal>et al</etal>. <article-title>Single-cell chromatin accessibility reveals principles of regulatory variation</article-title>. <source>Nature</source>. <year>2015</year>;<volume>523</volume>(<issue>7561</issue>):<fpage>486</fpage>–<lpage>490</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/nature14590" xlink:type="simple">10.1038/nature14590</ext-link></comment> <object-id pub-id-type="pmid">26083756</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref012">
<label>12</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Smallwood</surname> <given-names>SA</given-names></name>, <name name-style="western"><surname>Lee</surname> <given-names>HJ</given-names></name>, <name name-style="western"><surname>Angermueller</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Krueger</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Saadeh</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Peat</surname> <given-names>J</given-names></name>, <etal>et al</etal>. <article-title>Single-cell genome-wide bisulfite sequencing for assessing epigenetic heterogeneity</article-title>. <source>Nat Methods</source>. <year>2014</year>;<volume>11</volume>(<issue>8</issue>):<fpage>817</fpage>–<lpage>820</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/nmeth.3035" xlink:type="simple">10.1038/nmeth.3035</ext-link></comment> <object-id pub-id-type="pmid">25042786</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref013">
<label>13</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Eddelbuettel</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Sanderson</surname> <given-names>C</given-names></name>. <article-title>RcppArmadillo: Accelerating R with high-performance C++ linear algebra</article-title>. <source>Computational Statistics and Data Analysis</source>. <year>2014</year>;<volume>71</volume>:<fpage>1054</fpage>–<lpage>1063</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.csda.2013.02.005" xlink:type="simple">10.1016/j.csda.2013.02.005</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref014">
<label>14</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Bates</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Eddelbuettel</surname> <given-names>D</given-names></name>. <article-title>Fast and Elegant Numerical Linear Algebra Using the RcppEigen Package</article-title>. <source>Journal of Statistical Software</source>. <year>2013</year>;<volume>52</volume>(<issue>5</issue>):<fpage>1</fpage>–<lpage>24</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.18637/jss.v052.i05" xlink:type="simple">10.18637/jss.v052.i05</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref015">
<label>15</label>
<mixed-citation publication-type="other" xlink:type="simple">The HDF Group. Hierarchical Data Format, version 5; 1997-2017.</mixed-citation>
</ref>
<ref id="pcbi.1006135.ref016">
<label>16</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Regev</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Teichmann</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Lander</surname> <given-names>ES</given-names></name>, <name name-style="western"><surname>Amit</surname> <given-names>I</given-names></name>, <name name-style="western"><surname>Benoist</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Birney</surname> <given-names>E</given-names></name>, <etal>et al</etal>. <article-title>The Human Cell Atlas</article-title>. <source>bioRxiv</source>. <year>2017</year>;</mixed-citation>
</ref>
<ref id="pcbi.1006135.ref017">
<label>17</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Zeisel</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Munoz-Manchado</surname> <given-names>AB</given-names></name>, <name name-style="western"><surname>Codeluppi</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Lonnerberg</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>La Manno</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Jureus</surname> <given-names>A</given-names></name>, <etal>et al</etal>. <article-title>Brain structure. Cell types in the mouse cortex and hippocampus revealed by single-cell RNA-seq</article-title>. <source>Science</source>. <year>2015</year>;<volume>347</volume>(<issue>6226</issue>):<fpage>1138</fpage>–<lpage>1142</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1126/science.aaa1934" xlink:type="simple">10.1126/science.aaa1934</ext-link></comment> <object-id pub-id-type="pmid">25700174</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref018">
<label>18</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Grun</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>van Oudenaarden</surname> <given-names>A</given-names></name>. <article-title>Design and Analysis of Single-Cell Sequencing Experiments</article-title>. <source>Cell</source>. <year>2015</year>;<volume>163</volume>(<issue>4</issue>):<fpage>799</fpage>–<lpage>810</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.cell.2015.10.039" xlink:type="simple">10.1016/j.cell.2015.10.039</ext-link></comment> <object-id pub-id-type="pmid">26544934</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref019">
<label>19</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>McCarthy</surname> <given-names>DJ</given-names></name>, <name name-style="western"><surname>Campbell</surname> <given-names>KR</given-names></name>, <name name-style="western"><surname>Lun</surname> <given-names>AT</given-names></name>, <name name-style="western"><surname>Wills</surname> <given-names>QF</given-names></name>. <article-title>Scater: pre-processing, quality control, normalization and visualization of single-cell RNA-seq data in R</article-title>. <source>Bioinformatics</source>. <year>2017</year>;<volume>33</volume>(<issue>8</issue>):<fpage>1179</fpage>–<lpage>1186</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/bioinformatics/btw777" xlink:type="simple">10.1093/bioinformatics/btw777</ext-link></comment> <object-id pub-id-type="pmid">28088763</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref020">
<label>20</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lun</surname> <given-names>AT</given-names></name>, <name name-style="western"><surname>McCarthy</surname> <given-names>DJ</given-names></name>, <name name-style="western"><surname>Marioni</surname> <given-names>JC</given-names></name>. <article-title>A step-by-step workflow for low-level analysis of single-cell RNA-seq data with Bioconductor</article-title>. <source>F1000Res</source>. <year>2016</year>;<volume>5</volume>:<fpage>2122</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.12688/f1000research.9501.2" xlink:type="simple">10.12688/f1000research.9501.2</ext-link></comment> <object-id pub-id-type="pmid">27909575</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref021">
<label>21</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Scialdone</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Natarajan</surname> <given-names>KN</given-names></name>, <name name-style="western"><surname>Saraiva</surname> <given-names>LR</given-names></name>, <name name-style="western"><surname>Proserpio</surname> <given-names>V</given-names></name>, <name name-style="western"><surname>Teichmann</surname> <given-names>SA</given-names></name>, <name name-style="western"><surname>Stegle</surname> <given-names>O</given-names></name>, <etal>et al</etal>. <article-title>Computational assignment of cell-cycle stage from single-cell transcriptome data</article-title>. <source>Methods</source>. <year>2015</year>;<volume>85</volume>:<fpage>54</fpage>–<lpage>61</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.ymeth.2015.06.021" xlink:type="simple">10.1016/j.ymeth.2015.06.021</ext-link></comment> <object-id pub-id-type="pmid">26142758</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref022">
<label>22</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lun</surname> <given-names>AT</given-names></name>, <name name-style="western"><surname>Bach</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Marioni</surname> <given-names>JC</given-names></name>. <article-title>Pooling across cells to normalize single-cell RNA sequencing data with many zero counts</article-title>. <source>Genome Biol</source>. <year>2016</year>;<volume>17</volume>:<fpage>75</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/s13059-016-0947-7" xlink:type="simple">10.1186/s13059-016-0947-7</ext-link></comment> <object-id pub-id-type="pmid">27122128</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref023">
<label>23</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Robinson</surname> <given-names>MD</given-names></name>, <name name-style="western"><surname>Oshlack</surname> <given-names>A</given-names></name>. <article-title>A scaling normalization method for differential expression analysis of RNA-seq data</article-title>. <source>Genome Biol</source>. <year>2010</year>;<volume>11</volume>(<issue>3</issue>):<fpage>R25</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/gb-2010-11-3-r25" xlink:type="simple">10.1186/gb-2010-11-3-r25</ext-link></comment> <object-id pub-id-type="pmid">20196867</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref024">
<label>24</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Kay</surname> <given-names>JN</given-names></name>, <name name-style="western"><surname>Voinescu</surname> <given-names>PE</given-names></name>, <name name-style="western"><surname>Chu</surname> <given-names>MW</given-names></name>, <name name-style="western"><surname>Sanes</surname> <given-names>JR</given-names></name>. <article-title>Neurod6 expression defines new retinal amacrine cell subtypes and regulates their fate</article-title>. <source>Nat Neurosci</source>. <year>2011</year>;<volume>14</volume>(<issue>8</issue>):<fpage>965</fpage>–<lpage>972</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/nn.2859" xlink:type="simple">10.1038/nn.2859</ext-link></comment> <object-id pub-id-type="pmid">21743471</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref025">
<label>25</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Bergsland</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Werme</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Malewicz</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Perlmann</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Muhr</surname> <given-names>J</given-names></name>. <article-title>The establishment of neuronal properties is controlled by Sox4 and Sox11</article-title>. <source>Genes Dev</source>. <year>2006</year>;<volume>20</volume>(<issue>24</issue>):<fpage>3475</fpage>–<lpage>3486</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1101/gad.403406" xlink:type="simple">10.1101/gad.403406</ext-link></comment> <object-id pub-id-type="pmid">17182872</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref026">
<label>26</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Halko</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Martinsson</surname> <given-names>PG</given-names></name>, <name name-style="western"><surname>Tropp</surname> <given-names>JA</given-names></name>. <article-title>Finding Structure with Randomness: Probabilistic Algorithms for Constructing Approximate Matrix Decompositions</article-title>. <source>SIAM Review</source>. <year>2011</year>;<volume>53</volume>(<issue>2</issue>):<fpage>217</fpage>–<lpage>288</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1137/090771806" xlink:type="simple">10.1137/090771806</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref027">
<label>27</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Xu</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Su</surname> <given-names>Z</given-names></name>. <article-title>Identification of cell types from single-cell transcriptomes using a novel clustering method</article-title>. <source>Bioinformatics</source>. <year>2015</year>;<volume>31</volume>(<issue>12</issue>):<fpage>1974</fpage>–<lpage>1980</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/bioinformatics/btv088" xlink:type="simple">10.1093/bioinformatics/btv088</ext-link></comment> <object-id pub-id-type="pmid">25805722</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref028">
<label>28</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Csardi</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Nepusz</surname> <given-names>T</given-names></name>. <article-title>The igraph software package for complex network research</article-title>. <source>InterJournal</source>. <year>2006</year>;<volume>Complex Systems</volume>:<fpage>1695</fpage>.</mixed-citation>
</ref>
<ref id="pcbi.1006135.ref029">
<label>29</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Trapnell</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Cacchiarelli</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Grimsby</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Pokharel</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Li</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Morse</surname> <given-names>M</given-names></name>, <etal>et al</etal>. <article-title>The dynamics and regulators of cell fate decisions are revealed by pseudotemporal ordering of single cells</article-title>. <source>Nat Biotechnol</source>. <year>2014</year>;<volume>32</volume>(<issue>4</issue>):<fpage>381</fpage>–<lpage>386</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/nbt.2859" xlink:type="simple">10.1038/nbt.2859</ext-link></comment> <object-id pub-id-type="pmid">24658644</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref030">
<label>30</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lun</surname> <given-names>AT</given-names></name>, <name name-style="western"><surname>Perry</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Ing-Simmons</surname> <given-names>E</given-names></name>. <article-title>Infrastructure for genomic interactions: Bioconductor classes for Hi-C, ChIA-PET and related experiments</article-title>. <source>F1000Res</source>. <year>2016</year>;<volume>5</volume>:<fpage>950</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.12688/f1000research.8759.1" xlink:type="simple">10.12688/f1000research.8759.1</ext-link></comment> <object-id pub-id-type="pmid">27303634</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref031">
<label>31</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Finak</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Frelinger</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Jiang</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Newell</surname> <given-names>EW</given-names></name>, <name name-style="western"><surname>Ramey</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Davis</surname> <given-names>MM</given-names></name>, <etal>et al</etal>. <article-title>OpenCyto: an open source infrastructure for scalable, robust, reproducible, and automated, end-to-end flow cytometry data analysis</article-title>. <source>PLoS Comput Biol</source>. <year>2014</year>;<volume>10</volume>(<issue>8</issue>):<fpage>e1003806</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pcbi.1003806" xlink:type="simple">10.1371/journal.pcbi.1003806</ext-link></comment> <object-id pub-id-type="pmid">25167361</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref032">
<label>32</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Weber</surname> <given-names>LM</given-names></name>, <name name-style="western"><surname>Robinson</surname> <given-names>MD</given-names></name>. <article-title>Comparison of clustering methods for high-dimensional single-cell flow and mass cytometry data</article-title>. <source>Cytometry A</source>. <year>2016</year>;<volume>89</volume>(<issue>12</issue>):<fpage>1084</fpage>–<lpage>1096</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1002/cyto.a.23030" xlink:type="simple">10.1002/cyto.a.23030</ext-link></comment> <object-id pub-id-type="pmid">27992111</object-id></mixed-citation>
</ref>
<ref id="pcbi.1006135.ref033">
<label>33</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lun</surname> <given-names>ATL</given-names></name>, <name name-style="western"><surname>Richard</surname> <given-names>AC</given-names></name>, <name name-style="western"><surname>Marioni</surname> <given-names>JC</given-names></name>. <article-title>Testing for differential abundance in mass cytometry data</article-title>. <source>Nat Methods</source>. <year>2017</year>;<volume>14</volume>(<issue>7</issue>):<fpage>707</fpage>–<lpage>709</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/nmeth.4295" xlink:type="simple">10.1038/nmeth.4295</ext-link></comment> <object-id pub-id-type="pmid">28504682</object-id></mixed-citation>
</ref>
</ref-list>
</back>
</article>