<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="3.0" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id><journal-title-group>
<journal-title>PLoS Computational Biology</journal-title></journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, USA</publisher-loc></publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-13-02014</article-id>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1003750</article-id>
<article-categories><subj-group subj-group-type="heading"><subject>Research Article</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>Biology and life sciences</subject><subj-group><subject>Biochemistry</subject><subj-group><subject>Proteins</subject><subj-group><subject>Protein structure</subject></subj-group></subj-group></subj-group><subj-group><subject>Computational biology</subject></subj-group><subj-group><subject>Molecular biology</subject><subj-group><subject>Macromolecular structure analysis</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v2"><subject>Computer and information sciences</subject><subj-group><subject>Computer applications</subject><subj-group><subject>Computer-aided design</subject></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>A Real-Time All-Atom Structural Search Engine for Proteins</article-title>
<alt-title alt-title-type="running-head">A Structural Search Engine for Proteins</alt-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Gonzalez</surname><given-names>Gabriel</given-names></name><xref ref-type="aff" rid="aff1"/><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Hannigan</surname><given-names>Brett</given-names></name><xref ref-type="aff" rid="aff1"/></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>DeGrado</surname><given-names>William F.</given-names></name><xref ref-type="aff" rid="aff1"/></contrib>
</contrib-group>
<aff id="aff1"><addr-line>Cardiovascular Research Institute, University of California, San Francisco, San Francisco, California, United States of America</addr-line></aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple"><name name-style="western"><surname>Prlic</surname><given-names>Andreas</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/></contrib>
</contrib-group>
<aff id="edit1"><addr-line>UCSD, United States of America</addr-line></aff>
<author-notes>
<corresp id="cor1">* E-mail: <email xlink:type="simple">Gabriel439@gmail.com</email></corresp>
<fn fn-type="conflict"><p>I have read the journal's policy and have the following conflicts. We explored licensing the Suns search engine to Schrödinger LLC under a separate commercial license, but concluded negotiations with the decision to not pursue a separate license.</p></fn>
<fn fn-type="con"><p>Conceived and designed the experiments: GG BH WFD. Performed the experiments: GG BH. Analyzed the data: GG BH WFD. Contributed reagents/materials/analysis tools: GG BH WFD. Wrote the paper: GG BH WFD.</p></fn>
</author-notes>
<pub-date pub-type="collection"><month>7</month><year>2014</year></pub-date>
<pub-date pub-type="epub"><day>31</day><month>7</month><year>2014</year></pub-date>
<volume>10</volume>
<issue>7</issue>
<elocation-id>e1003750</elocation-id>
<history>
<date date-type="received"><day>19</day><month>11</month><year>2013</year></date>
<date date-type="accepted"><day>9</day><month>6</month><year>2014</year></date>
</history>
<permissions>
<copyright-year>2014</copyright-year>
<license xlink:type="simple"><license-p>This is an open-access article, free of all copyright, and may be freely reproduced, distributed, transmitted, modified, built upon, or otherwise used by anyone for any lawful purpose. The work is made available under the Creative Commons CC0 public domain dedication.</license-p></license></permissions>
<abstract>
<p>Protein designers use a wide variety of software tools for <italic>de novo</italic> design, yet their repertoire still lacks a fast and interactive all-atom search engine. To solve this, we have built the Suns program: a real-time, atomic search engine integrated into the PyMOL molecular visualization system. Users build atomic-level structural search queries within PyMOL and receive a stream of search results aligned to their query within a few seconds. This instant feedback cycle enables a new “designability”-inspired approach to protein design where the designer searches for and interactively incorporates native-like fragments from proven protein structures. We demonstrate the use of Suns to interactively build protein motifs, tertiary interactions, and to identify scaffolds compatible with hot-spot residues. The official web site and installer are located at <ext-link ext-link-type="uri" xlink:href="http://www.degradolab.org/suns/" xlink:type="simple">http://www.degradolab.org/suns/</ext-link> and the source code is hosted at <ext-link ext-link-type="uri" xlink:href="https://github.com/godotgildor/Suns" xlink:type="simple">https://github.com/godotgildor/Suns</ext-link> (PyMOL plugin, BSD license), <ext-link ext-link-type="uri" xlink:href="https://github.com/Gabriel439/suns-cmd" xlink:type="simple">https://github.com/Gabriel439/suns-cmd</ext-link> (command line client, BSD license), and <ext-link ext-link-type="uri" xlink:href="https://github.com/Gabriel439/suns-search" xlink:type="simple">https://github.com/Gabriel439/suns-search</ext-link> (search engine server, GPLv2 license).</p>
</abstract>
<funding-group><funding-statement>We acknowledge support from GM54616, as well as partial support from the Nano/Bio Interface Center through the National Science Foundation NSEC DMR-0425780, as well as the NSF MRSEC grant to the LRSM of the University of Pennsylvania, DMR-1120901 and a grant from the National Institute of Health, NHRGI 5T32HG000046-15. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement></funding-group><counts><page-count count="8"/></counts></article-meta>
</front>
<body><sec id="s1">
<title/>
<disp-quote>
<p>This is a <italic>PLOS Computational Biology</italic> Software Article</p>
</disp-quote></sec><sec id="s2">
<title>Introduction</title>
<p>Protein structural bioinformatics rapidly approaches a big data crisis as the last decade has witnessed a dramatic increase in protein structure depositions. In 1993 researchers had just over 28,000 searchable structures at their disposal in the Protein Data Bank (PDB), while today we have over 101,000. This rapid structural expansion could inform protein design, structure determination, and structure prediction by providing numerous examples of native-like structural interactions in exquisite detail, but researchers lack high-powered computational tools to intelligently search and explore large structural data sets in detail.</p>
<p>One of the first popular protein structural search tools developed for this purpose was Dali by Holm and Sander <xref ref-type="bibr" rid="pcbi.1003750-Holm1">[1]</xref>. Dali uses distance maps formed by calculating pairwise α-carbon distances to form a two-dimensional representation of a three-dimensional protein. Regions of similarity between two distance maps correspond to similar substructures in their respective proteins. Holm and Sander used Dali to create the Families of Structurally Similar Proteins (FSSP) database <xref ref-type="bibr" rid="pcbi.1003750-Holm2">[2]</xref>, which aligns substructures across entries in the Protein Data Bank (PDB) to form families and subfamilies of common folds. Researchers commonly use Dali to compare protein folds and infer homology <xref ref-type="bibr" rid="pcbi.1003750-Prasad1">[3]</xref>–<xref ref-type="bibr" rid="pcbi.1003750-Roy1">[5]</xref> and similar algorithms specialized to structural comparison and similarity detection include combinatorial extension (CE) <xref ref-type="bibr" rid="pcbi.1003750-Shindyalov1">[6]</xref>, sequential structure alignment program (SSAP) <xref ref-type="bibr" rid="pcbi.1003750-Taylor1">[7]</xref>, and TM-align <xref ref-type="bibr" rid="pcbi.1003750-Zhang1">[8]</xref>.</p>
<p>The more recent MaDCaT search program <xref ref-type="bibr" rid="pcbi.1003750-Zhang2">[9]</xref> also uses α-carbon distance maps to search for similar protein backbone arrangements. However, where Dali uses a heuristic approach to detect structural similarity, MaDCaT takes a query backbone structure or motif and finds globally optimal structural matches within an entire structural database. This approach makes MaDCaT ideal for finding the best matches to frequently occurring motifs. These “designable” motifs promise to be excellent design scaffolds, and MaDCaT applied this approach to design a viral-like protein coat for carbon nanotubes from designable interactions <xref ref-type="bibr" rid="pcbi.1003750-Grigoryan1">[10]</xref>.</p>
<p>Both Dali and MaDCaT return results after several minutes of searching. For greater speed, Shyu et. al. developed ProteinDBS <xref ref-type="bibr" rid="pcbi.1003750-Shyu1">[11]</xref> in order to provide the first real-time protein backbone search. They use image processing techniques to extract a set of features from α-carbon distance maps and organize their structural database into a tree, allowing quick traversal and parallelism during searches. These optimizations allow them to return search results nearly instantly, but they limit themselves to searching for backbone α-carbons.</p>
<p>We required an all-atom search engine to guide the protein design process, so that we could search for proteins with similar active sites or binding motifs, explore protein scaffolds that can host a specific motif, and discover atomic-scale supporting interactions.</p>
<p>The state of the art for all-atom search is Erebus <xref ref-type="bibr" rid="pcbi.1003750-Shirvanyants1">[12]</xref>, which permits all-atom rigid substructure searches and has been used to identify ligand interaction motifs for drugs and metal ions. However, Erebus is not ideal for design purposes where an interactive search process is desired. Several bottle-necks in the Erebus search workflow impede a fluid design process, including time-consuming assembly of search queries, long search delays, and a non-programmatic web interface for retrieving results.</p>
<p>A truly interactive search tool must remove every single one of these bottlenecks to bring the feedback loop down from minutes to seconds and permit users to rapidly explore multiple design alternatives iteratively in atomic detail. Improved speed and faster feedback lets researchers ask more sophisticated questions, explore structures more intelligently, and use limited collaboration time more efficiently.</p>
<p>The Suns protein search engine makes it easy to search and browse a database of protein structures at the atomic level. To our knowledge, Suns is the first real-time all-atom structural search engine and is also the first to integrate seamlessly into the popular molecular visualization program PyMOL <xref ref-type="bibr" rid="pcbi.1003750-Schrdinger1">[13]</xref>, so that researchers can easily click on motifs of interest, click search, and view aligned results within a fraction of a second. We expect Suns to inform and guide protein design, modeling, and structure determination by lowering the entry barrier to structural search so that it becomes a staple of every structural biologist's toolbox rather than a tool limited to programmers.</p>
</sec><sec id="s3">
<title>Design and Implementation</title>
<sec id="s3a">
<title>Overview</title>
<p>Protein substructure search is a special case of sub-graph isomorphism, which is NP-complete in the general case <xref ref-type="bibr" rid="pcbi.1003750-Cook1">[14]</xref>. Therefore, substructure search tools will usually reduce this combinatorial complexity by either restricting permitted search queries or taking advantage of properties specific to graphs of protein atoms.</p>
<p>Our structural search engine greatly resembles a web search engine, even though these two types of engines index different types of data: web search engines commonly index linear text strings whereas our search engine indexes three-dimensional protein structures. Despite these differences, we still borrow many principles from web search engines <xref ref-type="bibr" rid="pcbi.1003750-Brin1">[15]</xref> to improve search speed:</p>
<list list-type="order"><list-item>
<p>Divide structures into structural “pages” (3-D volumes) analogous to web pages</p>
</list-item><list-item>
<p>Divide these “pages” into structural “words” (chemical motifs) analogous to textual words</p>
</list-item><list-item>
<p>Create a forward index that matches sets of structural words to structural pages</p>
</list-item><list-item>
<p>Perform slower and more accurate filters after the fast forward index lookup</p>
</list-item><list-item>
<p>Return only as many results as requested to avoid unnecessary computation</p>
</list-item></list>
<p>The search engine is organized using a client-server architecture (<xref ref-type="fig" rid="pcbi-1003750-g001">Figure 1</xref>). The search engine and storage are written in Haskell, taking PDB files to index as input and writing a custom binary format to disk. We provide two clients, one of which is a PyMOL search plugin written in Python and the other of which is a command line program written in Haskell. The search engine communicates using JSON queries through a custom request/response format mediated by a RabbitMQ-based message queue.</p>
<fig id="pcbi-1003750-g001" position="float"><object-id pub-id-type="doi">10.1371/journal.pcbi.1003750.g001</object-id><label>Figure 1</label><caption>
<title>Overview of Suns algorithm and architecture.</title>
<p>(Inputs) The search index is built from two inputs: a set of words to recognize and a set of protein structures to search subdivided into pages. (Index) The two underlying data structures are a forward index that translates words to matching pages and a database of every page which translates matched words to atoms within each page. (Server) Each request to the server is broken into three steps: consult the forward index to find potentially matching pages, filter matching pages by RMSD to the query, and aligning successful matches to the query. (Queue) A message queue forwards requests from clients to servers, and forwards responses from servers to clients. (Clients) Suns provides two client interfaces: a PyMOL search plugin and the <monospace>suns-cmd</monospace> command line interface.</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1003750.g001" position="float" xlink:type="simple"/></fig></sec><sec id="s3b">
<title>Forward index</title>
<p>Web search engines derive much of their speed by preprocessing the data set using a forward index that matches words to web pages <xref ref-type="bibr" rid="pcbi.1003750-Brin1">[15]</xref>. The search engine can then tokenize each query into words and consult the forward index to rapidly return all pages that contain every word in the user's search query. Protein search engines can copy this trick, but they must first decide what volume size corresponds to a “page” and what chemical motifs correspond to “words”.</p>
<p>Two opposing considerations constrain the choice of page and word size. The forward index resolves pages solely by their word counts, so larger words and smaller pages lead to more unique word counts per page and improves the selectivity of the forward index. However, users prefer the exact opposite: smaller words and larger page sizes increase the power and flexibility of user search queries. Therefore, optimizing a structural search engine requires balancing user needs against the efficiency of the forward index.</p>
<p>We select a compromise suitable for atomic-level search queries: we restrict structural pages to cubes 15 Å wide and we define structural words to be connected chemical substructures ranging from 2 atoms (a hydroxyl) to 9 atoms (an indole ring) (<xref ref-type="fig" rid="pcbi-1003750-g002">Figure 2</xref>). Our choice of page size assumes that larger structural patterns of interest can be reduced to a network of bridging local interactions below the 15 Å length scale. Similarly, our choice of word size assumes that users will accept a modest restriction on search queries to groups of chemical motifs instead of groups of atoms. Like web search engines, we permit searches for multiple disconnected words, allowing users to assemble complex queries from these simple chemical building blocks.</p>
<fig id="pcbi-1003750-g002" position="float"><object-id pub-id-type="doi">10.1371/journal.pcbi.1003750.g002</object-id><label>Figure 2</label><caption>
<title>Subdivision of protein structures.</title>
<p>(A) An interior page highlighted in red from a protein of unknown function (PDB ID  =  2FSQ), illustrating the maximum scale of search queries. (B) Example words (chemical motifs) within the same page highlighted in yellow. Pages are 15 Å×15 Å×15 Å cubes.</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1003750.g002" position="float" xlink:type="simple"/></fig>
<p>Protein structures are divided into non-overlapping pages, meaning that search queries will not return results spanning multiple pages. While this necessarily means that queries will miss some potential matches, we have found that in practice most queries still find more matches than requested by the user. Moreover, by simplifying the database in this way, we avoid having to add an additional post-processing step to eliminate duplicate results.</p>
</sec><sec id="s3c">
<title>Structural words</title>
<p>We specify structural words using PDB files, which contain the specific residue and atom types to match. For example, one structural word consists of a single PDB file containing the Cα-Cβ-Cγ that links the phenyl group of phenylalanine to its backbone atoms. When users search for the three carbon atoms in phenylalanine's linker, their searches will not match tyrosine's linker, nor will they match three connected ring carbons within a phenylalanine. This allows the search index to optionally resolve motifs that are otherwise chemically identical <xref ref-type="bibr" rid="pcbi.1003750-Chen1">[16]</xref>. The index identifies words solely by their connectivity graph and not their geometric similarity - thus cis/trans isomers cannot be resolved at this level of representation.</p>
<p>Structural words may also match more than one protein element, and in those cases we use multiple PDB files to specify the structural word: one PDB file per matching chemical motif. For example, one motif we index is a carboxylate, specified using two PDB files we created: one for glutamate's carboxylate and another for aspartate's carboxylate. User search queries for carboxylates will match either of these two groups.</p>
<p>The choice of structural words is customizable and for our public-facing server we select a default set of 28 substructures appropriate for general-purpose searches (<xref ref-type="supplementary-material" rid="pcbi.1003750.s001">Table S1</xref>). The most important searchable substructure matches the four backbone atoms for any protein residue, which permits geometrically precise backbone searches that specify the positions of all backbone atoms and their torsion angles. We partition flexible residues such as lysine and methionine into two separate words, and also isolate important chemical moieties into their own words, such as imidazole and guanidinium groups. Some chemical moieties are shared between residues, such as the hydroxyl group, which matches serine, threonine, and tyrosine. However, every residue except glycine possesses at least one unique structural word so that users can restrict searches to a specific residue.</p>
</sec><sec id="s3d">
<title>Database</title>
<p>Our forward index is formally a <italic>record level</italic> inverted index that converts sets of words to matching pages. We supplement the forward index with a custom in-memory database that stores two pieces of information necessary to complete the search. First, the database stores correspondences between words in the forward index and atoms in each structural page. Second, the database also keeps compact representations of every structural page suitable for returning as search results</p>
<p>When the forward index produces a matched page, the database remembers which atoms in that page correspond to the words advertised in the forward index. Sometimes the page contains more instances of a given word than the user required, such as when the user searches for two peptide bonds, and the page contains five. The page must try out every valid permutation of words that match the user's query, and the forward index minimizes the number of permutations by prioritizing pages that closely match the minimum required word count.</p>
</sec><sec id="s3e">
<title>Alignment and RMSD</title>
<p>Suns uses the Kabsch algorithm <xref ref-type="bibr" rid="pcbi.1003750-Kabsch1">[17]</xref> to rapidly align each permutation to the user's search query. The Kabsch algorithm requires an exact atom-for-atom correspondence between the user's search query and a candidate motif, and Suns compiles this correspondence from precomputed atomic correspondences for each stored motif in the custom database. After alignment, the search engine only returns search results that match the search query within a specified root-mean-square deviation (RMSD) cutoff.</p>
<p>For each result below the RMSD cutoff, Suns aligns the matching page to the search query and returns the page as the search result. If a page contains multiple matches Suns aligns each match separately and returns them as separate results. This superimposes every search result and context on the original query for ease of visual comparison and downstream post-processing.</p>
</sec><sec id="s3f">
<title>Streaming results</title>
<p>The user may dial in the stringency of desired matches by tuning the RMSD cutoff. The search engine will immediately stream any result within this cutoff, which allows the user to begin visualizing results before the search has completed, improving interactivity.</p>
<p>Additionally, the search protocol requires the user to specify the number of desired results up front. While the user may request an unlimited number of results in theory, in practice the search clients default to 100 search results, similar to how a web search engine will default to 10 search results. This allows the search engine to stop processing the request after supplying the specified number of results, which reduces server load. The search engine may also optionally specify a search timeout to further reduce server load for users that request a large number of search results.</p>
</sec><sec id="s3g">
<title>Data set</title>
<p>The public search engine uses the most stringent precompiled dataset from the PISCES <xref ref-type="bibr" rid="pcbi.1003750-Wang1">[18]</xref> non-redundant protein structure datasets, selecting a 20% sequence identity, 1.6 Å resolution, and 0.25 R-factor cutoff, which currently comprises 2058 chains. The search engine's available memory limits how many structures it can index, and our stress tests on the largest precompiled PISCES data set (90% identity, 3.0 Å, 1.0 R-factor cutoff, 24,218 chains) required 89 GB of memory or an average of 1 GB of memory per 272 protein chains.</p>
<p>During informal testing, we found the larger data set was unable to discover novel motifs absent from the more stringent database. Consequently, we selected the smaller data set in order to maximize the diversity of search results (by reducing sequence identity) and minimize memory consumption. One thing to note is that as the PISCES dataset is comprised of single chains, our default database does not index motifs from inter-chain interactions. Therefore, users searching for protein-protein interactions may wish to customize the search engine to index PDB files specially curated for interaction motifs.</p>
</sec></sec><sec id="s4">
<title>Results</title>
<sec id="s4a">
<title>Building motifs: Incremental salt bridge assembly</title>
<p>Suns lets users explore the “designable” space of protein motifs, defined as naturally reoccurring substructures, by expanding on small initial fragments, such as building a helix N-terminal capping motif beginning from a single guanidinium group. One might begin by searching on the guanidinium fragment from an arginine, which recruits a cluster of nearby carboxylates forming a salt bridge with the arginine (<xref ref-type="fig" rid="pcbi-1003750-g003">Figure 3A</xref>). Adding one of these carboxylates to the search query refines the motif further, revealing a preferred rotamer for the arginine when interacting with a carboxylic acid (<xref ref-type="fig" rid="pcbi-1003750-g003">Figure 3B</xref>), and adding a preferred rotamer to the search query crystallizes a complete N-terminal capping motif (<xref ref-type="fig" rid="pcbi-1003750-g003">Figure 3C</xref>).</p>
<fig id="pcbi-1003750-g003" position="float"><object-id pub-id-type="doi">10.1371/journal.pcbi.1003750.g003</object-id><label>Figure 3</label><caption>
<title>Incremental assembly of a motif.</title>
<p>(A) An initial search for a guanidinium fragment reveals a cluster of nearby carboxylates. (B) Refining the search with one carboxylate from the results reveals a specific linker preference for both the aspartate and arginine involved in the salt bridge. (C) Adding the most common linker for arginine and repeating the search reveals that this salt bridge is part of an N-terminal capping motif. Search queries are represented as thick sticks and search results are shown as thin lines. Grey dashed lines highlight search queries and black dashed lines highlight clusters in the search results, which are filtered to show the specific residue fragments of interest and neighboring water molecules within 3.0 Å as red spheres. Search parameters and fragments listed in <xref ref-type="supplementary-material" rid="pcbi.1003750.s002">Table S2</xref>.</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1003750.g003" position="float" xlink:type="simple"/></fig>
<p>The large number of close geometric matches to the final search query suggests that this is a highly “designable” motif. Incremental searching allows users to rapidly explore and prototype designable native-like interactions like these with very little prior knowledge in protein folding or biophysics. Moreover, a user can discover the motif by gradually refining a specification rather than specifying all the necessary interactions up front. This benefits people who may not even know what designable interactions look like and simply wish to explore what options they have available. We recorded an example of this iterative search and discover process as <xref ref-type="supplementary-material" rid="pcbi.1003750.s008">Video S1</xref>.</p>
<p>The salt bridge we built this way also matches one of many newly discovered salt bridges by Donald et. al (Figure 8 of <xref ref-type="bibr" rid="pcbi.1003750-Donald1">[19]</xref>). However, we identified this without requiring a curated database of salt bridges and without using a specialized algorithm built to detect electrostatic pairs. We also obtain detailed information from the superimposition of results, which allows us to visualize the structural variability of this salt bridge motif on a per-atom basis.</p>
</sec><sec id="s4b">
<title>Assembling larger fragments: A designable beta sheet built from 9 isolated residues</title>
<p>Users can build tertiary interactions for proteins as well. To demonstrate this, we search for a valine from glucose binding protein and grow that into three small β strands with three residues per strand.</p>
<p>Beginning from an interior valine from glucose-binding protein, we seed the two adjacent β strands with highly populated residue clusters on each side corresponding to a valine and tyrosine (<xref ref-type="fig" rid="pcbi-1003750-g004">Figure 4A</xref>). To grow the three β strands in both directions, we search for pairs of residues at a time to identify new clusters of residues within the search results that we can insert into the sheet (<xref ref-type="fig" rid="pcbi-1003750-g004">Figure 4B</xref>). The PyMOL search client permits a qualitative inspection of residue preference at selected positions by cycling through visualizing each residue type. This process not only provides a rough measure of residue preference, but also reveals rotameric preference, the kind of detailed information that a sequence logo would not reveal.</p>
<fig id="pcbi-1003750-g004" position="float"><object-id pub-id-type="doi">10.1371/journal.pcbi.1003750.g004</object-id><label>Figure 4</label><caption>
<title>Building a tertiary interaction.</title>
<p>(A) Three strands are seeded by searching on a valine, which reveals two nearby clusters of valine and tyrosine. (B) Strands are extended one residue in each direction by searching for pairs of residues (colored yellow) in the context of an insertion site, yielding clusters of potential inserts (colored green). (C) The final backbone fragment (green) is fed to MadCaT, which identifies multiple compatible scaffolds. One such scaffold (PDB ID = 1E54, colored light grey) possesses many exact residue/rotamer matches to the assembled fragment (blue highlights) and many close matches (yellow highlights) that differ by a related residue (threonine to serine or valine to isoleucine) or by varying the rotamer.</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1003750.g004" position="float" xlink:type="simple"/></fig>
<p>We repeat this process of iteratively searching for pairs of residues at a time and incorporating clusters from the search results until we assemble a native-like fragment of a sheet where almost every residue originates from a unique protein structure (two disconnected threonines were inadvertently drawn from the same structure). This then provides α-carbon coordinates that we feed into the backbone search engine MaDCaT <xref ref-type="bibr" rid="pcbi.1003750-Grigoryan1">[10]</xref>, which finds suitable scaffolds to incorporate this fragment. One MaDCaT search result greatly resembles the β sheet built using Suns (<xref ref-type="fig" rid="pcbi-1003750-g004">Figure 4C</xref>).</p>
</sec><sec id="s4c">
<title>Connecting hot spot residues: Recapitulating a hemagglutinin binding motif</title>
<p>Suns can also be used to find scaffolds compatible with specified residues to provide an alternative implementation of the hotspot residue approach to design <xref ref-type="bibr" rid="pcbi.1003750-Fleishman1">[20]</xref>. The user can select the hotspot of interest within PyMOL, search, and find several protein structures in the PDB that position the given hot spot residues in the specified geometry.</p>
<p>For example, Suns recapitulates the local backbone of a designed hemagglutinin binder <xref ref-type="bibr" rid="pcbi.1003750-Fleishman1">[20]</xref>. <xref ref-type="fig" rid="pcbi-1003750-g005">Figure 5A</xref> illustrates how searching for fragments of the original hotspot residues reveals a prominent cluster of α helices matching the designed protein structure, indicating that the secondary structure of the interface could have been predicted solely from designability.</p>
<fig id="pcbi-1003750-g005" position="float"><object-id pub-id-type="doi">10.1371/journal.pcbi.1003750.g005</object-id><label>Figure 5</label><caption>
<title>Finding backbones compatible with hot spot residues.</title>
<p>(A) A Suns search at 0.7 Å RMSD cutoff for two hotspot residues previously identified by RosettaDock <xref ref-type="bibr" rid="pcbi.1003750-Gray1">[22]</xref> for a hemagglutinin binder <xref ref-type="bibr" rid="pcbi.1003750-Fleishman1">[20]</xref>. The majority of search results are helices that closely match the final designed protein. The search query is shown in thick green sticks, the search result matches are shown as grey α-carbon traces, and the designed hemagglutinin binder is shown as a purple α-carbon trace against a blue hemagglutinin surface. (B) Searching for two threonine side chains at 0.6 Å RMSD cutoff reveals two backbone clusters that can connect them, one corresponding to an α helix (green) and the other corresponding to a β sheet (yellow). Black dashed lines surround the original search query, which is represented as thick yellow sticks.</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1003750.g005" position="float" xlink:type="simple"/></fig>
<p>Not every hotspot search will return a single solution for the backbone. Sometimes searching for disembodied residues will reveal multiple distinct ways to thread the backbone between them (<xref ref-type="fig" rid="pcbi-1003750-g005">Figure 5B</xref>).</p>
</sec><sec id="s4d">
<title>Metal binding sites: Searching for a subset of the EF-hand motif</title>
<p>Suns can complete metal binding sites when provided with a small subset of the original motif. We begin from an EF-hand from calmodulin (PDB ID  =  1CLL) and search for only two aspartate side-chains from the motif, each of which coordinates the calcium ion once. Note: this search does not include the metal ion.</p>
<p>Searching for these two aspartate side chains at an RMSD cutoff of 0.7 Å returns seven search results (<xref ref-type="fig" rid="pcbi-1003750-g006">Figure 6</xref>). Each one of these results is an EF-hand motif that aligns closely to the original search query. Even though the search query did not include the metal ion, every result coordinates a calcium ion at the same location as calmodulin, with the exception of one result which coordinates a sodium ion.</p>
<fig id="pcbi-1003750-g006" position="float"><object-id pub-id-type="doi">10.1371/journal.pcbi.1003750.g006</object-id><label>Figure 6</label><caption>
<title>Searching for calcium binding sites.</title>
<p>(A) Two side chains of the EF-hand of calmodulin suffice to find matching motifs. The search query (black dashes) consists exclusively of two aspartate side chains (D20 and D24) and does not include the calcium ligand. (B) Searching for these two side chains at 0.7 Å resolution returns seven results, all of which are EF-hand motifs. Six of these motifs coordinate a matching calcium ion (green sphere), and the seventh motif coordinates a sodium ion (purple sphere).</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1003750.g006" position="float" xlink:type="simple"/></fig></sec><sec id="s4e">
<title>Benchmarks: Latency</title>
<p>Suns is optimized to minimize latency to support an interactive workflow, so we benchmark the turnaround time for queries under increasingly optimal scenarios. The <monospace>suns-cmd</monospace> source code includes a benchmark suite that tests the speed of searches taken from the above example sections. We begin by benchmarking against the public search engine over a network connection, then benchmark successive improvements to query speed by (A) testing against a server deployed on the same machine as the client followed by additionally (B) loosening the RMSD cutoff to 1.0 Å, our default cutoff. For each of these scenarios, we record the total time from the start of the query until the final result is returned, but for an interactive tool like Suns, the amount of time between the start of the query to the first result is also of great interest, so we also record (C) the time-to-first-result (<xref ref-type="fig" rid="pcbi-1003750-g007">Figure 7</xref>). The networked server runs on a single Intel Xeon E5-2420 1.90 GHz core, while the local server runs on a single Intel i5-3230M 2.60 GHz core.</p>
<fig id="pcbi-1003750-g007" position="float"><object-id pub-id-type="doi">10.1371/journal.pcbi.1003750.g007</object-id><label>Figure 7</label><caption>
<title>Latency benchmarks.</title>
<p>We benchmark completion times of searches for: (Remote) low (&lt;0.6 Å) RMSD cutoff queries against our public server, (Local) low RMSD cutoff queries against a local server, and (Loose) queries with a default RMSD cutoff (1.0 Å) against a local server. We also measure the time to first result (TTFR) under the same conditions as (Loose) queries. Each query corresponds to a specific search illustrated in the <xref ref-type="sec" rid="s4"><italic>Results</italic></xref> section and the query PDB files are included as part of the benchmark suite of <monospace>suns-cmd</monospace> (<xref ref-type="supplementary-material" rid="pcbi.1003750.s006">Software S2</xref>).</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1003750.g007" position="float" xlink:type="simple"/></fig>
<p>The slowest queries are performed over the network and use stringent RMSD cutoffs (&lt;0.6 Å), yet they still produce 100 results between 1 to 10 seconds. Loosening the RMSD to the default RMSD cutoff of 1.0 Å and improving the network connection to the best-case scenario of a local server improves speed approximately 10-fold, reducing search time to between 100 ms and 1 second. However, Suns often “feels” even faster than that because of its rapid time-to-first-result (TTFR), which ranges from 10 ms to 100 ms, allowing the user to begin browsing aligned results immediately while they continue to concurrently stream into PyMOL.</p>
<p>We do not formally compare Suns latency to Erebus because Erebus does not yet provide a programmatic interface for result submission or retrieval and all results must be downloaded individually by hand. Therefore the overhead of submitting an Erebus query and retrieving search results is minimally on the order of several minutes for tens of results, without including search time. Additionally, Erebus is not optimized for rapid subsequent searches since Erebus exhaustively scans the entire PDB for every search.</p>
</sec><sec id="s4f">
<title>Benchmarks: Throughput</title>
<p>An accurate comparison between Suns and Erebus is difficult due to differing design tradeoffs between the two servers. One of Erebus's strengths is its comprehensiveness: Erebus searches can span the entire protein data bank. In contrast, Suns chooses to search a non-redundant set of structures from the PDB so that the entire database can fit in the server's working memory (currently 96 GB) minimizing performance issues involved in disk I/O. Therefore, we estimate database throughput for both search engines by normalizing query times using the size of the data set that each search engine indexes. For these throughput benchmarks we test against a locally hosted Suns server which indexes a data set of approximately 2,000 models, whereas the self-reported throughput of Erebus <xref ref-type="bibr" rid="pcbi.1003750-Shirvanyants1">[12]</xref> is based on a data set of approximately 200,000 models (100-fold larger). Also note that the original Erebus benchmark uses 16 2.10 GHz cores whereas Suns runs on a single 2.60 GHz core for this benchmark.</p>
<p>For both Suns and Erebus, the worst-case throughput for the example search queries is 9–10 structures/second, meaning that every 10 structures in the database extends the search time by 1 second. However, every other Suns query outperforms Erebus in throughput by one or two orders of magnitude, and many of them process over 1000 structures per second and return hundreds of matches (<xref ref-type="fig" rid="pcbi-1003750-g008">Figure 8</xref>).</p>
<fig id="pcbi-1003750-g008" position="float"><object-id pub-id-type="doi">10.1371/journal.pcbi.1003750.g008</object-id><label>Figure 8</label><caption>
<title>Throughput benchmarks.</title>
<p>We compare throughput of search queries for both Suns and Erebus, defined as query time divided by number of models in the data set. Suns throughput is measured against a locally hosted server and the Erebus throughput data is taken from <xref ref-type="bibr" rid="pcbi.1003750-Shirvanyants1">[12]</xref>. Detailed query information, including the query size in atoms and the number of matches, is provided in <xref ref-type="supplementary-material" rid="pcbi.1003750.s003">Table S3</xref> and the specific query PDB files are included in the benchmark suite of <monospace>suns-cmd</monospace> (<xref ref-type="supplementary-material" rid="pcbi.1003750.s006">Software S2</xref>).</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1003750.g008" position="float" xlink:type="simple"/></fig>
<p>Most of these efficiency gains for Suns can be attributed to how well search queries take advantage of the forward index. The best performing search #11 includes a methionine, a residue of low natural abundance, alongside a phenylalanine, so we expect this search to utilize the forward index well and eliminate most pages quickly. In contrast, the worst performing search #5 comprises a highly degenerate query: two backbone motifs. This query performs poorly because it combines two motifs of extremely high abundance, forcing Suns to inspect nearly the entire data set in detail. Normally, high abundance queries also perform well for Suns because they saturate the requested number of results rapidly, but this benchmark explicitly instructs Suns to continue to produce as many results as possible to measure dataset throughput.</p>
</sec><sec id="s4g">
<title>Conclusions</title>
<p>Our primary contribution is an entire graphical design workflow designed from the ground up to allow rapid and interactive exploration of large structural design spaces. We accomplish this by reducing performance and interface bottlenecks in order to encourage users to issue multiple search queries in rapid succession. Consequently, people can easily tailor Suns to their specific needs by composing multiple small searches instead of constructing a single monolithic search query with a large configuration space. Additionally, the first-class support for graphical search and feedback provides greater opportunities to inject human intelligence into the search process.</p>
<p>We initially built Suns to guide the protein design process, but we are releasing it as a general-purpose search engine so that others may reuse it for applications we did not previously anticipate. Drug discovery researchers may benefit from generalizing Suns to index ligand substructures to discover favorable protein-drug interactions. Also, modelers may use Suns as a generalized PROCHECK <xref ref-type="bibr" rid="pcbi.1003750-Laskowski1">[21]</xref> to independently validate small structural regions that are insufficiently constrained by the data.</p>
<p>Compared to the Erebus atomic substructure search engine, Suns primarily innovates on latency, throughput, search volume, and interactivity, but at the price of data set coverage and restricted queries. Suns originated as a rapid prototyping tool and many of the design tradeoffs reflect an emphasis on performance rather than completeness. However, Suns may be able to scale to cover the entire Protein Data Bank by layering an additional distributed apparatus on top of the search engine. The search algorithm is “embarrassingly parallel” so memory limitations can be circumvented by distributing the search workload across several machines, each of which indexes a subset of the Protein Data Bank that fits within memory. Additionally, the current page partitioning scheme could be modified to include staggered and overlapping pages to guarantee complete motif coverage.</p>
<p>We place a high importance on ease of integration and distribution to encourage other projects to build upon and customize Suns. Suns provides programmatic access through libraries and command line clients for ease of incorporation into derived, automated workflows. Suns is also fully open source and allows users to host their own local search engine to improve performance or tailor the search engine to their needs. Locally deployed search engines will particularly benefit commercial enterprises which cannot afford to transmit sensitive proprietary data outside of their intranet.</p>
<p>Suns can piece together designable fragments such as beta sheets that can in turn be fed to coarse-grained search engines such as ProteinDBS or MaDCaT. Unifying these complementary tools might allow users to seamlessly transition between diverse length scales as designed protein fragments grow in size.</p>
</sec></sec><sec id="s5">
<title>Availability and Future Directions</title>
<p>The Suns plugin for PyMOL is available at <ext-link ext-link-type="uri" xlink:href="http://www.degradolab.org/suns" xlink:type="simple">www.degradolab.org/suns</ext-link>, which also includes a tutorial on how to install and use the library (<xref ref-type="supplementary-material" rid="pcbi.1003750.s004">Manual S1</xref>). The source code for the client is available separately at <ext-link ext-link-type="uri" xlink:href="https://github.com/godotgildor/Suns" xlink:type="simple">https://github.com/godotgildor/Suns</ext-link> under a BSD license (<xref ref-type="supplementary-material" rid="pcbi.1003750.s005">Software S1</xref>).</p>
<p>Users can also automate searches using a command line tool, available at <ext-link ext-link-type="uri" xlink:href="https://github.com/Gabriel439/suns-cmd" xlink:type="simple">https://github.com/Gabriel439/suns-cmd</ext-link> under a BSD license (<xref ref-type="supplementary-material" rid="pcbi.1003750.s006">Software S2</xref>). Users who wish to incorporate Suns within an automated workflow should use this client instead.</p>
<p>The source code for the search engine is located at <ext-link ext-link-type="uri" xlink:href="https://github.com/Gabriel439/suns-search" xlink:type="simple">https://github.com/Gabriel439/suns-search</ext-link> under a GPLv2 license (<xref ref-type="supplementary-material" rid="pcbi.1003750.s007">Software S3</xref>). Users should report bugs or request new features using the issue tracker at <ext-link ext-link-type="uri" xlink:href="https://github.com/Gabriel439/suns-search/issues" xlink:type="simple">https://github.com/Gabriel439/suns-search/issues</ext-link> or by contacting the Suns mailing list at <email xlink:type="simple">suns-search@googlegroups.com</email>.</p>
<p>Currently the public search engine only indexes protein structures. We also plan to add support for ligand search queries so that Suns can be used for drug design. While this paper describes a protein-specific application of the search engine, the underlying algorithm can be readily generalized to ligands and other macromolecules.</p>
</sec><sec id="s6">
<title>Supporting Information</title>
<supplementary-material id="pcbi.1003750.s001" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" xlink:href="info:doi/10.1371/journal.pcbi.1003750.s001" position="float" xlink:type="simple"><label>Table S1</label><caption>
<p><bold>Default motif set.</bold> Default motifs indexed by the public server hosted at suns.degradolab.org. (Motif Name): The common name for the motif. (Residue and Atom Names): The atom names used to define the motif. Some motifs may match multiple residue types, in which case all matching residues are listed with their corresponding atom names.</p>
<p>(DOCX)</p>
</caption></supplementary-material><supplementary-material id="pcbi.1003750.s002" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" xlink:href="info:doi/10.1371/journal.pcbi.1003750.s002" position="float" xlink:type="simple"><label>Table S2</label><caption>
<p><bold>Search parameters for all figures.</bold> (Figure): The figure and sub-figure the selections and searches correspond to. (Selection/{Search}): No braces indicates a saved selection referenced by searches. Braces indicate a search based in terms of previous selections of the form {sel1, sel2, …}. “sc” indicates only the side-chain was taken from the previously saved selection and “bb” indicates only the backbone atoms were used. (Structure): The PDB ID the selection originated from. (Result ID): The search result serial ID number to disambiguate selections where there are multiple results from the same PDB ID. (Chain): Chain the selection originated from. (Residue): Residue selected. (Atoms): Selected atoms. (RMSD Cutoff): Root-mean-squared deviation cutoff used for a given search. With the exception of initial selections for each figure, all selections are derived from results returned from the preceding search query in the table. †: Structure provided by the David Baker laboratory for their hot spot motif for the hemagglutinin binder <xref ref-type="bibr" rid="pcbi.1003750-Fleishman1">[20]</xref>.</p>
<p>(DOCX)</p>
</caption></supplementary-material><supplementary-material id="pcbi.1003750.s003" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" xlink:href="info:doi/10.1371/journal.pcbi.1003750.s003" position="float" xlink:type="simple"><label>Table S3</label><caption>
<p><bold>Results for throughput benchmarks.</bold> (Search) The matching column from <xref ref-type="fig" rid="pcbi-1003750-g008">Figure 8</xref>. (Figure #) The figure the search corresponds to. (Search #) The order of searches used to build the structure depicted in the figure (See <xref ref-type="supplementary-material" rid="pcbi.1003750.s002">Table S2</xref>). (# of atoms) The number of atoms in the search query. (Time) The elapsed time from query submission to final result retrieval. (Matches) The number of matched results returned by the search engine. (Structures/second) The throughput of the search engine, defined as (Time/Models indexed).</p>
<p>(DOCX)</p>
</caption></supplementary-material><supplementary-material id="pcbi.1003750.s004" mimetype="application/pdf" xlink:href="info:doi/10.1371/journal.pcbi.1003750.s004" position="float" xlink:type="simple"><label>Manual S1</label><caption>
<p><bold>User instructions.</bold> These instructions provide detailed guidance on how to use all three software packages (Software S1, S2, S3).</p>
<p>(PDF)</p>
</caption></supplementary-material><supplementary-material id="pcbi.1003750.s005" mimetype="application/zip" xlink:href="info:doi/10.1371/journal.pcbi.1003750.s005" position="float" xlink:type="simple"><label>Software S1</label><caption>
<p><bold>PyMOL search plugin.</bold> This software package contains the source code for building the search plugin, released under a BSD license. This package builds both a plugin suited for PyMOL's plugin manager as well as an alternative Debian package for installation on systems using Debian-like package managers (such as Ubuntu).</p>
<p>(ZIP)</p>
</caption></supplementary-material><supplementary-material id="pcbi.1003750.s006" mimetype="application/zip" xlink:href="info:doi/10.1371/journal.pcbi.1003750.s006" position="float" xlink:type="simple"><label>Software S2</label><caption>
<p><bold>Command line search client.</bold> This software package contains the source code for the command line search client, released under a BSD license. This package also contains the original search queries and results used for this manuscript (<xref ref-type="supplementary-material" rid="pcbi.1003750.s002">Table S2</xref>) saved as PyMOL sessions. The test suite for this package uses the command line client to automate these searches and verify that they match the original output we obtained. The benchmark suite for this package automates the benchmarks provided in this paper. The <monospace>README.md</monospace> file contains instructions for how to install and test the software.</p>
<p>(ZIP)</p>
</caption></supplementary-material><supplementary-material id="pcbi.1003750.s007" mimetype="application/zip" xlink:href="info:doi/10.1371/journal.pcbi.1003750.s007" position="float" xlink:type="simple"><label>Software S3</label><caption>
<p><bold>Search engine.</bold> This software package contains the source code for the search engine, released under a GPLv2 license. Installation instructions are contained within the <monospace>README.md</monospace> file.</p>
<p>(ZIP)</p>
</caption></supplementary-material><supplementary-material id="pcbi.1003750.s008" mimetype="video/mp4" xlink:href="info:doi/10.1371/journal.pcbi.1003750.s008" position="float" xlink:type="simple"><label>Video S1</label><caption>
<p><bold>Example use of the PyMOL Suns plugin.</bold> The search process mirrors <xref ref-type="fig" rid="pcbi-1003750-g003">Figure 3</xref>, with the exception of the final search, which is performed at an RMSD cutoff of 0.4 Å. The process begins by selecting a guanidium group and performing a search to visualize neighboring motifs, followed by selection of a nearby carboxylic acid (see: <xref ref-type="fig" rid="pcbi-1003750-g003">Figure 3A</xref>). Repeating the search reveals several matching salt bridges. Search results are reoriented to show the distribution of linker preferences for arginine and one such linker is selected (see: <xref ref-type="fig" rid="pcbi-1003750-g003">Figure 3B</xref>). The final search includes the linker and the matching results are reoriented to center on several backbone motifs that complete the salt bridge. The video has not been sped up, cut, or edited in any way.</p>
<p>(MP4)</p>
</caption></supplementary-material></sec></body>
<back><ref-list>
<title>References</title>
<ref id="pcbi.1003750-Holm1"><label>1</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Holm</surname><given-names>L</given-names></name>, <name name-style="western"><surname>Sander</surname><given-names>C</given-names></name> (<year>1993</year>) <article-title>Protein structure comparison by alignment of distance matrices</article-title>. <source>J Mol Biol</source> <volume>233</volume>: <fpage>123</fpage>–<lpage>138</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Holm2"><label>2</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Holm</surname><given-names>L</given-names></name>, <name name-style="western"><surname>Sander</surname><given-names>C</given-names></name> (<year>1994</year>) <article-title>The FSSP database of structurally aligned protein fold families</article-title>. <source>Nucleic Acids Res</source> <volume>22</volume>: <fpage>3600</fpage>–<lpage>3609</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Prasad1"><label>3</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Prasad</surname><given-names>BV</given-names></name>, <name name-style="western"><surname>Hardy</surname><given-names>ME</given-names></name>, <name name-style="western"><surname>Dokland</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Bella</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Rossmann</surname><given-names>MG</given-names></name>, <etal>et al</etal>. (<year>1999</year>) <article-title>X-ray crystallographic structure of the Norwalk virus capsid</article-title>. <source>Science</source> <volume>286</volume>: <fpage>287</fpage>–<lpage>290</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Doolittle1"><label>4</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Doolittle</surname><given-names>JM</given-names></name>, <name name-style="western"><surname>Gomez</surname><given-names>SM</given-names></name> (<year>2011</year>) <article-title>Mapping protein interactions between Dengue virus and its human and insect hosts</article-title>. <source>PLoS Negl Trop Dis</source> <volume>5</volume>: <fpage>e954</fpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Roy1"><label>5</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Roy</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Aravind</surname><given-names>P</given-names></name>, <name name-style="western"><surname>Madhurantakam</surname><given-names>C</given-names></name>, <name name-style="western"><surname>Ghosh</surname><given-names>AK</given-names></name>, <name name-style="western"><surname>Sankaranarayanan</surname><given-names>R</given-names></name>, <etal>et al</etal>. (<year>2009</year>) <article-title>Crystal structure of a fungal protease inhibitor from Antheraea mylitta</article-title>. <source>J Struct Biol</source> <volume>166</volume>: <fpage>79</fpage>–<lpage>87</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Shindyalov1"><label>6</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Shindyalov</surname><given-names>IN</given-names></name>, <name name-style="western"><surname>Bourne</surname><given-names>PE</given-names></name> (<year>1998</year>) <article-title>Protein structure alignment by incremental combinatorial extension (CE) of the optimal path</article-title>. <source>Protein engineering</source> <volume>11</volume>: <fpage>739</fpage>–<lpage>747</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Taylor1"><label>7</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Taylor</surname><given-names>WR</given-names></name>, <name name-style="western"><surname>Flores</surname><given-names>TP</given-names></name>, <name name-style="western"><surname>Orengo</surname><given-names>CA</given-names></name> (<year>1994</year>) <article-title>Multiple protein structure alignment</article-title>. <source>Protein Science</source> <volume>3</volume>: <fpage>1858</fpage>–<lpage>1870</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Zhang1"><label>8</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Zhang</surname><given-names>Y</given-names></name>, <name name-style="western"><surname>Skolnick</surname><given-names>J</given-names></name> (<year>2005</year>) <article-title>TM-align: a protein structure alignment algorithm based on the TM-score</article-title>. <source>Nucleic acids research</source> <volume>33</volume>: <fpage>2302</fpage>–<lpage>2309</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Zhang2"><label>9</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Zhang</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Grigoryan</surname><given-names>G</given-names></name> (<year>2013</year>) <article-title>Mining tertiary structural motifs for assessment of designability</article-title>. <source>Methods Enzymol</source> <volume>523</volume>: <fpage>21</fpage>–<lpage>40</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Grigoryan1"><label>10</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Grigoryan</surname><given-names>G</given-names></name>, <name name-style="western"><surname>Kim</surname><given-names>YH</given-names></name>, <name name-style="western"><surname>Acharya</surname><given-names>R</given-names></name>, <name name-style="western"><surname>Axelrod</surname><given-names>K</given-names></name>, <name name-style="western"><surname>Jain</surname><given-names>RM</given-names></name>, <etal>et al</etal>. (<year>2011</year>) <article-title>Computational design of virus-like protein assemblies on carbon nanotube surfaces</article-title>. <source>Science</source> <volume>332</volume>: <fpage>1071</fpage>–<lpage>1076</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Shyu1"><label>11</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Shyu</surname><given-names>CR</given-names></name>, <name name-style="western"><surname>Chi</surname><given-names>PH</given-names></name>, <name name-style="western"><surname>Scott</surname><given-names>G</given-names></name>, <name name-style="western"><surname>Xu</surname><given-names>D</given-names></name> (<year>2004</year>) <article-title>ProteinDBS: a real-time retrieval system for protein structure comparison</article-title>. <source>Nucleic Acids Res</source> <volume>32</volume>: <fpage>W572</fpage>–<lpage>575</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Shirvanyants1"><label>12</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Shirvanyants</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Alexandrova</surname><given-names>AN</given-names></name>, <name name-style="western"><surname>Dokholyan</surname><given-names>NV</given-names></name> (<year>2011</year>) <article-title>Rigid substructure search</article-title>. <source>Bioinformatics</source> <volume>27</volume>: <fpage>1327</fpage>–<lpage>1329</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Schrdinger1"><label>13</label>
<mixed-citation publication-type="other" xlink:type="simple">Schrödinger LLC (2010) The PyMOL Molecular Graphics System. 1.6 ed. <ext-link ext-link-type="uri" xlink:href="http://www.pymol.org/" xlink:type="simple">http://www.pymol.org/</ext-link></mixed-citation>
</ref>
<ref id="pcbi.1003750-Cook1"><label>14</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Cook</surname><given-names>SA</given-names></name> (<year>1971</year>) <article-title>The complexity of theorem-proving procedures</article-title>. <source>ACM</source> <fpage>151</fpage>–<lpage>158</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Brin1"><label>15</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Brin</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Page</surname><given-names>L</given-names></name> (<year>1998</year>) <article-title>The anatomy of a large-scale hypertextual Web search engine</article-title>. <source>Computer networks and ISDN systems</source> <volume>30</volume>: <fpage>107</fpage>–<lpage>117</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Chen1"><label>16</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Chen</surname><given-names>WW</given-names></name>, <name name-style="western"><surname>Shakhnovich</surname><given-names>EI</given-names></name> (<year>2005</year>) <article-title>Lessons from the design of a novel atomic potential for protein folding</article-title>. <source>Protein science</source> <volume>14</volume>: <fpage>1741</fpage>–<lpage>1752</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Kabsch1"><label>17</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Kabsch</surname><given-names>W</given-names></name> (<year>1976</year>) <article-title>A solution for the best rotation to relate two sets of vectors</article-title>. <source>Acta Crystallographica Section A: Crystal Physics, Diffraction, Theoretical and General Crystallography</source> <volume>32</volume>: <fpage>922</fpage>–<lpage>923</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Wang1"><label>18</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Wang</surname><given-names>G</given-names></name>, <name name-style="western"><surname>Dunbrack</surname><given-names>RL</given-names><suffix>Jr</suffix></name> (<year>2003</year>) <article-title>PISCES: a protein sequence culling server</article-title>. <source>Bioinformatics</source> <volume>19</volume>: <fpage>1589</fpage>–<lpage>1591</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Donald1"><label>19</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Donald</surname><given-names>JE</given-names></name>, <name name-style="western"><surname>Kulp</surname><given-names>DW</given-names></name>, <name name-style="western"><surname>DeGrado</surname><given-names>WF</given-names></name> (<year>2011</year>) <article-title>Salt bridges: Geometrically specific, designable interactions</article-title>. <source>Proteins: Structure, Function, and Bioinformatics</source> <volume>79</volume>: <fpage>898</fpage>–<lpage>915</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Fleishman1"><label>20</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Fleishman</surname><given-names>SJ</given-names></name>, <name name-style="western"><surname>Whitehead</surname><given-names>TA</given-names></name>, <name name-style="western"><surname>Ekiert</surname><given-names>DC</given-names></name>, <name name-style="western"><surname>Dreyfus</surname><given-names>C</given-names></name>, <name name-style="western"><surname>Corn</surname><given-names>JE</given-names></name>, <etal>et al</etal>. (<year>2011</year>) <article-title>Computational design of proteins targeting the conserved stem region of influenza hemagglutinin</article-title>. <source>Science</source> <volume>332</volume>: <fpage>816</fpage>–<lpage>821</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Laskowski1"><label>21</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Laskowski</surname><given-names>RA</given-names></name>, <name name-style="western"><surname>MacArthur</surname><given-names>MW</given-names></name>, <name name-style="western"><surname>Moss</surname><given-names>DS</given-names></name>, <name name-style="western"><surname>Thornton</surname><given-names>JM</given-names></name> (<year>1993</year>) <article-title>PROCHECK: a program to check the stereochemical quality of protein structures</article-title>. <source>Journal of applied crystallography</source> <volume>26</volume>: <fpage>283</fpage>–<lpage>291</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003750-Gray1"><label>22</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Gray</surname><given-names>JJ</given-names></name>, <name name-style="western"><surname>Moughon</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Wang</surname><given-names>C</given-names></name>, <name name-style="western"><surname>Schueler-Furman</surname><given-names>O</given-names></name>, <name name-style="western"><surname>Kuhlman</surname><given-names>B</given-names></name>, <etal>et al</etal>. (<year>2003</year>) <article-title>Protein–protein docking with simultaneous optimization of rigid-body displacement and side-chain conformations</article-title>. <source>Journal of molecular biology</source> <volume>331</volume>: <fpage>281</fpage>–<lpage>299</lpage>.</mixed-citation>
</ref>
</ref-list></back>
</article>