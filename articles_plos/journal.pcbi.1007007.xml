<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN" "http://jats.nlm.nih.gov/publishing/1.1d3/JATS-journalpublishing1.dtd">
<article article-type="editorial" dtd-version="1.1d3" xml:lang="en" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id>
<journal-title-group>
<journal-title>PLOS Computational Biology</journal-title>
</journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1007007</article-id>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-18-01783</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Editorial</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Research assessment</subject><subj-group><subject>Reproducibility</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Computer architecture</subject><subj-group><subject>Computer hardware</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>People and places</subject><subj-group><subject>Population groupings</subject><subj-group><subject>Professions</subject><subj-group><subject>Analysts</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Data management</subject><subj-group><subject>Metadata</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Human factors engineering</subject><subj-group><subject>Man-computer interface</subject><subj-group><subject>Graphical user interfaces</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Computer architecture</subject><subj-group><subject>User interfaces</subject><subj-group><subject>Graphical user interfaces</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Information technology</subject><subj-group><subject>Data processing</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Ecology</subject><subj-group><subject>Ecosystems</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Ecology and environmental sciences</subject><subj-group><subject>Ecology</subject><subj-group><subject>Ecosystems</subject></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>Ten simple rules for writing and sharing computational analyses in Jupyter Notebooks</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Rule</surname>
<given-names>Adam</given-names>
</name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-4117-3317</contrib-id>
<name name-style="western">
<surname>Birmingham</surname>
<given-names>Amanda</given-names>
</name>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-0135-7429</contrib-id>
<name name-style="western">
<surname>Zuniga</surname>
<given-names>Cristal</given-names>
</name>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-2196-0305</contrib-id>
<name name-style="western">
<surname>Altintas</surname>
<given-names>Ilkay</given-names>
</name>
<xref ref-type="aff" rid="aff004"><sup>4</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0001-9882-833X</contrib-id>
<name name-style="western">
<surname>Huang</surname>
<given-names>Shih-Cheng</given-names>
</name>
<xref ref-type="aff" rid="aff004"><sup>4</sup></xref>
<xref ref-type="fn" rid="currentaff001"><sup>¤</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Knight</surname>
<given-names>Rob</given-names>
</name>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
<xref ref-type="aff" rid="aff005"><sup>5</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-2209-8128</contrib-id>
<name name-style="western">
<surname>Moshiri</surname>
<given-names>Niema</given-names>
</name>
<xref ref-type="aff" rid="aff006"><sup>6</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Nguyen</surname>
<given-names>Mai H.</given-names>
</name>
<xref ref-type="aff" rid="aff004"><sup>4</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-6548-9658</contrib-id>
<name name-style="western">
<surname>Rosenthal</surname>
<given-names>Sara Brin</given-names>
</name>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-1725-9815</contrib-id>
<name name-style="western">
<surname>Pérez</surname>
<given-names>Fernando</given-names>
</name>
<xref ref-type="aff" rid="aff007"><sup>7</sup></xref>
</contrib>
<contrib contrib-type="author" corresp="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0001-9981-9750</contrib-id>
<name name-style="western">
<surname>Rose</surname>
<given-names>Peter W.</given-names>
</name>
<xref ref-type="aff" rid="aff004"><sup>4</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
</contrib-group>
<aff id="aff001"><label>1</label> <addr-line>Design Lab, UC San Diego, La Jolla, California, United States of America</addr-line></aff>
<aff id="aff002"><label>2</label> <addr-line>Center for Computational Biology and Bioinformatics, UC San Diego, La Jolla, California, United States of America</addr-line></aff>
<aff id="aff003"><label>3</label> <addr-line>Department of Pediatrics, UC San Diego, La Jolla, California, United States of America</addr-line></aff>
<aff id="aff004"><label>4</label> <addr-line>Data Science Hub, San Diego Supercomputer Center, UC San Diego, La Jolla, California, United States of America</addr-line></aff>
<aff id="aff005"><label>5</label> <addr-line>Departments of Bioengineering, and Computer Science and Engineering, and Center for Microbiome Innovation, UC San Diego, La Jolla, California, United States of America</addr-line></aff>
<aff id="aff006"><label>6</label> <addr-line>Bioinformatics and Systems Biology Graduate Program, UC San Diego, La Jolla, California, United States of America</addr-line></aff>
<aff id="aff007"><label>7</label> <addr-line>Department of Statistics and Berkeley Institute for Data Science, UC Berkeley, and Lawrence Berkeley National Laboratory, Berkeley, California, United States of America</addr-line></aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>Lewitter</surname>
<given-names>Fran</given-names>
</name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1"><addr-line>Whitehead Institute for Biomedical Research, UNITED STATES</addr-line></aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>The authors have declared that no competing interests exist.</p>
</fn>
<fn fn-type="current-aff" id="currentaff001">
<label>¤</label>
<p>Current address: Biomedical Informatics Graduate Program, Stanford University, Stanford, CA, United States of America</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">pwrose@ucsd.edu</email></corresp>
</author-notes>
<pub-date pub-type="epub">
<day>25</day>
<month>7</month>
<year>2019</year>
</pub-date>
<pub-date pub-type="collection">
<month>7</month>
<year>2019</year>
</pub-date>
<volume>15</volume>
<issue>7</issue>
<elocation-id>e1007007</elocation-id>
<permissions>
<copyright-year>2019</copyright-year>
<copyright-holder>Rule et al</copyright-holder>
<license xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">
<license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pcbi.1007007"/>
<funding-group>
<funding-statement>The authors received no specific funding for writing this article. Funding for the “Reproducible Research and Interactive Education - Application of Jupyter Notebooks” workshop was provided by the San Diego Supercomputer Center at UC San Diego.</funding-statement>
</funding-group>
<counts>
<fig-count count="1"/>
<table-count count="0"/>
<page-count count="8"/>
</counts>
</article-meta>
</front>
<body>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<p>As studies grow in scale and complexity, it has become increasingly difficult to provide clear descriptions and open access to the methods and data needed to understand and reproduce computational research. Numerous papers [<xref ref-type="bibr" rid="pcbi.1007007.ref001">1</xref>–<xref ref-type="bibr" rid="pcbi.1007007.ref003">3</xref>], including several in the Ten Simple Rules collection [<xref ref-type="bibr" rid="pcbi.1007007.ref004">4</xref>,<xref ref-type="bibr" rid="pcbi.1007007.ref005">5</xref>], have highlighted the need for robust and reproducible analyses in computational research, described the difficulty of achieving these standards, and enumerated best practices. We aim to augment this existing wellspring of advice by addressing the unique challenges and opportunities that arise when using computational notebooks, especially Jupyter Notebooks, for research [<xref ref-type="bibr" rid="pcbi.1007007.ref006">6</xref>].</p>
<p>Reproducibility, the scientific standard that others should be able to recreate your results, requires at a minimum that “data and the computer code used to analyze [that] data be made available to others” [<xref ref-type="bibr" rid="pcbi.1007007.ref002">2</xref>]. Achieving even this minimum standard typically requires both machine-readable descriptions of the data, software, dependencies, and computational environment involved (for example, hardware or cloud configuration), as well as human-readable documentation describing how all these pieces fit together. Whereas analysts previously kept code, documentation, and results in separate files, they increasingly use computational notebooks such as Jupyter Notebooks and R Notebooks to both perform analyses and combine code, results, and descriptive text in a single “computational narrative” to be read and rerun by others [<xref ref-type="bibr" rid="pcbi.1007007.ref007">7</xref>,<xref ref-type="bibr" rid="pcbi.1007007.ref008">8</xref>]. This ability to combine executable code and descriptive text in a single document has close ties to Knuth’s notion of “literate programming” [<xref ref-type="bibr" rid="pcbi.1007007.ref009">9</xref>] and has convinced many researchers to switch to computational notebooks from other programming environments. Jupyter Notebooks in particular have seen widespread adoption: as of December 2018, there were more than 3 million Jupyter Notebooks shared publicly on GitHub (<ext-link ext-link-type="uri" xlink:href="https://www.github.com/" xlink:type="simple">https://www.github.com</ext-link>) [<xref ref-type="bibr" rid="pcbi.1007007.ref010">10</xref>], many of which document academic research [<xref ref-type="bibr" rid="pcbi.1007007.ref011">11</xref>].</p>
<p>The interactive and narrative nature of computational notebooks presents unique opportunities for performing and sharing computational research. With some forethought, they can provide not only richly detailed descriptions of analyses but also interactive computing environments for replicating, exploring, and extending them. Yet, as with other computing environments, using notebooks for research requires special care. Interactively running and editing code in notebooks can delete key steps or introduce “hidden state” that confounds analyses and confuses readers [<xref ref-type="bibr" rid="pcbi.1007007.ref012">12</xref>]. Analyses documented in notebooks cannot be easily rerun if users do not first freeze their dependencies, share their data, and adequately describe their computing environment [<xref ref-type="bibr" rid="pcbi.1007007.ref013">13</xref>]. And many notebooks lack sufficient descriptive text to guide readers in using them [<xref ref-type="bibr" rid="pcbi.1007007.ref011">11</xref>,<xref ref-type="bibr" rid="pcbi.1007007.ref014">14</xref>].</p>
<p>The explosive growth of computational notebooks provides a unique opportunity to support computational research, but care must be taken when performing and sharing analyses in notebooks. Given these opportunities and challenges, we have compiled a set of rules, tips, tools, and example notebooks to help guide Jupyter Notebook authors. While we focus on a few core uses of Jupyter Notebooks observed in our own research, many of these rules can be applied to other computational notebooks and use cases. In <xref ref-type="fig" rid="pcbi.1007007.g001">Fig 1</xref>, we give a preview of the rules applied at different phases of the notebook development cycle. Whether you use notebooks to track preliminary analyses, to present polished results to collaborators, as finely tuned pipelines for recurring analyses, or for all of the above, following this advice will help you write and share analyses that are easier to read, run, and explore.</p>
<fig id="pcbi.1007007.g001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1007007.g001</object-id>
<label>Fig 1</label>
<caption>
<title>Iterative workflow for applying the 10 simple rules to the creation of Jupyter Notebooks.</title>
<p>The cycle describes three overlapping phases of developing a well-documented and functional Jupyter Notebook. First, we organize and document the notebook (Rules 1–3). Second, the code is developed following the rules proposed here about quality standards (Rules 4–7). Finally, the notebook is made available, along with its data (Rule 8), in a manner encouraging public exploration and contribution (Rules 9–10).</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1007007.g001" xlink:type="simple"/>
</fig>
</sec>
<sec id="sec002">
<title>Rule 1: Tell a story for an audience</title>
<p>One key benefit of using Jupyter Notebooks is being able to interleave explanatory text with code and results to create a computational narrative [<xref ref-type="bibr" rid="pcbi.1007007.ref007">7</xref>]. Rather than only keep sporadic notes, use explanatory text to tell a compelling story that has a beginning that introduces the topic, a middle that describes your steps, and an end that interprets the results. Describe not just what you did but why you did it, how the steps are connected, and what it all means. It is okay for your story to change over time, especially as your analysis evolves, but be sure to start documenting your thoughts and process as early as possible.</p>
<p>How you tell the story will depend on your goal and audience. Do you plan to share your notebook with a nontechnical colleague in your lab, analysts at another lab, readers of a particular journal, or the general public? You may need different kinds and levels of explanation for each audience. In any case, remember that your primary audience will most likely be your future self. Is your explanation clear enough that you will be able to understand and reproduce the analysis a month from now? People often overestimate what they will be able to remember in the future, so err on the side of overexplaining. If you won’t be able to recreate your own analysis in the near future, how could anyone else?</p>
</sec>
<sec id="sec003">
<title>Rule 2: Document the process, not just the results</title>
<p>Computational notebooks’ interactivity makes it quick and easy to try out and compare different approaches or parameters—so quick and easy that we often fail to document those interactive investigations at the time we perform them. Thus, the advice long provided regarding paper lab scientific notebooks becomes even more critical: make sure to document all your explorations, even (or perhaps especially) those that led to dead ends. These comments will help you remember what you did and why. You can always remove these comments later if turning your notebook into a pipeline (see <xref ref-type="sec" rid="sec008">Rule 7</xref>) or preparing to share it with a wider audience (Rule 1), who may prefer to see a concise presentation of results rather than a detailed lab notebook.</p>
<p>Many notebook users wait to add such explanatory text until the end of an analysis, after they have a solid result. Don’t wait—by that point you may have forgotten why you chose a particular parameter value, where you copied a block of code from, or what you found interesting about an intermediate result. If you do not have time to fully document what you are doing or thinking in the moment, leave short descriptive notes to remind yourself what to add when you get to a good stopping point. While the code needed to reproduce the analysis may be automatically captured in your notebook, the reasoning and intuition may not. It is okay if the story in your notebook changes over time; you should still tell a story from the very beginning, even if you don’t know the ending yet.</p>
<p>Clean, organize, and annotate your notebook after each experiment or meaningful chunk of work and do all your cleaning in the notebook. For example, when preparing to publish, avoid manually tweaking figures with desktop publishing tools and instead use plotting libraries with the notebook to produce publication-ready versions of figures and other artifacts to be used in manuscripts. Make sure you include your name as well as contact information for yourself and a future contact in your lab that can answer basic questions about the code. Documenting the beginning and end date of your analysis is also a good idea and can highlight the effort that you have put into the development of the notebook.</p>
</sec>
<sec id="sec004">
<title>Rule 3: Use cell divisions to make steps clear</title>
<p>Notebooks are an interactive environment, so it is very easy to write and run one-line cells. This supports experimentation but can leave your notebooks messy and full of short fragments that are hard to follow. Instead, try to make each cell in your notebook perform one meaningful step of the analysis that is easy to understand from the code in the cell or the surrounding markdown description. Modularize your code by cells and label the cells with markdown above the cell. Think of each cell as being one paragraph, having one function, or accomplishing one task (for example, create a plot).</p>
<p>Avoid long cells (we suggest that anything over 100 lines or one page is too long). Put low-level documentation in code comments. Use descriptive markdown headers to organize your notebook into sections that can be used to easily navigate the notebook and add a table of contents. Split long notebooks into a series of notebooks and keep a top-level index notebook with links to the individual notebooks. Using clear cell and notebook divisions will make your analysis much easier to read.</p>
</sec>
<sec id="sec005">
<title>Rule 4: Modularize code</title>
<p>It is always good practice to avoid duplicate code, but in notebooks, it is especially easy to copy a cell, tweak a few lines, paste the resulting code into a new cell or another notebook, and run it again. This form of experimentation is expedient but makes notebooks difficult to read and nearly impossible to maintain if you want to change the functionality of or fix a bug in the copied code. Instead, wrap code you are about to copy and reuse in a function, which you can then call from as many cells as desired. If you are going to reuse the code in other projects or notebooks, consider turning it into a module, package, or library.</p>
<p>Not only does modularization save space, support maintenance, and ease debugging, it also makes it easier to add interactivity. For example, you can tie widgets (ipywidgets, <ext-link ext-link-type="uri" xlink:href="https://ipywidgets.readthedocs.io/en/stable/" xlink:type="simple">https://ipywidgets.readthedocs.io/en/stable/</ext-link>) to functions to support exploration of different parameter values or support interaction with visualizations without needing to modify the code. This is one way you can design your notebook to be explored (Rule 9).</p>
</sec>
<sec id="sec006">
<title>Rule 5: Record dependencies</title>
<p>Rerunning your analysis in the future will require accessing not only your code but also any module or library that your code relied on. As is best practice across computational science, manage your dependencies using a package or environment manager like pip or Conda. These enable you to download modules and libraries, specify the version of each you want to use in your analysis, and even generate files such as Conda’s environment.yml or pip’s requirements.txt that concisely describe all of your dependencies. These files can be used by tools such as Binder or Docker to generate a “container” that other researchers can use to reproduce your analysis using the same versions of every module and library as you did. Always conduct your work in an environment created only from these dependencies to ensure you do not add undocumented dependencies.</p>
<p>As an extra precaution in notebooks, you can explicitly print out your dependencies using a notebook extension such as watermark (<ext-link ext-link-type="uri" xlink:href="https://github.com/rasbt/watermark" xlink:type="simple">https://github.com/rasbt/watermark</ext-link>). Listing the versions of critical dependencies in the notebook itself (best done at the bottom) will ensure that, if used in isolation from its environment, the notebook still contains critical information to help readers run it.</p>
</sec>
<sec id="sec007">
<title>Rule 6: Use version control</title>
<p>Version control is a critical adjunct to notebook use because the interactive nature of notebooks makes it easy to accidentally change or delete important content. Furthermore, since notebooks contain code and code inevitably contains bugs, being able to determine the history of when a given bug you have discovered was introduced to the code versus when it was fixed—and thus what analyses it may have affected—is a key capability in scientific computation. Consult the Ten Simple Rules paper by Perez-Riverol and colleagues [<xref ref-type="bibr" rid="pcbi.1007007.ref015">15</xref>] on how to take advantage of Git and GitHub for version control generally. Also follow best practices for organizing your repository for easy version control, for example, <ext-link ext-link-type="uri" xlink:href="http://drivendata.github.io/cookiecutter-data-science/" xlink:type="simple">http://drivendata.github.io/cookiecutter-data-science/</ext-link>.</p>
<p>However, be aware that Jupyter Notebooks store both code and extensive metadata about each cell as a text file in the JavaScript Object Notation (JSON) format. Version control systems compare differences in these JSON files, not differences in the user-friendly notebook graphical user interface (GUI). Because of this, reported differences between versions of a given notebook are usually difficult for users to find and understand because they are expressed as changes in the abstruse JSON metadata for the notebook. One way to address this issue is to use a notebook-specific diffing tool like nbdime that understands notebook structure and presents differences in meaningful ways (<ext-link ext-link-type="uri" xlink:href="https://github.com/jupyter/nbdime" xlink:type="simple">https://github.com/jupyter/nbdime</ext-link>). Another approach is to convert your notebook to a more version-control–friendly filetype such as .py before committing changes.</p>
</sec>
<sec id="sec008">
<title>Rule 7: Build a pipeline</title>
<p>Notebooks documenting initial, exploratory investigations will rarely be widely generalizable, but once a stable analysis approach has been identified, a well-designed notebook can be generalized into a pipeline that easily repeats that analysis using different input data and parameters. With this end in mind, design your notebook from the beginning to allow such future repurposing. Place key variable declarations, especially those that will be changed when doing a new analysis, at the top of the notebook rather than burying them somewhere in the middle. Perform preparatory steps, like data cleaning, directly in the notebook and avoid manual interventions.</p>
<p>Because notebooks’ interactivity make them vulnerable to accidental overwriting or deletion of critical steps by the user, if your analysis runs quickly, make a habit of regularly restarting your kernel and rerunning all cells to make sure you did not accidentally delete a step while cleaning your notebook (and if you did, retrieve the code for it from version control). Restarting your kernel and running all cells is also a good final test of results. To allow partial execution of complex analyses, break long notebooks into smaller notebooks that focus on one or a few analysis steps. Then, ensure that each notebook stores serialized versions of key intermediate results to disk for subsequent notebooks to use.</p>
<p>Once a notebook has been developed, it can be parameterized with a tool such as papermill (<ext-link ext-link-type="uri" xlink:href="https://github.com/nteract/papermill" xlink:type="simple">https://github.com/nteract/papermill</ext-link>). Such notebooks can be used not only interactively but also as command-line tools that can be executed automatically—a great boon for pipelines! Consider linking your analysis pipeline steps via a Makefile or similar tool that allows for complete noninteractive execution of the entire pipeline, either in full or partial steps. Such automation also supports code quality techniques like software testing; consider testing your workflows from end to end each time a change is committed by integrating your repository to a Continuous Integration system (for example, <ext-link ext-link-type="uri" xlink:href="https://travis-ci.org/" xlink:type="simple">https://travis-ci.org/</ext-link>). Last but not least, be aware that pipeline notebooks will almost certainly have a very different story (Rule 1) than the initial analyses that engendered them! Remember to remove any introduction, interpretation, or conclusion text that is not universally applicable to different inputs and results and instead replace it with guidance for the pipeline user on how to run and interpret its (potentially novel) results.</p>
</sec>
<sec id="sec009">
<title>Rule 8: Share and explain your data</title>
<p>Having access to a clearly annotated notebook is of little use to those wanting to reproduce or extend your results if the underlying data are locked away. Strive to make your data or a sample of your data publicly available along with the notebook. While sharing your data takes careful planning, notebooks make it easy to provide a description of your input data and upstream processing steps, which are essential for interpreting results.</p>
<p>Ideally, you will share your entire data set alongside your notebooks. We realize many data sets are too large or too sensitive to share this way. In these cases, consider breaking down large and complex data sets into tiers such that, even if the raw data are prohibitively large to include alongside your published notebooks or are constrained by privacy or other access issues, reproducibility and interpretability isn’t lost. You can host public copies of medium-sized, anonymized data in a variety of hosting services (for example, figshare [<ext-link ext-link-type="uri" xlink:href="https://figshare.com/" xlink:type="simple">https://figshare.com/</ext-link>], zenodo [<ext-link ext-link-type="uri" xlink:href="https://zenodo.org/" xlink:type="simple">https://zenodo.org/</ext-link>]), and include further processed data sets alongside the notebooks in the final repository. To uniquely and permanently identify data sets, these hosting services provide Digital Object Identifiers (dois). This tiered approach both provides public confidence and allows others to reproduce and reuse the latter stages of an analysis even without access to the full, raw data set.</p>
</sec>
<sec id="sec010">
<title>Rule 9: Design your notebooks to be read, run, and explored</title>
<p>If you have followed the previous rules, your notebooks should capture your entire process and be easy to read. But how will others access, run, and explore them? There are a number of ways you can support others’ reuse of your notebooks. First, store your notebooks in a public code repository with a clear README file and a liberal open source license (<ext-link ext-link-type="uri" xlink:href="https://opensource.org/licenses" xlink:type="simple">https://opensource.org/licenses</ext-link>) granting permission to reuse your code.</p>
<p>Read: Beyond granting permission to reuse your notebook, consider how you can leverage the unique structure of notebooks to support reading. At the very least, leave static HTML/PDF versions of all notebooks stored in the final version of the repository accompanying a publication. If, in 20 years, all other execution technology fails, these are likely to still provide a readable archival record, and with a full dependences list, future users are more likely to be able to recreate the compute environment. You can also use Nbviewer (<ext-link ext-link-type="uri" xlink:href="https://nbviewer.jupyter.org/" xlink:type="simple">https://nbviewer.jupyter.org/</ext-link>) to provide static views of your executed notebook online without needing to convert it to a PDF/HTML document first. GitHub uses this service to render any notebooks on their site, so pushing a notebook to GitHub is another good way to make static views easily available. In both cases, you can point collaborators to a URL where they can read through your notebook online.</p>
<p>Run: To support others running your notebooks, you can use Binder [<xref ref-type="bibr" rid="pcbi.1007007.ref016">16</xref>] to provide a zero-install environment to run your notebooks in the cloud (<ext-link ext-link-type="uri" xlink:href="https://mybinder.org/" xlink:type="simple">https://mybinder.org/</ext-link>). Binder enables community members to rerun your notebook online without needing to install Jupyter Notebook or Jupyter Lab on their own machine. More generally, you can create a portable containerized environment, for example, a Docker image (<ext-link ext-link-type="uri" xlink:href="https://docs.docker.com/" xlink:type="simple">https://docs.docker.com/</ext-link>), or create a dependency description file (see <xref ref-type="sec" rid="sec004">Rule 3</xref>) so future users of your notebook can more easily replicate your computing environment when rerunning your notebook.</p>
<p>Explore: Beyond simply replicating the analysis in your notebook, consider how you can design your notebook so future users can tweak and explore your analysis. Consider using ipywidgets (<ext-link ext-link-type="uri" xlink:href="https://ipywidgets.readthedocs.io/en/stable/" xlink:type="simple">https://ipywidgets.readthedocs.io/en/stable/</ext-link>) to enable future users to change parameters using graphical elements such as dropdowns and sliders rather than tweaking code. Beyond enabling future users to change parameters or insert their own data set, consider how they might want remix or reuse portions of your notebook (perhaps only the data cleaning or plotting steps) and use cell-structure and functions to make it easier to extract these sections (Rule 7).</p>
</sec>
<sec id="sec011">
<title>Rule 10: Advocate for open research</title>
<p>Clearly, the mere use of a computational notebook does not guarantee others will be able to read, run, or explore your analysis. If the convenience and interactivity of this technology has convinced you to adopt it, take the next step and become an advocate in your lab or workplace in promoting its effective use. Ask lab-mates or colleagues to try to run one of your notebooks and then listen when they explain any difficulties. Try to run their notebooks and let them know if you hit snags. Commit yourself to robust and reproducible analyses as key element of all your research group’s computational work, not a phase performed after an analysis is complete or an afterthought triggered by journal or reviewer demands.</p>
</sec>
<sec id="sec012">
<title>Annotated notebooks</title>
<p>To demonstrate the 10 rules, we have created a Git Repository with annotated example notebooks (<ext-link ext-link-type="uri" xlink:href="https://github.com/jupyter-guide/ten-rules-jupyter" xlink:type="simple">https://github.com/jupyter-guide/ten-rules-jupyter</ext-link>). Following Rule 9, read, run, and explore these notebooks. In addition, we have created a repository (<ext-link ext-link-type="uri" xlink:href="https://github.com/jupyter-guide/jupyter-guide" xlink:type="simple">https://github.com/jupyter-guide/jupyter-guide</ext-link>) to crowdsource more technical and in-depth tutorials and to keep up with the rapidly evolving Jupyter ecosystem. We encourage you to contribute and share your experiences and know-how following Rule 10.</p>
</sec>
<sec id="sec013" sec-type="conclusions">
<title>Conclusions</title>
<p>Robust and reproducible analyses lie at the heart of science, and several papers have already provided excellent general advice for how to perform and document computational science. However, the advent of computational notebooks presents new opportunities and challenges, both easing precise documentation of complex workflows, and complicating it by means of interactivity. We present 10 simple rules for writing and sharing analyses in Jupyter Notebooks, focusing on annotation of the analysis, organization of code, and ease of access and reuse. Informed by our experience, we hope they contribute to the ecosystem of individuals, labs, publishers, and organizations using notebooks to perform and share computational research.</p>
</sec>
</body>
<back>
<ack>
<p>This paper represents a summary of the workshop “Reproducible Research and Interactive Education—Application of Jupyter Notebooks” held at UC San Diego on April 5, 2018. We thank all participants who contributed ideas to this paper, including Tiago Leao, Nathan Mih, Shweta Purawat, Michael Reich, Britton Smith, Shuai Tang, and Guorong Xu.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pcbi.1007007.ref001"><label>1</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Barba</surname> <given-names>LA</given-names></name>. <article-title>The hard road to reproducibility</article-title>. <source>Science</source>. <year>2016</year>;<volume>354</volume>: <fpage>142</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1126/science.354.6308.142" xlink:type="simple">10.1126/science.354.6308.142</ext-link></comment> <object-id pub-id-type="pmid">27846503</object-id></mixed-citation></ref>
<ref id="pcbi.1007007.ref002"><label>2</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Peng</surname> <given-names>RD</given-names></name>. <article-title>Reproducible Research in Computational Science</article-title>. <source>Science</source>. <year>2011</year>;<volume>334</volume>: <fpage>1226</fpage>–<lpage>1227</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1126/science.1213847" xlink:type="simple">10.1126/science.1213847</ext-link></comment> <object-id pub-id-type="pmid">22144613</object-id></mixed-citation></ref>
<ref id="pcbi.1007007.ref003"><label>3</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Wilson</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Bryan</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Cranston</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Kitzes</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Nederbragt</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Teal</surname> <given-names>TK</given-names></name>. <article-title>Good enough practices in scientific computing</article-title>. <source>PLoS Comput Biol</source>. <year>2017</year>;<volume>13</volume>(<issue>6</issue>):<fpage>e1005510</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pcbi.1005510" xlink:type="simple">10.1371/journal.pcbi.1005510</ext-link></comment> <object-id pub-id-type="pmid">28640806</object-id></mixed-citation></ref>
<ref id="pcbi.1007007.ref004"><label>4</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Sandve</surname> <given-names>GK</given-names></name>, <name name-style="western"><surname>Nekrutenko</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Taylor</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Hovig</surname> <given-names>E</given-names></name>. <article-title>Ten simple rules for reproducible computational research</article-title>. <source>PLoS Comput Biol</source>. <year>2013</year>;<volume>9</volume>(<issue>10</issue>):<fpage>e1003285</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pcbi.1003285" xlink:type="simple">10.1371/journal.pcbi.1003285</ext-link></comment> <object-id pub-id-type="pmid">24204232</object-id></mixed-citation></ref>
<ref id="pcbi.1007007.ref005"><label>5</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Taschuk</surname> <given-names>M</given-names></name> and <name name-style="western"><surname>Wilson</surname> <given-names>G.</given-names></name> <article-title>Ten simple rules for making research software more robust</article-title>. <source>PLoS Comput. Biol</source>. <year>2017</year>;<volume>13</volume>(<issue>4</issue>):<fpage>e1005412</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pcbi.1005412" xlink:type="simple">10.1371/journal.pcbi.1005412</ext-link></comment> <object-id pub-id-type="pmid">28407023</object-id></mixed-citation></ref>
<ref id="pcbi.1007007.ref006"><label>6</label><mixed-citation publication-type="other" xlink:type="simple">Reproducible Research using Jupyter Notebooks. [Internet] [cited 4 Oct 2018]. Available from: <ext-link ext-link-type="uri" xlink:href="https://reproducible-science-curriculum.github.io/workshop-RR-Jupyter/" xlink:type="simple">https://reproducible-science-curriculum.github.io/workshop-RR-Jupyter/</ext-link>.</mixed-citation></ref>
<ref id="pcbi.1007007.ref007"><label>7</label><mixed-citation publication-type="other" xlink:type="simple">Pérez F, Granger BE. Computational Narratives as the Engine of Collaborative Data Science. 2015. [Internet] [cited 4 Oct 2018]. Available from: <ext-link ext-link-type="uri" xlink:href="https://blog.jupyter.org/project-jupyter-computational-narratives-as-the-engine-of-collaborative-data-science-2b5fb94c3c58" xlink:type="simple">https://blog.jupyter.org/project-jupyter-computational-narratives-as-the-engine-of-collaborative-data-science-2b5fb94c3c58</ext-link>.</mixed-citation></ref>
<ref id="pcbi.1007007.ref008"><label>8</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Kluyver</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Ragan-Kelley</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Pérez</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Granger</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Bussonnier</surname> <given-names>M</given-names></name>, <etal>et al</etal>. <chapter-title>Jupyter Notebooks—a publishing format for reproducible computational workflows</chapter-title>. In: <name name-style="western"><surname>Loizides</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Schmidt</surname> <given-names>B</given-names></name>, editors. <source>Positioning and Power in Academic Publishing: Players, Agents and Agendas</source>. <publisher-loc>Amsterdam</publisher-loc>: <publisher-name>IOS Press</publisher-name>; <year>2016</year>. p. <fpage>87</fpage>–<lpage>90</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.3233/978-1-61499-649-1-87" xlink:type="simple">10.3233/978-1-61499-649-1-87</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1007007.ref009"><label>9</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Knuth</surname> <given-names>DE</given-names></name>. <article-title>Literate programming</article-title>. <source>The Computer Journal</source>. <year>1984</year>;<volume>27</volume>(<issue>2</issue>):<fpage>97</fpage>–<lpage>111</lpage>.</mixed-citation></ref>
<ref id="pcbi.1007007.ref010"><label>10</label><mixed-citation publication-type="other" xlink:type="simple">Estimate of Public Jupyter Notebooks on GitHub. [Internet] [cited 4 Oct 2018]. Available from: <ext-link ext-link-type="uri" xlink:href="https://github.com/parente/nbestimate" xlink:type="simple">https://github.com/parente/nbestimate</ext-link>.</mixed-citation></ref>
<ref id="pcbi.1007007.ref011"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Rule A, Tabard A, Hollan JD. Exploration and Explanation in Computational Notebooks. CHI '18 Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems. New York: ACM; 2018. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1145/3173574.3173606" xlink:type="simple">10.1145/3173574.3173606</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1007007.ref012"><label>12</label><mixed-citation publication-type="other" xlink:type="simple">Grus, J. I Don’t Like Notebooks. JupyterCon. New York, NY. 2018. [Internet] [cited 3 Jan 2019]. Available from: <ext-link ext-link-type="uri" xlink:href="https://docs.google.com/presentation/d/1n2RlMdmv1p25Xy5thJUhkKGvjtV-dkAIsUXP-AL4ffI/edit#slide=id.g3d168d2fd3_0_255" xlink:type="simple">https://docs.google.com/presentation/d/1n2RlMdmv1p25Xy5thJUhkKGvjtV-dkAIsUXP-AL4ffI/edit#slide=id.g3d168d2fd3_0_255</ext-link></mixed-citation></ref>
<ref id="pcbi.1007007.ref013"><label>13</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Woodbridge</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Sanz</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Mietchen</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Mounce</surname> <given-names>R</given-names></name>. <article-title>Jupyter Notebooks and reproducible data science</article-title>. <year>2017</year>. [Internet] [cited 4 Oct 2018]. Available from: <ext-link ext-link-type="uri" xlink:href="https://markwoodbridge.com/2017/03/05/jupyter-reproducible-science.html" xlink:type="simple">https://markwoodbridge.com/2017/03/05/jupyter-reproducible-science.html</ext-link>.</mixed-citation></ref>
<ref id="pcbi.1007007.ref014"><label>14</label><mixed-citation publication-type="other" xlink:type="simple">Kery MB, Radensky M, Arya M, John BE, Myers BA. The Story in the Notebook: Exploratory Data Science using a Literate Programming Tool. CHI '18 Proceedings of the 2018 CHI Conference on Human Factors in Computing Systems. New York: ACM; 2018. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1145/3173574.3173748" xlink:type="simple">10.1145/3173574.3173748</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1007007.ref015"><label>15</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Perez-Riverol</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Gatto</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Wang</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Sachsenberg</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Uszkoreit</surname> <given-names>J</given-names></name>, <etal>et al</etal>. <article-title>Ten Simple Rules for Taking Advantage of Git and GitHub</article-title>. <source>PLoS Comput. Biol</source>. <year>2016</year>;<volume>12</volume>(<issue>7</issue>):<fpage>e1004947</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pcbi.1004947" xlink:type="simple">10.1371/journal.pcbi.1004947</ext-link></comment> <object-id pub-id-type="pmid">27415786</object-id></mixed-citation></ref>
<ref id="pcbi.1007007.ref016"><label>16</label><mixed-citation publication-type="other" xlink:type="simple">Project Jupyter, Bussonnier M, Forde J, Freeman J, Granger B, et al. Binder 2.0—Reproducible, interactive, shareable environments for science at scale. Proceedings of the 17th Python in Science Conference 2018. 2018. p. 113–120. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.25080/Majora-4af1f417-011" xlink:type="simple">10.25080/Majora-4af1f417-011</ext-link></comment></mixed-citation></ref>
</ref-list>
</back>
</article>