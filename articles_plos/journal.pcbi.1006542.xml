<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN" "http://jats.nlm.nih.gov/publishing/1.1d3/JATS-journalpublishing1.dtd">
<article article-type="research-article" dtd-version="1.1d3" xml:lang="en" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id>
<journal-title-group>
<journal-title>PLOS Computational Biology</journal-title>
</journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1006542</article-id>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-18-00972</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Education</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Computer networks</subject><subj-group><subject>Internet</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Computer applications</subject><subj-group><subject>Web-based applications</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Information technology</subject><subj-group><subject>Hypertext</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Data management</subject><subj-group><subject>Metadata</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Database and informatics methods</subject><subj-group><subject>Database searching</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Database and informatics methods</subject><subj-group><subject>Database searching</subject><subj-group><subject>FASTA searching</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social sciences</subject><subj-group><subject>Sociology</subject><subj-group><subject>Consortia</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social sciences</subject><subj-group><subject>Linguistics</subject><subj-group><subject>Linguistic morphology</subject></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>Eleven quick tips to build a usable REST API for life sciences</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-3392-3691</contrib-id>
<name name-style="western">
<surname>Tarkowska</surname>
<given-names>Aleksandra</given-names>
</name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0001-5662-1840</contrib-id>
<name name-style="western">
<surname>Carvalho-Silva</surname>
<given-names>Denise</given-names>
</name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<name name-style="western">
<surname>Cook</surname>
<given-names>Charles E.</given-names>
</name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0001-6905-7150</contrib-id>
<name name-style="western">
<surname>Turner</surname>
<given-names>Edd</given-names>
</name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0001-8626-2148</contrib-id>
<name name-style="western">
<surname>Finn</surname>
<given-names>Robert D.</given-names>
</name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
</contrib>
<contrib contrib-type="author" corresp="yes" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-8886-4772</contrib-id>
<name name-style="western">
<surname>Yates</surname>
<given-names>Andrew D.</given-names>
</name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
</contrib-group>
<aff id="aff001"><label>1</label> <addr-line>European Molecular Biology Laboratory, European Bioinformatics Institute (EMBL-EBI), Wellcome Genome Campus, Hinxton, Cambridge, United Kingdom</addr-line></aff>
<aff id="aff002"><label>2</label> <addr-line>Open Targets, Wellcome Genome Campus, Hinxton, Cambridge, United Kingdom</addr-line></aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>Ouellette</surname>
<given-names>Francis</given-names>
</name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1"><addr-line>Genome Quebec, CANADA</addr-line></aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>The authors have declared that no competing interests exist.</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">olat@ebi.ac.uk</email> (AT); <email xlink:type="simple">ayates@ebi.ac.uk</email> (AY)</corresp>
</author-notes>
<pub-date pub-type="epub">
<day>13</day>
<month>12</month>
<year>2018</year>
</pub-date>
<pub-date pub-type="collection">
<month>12</month>
<year>2018</year>
</pub-date>
<volume>14</volume>
<issue>12</issue>
<elocation-id>e1006542</elocation-id>
<permissions>
<copyright-year>2018</copyright-year>
<copyright-holder>Tarkowska et al</copyright-holder>
<license xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">
<license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pcbi.1006542"/>
<funding-group>
<funding-statement>AY acknowledges funding from the Wellcome Trust (WT108749/Z/15/Z) and the European Molecular Biology Laboratory (<ext-link ext-link-type="uri" xlink:href="https://www.embl.org" xlink:type="simple">https://www.embl.org</ext-link>). OT acknowledges funding from the Biotechnology and Biological Sciences Research Council (BB/N018354/1, <ext-link ext-link-type="uri" xlink:href="https://bbsrc.ukri.org/" xlink:type="simple">https://bbsrc.ukri.org/</ext-link>). RF, ET, DCS and CC acknowledge funding from the European Molecular Biology Laboratory (<ext-link ext-link-type="uri" xlink:href="https://www.embl.org" xlink:type="simple">https://www.embl.org</ext-link>). The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
</funding-group>
<counts>
<fig-count count="3"/>
<table-count count="0"/>
<page-count count="8"/>
</counts>
</article-meta>
</front>
<body>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<p>In recent years, technological advances have greatly expanded the range of data types generated by life sciences researchers. These span domains such as molecular structures, nucleotide and protein sequences, metabolomics, and chemogenomics, resulting in hundreds of public resources holding diverse data sets for reuse in multiple formats [<xref ref-type="bibr" rid="pcbi.1006542.ref001">1</xref>]. Most resources focus on a specific data type, yet their value for researchers is enhanced once cross-referenced and combined with expert annotation and knowledge. Cross-referencing has increasingly been achieved by implementing website application programming interfaces (web APIs), providing programming-language−agnostic methods to access online resources. Web APIs enable dynamic data exchange between resources, augment websites with additional data, and can provide access to large data sets. Web APIs also enhance adherence to FAIR data principles by making data Findable, Accessible, Interoperable, and Reusable [<xref ref-type="bibr" rid="pcbi.1006542.ref002">2</xref>], thus increasing the value of those resources.</p>
<p>Representational state transfer (REST) [<xref ref-type="bibr" rid="pcbi.1006542.ref003">3</xref>] is a popular method for providing interoperability between a client and server [<xref ref-type="bibr" rid="pcbi.1006542.ref004">4</xref>] using the hypertext transfer protocol (HTTP), the same building block as the world wide web, [<xref ref-type="bibr" rid="pcbi.1006542.ref005">5</xref>] and a common exchange format, e.g., JavaScript Object Notation (JSON) [<xref ref-type="bibr" rid="pcbi.1006542.ref006">6</xref>]. REST APIs are considered easier to develop than previous web-service standards, e.g., Simple Object Access Protocol (SOAP). However, REST specifies a set of requirements that any implementation of a REST API must address. Although well-known resources such as the World Wide Web Consortium (W3C) (<ext-link ext-link-type="uri" xlink:href="https://www.w3.org/" xlink:type="simple">https://www.w3.org</ext-link>) and the Internet Engineering Task Force (IETF) (<ext-link ext-link-type="uri" xlink:href="https://www.ietf.org/" xlink:type="simple">https://www.ietf.org/</ext-link>) provide guidance on how to implement such a service, they can be difficult to understand and may have limited documentation. We present here 11 quick tips for creating and maintaining REST web APIs that were developed while implementing various web APIs (<ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/services" xlink:type="simple">https://www.ebi.ac.uk/services</ext-link>) for European Molecular Biology Laboratory, European Bioinformatics Institute (EMBL-EBI)’s data resources.</p>
</sec>
<sec id="sec002">
<title>Guidelines</title>
<sec id="sec003">
<title>Tip 1. Reduce support costs by providing good documentation</title>
<p>Even the best-designed and most intuitive REST API will languish unused if there is no clear, comprehensive, and up-to-date documentation, preferably including real-world examples. REST API description languages (DLs) document APIs in human and machine-readable formats. A leading DL is the OpenAPI Specification (OAS; originally known as the Swagger Specification, <ext-link ext-link-type="uri" xlink:href="https://swagger.io/" xlink:type="simple">https://swagger.io/</ext-link>), a portable and open specification providing metadata for APIs based on the REST architecture. For example, the OAS is used to generate the interactive documentation of the Proteins API (<ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/proteins/api/doc/index.html" xlink:type="simple">https://www.ebi.ac.uk/proteins/api/doc/index.html</ext-link>). DLs are not a replacement for prose documentation, walk-throughs of your REST API, and worked examples with detailed request and response specification. DLs can be further enhanced for the life sciences by including references to controlled vocabularies for the returned data formats (e.g., EDAM ontology [<xref ref-type="bibr" rid="pcbi.1006542.ref007">7</xref>]) that will aid interoperability. Providing all four types of documentation will reduce your support costs.</p>
</sec>
<sec id="sec004">
<title>Tip 2. Design an API with stable, consistent, and clear URLs</title>
<p>An early first step in building a REST API is to determine the functionalities your web resource intends to provide. REST imposes that every resource should be uniquely addressable and accessed via unique resource locators (URLs) [<xref ref-type="bibr" rid="pcbi.1006542.ref008">8</xref>], referred to as endpoints. URL schemas that use nouns as labels (which operates with the HTTP verbs [covered in the next tip]) provides a transparent control of actions, for example, to remove a “study” the actions would be DELETE studies/{id}, rather than POST studies/{id}/delete.</p>
<p>Human-readable URLs following this schema style allow easy retrieval of a collection of resources or details of a single entity. The MGnify (formerly called EBI Metagenomics) REST API [<xref ref-type="bibr" rid="pcbi.1006542.ref009">9</xref>] base URL (<ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/metagenomics/api/" xlink:type="simple">https://www.ebi.ac.uk/metagenomics/api/</ext-link>) provides access to several resource collections—such as studies, samples, runs, biomes, and experiment-types—allowing retrieval of over 150,000 publicly available metagenomics and metatranscriptomics data sets, sampled from diverse environments. Endpoints that return multiple entities should provide parameters to help sort and filter returned data. Details about the resource, such as a study, can be retrieved by providing a unique identifier [<xref ref-type="bibr" rid="pcbi.1006542.ref010">10</xref>] assigned during the archiving process. For example, <ext-link ext-link-type="uri" xlink:href="https://www.ebi.ac.uk/metagenomics/api/latest/studies/PRJEB11419" xlink:type="simple">https://www.ebi.ac.uk/metagenomics/api/latest/studies/PRJEB11419</ext-link> provides access to The American Gut data sets (<ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1101/277970" xlink:type="simple">https://doi.org/10.1101/277970</ext-link>) and represents the largest human microbiome sample cohort to date. Developing a sensible URL scheme will ensure your REST API is easy to understand and use.</p>
</sec>
<sec id="sec005">
<title>Tip 3. Use standard HTTP headers to influence how clients will handle your content</title>
<p>A HTTP response from the server to the client is composed of two parts, the information about how the request was processed, including HTTP headers with a status-code, and the message body containing the data from the resource. HTTP headers represent the metadata of a response. Important client-side headers include Origin, used in cross-origin requests (see Tip 6); Accept, used to flag the type of format a client wishes to process (see Tip 5); and Accept-Encoding, used when a client can accept compressed data thereby reducing network traffic. Important server-side response headers include Content-Type, used to state the format of returned data; ETag, used to identify the specific version of the returned content; and Cache-Control, which flags how long a ‘GET’ result can be cached or not cached if using keywords such as No-Cache or No-Store. The latter of the two response headers helps a browser caching the data to reduce traffic between a client and a server.</p>
</sec>
<sec id="sec006">
<title>Tip 4. Use appropriate standardised data formats</title>
<p>REST APIs can return data in a number of formats, termed media types [<xref ref-type="bibr" rid="pcbi.1006542.ref011">11</xref>], through a process called content negotiation. The most commonly used media types and formats are:</p>
<list list-type="bullet">
<list-item><p>application/json (JSON): used to encode nested data structures across multiple languages and is the most prevalent and flexible format;</p></list-item>
<list-item><p>application/xml (extensible markup language [XML]): mark-up for nested data with mature tooling for processing;</p></list-item>
<list-item><p>text/csv (comma separated values—CSV): a two-dimensional matrix data encoding format;</p></list-item>
<list-item><p>application/octet-stream: used when representing any binary data stream;</p></list-item>
<list-item><p>text/x-fasta (FASTA): a biological sequence format [<xref ref-type="bibr" rid="pcbi.1006542.ref012">12</xref>].</p></list-item>
</list>
<p>Life science APIs may wish to support domain-specific formats to help enable tool integration. To begin, a client sends an Accept HTTP header [<xref ref-type="bibr" rid="pcbi.1006542.ref013">13</xref>] to the server shown on <xref ref-type="fig" rid="pcbi.1006542.g001">Fig 1</xref>, which responds with the best available data representation or an error. The server includes a Content-Type header specifying the format of the returned data.</p>
<fig id="pcbi.1006542.g001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006542.g001</object-id>
<label>Fig 1</label>
<caption>
<title>A command line example of the proteins API.</title>
<p>A Unix command line using the cURL tool to request information about proteins from the Proteins API in JSON format for human. API, application programming interface; JSON, JavaScript Object Notation.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006542.g001" xlink:type="simple"/>
</fig>
<p>REST APIs may offer alternative nonstandard ways to configure the format of the data retrieved using file extensions or via a URL parameter, e.g., <ext-link ext-link-type="uri" xlink:href="http://www.example.com/resource.json" xlink:type="simple">www.example.com/resource.json</ext-link> or <ext-link ext-link-type="uri" xlink:href="http://www.example.com/resource?format=json" xlink:type="simple">www.example.com/resource?format=json</ext-link>. These alternatives should be avoided if possible, and if not, they should be implemented as an alternative to using the Accept header rather than instead of using the Accept header.</p>
</sec>
<sec id="sec007">
<title>Tip 5. Use standard HTTP responses to influence how clients will handle your content</title>
<p>HTTP defines a set of verbs that can be applied to an endpoint to change the action performed. The most commonly used are ‘GET’ to transfer a current representation of the resource from an endpoint. ‘POST’, ‘PUT’, ‘PATCH’, and ‘DELETE’ (so-called unsafe methods) perform a processing operation, which could be destructive to the data. ‘GET’ must never be used for unsafe operations. ‘POST’ and ‘PATCH’ aside, all other operations are considered idempotent, which means multiple identical requests have the same effect on the state of the resource. For example, the HMMER REST API [<xref ref-type="bibr" rid="pcbi.1006542.ref014">14</xref>] allows a sequence search against a protein database, as shown in <xref ref-type="fig" rid="pcbi.1006542.g002">Fig 2</xref>.</p>
<fig id="pcbi.1006542.g002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006542.g002</object-id>
<label>Fig 2</label>
<caption>
<title>An example of search against HMMER REST API.</title>
<p>(A) Search is initialised by POSTing a JSON document with a protein sequence encoded in FASTA format. The client receives a UUID in response. (B) This is used in the second and third queries to retrieve results using GET. (C) The ticket is removed using DELETE. API, application programming interface; JSON, JavaScript Object Notation; REST, representational state transfer; UUID, universally unique identifier.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006542.g002" xlink:type="simple"/>
</fig>
<p>HTTP also provides five main classes of response status codes:</p>
<list list-type="bullet">
<list-item><p>1xx: Informational: request received, continuing process;</p></list-item>
<list-item><p>2xx: Success: the action was successfully received, understood, and accepted, e.g., 200;</p></list-item>
<list-item><p>3xx: Redirection: further action must be taken in order to complete the request, e.g., 302;</p></list-item>
<list-item><p>4xx: Client error: the request contains bad syntax or cannot be fulfilled, e.g., 404;</p></list-item>
<list-item><p>5xx: Server error: the server failed to fulfil an apparently valid request, e.g., 500.</p></list-item>
</list>
<p>A request to a REST API must return one status code to the client. Incorrect status code usage is misleading and prevents client applications from properly processing a response. For example, HTTP 500 must only be returned when there is a server-side error, not when a client has made a poorly formatted request, in which 400 may be more appropriate.</p>
</sec>
<sec id="sec008">
<title>Tip 6. Allow your API to be used on other websites by enabling cross-origin resource sharing</title>
<p>All web browsers implement the same-origin policy, a security measure allowing JavaScript code to make requests only between a server and clients of the same origin, which prevents malicious code from hijacking private data such as cookies. Two websites are said to be the same origin if they have an identical scheme (e.g., https), host (e.g., <ext-link ext-link-type="uri" xlink:href="http://www.ebi.ac.uk/" xlink:type="simple">www.ebi.ac.uk</ext-link>), and port (e.g., 443). Cross-origin resource sharing (CORS), part of the Fetch living standard (<ext-link ext-link-type="uri" xlink:href="https://fetch.spec.whatwg.org/" xlink:type="simple">https://fetch.spec.whatwg.org/</ext-link>), is a technique for circumventing the same origin policy, allowing JavaScript on a web page to consume a REST API served from known and trusted origins securely. The same origin policy is a barrier for open APIs intended to be widely reused.</p>
<p>CORS is automatically used by a browser when a cross-origin request is made. The browser will add an Origin header (whose value is the current origin) to a request. A server may respond with an Access-Control-Allow-Origin header indicating the allowed origin or a ‘*’, indicating that all origins are allowed. Returning the header ‘Access-Control-Allow-Origin: *’ on any ‘GET’, ‘HEAD’, or ‘POST’ request in many cases is sufficient to enable CORS. More complex cases include a preflight step (in which it is evaluated whether an operation can be safely executed) if the request involves a custom header, an HTTP method other than those previously mentioned, or a ‘POST’ request body that is not application/x-www-form-urlencoded, multipart/form-data, or text/plain. For example, a ‘POST’ request in which the posted body is a JSON document is subject to this additional step.</p>
<p>The permissive nature and potential security issues arising from using CORS means that enabling CORS is only recommended for public APIs. CORS plugins exist for all major web frameworks and more information is available from the CORS organisation website (<ext-link ext-link-type="uri" xlink:href="https://enable-cors.org/" xlink:type="simple">https://enable-cors.org</ext-link>). Additionally, the West-Life consortium has provided a web page that checks CORS compliance (<ext-link ext-link-type="uri" xlink:href="https://www.structuralbiology.eu/network/west-life/creating-web-services" xlink:type="simple">https://www.structuralbiology.eu/network/west-life/creating-web-services</ext-link>).</p>
</sec>
<sec id="sec009">
<title>Tip 7. Help clients use your API by giving them pregenerated links</title>
<p>A key concept underpinning the world wide web and HTML is the reconciliation of link navigation by clients. That is, a user clicking on a link requires no knowledge of the target URL; they need only to focus on which link to click. For example, an eCommerce website customer does not need to construct a URL to checkout their purchase. Instead, the website will provide a pregenerated link to click on. Similarly, REST APIs can return actions with a response and inform clients of actions available to them. Providing that these action keywords remain consistent with API changes, a server’s URL scheme is free to change. These APIs are known as being hypermedia driven, which enriches cross-referencing between related resources, a key feature for life science applications. A number of standards exist for creating hypermedia APIs, including JSON for Linked Data (JSON-LD), JSON API, JSON Hypertext Application Language (HAL), and Collection+JSON [<xref ref-type="bibr" rid="pcbi.1006542.ref015">15</xref>]. A common implementation of this is to paginate through a list of results. For example, the Ontology Lookup Service provides pagination to divide large responses into discrete, manageable chunks [<xref ref-type="bibr" rid="pcbi.1006542.ref016">16</xref>] using a section of the JSON document called _links listing the functions that can be performed. The URLs provided in the _links section could be external links to other REST APIs or webpages, thereby improving cross-referencing between resources. Where the chosen data format cannot encode these links—as seen, for example, in the Proteins REST API [<xref ref-type="bibr" rid="pcbi.1006542.ref017">17</xref>] when requesting UniParc data in FASTA format—then HTTP headers can be used as an alternative. Examples of both methods can be seen in <xref ref-type="fig" rid="pcbi.1006542.g003">Fig 3</xref>.</p>
<fig id="pcbi.1006542.g003" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1006542.g003</object-id>
<label>Fig 3</label>
<caption>
<title>Methods of encoding links into a REST API response.</title>
<p>(A) An example query to the Ontology Lookup Service for all available ontologies. The response lists links to access the first, previous, next, and last pages (including supplementary metadata) of the entire collection. (B) An example query to the Proteins REST API to retrieve all sequences in FASTA format. Links are encoded in the Link HTTP response header to be parsed by a client. API, application programming interface; HTTP, hypertext transfer protocol; REST, representational state transfer.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1006542.g003" xlink:type="simple"/>
</fig>
</sec>
<sec id="sec010">
<title>Tip 8. Authenticate via a standard method</title>
<p>Authentication is the process of identifying a client when the server is provided with a login and password (credentials) that match an authorised individual’s information within an authentication service. We encourage API developers to use common authentication methods such as OAuth 2.0 [<xref ref-type="bibr" rid="pcbi.1006542.ref018">18</xref>], JsonWebToken [<xref ref-type="bibr" rid="pcbi.1006542.ref019">19</xref>], and Basic Authentication [<xref ref-type="bibr" rid="pcbi.1006542.ref020">20</xref>] through an encrypted protocol such as an HTTPS (TLS 1.3) connection and to be aware of security issues that can arise. The Open Web Application Security Project (<ext-link ext-link-type="uri" xlink:href="https://www.owasp.org/" xlink:type="simple">https://www.owasp.org/</ext-link>) provides extensive information concerning these issues. In addition, you should be aware of the requirements of the General Data Protection Regulation (<ext-link ext-link-type="uri" xlink:href="https://www.eugdpr.org/" xlink:type="simple">https://www.eugdpr.org/</ext-link>) if you are processing personal data concerning European Union (EU) citizens.</p>
</sec>
<sec id="sec011">
<title>Tip 9. Keep your API running at all costs</title>
<p>A useful API is one that remains available at all times. Because APIs are intended for programmatic use, they must scale with demand and be cacheable to avoid reduced network traffic and avoid unintended denial of service attacks. This can be achieved by making your API stateless, i.e., allowing each request to be processed in isolation from others by removing the need for state to be stored on a server. A number of APIs also impose restrictions on access, commonly achieved by giving a quota of requests from a specific internet address over a period of time. APIs offering authentication can allow clients to identify themselves using an API token and have their limits increased or removed. As biological data sets grow in size, with increasingly larger user bases, it may be important to consider horizontal scaling, whereby more servers are added to a pool of servers hosting the API. Because this is primarily a technical solution, hidden behind a load balancer, it will not be discussed further, but software and system architectural design must be considered early during the development phase so an API can scale when under a heavy load. In this situation, a stateless API will be easier to scale than a stateful one. The key is to strike a balance between providing a reliable service and operating within your service constraints.</p>
</sec>
<sec id="sec012">
<title>Tip 10. Version your API and allow clients to migrate in response to your changes</title>
<p>Versioning is one of the most debated topics among REST API developers and users, with many choosing not to version. A REST API must preserve URL design and data formats to prevent ‘breaking’ client implementations. Resources evolve over time, and these changes necessitate versioning, as epitomised by Roy Fielding who said ‘Versioning an interface is just a “polite” way to kill deployed clients’ [<xref ref-type="bibr" rid="pcbi.1006542.ref021">21</xref>]. Two approaches are available within the REST guidelines. The first adds a version number in the URL path, making the version visible but affects the stability of future URLs to a resource or endpoint. We recommend the alternative approach, which is to pass a version in the HTTP request header. For example, sending a request to version 3 of the GitHub REST API, whose base URL is <ext-link ext-link-type="uri" xlink:href="https://api.github.com/" xlink:type="simple">https://api.github.com</ext-link>, requires an explicit version set by the header, ‘Accept: application/vnd.github.v3+json’. Extending media types with the vnd prefix (called a vendor-specific media type) is an accepted way to declare multiple schemas of data from a single endpoint, but this also increases API complexity. Providing unversioned shortcuts to the latest version will help drive adoption of an API. Ideally, API clients should be informed of any significant changes to the specification of the URL schema via the documentation and disseminated via social media networks maintained by the service providers.</p>
</sec>
<sec id="sec013">
<title>Tip 11. Check whether your web framework can help you out</title>
<p>Many of the tips discussed above have already been implemented by a number of REST-compatible frameworks, in a variety of programming languages, e.g., Spring (Java); Django or Flask (Python); Restify, hapiJS, Express, or Loopback (Node.js); and Catalyst or Mojolicious (Perl). If your REST API is built using one of these frameworks, then many of these tips will already be implemented or available through a plugin to simplify implementation.</p>
</sec>
</sec>
<sec id="sec014" sec-type="conclusions">
<title>Conclusion</title>
<p>The use of simple programmatic methods for making life sciences data available in real time allows researchers to contextualise and interpret their findings against diverse and heterogeneous open data sets, negating costly database replication. Our aim is that life sciences repositories, databases, and archives will provide data managed in adherence to FAIR principles. These 11 tips help us achieve this through API documentation, good API design, reuse of the HTTP standard, and the use of common data formats. REST APIs developed according to the above guidelines allow users to more easily find data, access the content in standards ways, and navigate across complex datasets contained in multiple data resources to address biological questions, thereby maximising knowledge and value of the underlying data. Above, we have presented the guidelines we consider most useful to follow when developing and maintaining REST APIs, and although it is aggregated in the context of the life sciences, we believe this information is of value to any domain.</p>
</sec>
</body>
<back>
<ack>
<p>The authors wish to acknowledge Awais Athar, Tony Burdett, Melanie Courtot, Leonardo Gonzales, Kenneth Haug, Jon Hickford, Rodrigo Lopez, Maria Martin, Saqib Mir, Pablo Moreno, Chris Morris, Anton Petrov, Dave Richardson, and Magali Ruffier, whose experiences have all contributed to this article. All authors have read and approved the final manuscript.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pcbi.1006542.ref001"><label>1</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Rigden</surname> <given-names>DJ</given-names></name>, <name name-style="western"><surname>Fernández</surname> <given-names>XM</given-names></name>. <article-title>The 2018 Nucleic Acids Research database issue and the online molecular biology database collection</article-title>. <source>Nucleic Acids Res</source>. <year>2018</year> <month>Jan</month> <day>4</day>;<volume>46</volume>(<issue>D1</issue>):<fpage>D1</fpage>–<lpage>7</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/nar/gkx1235" xlink:type="simple">10.1093/nar/gkx1235</ext-link></comment> <object-id pub-id-type="pmid">29316735</object-id></mixed-citation></ref>
<ref id="pcbi.1006542.ref002"><label>2</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Wilkinson</surname> <given-names>MD</given-names></name>, <name name-style="western"><surname>Dumontier</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Aalbersberg</surname> <given-names>IJ</given-names></name>, <name name-style="western"><surname>Appleton</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Axton</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Baak</surname> <given-names>A</given-names></name>, <etal>et al</etal>. <article-title>The FAIR Guiding Principles for scientific data management and stewardship</article-title>. <source>Scientific Data</source>. <year>2016</year> <month>Mar</month> <day>15</day>;<volume>3</volume>:<fpage>160018</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1038/sdata.2016.18" xlink:type="simple">10.1038/sdata.2016.18</ext-link></comment> <object-id pub-id-type="pmid">26978244</object-id></mixed-citation></ref>
<ref id="pcbi.1006542.ref003"><label>3</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Fielding</surname> <given-names>RT</given-names></name>. <source>Architectural Styles and the Design of Network-based Software Architectures</source>. <year>2000</year>. <fpage>324</fpage> p.</mixed-citation></ref>
<ref id="pcbi.1006542.ref004"><label>4</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Richardson</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Amundsen</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Ruby</surname> <given-names>S</given-names></name>. <source>RESTful Web APIs: Services for a Changing World</source>. “<publisher-name>O’Reilly Media, Inc</publisher-name>.”; <year>2013</year>. <fpage>406</fpage> p.</mixed-citation></ref>
<ref id="pcbi.1006542.ref005"><label>5</label><mixed-citation publication-type="other" xlink:type="simple">Leach PJ, Berners-Lee T, Mogul JC, Masinter L, Fielding RT, Gettys J. Hypertext Transfer Protocol—HTTP/1.1. 1999 Jun; Available from: <ext-link ext-link-type="uri" xlink:href="https://tools.ietf.org/html/rfc2616" xlink:type="simple">https://tools.ietf.org/html/rfc2616</ext-link>. [cited 2018 Jan 20].</mixed-citation></ref>
<ref id="pcbi.1006542.ref006"><label>6</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Jackson</surname> <given-names>W</given-names></name>. <chapter-title>The JSON Schema: JSON Structure Validation</chapter-title>. In: <source>JSON Quick Syntax Reference</source>. <year>2016</year>. p. <fpage>21</fpage>–<lpage>9</lpage>.</mixed-citation></ref>
<ref id="pcbi.1006542.ref007"><label>7</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Ison</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Kalas</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Jonassen</surname> <given-names>I</given-names></name>, <name name-style="western"><surname>Bolser</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Uludag</surname> <given-names>M</given-names></name> <etal>et al</etal>. (<year>2013</year>) <article-title>EDAM: an ontology of bioinformatics operations, types of data and identifiers, topics and formats</article-title>. <source>Bioinformatics</source> <volume>29</volume>: <fpage>1325</fpage>–<lpage>1332</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/bioinformatics/btt113" xlink:type="simple">10.1093/bioinformatics/btt113</ext-link></comment> <object-id pub-id-type="pmid">23479348</object-id></mixed-citation></ref>
<ref id="pcbi.1006542.ref008"><label>8</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Masinter</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Berners-Lee</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Fielding</surname> <given-names>RT</given-names></name>. <source>Uniform Resource Identifiers (URI): Generic Syntax</source>. <year>1998</year> <month>Aug</month>; Available from: <ext-link ext-link-type="uri" xlink:href="https://tools.ietf.org/html/rfc2396" xlink:type="simple">https://tools.ietf.org/html/rfc2396</ext-link>. [cited 2018 Jan 20].</mixed-citation></ref>
<ref id="pcbi.1006542.ref009"><label>9</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Mitchell</surname> <given-names>AL</given-names></name>, <name name-style="western"><surname>Scheremetjew</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Denise</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Potter</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Tarkowska</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Qureshi</surname> <given-names>M</given-names></name>, <etal>et al</etal>. <article-title>EBI Metagenomics in 2017: enriching the analysis of microbial communities, from sequence reads to assemblies</article-title>. <source>Nucleic Acids Res</source>. <year>2018</year> <month>Jan</month> <day>4</day>;<volume>46</volume>(<issue>D1</issue>):<fpage>D726</fpage>–<lpage>35</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/nar/gkx967" xlink:type="simple">10.1093/nar/gkx967</ext-link></comment> <object-id pub-id-type="pmid">29069476</object-id></mixed-citation></ref>
<ref id="pcbi.1006542.ref010"><label>10</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>McMurry</surname> <given-names>JA</given-names></name>, <name name-style="western"><surname>Juty</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Blomberg</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Burdett</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Conlin</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Conte</surname> <given-names>N</given-names></name>, <etal>et al</etal>. (<year>2017</year>) <article-title>Identifiers for the 21st century: How to design, provision, and reuse persistent identifiers to maximize utility and impact of life science data</article-title>. <source>PLoS Biol</source> <volume>15</volume>(<issue>6</issue>): <fpage>e2001414</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pbio.2001414" xlink:type="simple">10.1371/journal.pbio.2001414</ext-link></comment> <object-id pub-id-type="pmid">28662064</object-id></mixed-citation></ref>
<ref id="pcbi.1006542.ref011"><label>11</label><mixed-citation publication-type="other" xlink:type="simple">Media Types [Internet]. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.iana.org/assignments/media-types/media-types.xhtml" xlink:type="simple">http://www.iana.org/assignments/media-types/media-types.xhtml</ext-link>. [cited 2018 Jan 20].</mixed-citation></ref>
<ref id="pcbi.1006542.ref012"><label>12</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Lipman</surname> <given-names>DJ</given-names></name>, <name name-style="western"><surname>Pearson</surname> <given-names>WR</given-names></name>. <article-title>Rapid and sensitive protein similarity searches</article-title>. <source>Science</source>. <year>1985</year> <month>Mar</month> <day>22</day>;<volume>227</volume>(<issue>4693</issue>):<fpage>1435</fpage>–<lpage>41</lpage>. <object-id pub-id-type="pmid">2983426</object-id></mixed-citation></ref>
<ref id="pcbi.1006542.ref013"><label>13</label><mixed-citation publication-type="other" xlink:type="simple">Mutz AH, Holtman K. HTTP Remote Variant Selection Algorithm—RVSA/1.0. 1998 Mar; Available from: <ext-link ext-link-type="uri" xlink:href="https://tools.ietf.org/html/rfc2296" xlink:type="simple">https://tools.ietf.org/html/rfc2296</ext-link>. [cited 2018 Jan 20].</mixed-citation></ref>
<ref id="pcbi.1006542.ref014"><label>14</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Finn</surname> <given-names>RD</given-names></name>, <name name-style="western"><surname>Clements</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Arndt</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Miller</surname> <given-names>BL</given-names></name>, <name name-style="western"><surname>Wheeler</surname> <given-names>TJ</given-names></name>, <name name-style="western"><surname>Schreiber</surname> <given-names>F</given-names></name>, <etal>et al</etal>. <article-title>HMMER web server: 2015 update</article-title>. <source>Nucleic Acids Res</source>. <year>2015</year> <month>Jul</month> <day>1</day>;<volume>43</volume>(<issue>W1</issue>):<fpage>W30</fpage>–<lpage>8</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/nar/gkv397" xlink:type="simple">10.1093/nar/gkv397</ext-link></comment> <object-id pub-id-type="pmid">25943547</object-id></mixed-citation></ref>
<ref id="pcbi.1006542.ref015"><label>15</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Amundsen</surname> <given-names>Mike</given-names></name>. <source>Restful Web Clients: Enabling Reuse Through Hypermedia</source>. “<collab>O’Reilly Media, Inc</collab>.”; <year>2017</year>.</mixed-citation></ref>
<ref id="pcbi.1006542.ref016"><label>16</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Perez‐Riverol</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Ternent</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Koch</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Barsnes</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Vrousgou</surname> <given-names>O</given-names></name>, <name name-style="western"><surname>Jupp</surname> <given-names>S</given-names></name>, <etal>et al</etal>. <article-title>OLS Client and OLS Dialog: Open Source Tools to Annotate Public Omics Datasets</article-title>. <source>Proteomics</source> [Internet]. <year>2017</year> <month>Oct</month> <day>1</day>;<volume>17</volume>(<issue>19</issue>). Available from: <ext-link ext-link-type="uri" xlink:href="http://onlinelibrary.wiley.com/doi/10.1002/pmic.201700244/abstract" xlink:type="simple">http://onlinelibrary.wiley.com/doi/10.1002/pmic.201700244/abstract</ext-link>. [cited 2018 Feb 5].</mixed-citation></ref>
<ref id="pcbi.1006542.ref017"><label>17</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Nightingale</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Antunes</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Alpi</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Bursteinas</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Gonzales</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Liu</surname> <given-names>W</given-names></name>, <etal>et al</etal>. <article-title>The Proteins API: accessing key integrated protein and genome information</article-title>. <source>Nucleic Acids Res</source>. <year>2017</year> <month>Jul</month> <day>3</day>;<volume>45</volume>(<issue>W1</issue>):<fpage>W539</fpage>–<lpage>44</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1093/nar/gkx237" xlink:type="simple">10.1093/nar/gkx237</ext-link></comment> <object-id pub-id-type="pmid">28383659</object-id></mixed-citation></ref>
<ref id="pcbi.1006542.ref018"><label>18</label><mixed-citation publication-type="other" xlink:type="simple">Hardt D. The OAuth 2.0 Authorization Framework. 2012 Oct; Available from: <ext-link ext-link-type="uri" xlink:href="https://tools.ietf.org/html/rfc6749" xlink:type="simple">https://tools.ietf.org/html/rfc6749</ext-link>. [cited 2018 Jan 20].</mixed-citation></ref>
<ref id="pcbi.1006542.ref019"><label>19</label><mixed-citation publication-type="other" xlink:type="simple">Jones M, Bradley J, Sakimura N. JSON Web Token (JWT) [Internet]. 2015. Available from: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.17487/rfc7519" xlink:type="simple">http://dx.doi.org/10.17487/rfc7519</ext-link>. [cited 2018 May 31].</mixed-citation></ref>
<ref id="pcbi.1006542.ref020"><label>20</label><mixed-citation publication-type="other" xlink:type="simple">Leach PJ, Franks J, Luotonen A, Hallam-Baker PM, Lawrence SD, Hostetler JL, et al. HTTP Authentication: Basic and Digest Access Authentication. 1999 Jun; Available from: <ext-link ext-link-type="uri" xlink:href="https://tools.ietf.org/html/rfc2617" xlink:type="simple">https://tools.ietf.org/html/rfc2617</ext-link>. [cited 2018 Jan 20].</mixed-citation></ref>
<ref id="pcbi.1006542.ref021"><label>21</label><mixed-citation publication-type="other" xlink:type="simple">Evolve The Adobe Digital. EVOLVE’13 | Keynote | Roy Fielding [Internet]. 2013. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.slideshare.net/evolve_conference/201308-fielding-evolve/31" xlink:type="simple">http://www.slideshare.net/evolve_conference/201308-fielding-evolve/31</ext-link>. [cited 2018 Feb 1].</mixed-citation></ref>
</ref-list>
</back>
</article>