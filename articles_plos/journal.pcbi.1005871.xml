<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN" "http://jats.nlm.nih.gov/publishing/1.1d3/JATS-journalpublishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="editorial" dtd-version="1.1d3" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id>
<journal-title-group>
<journal-title>PLOS Computational Biology</journal-title>
</journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1005871</article-id>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-17-01424</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Editorial</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Programming languages</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Cognitive science</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Language</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Language</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Language</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Cognitive science</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Learning</subject><subj-group><subject>Human learning</subject></subj-group></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Learning</subject><subj-group><subject>Human learning</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Learning</subject><subj-group><subject>Human learning</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Learning and memory</subject><subj-group><subject>Learning</subject><subj-group><subject>Human learning</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social sciences</subject><subj-group><subject>Linguistics</subject><subj-group><subject>Language acquisition</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Science policy</subject><subj-group><subject>Science and technology workforce</subject><subj-group><subject>Careers in research</subject><subj-group><subject>Scientists</subject><subj-group><subject>Biologists</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>People and places</subject><subj-group><subject>Population groupings</subject><subj-group><subject>Professions</subject><subj-group><subject>Scientists</subject><subj-group><subject>Biologists</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Cognitive science</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Learning</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Learning</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Learning</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Learning and memory</subject><subj-group><subject>Learning</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Data visualization</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Behavior</subject><subj-group><subject>Habits</subject></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>Ten simple rules for biologists learning to program</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-2890-5445</contrib-id>
<name name-style="western">
<surname>Carey</surname>
<given-names>Maureen A.</given-names>
</name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
</contrib>
<contrib contrib-type="author" corresp="yes" xlink:type="simple">
<name name-style="western">
<surname>Papin</surname>
<given-names>Jason A.</given-names>
</name>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
</contrib-group>
<aff id="aff001"><label>1</label> <addr-line>Department of Microbiology, Immunology, and Cancer Biology, University of Virginia School of Medicine, Charlottesville, Virginia, United States of America</addr-line></aff>
<aff id="aff002"><label>2</label> <addr-line>Department of Biomedical Engineering, University of Virginia, Charlottesville, Virginia, United States of America</addr-line></aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>Markel</surname>
<given-names>Scott</given-names>
</name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1"><addr-line>Dassault Systemes BIOVIA, UNITED STATES</addr-line></aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>The authors have declared that no competing interests exist.</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">papin@virginia.edu</email></corresp>
<fn fn-type="other">
<p>Jason A. Papin is co-Editor-in-Chief of <italic>PLOS Computational Biology</italic>.</p></fn>
</author-notes>
<pub-date pub-type="epub">
<day>4</day>
<month>1</month>
<year>2018</year>
</pub-date>
<pub-date pub-type="collection">
<month>1</month>
<year>2018</year>
</pub-date>
<volume>14</volume>
<issue>1</issue>
<elocation-id>e1005871</elocation-id>
<permissions>
<copyright-year>2018</copyright-year>
<copyright-holder>Carey, Papin</copyright-holder>
<license xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">
<license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pcbi.1005871"/>
<funding-group>
<funding-statement>The authors received no specific funding for this work.</funding-statement>
</funding-group>
<counts>
<fig-count count="6"/>
<table-count count="1"/>
<page-count count="11"/>
</counts>
</article-meta>
</front>
<body>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<p>As big data and multi-omics analyses are becoming mainstream, computational proficiency and literacy are essential skills in a biologist’s tool kit. All “omics” studies require computational biology: the implementation of analyses requires programming skills, while experimental design and interpretation require a solid understanding of the analytical approach. While academic cores, commercial services, and collaborations can aid in the implementation of analyses, the computational literacy required to design and interpret omics studies cannot be replaced or supplemented. However, many biologists are only trained in experimental techniques. We write these 10 simple rules for traditionally trained biologists, particularly graduate students interested in acquiring a computational skill set.</p>
</sec>
<sec id="sec002">
<title>Rule 1: Begin with the end in mind</title>
<p>When picking your first language, focus on your goal. Do you want to become a programmer? Do you want to design bioinformatic tools? Do you want to implement tools? Do you want to just get these data analyzed already? Pick an approach and language that fits your long- and short-term goals.</p>
<p>Languages vary in intent and usage. Each language and package was created to solve a particular problem, so there is no universal “best” language (<xref ref-type="fig" rid="pcbi.1005871.g001">Fig 1</xref>). Pick the right tool for the job by choosing a language that is well suited for the biological questions you want to ask. If many people in your field use a language, it likely works well for the types of problems you will encounter. If people in your field use a variety of languages, you have options. To evaluate ease of use, consider how much community support a language has and how many resources that community has created, such as prevalence of user development, package support (documentation and tutorials), and the language’s “presence” on help pages. Practically, languages vary in cost for academic and commercial use. Free languages are more amenable to open source work (i.e., sharing your analyses or packages). See <xref ref-type="table" rid="pcbi.1005871.t001">Table 1</xref> for a brief discussion of several programming languages, their key features, and where to learn more.</p>
<fig id="pcbi.1005871.g001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005871.g001</object-id>
<label>Fig 1</label>
<caption>
<title>The “one tool to rule them all” (or: how programming languages do not work).</title>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005871.g001" xlink:type="simple"/>
</fig>
<table-wrap id="pcbi.1005871.t001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005871.t001</object-id>
<label>Table 1</label> <caption><title>A noninclusive discussion of programming languages.</title> <p>A <bold>shell</bold> is a command line (i.e., programming) interface to an operating system, like <bold>Unix</bold> operating systems. <bold>Low-level</bold> programming languages deal with a computer’s hardware. The process of moving from the literal processor instructions toward human-readable applications is called “abstraction.” Low-level languages require little abstraction. <bold>Interpreted</bold> languages are quicker to test (e.g., to run a few lines of code); this facilitates learning through trial and error. Interpreted languages tend to be more human readable. <bold>Compiled</bold> languages are powerful because they are often more efficient and can be used for low-level tasks. However, the distinction between interpreted and compiled languages is not always rigid. All languages presented below are free unless noted otherwise. The Wikipedia page on programming languages provides a great overview and comparison of languages.</p></caption>
<alternatives>
<graphic id="pcbi.1005871.t001g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005871.t001" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left">Language</th>
<th align="left">Key features</th>
<th align="left">Documentation</th>
<th align="left">Sample tutorials</th>
<th align="left">Community groups</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><bold>Bash</bold></td>
<td align="left">• Most common Unix shell<break/>• Practical for execution of scripts written in all other languages<break/>• Versatile<break/>• Easy to delete files or make other drastic changes<break/>• Weaknesses include executing math and limited data structures<break/>• Default for macOS and most Linux distributions</td>
<td align="left">• <ext-link ext-link-type="uri" xlink:href="http://gnu.org/software/bash/manual/" xlink:type="simple">gnu.org/software/bash/manual/</ext-link><break/>• On macOS’s terminal, type “man &lt;command&gt;” to get the manual for any command (and “q” to exit manual page)</td>
<td align="left">• The Linux Documentation Project’s Beginner’s guide: <ext-link ext-link-type="uri" xlink:href="http://tldp.org/LDP/Bash-Beginners-Guide/html/" xlink:type="simple">tldp.org/LDP/Bash-Beginners-Guide/html/</ext-link><break/>• Ubuntu’s documentation: <ext-link ext-link-type="uri" xlink:href="http://help.ubuntu.com/community/Beginners/BashScripting" xlink:type="simple">help.ubuntu.com/community/Beginners/BashScripting</ext-link><break/>• Azet’s GitHub page: <ext-link ext-link-type="uri" xlink:href="http://github.com/azet/community_bash_style_guide" xlink:type="simple">github.com/azet/community_bash_style_guide</ext-link></td>
<td align="left">• Google Plus: <ext-link ext-link-type="uri" xlink:href="http://plus.google.com/communities/110832059019676429606" xlink:type="simple">plus.google.com/communities/110832059019676429606</ext-link><break/>• GitHub community resources page: <ext-link ext-link-type="uri" xlink:href="http://github.com/awesome-lists/awesome-bash" xlink:type="simple">github.com/awesome-lists/awesome-bash</ext-link></td>
</tr>
<tr>
<td align="left"><bold>Python</bold></td>
<td align="left">• General purpose language<break/>• Considered easy to learn due to readability<break/>• Flexible syntax considered both a strength and weakness<break/>• Interpreted language</td>
<td align="left">• <ext-link ext-link-type="uri" xlink:href="http://docs.python.org" xlink:type="simple">docs.python.org</ext-link></td>
<td align="left">• Google’s Python class: <ext-link ext-link-type="uri" xlink:href="http://developers.google.com/edu/python/" xlink:type="simple">developers.google.com/edu/python/</ext-link><break/>• The Hitchhiker’s Guide to Python: <ext-link ext-link-type="uri" xlink:href="http://docs.python-guide.org/" xlink:type="simple">docs.python-guide.org/</ext-link></td>
<td align="left">• Python Users Group: <ext-link ext-link-type="uri" xlink:href="http://wiki.python.org/moin/LocalUserGroups" xlink:type="simple">wiki.python.org/moin/LocalUserGroups</ext-link><break/>• Python Special Interest Groups: <ext-link ext-link-type="uri" xlink:href="http://python.org/community/sigs/" xlink:type="simple">python.org/community/sigs/</ext-link></td>
</tr>
<tr>
<td align="left"><bold>R</bold></td>
<td align="left">• Community involvement<break/>• Application-focused development<break/>• Easy to learn by coupling basic programming and applications<break/>• Well-developed visualization<break/>• Variable package quality<break/>• “Tidy data” community<break/>• Interpreted language</td>
<td align="left">• <ext-link ext-link-type="uri" xlink:href="http://rdocumentation.org" xlink:type="simple">rdocumentation.org</ext-link><break/>• <ext-link ext-link-type="uri" xlink:href="http://r-project.org" xlink:type="simple">r-project.org</ext-link><break/>• <ext-link ext-link-type="uri" xlink:href="http://cran.r-project.org" xlink:type="simple">cran.r-project.org</ext-link></td>
<td align="left">• R for cats: <ext-link ext-link-type="uri" xlink:href="http://rforcats.net" xlink:type="simple">rforcats.net</ext-link><break/>• Books by Hadley Wickham: <ext-link ext-link-type="uri" xlink:href="http://hadley.nz" xlink:type="simple">hadley.nz</ext-link><break/>• R Tutorial’s introduction: <ext-link ext-link-type="uri" xlink:href="http://r-tutor.com/r-introduction" xlink:type="simple">r-tutor.com/r-introduction</ext-link><break/>• Cyclismo’s R Tutorial: <ext-link ext-link-type="uri" xlink:href="http://cyclismo.org/tutorial/R/" xlink:type="simple">cyclismo.org/tutorial/R/</ext-link></td>
<td align="left">• R-Ladies: <ext-link ext-link-type="uri" xlink:href="http://rladies.org" xlink:type="simple">rladies.org</ext-link><break/>• R Users Group: many</td>
</tr>
<tr>
<td align="left"><bold>SAS</bold></td>
<td align="left">• Statistical computing<break/>• High-quality development of statistical functions by commercial and academic developers<break/>• Domain-specific usage<break/>• Free for students only<break/>• Typically a compiled language</td>
<td align="left">• <ext-link ext-link-type="uri" xlink:href="http://support.sas.com" xlink:type="simple">support.sas.com</ext-link></td>
<td align="left">• Boston University’s SAS Training for Statistics: <ext-link ext-link-type="uri" xlink:href="http://bu.edu/stat/bu-student-chapter-of-the-asa/sas-training/" xlink:type="simple">bu.edu/stat/bu-student-chapter-of-the-asa/sas-training/</ext-link></td>
<td align="left">• SAS User Groups: <ext-link ext-link-type="uri" xlink:href="http://sas.com/en_us/connect/user-groups.html" xlink:type="simple">sas.com/en_us/connect/user-groups.html</ext-link></td>
</tr>
<tr>
<td align="left"><bold>MATLAB</bold></td>
<td align="left">• Well-developed applications in engineering<break/>• Maintained professionally<break/>• Interpreted language<break/>• Discounted academic license</td>
<td align="left">• <ext-link ext-link-type="uri" xlink:href="http://mathworks.com/help/matlab" xlink:type="simple">mathworks.com/help/matlab</ext-link></td>
<td align="left">• Cyclismo’s MATLAB Tutorial: <ext-link ext-link-type="uri" xlink:href="http://cyclismo.org/tutorial/matlab/" xlink:type="simple">cyclismo.org/tutorial/matlab/</ext-link><break/>• For purchase courses offered at: <ext-link ext-link-type="uri" xlink:href="http://matlabacademy.mathworks.com" xlink:type="simple">matlabacademy.mathworks.com</ext-link></td>
<td align="left">• MATLAB Central: <ext-link ext-link-type="uri" xlink:href="http://mathworks.com/matlabcentral/" xlink:type="simple">mathworks.com/matlabcentral/</ext-link></td>
</tr>
<tr>
<td align="left"><bold>Perl</bold></td>
<td align="left">• General purpose language<break/>• Handles text well<break/>• Waning community involvement<break/>• Syntax modelled after human language<break/>• Interpreted language</td>
<td align="left">• <ext-link ext-link-type="uri" xlink:href="http://perl.org" xlink:type="simple">perl.org</ext-link><break/>• <ext-link ext-link-type="uri" xlink:href="http://cpan.org" xlink:type="simple">cpan.org</ext-link></td>
<td align="left">• Beginning Perl: <ext-link ext-link-type="uri" xlink:href="http://perl.org/books/beginning-perl/" xlink:type="simple">perl.org/books/beginning-perl/</ext-link><break/>• Perl maven’s tutorial: <ext-link ext-link-type="uri" xlink:href="http://perlmaven.com" xlink:type="simple">perlmaven.com</ext-link><break/>• Perl::Learn: <ext-link ext-link-type="uri" xlink:href="http://learn.perl.org" xlink:type="simple">learn.perl.org</ext-link></td>
<td align="left">• Perl Mongers: <ext-link ext-link-type="uri" xlink:href="http://pm.org" xlink:type="simple">pm.org</ext-link><break/>• Perl Monks: <ext-link ext-link-type="uri" xlink:href="http://perlmonks.org" xlink:type="simple">perlmonks.org</ext-link></td>
</tr>
<tr>
<td align="left"><bold>Fortran</bold></td>
<td align="left">• Numeric computation<break/>• Fast<break/>• Often used for high-performance computing<break/>• Limited development<break/>• Compiled language</td>
<td align="left">• <ext-link ext-link-type="uri" xlink:href="http://fortranwiki.org" xlink:type="simple">fortranwiki.org</ext-link></td>
<td align="left">• many at Fortran wiki: <ext-link ext-link-type="uri" xlink:href="http://fortranwiki.org/fortran/show/Tutorials" xlink:type="simple">fortranwiki.org/fortran/show/Tutorials</ext-link></td>
<td align="left">• Fortran Friends: <ext-link ext-link-type="uri" xlink:href="http://fortran.orpheusweb.co.uk" xlink:type="simple">fortran.orpheusweb.co.uk</ext-link></td>
</tr>
<tr>
<td align="left"><bold>C/C++</bold></td>
<td align="left">• Low-level language<break/>• Powerful, used for source code of many other languages<break/>• Challenging to learn as it requires explicit syntax<break/>• Explicit syntax enforces good programming habits<break/>• Compiled language</td>
<td align="left">• <ext-link ext-link-type="uri" xlink:href="http://devdocs.io/c" xlink:type="simple">devdocs.io/c</ext-link><break/>• <ext-link ext-link-type="uri" xlink:href="http://cppreference.com" xlink:type="simple">cppreference.com</ext-link></td>
<td align="left">• C programming’s tutorial: <ext-link ext-link-type="uri" xlink:href="http://cprogramming.com/tutorial/" xlink:type="simple">cprogramming.com/tutorial/</ext-link><break/>• Learn-C’s web-based tutorial: <ext-link ext-link-type="uri" xlink:href="http://learn-c.org" xlink:type="simple">learn-c.org</ext-link></td>
<td align="left">• Standard C++ Foundation: <ext-link ext-link-type="uri" xlink:href="http://isocpp.org" xlink:type="simple">isocpp.org</ext-link><break/>• C/C++ Users Group (CUG): <ext-link ext-link-type="uri" xlink:href="http://hal9k.com/cug" xlink:type="simple">hal9k.com/cug</ext-link></td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
</sec>
<sec id="sec003">
<title>Rule 2: Baby steps are steps</title>
<p>Once you’ve begun, focus on one task at a time and apply your critical thinking and problem solving skills. This requires breaking a problem down into steps. Analyzing omics data may sound challenging, but the individual steps do not: e.g., read your data, decide how to interpret missing values, scale as needed, identify comparison conditions, divide to calculate fold change, calculate significance, correct for multiple testing. Break a large problem into modular tasks and implement one task at a time. Iteratively edit for efficiency, flow, and succinctness. Mistakes will happen. That’s ok; what matters is that you find, correct, and learn from them.</p>
</sec>
<sec id="sec004">
<title>Rule 3: Immersion is the best learning tool</title>
<p>Don’t stitch together an analysis by switching between or among languages and/or point and click environments (Excel [Microsoft; <ext-link ext-link-type="uri" xlink:href="https://www.microsoft.com/en-us/" xlink:type="simple">https://www.microsoft.com/en-us/</ext-link>], etc.). While learning, if a job can be done in one language or environment, do it all there. For example, importing a spreadsheet of data (like you would view in Excel) is not necessarily straightforward; Excel automatically determines how to read text, but the method may differ from conventions in other programming languages. If the import process “misreads” your data (e.g., blank cells are not read as blank or “NA,” numbers are in quotes indicating that they are read as text, or column names are not maintained), it can be tempting to return to Excel to fix these with search-and-replace strategies. However, these problems can be fixed by correctly reading the data and by understanding the language’s data structures. Just like a spoken language [<xref ref-type="bibr" rid="pcbi.1005871.ref001">1</xref>, <xref ref-type="bibr" rid="pcbi.1005871.ref002">2</xref>], immersion is the best learning tool [<xref ref-type="bibr" rid="pcbi.1005871.ref003">3</xref>, <xref ref-type="bibr" rid="pcbi.1005871.ref004">4</xref>]. In addition to slowing the learning curve, transferring across programs induces error. See References [<xref ref-type="bibr" rid="pcbi.1005871.ref005">5</xref>–<xref ref-type="bibr" rid="pcbi.1005871.ref007">7</xref>] for additional Excel or word processing–induced errors.</p>
<p>Eventually, you may identify tasks that are not well suited to the language you use. At that point, it may be helpful to pick up another language in order to use the right tool for the job (see <xref ref-type="sec" rid="sec002">Rule 1</xref>). In fact, understanding one language will make it easier to learn a second. Until then, however, focus on immersion to learn.</p>
</sec>
<sec id="sec005">
<title>Rule 4: Phone a friend</title>
<p>There are numerous online resources: tutorials, documentation, and sites intended for community Q and A (StackOverflow, StackExchange, Biostars, etc.), but nothing replaces a friend or colleague’s help. Find a community of programmers, ranging from beginning to experienced users, to ask for help. You may want to look for both technical support (i.e., a group centered around a language) and support regarding a particular scientific application (e.g., a group centered around omics analyses). Many universities have scientific computing groups, housed in the library or information technology (IT) department; these groups can be your starting point. If your lab or university does not have a community of programmers, seek them out virtually or locally. Coursera courses, for example, have comment boards for students to answer each other’s questions and learn from their peers. Organizations like Software and Data Carpentry or language user groups have mailing lists to connect members. Many cities have events organized by language-specific user groups or interest groups focused on big data, machine learning, or data visualization. These can be found through <ext-link ext-link-type="uri" xlink:href="http://meetup.com" xlink:type="simple">meetup.com</ext-link>, Google groups, or through a user group’s website; some are included in <xref ref-type="table" rid="pcbi.1005871.t001">Table 1</xref>.</p>
<p>Once you find a community, ask for help. At the beginning stages, in-person help to deconstruct or interpret an online answer is invaluable. Additionally, ask a friend for code. You wouldn’t write a paper without first reading a lot of papers or begin a new project without shadowing a few experimenters. First, read their code. Implement and interpret, trying to understand each line. Return to discuss your questions. Once you begin writing, ask for edits.</p>
</sec>
<sec id="sec006">
<title>Rule 5: Learn how to ask questions</title>
<p>There’s an answer to almost anything online, but you have to know what to ask to get help. In order to know what to ask, you have to understand the problem. Start by interpreting an error message. Watch for generic errors and learn from them. Identify which component of your error message indicates what the issue is and which component indicates where the issue is (Figs <xref ref-type="fig" rid="pcbi.1005871.g002">2</xref>–<xref ref-type="fig" rid="pcbi.1005871.g005">5</xref>). Understanding the problem is essential; this process is called “debugging.” Without truly understanding the problem, any “solution” will ultimately propagate and escalate the mistake, making harder-to-interpret errors down the road. Once you understand the problem, look for answers. Looking for answers requires effective googling. Learn the vocabulary (and meta-vocabulary) of the language and its users. Once you understand the problem and have identified that there is no obvious (and publicly available) solution, ask for answers in programming communities (see <xref ref-type="sec" rid="sec005">Rule 4</xref> and <xref ref-type="table" rid="pcbi.1005871.t001">Table 1</xref>). When asking, paraphrase the fundamental problem. Include error messages and enough information to reproduce the problem (include packages, versions, data or sample data, code, etc.). Present a brief summary of what was done, what was intended, how you interpret the problem, what troubleshooting steps were already taken, and whether you have searched other posts for the answer.</p>
<fig id="pcbi.1005871.g002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005871.g002</object-id>
<label>Fig 2</label>
<caption>
<title>Anatomy of an error message, Part 1 (or: How to write more than one line of code).</title>
<p>Here we show an example of the debugging process in R using the RStudio environment, with the goal of concatenating two words.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005871.g002" xlink:type="simple"/>
</fig>
<fig id="pcbi.1005871.g003" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005871.g003</object-id>
<label>Fig 3</label>
<caption>
<title>Anatomy of an error message, Part 2 (or: Just because it works, doesn’t mean it’s right).</title>
<p>Here we provide more examples of the debugging process. Examples shown in Figs <xref ref-type="fig" rid="pcbi.1005871.g003">3</xref>–<xref ref-type="fig" rid="pcbi.1005871.g005">5</xref> are conducted in Python using a Jupyter notebook. Environments like RStudio (in <xref ref-type="fig" rid="pcbi.1005871.g002">Fig 2</xref>) and Jupyter notebooks are two examples of integrated development environments; these environments offer additional support, including built-in debugging tools. First, we show an error that does not induce an error message, but the user must debug nonetheless.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005871.g003" xlink:type="simple"/>
</fig>
<fig id="pcbi.1005871.g004" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005871.g004</object-id>
<label>Fig 4</label>
<caption>
<title>Anatomy of an error message, Part 3 (or: Trace your way back to the problem).</title>
<p>Here we show an explicit error message.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005871.g004" xlink:type="simple"/>
</fig>
<fig id="pcbi.1005871.g005" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005871.g005</object-id>
<label>Fig 5</label>
<caption>
<title>Anatomy of an error message, Part 4 (or: Debugging a solution).</title>
<p>Lastly, we show how to debug a solution to understand a line of code found on the internet.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005871.g005" xlink:type="simple"/>
</fig>
<p>See the following website for suggestions: <ext-link ext-link-type="uri" xlink:href="http://codereview.stackexchange.com/help/how-to-ask" xlink:type="simple">http://codereview.stackexchange.com/help/how-to-ask</ext-link> and [<xref ref-type="bibr" rid="pcbi.1005871.ref008">8</xref>]. End with a “thank you” and wait for the help to arrive.</p>
</sec>
<sec id="sec007">
<title>Rule 6: Don’t reinvent the wheel</title>
<p>Rule 6 can also be found in “Ten Simple Rules for the Open Development of Scientific Software” [<xref ref-type="bibr" rid="pcbi.1005871.ref009">9</xref>], “Ten Simple Rules for Developing Public Biological Databases” [<xref ref-type="bibr" rid="pcbi.1005871.ref010">10</xref>], “Ten Simple Rules for Cultivating Open Science and Collaborative R&amp;D” [<xref ref-type="bibr" rid="pcbi.1005871.ref011">11</xref>], and “Ten Simple Rules To Combine Teaching and Research” [<xref ref-type="bibr" rid="pcbi.1005871.ref012">12</xref>]. Use all resources available to you, including online tutorials, examples in the language’s documentation, published code, cool snippets of code your labmate shared, and, yes, your own work. Read widely to identify these resources. Copy-and-paste is your friend. Provide credit if appropriate (i.e., comment “adapted from so-n-so’s X script”) or necessary (e.g., read through details on software licenses). Document your scripts by commenting in notes to yourself so that you can use old code as a template for future work. These comments will help you remember what each line of code intends to do, accelerating your ability to find mistakes.</p>
</sec>
<sec id="sec008">
<title>Rule 7: Develop good habits early on</title>
<p>Computational research is research, so use your best practices. This includes maintaining a computational lab notebook and documenting your code. A computational lab notebook is by definition a lab notebook: your lab notebook includes protocols, so your computational lab notebook should include protocols, too. Computational protocols are scripts, and these should include the code itself and how to access everything needed to implement the code. Include input (raw data) and output (results), too. Figures and interpretation can be included if that’s how you organize your lab notebook. Develop computational “place habits” (file-saving strategies). It is easier to organize one drawer than it is to organize a whole lab, so start as soon as you begin to learn to program. If you can find that experiment you did on June 12, 2011—its protocol and results—in under five minutes, you should be able to find that figure you generated for lab meeting three weeks ago, complete with code and data, in under five minutes as well. This requires good version control or documentation of your work. Like with protocols, each time you run a script, you should note any modifications that are made. Document all changes in experimental and computational protocols. These habits will make you more efficient by enhancing your work’s reproducibility. For specific advice, see “Ten Simple Rules for a Computational Biologist’s Laboratory Notebook” [<xref ref-type="bibr" rid="pcbi.1005871.ref013">13</xref>], “Ten Simple Rules for Reproducible Computational Research” [<xref ref-type="bibr" rid="pcbi.1005871.ref014">14</xref>], and “Ten Simple Rules for Taking Advantage of Git and GitHub” [<xref ref-type="bibr" rid="pcbi.1005871.ref015">15</xref>].</p>
</sec>
<sec id="sec009">
<title>Rule 8: Practice makes perfect</title>
<p>Use toy datasets to practice a problem or analysis. Biological data get big, fast. It’s hard to find the computational needle-in-a-haystack, so set yourself up to succeed by practicing in controlled environments with simpler examples. Generate small toy datasets that use the same structure as your data. Make the toy data simple enough to predict how the numbers, text, etc., should react in your analysis. Test to ensure they do react as expected. This will help you understand what is being done in each step and troubleshoot errors, preparing you to scale up to large, unpredictable datasets. Use these datasets to test your approach, your implementation, and your interpretation. Toy datasets are your negative control, allowing you to differentiate between negative results and simulation failure.</p>
</sec>
<sec id="sec010">
<title>Rule 9: Teach yourself</title>
<p>How would you teach you if you were another person? You would teach with a little more patience and a bit more empathy than you are practicing now. You are not alone in your occasional frustration (<xref ref-type="fig" rid="pcbi.1005871.g006">Fig 6</xref>). Learning takes time, so plan accordingly. Introductory courses are helpful to learn the basics because the basics are easy to neglect in self-study. Articulate clear expectations for yourself and benchmarks for success. Apply some of the structure (deadlines, assignments, etc.) you would provide a student to help motivate and evaluate your progress. If something isn’t working, adjust; not everyone learns best by any one approach. Explore tutorials, online classes, workshops, books like <italic>Practical Computing for Biologists</italic> [<xref ref-type="bibr" rid="pcbi.1005871.ref016">16</xref>], local programming meetups, etc., to find your preferred approach.</p>
<fig id="pcbi.1005871.g006" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005871.g006</object-id>
<label>Fig 6</label>
<caption>
<title>“How to exit the vim editor?” (or: We all get stuck at some point).</title>
<p>Now viewed &gt;1.33 million times; see: <ext-link ext-link-type="uri" xlink:href="http://stackoverflow.com/questions/11828270/how-to-exit-the-vim-editor" xlink:type="simple">http://stackoverflow.com/questions/11828270/how-to-exit-the-vim-editor</ext-link>.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005871.g006" xlink:type="simple"/>
</fig>
</sec>
<sec id="sec011">
<title>Rule 10: Just do it</title>
<p>Just start coding. You can’t edit a blank page.</p>
<p>Learning to program can be intimidating. The power and freedom provided in conducting your own computational analyses bring many decisions points, and each decision brings more room for mistakes. Furthermore, evaluating your work is less black-and-white than for some experiments. However, coding has the benefit that failure is risk free. No resources are wasted—not money, time (a student’s job is to learn!), or a scientific reputation. In silico, the playing field is leveled by hard work and conscientiousness. So, while programming can be intimidating, the most intimidating step is starting.</p>
</sec>
<sec id="sec012" sec-type="conclusions">
<title>Conclusion</title>
<p>Markowetz recently wrote, “Computational biologists are just biologists using a different tool” [<xref ref-type="bibr" rid="pcbi.1005871.ref017">17</xref>]. If you are a traditionally trained biologist, we intend these 10 simple rules as instruction (and pep talk) to learn a new, powerful, and exciting tool. The learning curve can be steep; however, the effort will pay dividends. Computational experience will make you more marketable as a scientist (see “Top N Reasons To Do A Ph.D. or Post-Doc in Bioinformatics/Computational Biology” [<xref ref-type="bibr" rid="pcbi.1005871.ref018">18</xref>]). Computational research has fewer overhead costs and reduces the barrier to entry in transitioning fields [<xref ref-type="bibr" rid="pcbi.1005871.ref019">19</xref>], opening career doors to interested researchers. Perhaps most importantly, programming skills will make you better able to implement and interpret your own analyses and understand and respect analytical biases, making you a better experimentalist as well. Therefore, the time you spend at your computer is valuable. Acquiring programming expertise will make you a better biologist.</p>
</sec>
</body>
<back>
<ack>
<p>Thank you to Ed Hall, Pat Schloss, Matthew Jenior, Angela Zeigler, Jhansi Leslie, and Gregory Medlock for their feedback.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pcbi.1005871.ref001"><label>1</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Genesee</surname> <given-names>F</given-names></name>. <source>Integrating language and content: Lessons from immersion</source>. <publisher-name>Center for Research on Education, Diversity &amp; Excellence</publisher-name>. <year>1994</year>.</mixed-citation></ref>
<ref id="pcbi.1005871.ref002"><label>2</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Genesee</surname> <given-names>FH</given-names></name>, editor <source>Second language learning in school settings: Lessons from immersion1991</source>: <publisher-name>Lawrence Erlbaum Associates</publisher-name>.</mixed-citation></ref>
<ref id="pcbi.1005871.ref003"><label>3</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Campbell</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Bolker</surname> <given-names>E</given-names></name>, editors. <source>Teaching programming by immersion, reading and writing2002</source>: <publisher-name>IEEE</publisher-name>.</mixed-citation></ref>
<ref id="pcbi.1005871.ref004"><label>4</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Guzdial</surname> <given-names>M</given-names></name>. <article-title>Programming environments for novices</article-title>. <source>Computer science education research</source>. <year>2004</year>;<volume>2004</volume>:<fpage>127</fpage>–<lpage>54</lpage>.</mixed-citation></ref>
<ref id="pcbi.1005871.ref005"><label>5</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Zeeberg</surname> <given-names>BR</given-names></name>, <name name-style="western"><surname>Riss</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Kane</surname> <given-names>DW</given-names></name>, <name name-style="western"><surname>Bussey</surname> <given-names>KJ</given-names></name>, <name name-style="western"><surname>Uchio</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Linehan</surname> <given-names>WM</given-names></name>, <etal>et al</etal>. <article-title>Mistaken identifiers: gene name errors can be introduced inadvertently when using Excel in bioinformatics</article-title>. <source>BMC Bioinformatics</source>. <year>2004</year>;<volume>5</volume>(<issue>1</issue>):<fpage>80</fpage>.</mixed-citation></ref>
<ref id="pcbi.1005871.ref006"><label>6</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Ziemann</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Eren</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>El-Osta</surname> <given-names>A</given-names></name>. <article-title>Gene name errors are widespread in the scientific literature</article-title>. <source>Genome Biol</source>. <year>2016</year>;<volume>17</volume>(<issue>1</issue>):<fpage>177</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1186/s13059-016-1044-7" xlink:type="simple">10.1186/s13059-016-1044-7</ext-link></comment> <object-id pub-id-type="pmid">27552985</object-id></mixed-citation></ref>
<ref id="pcbi.1005871.ref007"><label>7</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Linke</surname> <given-names>D</given-names></name>. <article-title>Commentary: Never trust your word processor</article-title>. <source>Biochemistry and Molecular Biology Education</source>. <year>2009</year>;<volume>37</volume>(<issue>6</issue>):<fpage>377</fpage>–. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1002/bmb.20340" xlink:type="simple">10.1002/bmb.20340</ext-link></comment> <object-id pub-id-type="pmid">21567776</object-id></mixed-citation></ref>
<ref id="pcbi.1005871.ref008"><label>8</label><mixed-citation publication-type="other" xlink:type="simple">Collado-Torres L. Recent Posts [Internet]2017. [cited 2017]. Available from: <ext-link ext-link-type="uri" xlink:href="http://lcolladotor.github.io/" xlink:type="simple">http://lcolladotor.github.io/</ext-link>. Posts. Accessed on 5 April 2017.</mixed-citation></ref>
<ref id="pcbi.1005871.ref009"><label>9</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Prlić</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Procter</surname> <given-names>JB</given-names></name>. <article-title>Ten simple rules for the open development of scientific software</article-title>. <source>PLoS Comput Biol</source>. <year>2012</year>;<volume>8</volume>(<issue>12</issue>):<fpage>e1002802</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pcbi.1002802" xlink:type="simple">10.1371/journal.pcbi.1002802</ext-link></comment> <object-id pub-id-type="pmid">23236269</object-id></mixed-citation></ref>
<ref id="pcbi.1005871.ref010"><label>10</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Helmy</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Crits-Christoph</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Bader</surname> <given-names>GD</given-names></name>. <article-title>Ten Simple Rules for Developing Public Biological Databases</article-title>. <source>PLoS Comput Biol</source>. <year>2016</year>;<volume>12</volume>(<issue>11</issue>):<fpage>e1005128</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pcbi.1005128" xlink:type="simple">10.1371/journal.pcbi.1005128</ext-link></comment> <object-id pub-id-type="pmid">27832061</object-id></mixed-citation></ref>
<ref id="pcbi.1005871.ref011"><label>11</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Masum</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Rao</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Good</surname> <given-names>BM</given-names></name>, <name name-style="western"><surname>Todd</surname> <given-names>MH</given-names></name>, <name name-style="western"><surname>Edwards</surname> <given-names>AM</given-names></name>, <name name-style="western"><surname>Chan</surname> <given-names>L</given-names></name>, <etal>et al</etal>. <article-title>Ten simple rules for cultivating open science and collaborative R&amp;D</article-title>. <source>PLoS Comput Biol</source>. <year>2013</year>;<volume>9</volume>(<issue>9</issue>):<fpage>e1003244</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pcbi.1003244" xlink:type="simple">10.1371/journal.pcbi.1003244</ext-link></comment> <object-id pub-id-type="pmid">24086123</object-id></mixed-citation></ref>
<ref id="pcbi.1005871.ref012"><label>12</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Vicens</surname> <given-names>Q</given-names></name>, <name name-style="western"><surname>Bourne</surname> <given-names>PE</given-names></name>. <article-title>Ten simple rules to combine teaching and research</article-title>. <source>PLoS Comput Biol</source>. <year>2009</year>;<volume>5</volume>(<issue>4</issue>):<fpage>e1000358</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pcbi.1000358" xlink:type="simple">10.1371/journal.pcbi.1000358</ext-link></comment> <object-id pub-id-type="pmid">19390598</object-id></mixed-citation></ref>
<ref id="pcbi.1005871.ref013"><label>13</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Schnell</surname> <given-names>S</given-names></name>. <article-title>Ten Simple Rules for a Computational Biologist’s Laboratory Notebook</article-title>. <source>PLoS Comput Biol</source>. <year>2015</year>;<volume>11</volume>(<issue>9</issue>):<fpage>e1004385</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pcbi.1004385" xlink:type="simple">10.1371/journal.pcbi.1004385</ext-link></comment> <object-id pub-id-type="pmid">26356732</object-id></mixed-citation></ref>
<ref id="pcbi.1005871.ref014"><label>14</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Sandve</surname> <given-names>GK</given-names></name>, <name name-style="western"><surname>Nekrutenko</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Taylor</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Hovig</surname> <given-names>E</given-names></name>. <article-title>Ten simple rules for reproducible computational research</article-title>. <source>PLoS Comput Biol</source>. <year>2013</year>;<volume>9</volume>(<issue>10</issue>):<fpage>e1003285</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pcbi.1003285" xlink:type="simple">10.1371/journal.pcbi.1003285</ext-link></comment> <object-id pub-id-type="pmid">24204232</object-id></mixed-citation></ref>
<ref id="pcbi.1005871.ref015"><label>15</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Perez-Riverol</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Gatto</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Wang</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Sachsenberg</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Uszkoreit</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>da Veiga Leprevost</surname> <given-names>F</given-names></name>, <etal>et al</etal>. <article-title>Ten Simple Rules for Taking Advantage of Git and GitHub</article-title>. <source>PLoS Comput Biol</source>. <year>2016</year>;<volume>12</volume>(<issue>7</issue>):<fpage>e1004947</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pcbi.1004947" xlink:type="simple">10.1371/journal.pcbi.1004947</ext-link></comment> <object-id pub-id-type="pmid">27415786</object-id></mixed-citation></ref>
<ref id="pcbi.1005871.ref016"><label>16</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Haddock</surname> <given-names>SHD</given-names></name>, <name name-style="western"><surname>Dunn</surname> <given-names>CW</given-names></name>. <chapter-title>Practical computing for biologists</chapter-title>: <publisher-name>Sinauer Associates Sunderland</publisher-name>, <publisher-loc>MA</publisher-loc>; <year>2011</year>.</mixed-citation></ref>
<ref id="pcbi.1005871.ref017"><label>17</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Markowetz</surname> <given-names>F</given-names></name>. <article-title>All biology is computational biology</article-title>. <source>PLoS Biol</source>. <year>2017</year>;<volume>15</volume>(<issue>3</issue>):<fpage>e2002050</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1371/journal.pbio.2002050" xlink:type="simple">10.1371/journal.pbio.2002050</ext-link></comment> <object-id pub-id-type="pmid">28278152</object-id></mixed-citation></ref>
<ref id="pcbi.1005871.ref018"><label>18</label><mixed-citation publication-type="other" xlink:type="simple">Bergman C. An Assembly of Fragments [Internet]. [cited 2017]. Available from: <ext-link ext-link-type="uri" xlink:href="https://caseybergman.wordpress.com/2012/07/31/top-n-reasons-to-do-a-ph-d-or-post-doc-in-bioinformaticscomputational-biology/" xlink:type="simple">https://caseybergman.wordpress.com/2012/07/31/top-n-reasons-to-do-a-ph-d-or-post-doc-in-bioinformaticscomputational-biology/</ext-link>. Accessed on 5 April 2017.</mixed-citation></ref>
<ref id="pcbi.1005871.ref019"><label>19</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Kwok</surname> <given-names>R</given-names></name>. <source>Nature: Careers</source> [Internet]: <publisher-name>Nature Publishing Group</publisher-name>. <year>2013</year>. [cited 2017].</mixed-citation></ref>
</ref-list>
</back>
</article>