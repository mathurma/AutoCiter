<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN" "http://jats.nlm.nih.gov/publishing/1.1d3/JATS-journalpublishing1.dtd">
<article article-type="research-article" dtd-version="1.1d3" xml:lang="en" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id>
<journal-title-group>
<journal-title>PLOS Computational Biology</journal-title>
</journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-15-01544</article-id>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1004867</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Education</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Programming languages</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Computer software</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Neuroscience</subject><subj-group><subject>Cognitive science</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Language</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Language</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social sciences</subject><subj-group><subject>Psychology</subject><subj-group><subject>Cognitive psychology</subject><subj-group><subject>Language</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Social sciences</subject><subj-group><subject>Linguistics</subject><subj-group><subject>Phonology</subject><subj-group><subject>Syntax</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Applied mathematics</subject><subj-group><subject>Algorithms</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Simulation and modeling</subject><subj-group><subject>Algorithms</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Database and informatics methods</subject><subj-group><subject>Bioinformatics</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Human factors engineering</subject><subj-group><subject>Man-computer interface</subject><subj-group><subject>Graphical user interface</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Computer architecture</subject><subj-group><subject>User interfaces</subject><subj-group><subject>Graphical user interface</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software tools</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software tools</subject></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>An Introduction to Programming for Bioscientists: A Python-Based Primer</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<name name-style="western">
<surname>Ekmekci</surname> <given-names>Berk</given-names></name>
<xref ref-type="aff" rid="aff001"/>
</contrib>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple">
<name name-style="western">
<surname>McAnany</surname> <given-names>Charles E.</given-names></name>
<xref ref-type="aff" rid="aff001"/>
</contrib>
<contrib contrib-type="author" corresp="yes" xlink:type="simple">
<name name-style="western">
<surname>Mura</surname> <given-names>Cameron</given-names></name>
<xref ref-type="aff" rid="aff001"/>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
</contrib-group>
<aff id="aff001">
<addr-line>Department of Chemistry, University of Virginia, Charlottesville, Virginia, United States of America</addr-line>
</aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>Ouellette</surname> <given-names>Francis</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1">
<addr-line>Ontario Institute for Cancer Research, CANADA</addr-line>
</aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>The authors have declared that no competing interests exist.</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">cmura@muralab.org</email></corresp>
</author-notes>
<pub-date pub-type="collection">
<month>6</month>
<year>2016</year>
</pub-date>
<pub-date pub-type="epub">
<day>7</day>
<month>6</month>
<year>2016</year>
</pub-date>
<volume>12</volume>
<issue>6</issue>
<elocation-id>e1004867</elocation-id>
<permissions>
<copyright-year>2016</copyright-year>
<copyright-holder>Ekmekci et al</copyright-holder>
<license xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">
<license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pcbi.1004867"/>
<abstract>
<p>Computing has revolutionized the biological sciences over the past several decades, such that virtually all contemporary research in molecular biology, biochemistry, and other biosciences utilizes computer programs. The computational advances have come on many fronts, spurred by fundamental developments in hardware, software, and algorithms. These advances have influenced, and even engendered, a phenomenal array of bioscience fields, including molecular evolution and bioinformatics; genome-, proteome-, transcriptome- and metabolome-wide experimental studies; structural genomics; and atomistic simulations of cellular-scale molecular assemblies as large as ribosomes and intact viruses. In short, much of post-genomic biology is increasingly becoming a form of computational biology. The ability to design and write computer programs is among the most indispensable skills that a modern researcher can cultivate. Python has become a popular programming language in the biosciences, largely because (i) its straightforward semantics and clean syntax make it a readily accessible first language; (ii) it is expressive and well-suited to object-oriented programming, as well as other modern paradigms; and (iii) the many available libraries and third-party toolkits extend the functionality of the core language into virtually every biological domain (sequence and structure analyses, phylogenomics, workflow management systems, etc.). This primer offers a basic introduction to coding, via Python, and it includes concrete examples and exercises to illustrate the language’s usage and capabilities; the main text culminates with a final project in structural bioinformatics. A suite of Supplemental Chapters is also provided. Starting with basic concepts, such as that of a “variable,” the Chapters methodically advance the reader to the point of writing a graphical user interface to compute the Hamming distance between two DNA sequences.</p>
</abstract>
<abstract abstract-type="summary">
<title>Author Summary</title>
<p>Contemporary biology has largely become computational biology, whether it involves applying physical principles to simulate the motion of each atom in a piece of DNA, or using machine learning algorithms to integrate and mine “omics” data across whole cells (or even entire ecosystems). The ability to design algorithms and program computers, even at a novice level, may be the most indispensable skill that a modern researcher can cultivate. As with human languages, computational fluency is developed actively, not passively. This self-contained text, structured as a hybrid primer/tutorial, introduces any biologist—from college freshman to established senior scientist—to basic computing principles (control-flow, recursion, regular expressions, etc.) and the practicalities of programming and software design. We use the Python language because it now pervades virtually every domain of the biosciences, from sequence-based bioinformatics and molecular evolution to phylogenomics, systems biology, structural biology, and beyond. To introduce both coding (in general) and Python (in particular), we guide the reader via concrete examples and exercises. We also supply, as Supplemental Chapters, a few thousand lines of heavily-annotated, freely distributed source code for personal study.</p>
</abstract>
<funding-group>
<funding-statement>Portions of this work were supported by the University of Virginia, the Jeffress Memorial Trust (J-971), a UVa Harrison undergraduate research award (BE), NSF grant DUE-1044858 (CM), and NSF CAREER award MCB-1350957 (CM). The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
</funding-group>
<counts>
<fig-count count="3"/>
<table-count count="4"/>
<page-count count="43"/>
</counts>
</article-meta>
</front>
<body>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<sec id="sec002">
<title>Motivation: Big Data and Biology</title>
<p>Datasets of unprecedented volume and heterogeneity are becoming the norm in science, and particularly in the biosciences. High-throughput experimental methodologies in genomics [<xref ref-type="bibr" rid="pcbi.1004867.ref001">1</xref>], proteomics [<xref ref-type="bibr" rid="pcbi.1004867.ref002">2</xref>], transcriptomics [<xref ref-type="bibr" rid="pcbi.1004867.ref003">3</xref>], metabolomics [<xref ref-type="bibr" rid="pcbi.1004867.ref004">4</xref>], and other “omics” [<xref ref-type="bibr" rid="pcbi.1004867.ref005">5</xref>–<xref ref-type="bibr" rid="pcbi.1004867.ref007">7</xref>] routinely yield vast stores of data on a system-wide scale. Growth in the quantity of data has been matched by an increase in heterogeneity: there is now great variability in the types of relevant data, including nucleic acid and protein sequences from large-scale sequencing projects, proteomic data and molecular interaction maps from microarray and chip experiments on entire organisms (and even ecosystems [<xref ref-type="bibr" rid="pcbi.1004867.ref008">8</xref>–<xref ref-type="bibr" rid="pcbi.1004867.ref010">10</xref>]), three-dimensional (3D) coordinate data from international structural genomics initiatives, petabytes of trajectory data from large-scale biomolecular simulations, and so on. In each of these areas, volumes of raw data are being generated at rates that dwarf the scale and exceed the scope of conventional data-processing and data-mining approaches.</p>
<p>The intense data-analysis needs of modern research projects feature at least three facets: data <italic>production</italic>, <italic>reduction/processing</italic>, and <italic>integration</italic>. Data production is largely driven by engineering and technological advances, such as commodity equipment for next-gen DNA sequencing [<xref ref-type="bibr" rid="pcbi.1004867.ref011">11</xref>–<xref ref-type="bibr" rid="pcbi.1004867.ref013">13</xref>] and robotics for structural genomics [<xref ref-type="bibr" rid="pcbi.1004867.ref014">14</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref015">15</xref>]. Data reduction requires efficient computational processing approaches, and data integration demands robust tools that can flexibly represent data (<italic>abstractions</italic>) so as to enable the detection of correlations and interdependencies (via, e.g., machine learning [<xref ref-type="bibr" rid="pcbi.1004867.ref016">16</xref>]). These facets are closely coupled: the rate at which raw data is now produced, e.g., in computing molecular dynamics (MD) trajectories [<xref ref-type="bibr" rid="pcbi.1004867.ref017">17</xref>], dictates the data storage, processing, and analysis needs. As a concrete example, the latest generation of highly-scalable, parallel MD codes can generate data more rapidly than they can be transferred via typical computer network backbones to local workstations for processing. Such demands have spurred the development of tools for “on-the-fly” trajectory analysis (e.g., [<xref ref-type="bibr" rid="pcbi.1004867.ref018">18</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref019">19</xref>]) as well as generic software toolkits for constructing parallel and distributed data-processing pipelines (e.g., [<xref ref-type="bibr" rid="pcbi.1004867.ref020">20</xref>] and <xref ref-type="supplementary-material" rid="pcbi.1004867.s002">S2 Text</xref>, §2). To appreciate the scale of the problem, note that calculation of all-atom MD trajectories over biologically-relevant timescales easily leads into petabyte-scale computing. Consider, for instance, a biomolecular simulation system of modest size, such as a 100-residue globular protein embedded in explicit water (corresponding to ≈10<sup>5</sup> particles), and with typical simulation parameters (32-bit precision, atomic coordinates written to disk, in binary format, for every ps of simulation time, etc.). Extending such a simulation to 10 µs duration—which may be at the low end of what is deemed biologically relevant for the system—would give an approximately 12-terabyte trajectory (≈10<sup>5</sup>particles × 3 coordinates/particle/frame × 10<sup>7</sup> frames × 4 bytes/coordinate = 12TB). To validate or otherwise follow-up predictions from a single trajectory, one might like to perform an additional suite of &gt;10 such simulations, thus rapidly approaching the peta-scale.</p>
<p>Scenarios similar to the above example occur in other biological domains, too, at length-scales ranging from atomic to organismal. Atomistic MD simulations were mentioned above. At the molecular level of individual genes/proteins, an early step in characterizing a protein’s function and evolution might be to use sequence analysis methods to compare the protein sequence to every other known sequence, of which there are tens of millions [<xref ref-type="bibr" rid="pcbi.1004867.ref021">21</xref>]. Any form of 3D structural analysis will almost certainly involve the Protein Data Bank (PDB; [<xref ref-type="bibr" rid="pcbi.1004867.ref022">22</xref>]), which currently holds over 10<sup>5</sup> entries. At the cellular level, proteomics, transcriptomics, and various other “omics” areas (mentioned above) have been inextricably linked to high-throughput, big-data science since the inception of each of those fields. In genomics, the early bottleneck—DNA sequencing and raw data collection—was eventually supplanted by the problem of processing raw sequence data into derived (secondary) formats, from which point meaningful conclusions can be gleaned [<xref ref-type="bibr" rid="pcbi.1004867.ref023">23</xref>]. Enabled by the amount of data that can be rapidly generated, typical “omics” questions have become more subtle. For instance, simply assessing sequence similarity and conducting functional annotation of the open reading frames (ORFs) in a newly sequenced genome is no longer the end-goal; rather, one might now seek to derive networks of biomolecular functions from sparse, multi-dimensional datasets [<xref ref-type="bibr" rid="pcbi.1004867.ref024">24</xref>]. At the level of tissue systems, the modeling and simulation of inter-neuronal connections has developed into a new field of “connectomics” [<xref ref-type="bibr" rid="pcbi.1004867.ref025">25</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref026">26</xref>]. Finally, at the organismal and clinical level, the promise of personalized therapeutics hinges on the ability to analyze large, heterogeneous collections of data (e.g., [<xref ref-type="bibr" rid="pcbi.1004867.ref027">27</xref>]). As illustrated by these examples, all bioscientists would benefit from a basic understanding of the computational tools that are used daily to collect, process, represent, statistically manipulate, and otherwise analyze data. In every data-driven project, the overriding goal is to transform raw data into new biological principles and knowledge.</p>
</sec>
<sec id="sec003">
<title>A New Kind of Scientist</title>
<p>Generating knowledge from large datasets is now recognized as a central challenge in science [<xref ref-type="bibr" rid="pcbi.1004867.ref028">28</xref>]. To succeed, each type of aforementioned data-analysis task hinges upon three things: greater computing power, improved computational methods, and computationally fluent scientists. Computing power is only marginally an issue: it lies outside the scope of most biological research projects, and the problem is often addressed by money and the acquisition of new hardware. In contrast, computational methods—improved algorithms, and the software engineering to implement the algorithms in high-quality codebases—are perpetual goals. To address the challenges, a new era of scientific training is required [<xref ref-type="bibr" rid="pcbi.1004867.ref029">29</xref>–<xref ref-type="bibr" rid="pcbi.1004867.ref032">32</xref>]. There is a dire need for biologists who can collect, structure, process/reduce, and analyze (both numerically and visually) large-scale datasets. The problems are more fundamental than, say, simply converting data files from one format to another (“data-wrangling”). Fortunately, the basics of the necessary computational techniques can be learned quickly. Two key pillars of computational fluency are (i) a working knowledge of some programming language and (ii) comprehension of core computer science principles (data structures, sort methods, etc.). All programming projects build upon the same set of basic principles, so a seemingly crude grasp of programming essentials will often suffice for one to understand the workings of very complex code; one can develop familiarity with more advanced topics (graph algorithms, computational geometry, numerical methods, etc.) as the need arises for particular research questions. Ideally, computational skills will begin to be developed during early scientific training. Recent educational studies have exposed the gap in life sciences and computer science knowledge among young scientists, and interdisciplinary education appears to be effective in helping bridge the gap [<xref ref-type="bibr" rid="pcbi.1004867.ref033">33</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref034">34</xref>].</p>
</sec>
<sec id="sec004">
<title>Programming as the Way Forward</title>
<p>For many of the questions that arise in research, software tools have been designed. Some of these tools follow the Unix tradition to “make each program do one thing well” [<xref ref-type="bibr" rid="pcbi.1004867.ref035">35</xref>], while other programs have evolved into colossal applications that provide numerous sophisticated features, at the cost of accessibility and reliability. A small software tool that is designed to perform a simple task will, at some point, lack a feature that is necessary to analyze a particular type of dataset. A large program may provide the missing feature, but the program may be so complex that the user cannot readily master it, and the codebase may have become so unwieldy that it cannot be adapted to new projects without weeks of study. Guy Steele, a highly-regarded computer scientist, noted this principle in a lecture on programming language design [<xref ref-type="bibr" rid="pcbi.1004867.ref036">36</xref>]:</p>
<disp-quote>
<p>“<italic>I should not design a small language, and I should not design a large one. I need to design a language that can grow. I need to plan ways in which it might grow—but I need, too, to leave some choices so that other persons can make those choices at a later time.</italic>”</p>
</disp-quote>
<p>Programming languages provide just such a tool. Instead of supplying every conceivable feature, languages provide a small set of well-designed features and powerful tools to compose these features in new ways, using logical principles. Programming allows one to control every aspect of data analysis, and libraries provide commonly-used functionality and pre-made tools that the scientist can use for most tasks. A good library provides a simple interface for the user to perform routine tasks, but also allows the user to tweak and customize the behavior in any way desired (such code is said to be <italic>extensible</italic>). The ability to compose programs into other programs is particularly valuable to the scientist. One program may be written to perform a particular statistical analysis, and another program may read in a data file from an experiment and then use the first program to perform the analysis. A third program might select certain datasets—each in its own file—and then call the second program for each chosen data file. In this way, the programs can serve as modules in a computational workflow.</p>
<p>On a related note, many software packages supply an application programming interface (API), which exposes some specific set of functionalities from the codebase without requiring the user/programmer to worry about the low-level implementation details. A well-written API enables users to combine already established codes in a modular fashion, thereby more efficiently creating customized new tools and pipelines for data processing and analysis.</p>
<p>A program that performs a useful task can (and, arguably, should [<xref ref-type="bibr" rid="pcbi.1004867.ref037">37</xref>]) be distributed to other scientists, who can then integrate it with their own code. Free software licenses facilitate this type of collaboration, and explicitly encourage individuals to enhance and share their programs [<xref ref-type="bibr" rid="pcbi.1004867.ref038">38</xref>]. This flexibility and ease of collaborating allows scientists to develop software relatively quickly, so they can spend more time integrating and mining, rather than simply processing, their data.</p>
<p>Data-processing workflows and pipelines that are designed for use with one particular program or software environment will eventually be incompatible with other software tools or workflow environments; such approaches are often described as being <italic>brittle</italic>. In contrast, algorithms and programming logic, together with robust and standards-compliant data-exchange formats, provide a completely universal solution that is portable between different tools. Simply stated, any problem that can be solved by a computer can be solved using any programming language [<xref ref-type="bibr" rid="pcbi.1004867.ref039">39</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref040">40</xref>]. The more feature-rich or <italic>high-level</italic> the language, the more concisely can a data-processing task be expressed using that language (the language is said to be <italic>expressive</italic>). Many high-level languages (e.g., Python, Perl) are executed by an <italic>interpreter</italic>, which is a program that reads source code and does what the code says to do. Interpreted languages are not as numerically efficient as lower-level, compiled languages such as C or Fortran. The source code of a program in a <italic>compiled</italic> language must be converted to machine-specific instructions by a compiler, and those low-level machine code instructions (<italic>binaries</italic>) are executed directly by the hardware. Compiled code typically runs faster than interpreted code, but requires more work to program. High-level languages, such as Python or Perl, are often used to prototype ideas or to quickly combine modular tools (which may be written in a lower-level language) into “scripts”; for this reason they are also known as <italic>scripting languages</italic>. Very large programs often provide a scripting language for the user to run their own programs: Microsoft Office has the VBA scripting language, PyMOL [<xref ref-type="bibr" rid="pcbi.1004867.ref041">41</xref>] provides a Python interpreter, VMD [<xref ref-type="bibr" rid="pcbi.1004867.ref042">42</xref>] uses a Tcl interpreter for many tasks, and Coot [<xref ref-type="bibr" rid="pcbi.1004867.ref043">43</xref>] uses the Scheme language to provide an API to the end-user. The deep integration of high-level languages into packages such as PyMOL and VMD enables one to extend the functionality of these programs via both scripting commands (e.g., see PyMOL examples in [<xref ref-type="bibr" rid="pcbi.1004867.ref044">44</xref>]) and the creation of semi-standalone plugins (e.g., see the VMD plugin at [<xref ref-type="bibr" rid="pcbi.1004867.ref045">45</xref>]). While these tools supply interfaces to different programming languages, the fundamental concepts of programming are preserved in each case: a script written for PyMOL can be transliterated to a VMD script, and a closure in a Coot script is roughly equivalent to a closure in a Python script (see Supplemental Chapter 13 in <xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>). Because the logic underlying computer programming is universal, mastering one language will open the door to learning other languages with relative ease. As another major benefit, the algorithmic thinking involved in writing code to solve a problem will often lead to a deeper and more nuanced understanding of the scientific problem itself.</p>
</sec>
<sec id="sec005">
<title>Why Python? (And Which Python?)</title>
<p>Python is the programming language used in this text because of its clear syntax [<xref ref-type="bibr" rid="pcbi.1004867.ref040">40</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref046">46</xref>], active developer community, free availability, extensive use in scientific communities such as bioinformatics, its role as a scripting language in major software suites, and the many freely available scientific libraries (e.g., BioPython [<xref ref-type="bibr" rid="pcbi.1004867.ref047">47</xref>]). Two of these characteristics are especially important for our purposes: (i) a clean syntax and straightforward semantics allow the student to focus on core programming concepts without the distraction of difficult syntactic forms, while (ii) the widespread adoption of Python has led to a vast base of scientific libraries and toolkits for more advanced programming projects [<xref ref-type="bibr" rid="pcbi.1004867.ref020">20</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref048">48</xref>]. As noted in the <xref ref-type="supplementary-material" rid="pcbi.1004867.s002">S2 Text</xref> (§1), several languages other than Python have also seen widespread use in the biosciences; see, e.g., [<xref ref-type="bibr" rid="pcbi.1004867.ref046">46</xref>] for a comparative analysis of some of these languages. As described by Hinsen [<xref ref-type="bibr" rid="pcbi.1004867.ref049">49</xref>], Python’s particularly rapid adoption in the sciences can be attributed to its powerful and versatile combination of features, including characteristics intrinsic to the language itself (e.g., expressiveness, a powerful object model) as well as extrinsic features (e.g., community libraries for numerical computing).</p>
<p>Two versions of Python are frequently encountered in scientific programming: Python 2 and Python 3. The differences between these are minor, and while this text uses Python 3 exclusively, most of the code we present will run under both versions of Python. Python 3 is being actively developed and new features are added regularly; Python 2 support continues mainly to serve existing (“legacy”) codes. New projects should use Python 3.</p>
</sec>
<sec id="sec006">
<title>Role and Organization of This Text</title>
<p>This work, which has evolved from a modular “Programming for Bioscientists” tutorial series that has been offered at our institution, provides a self-contained, hands-on primer for general-purpose programming in the biosciences. Where possible, explanations are provided for key foundational concepts from computer science; more formal, and comprehensive, treatments can be found in several computer science texts [<xref ref-type="bibr" rid="pcbi.1004867.ref039">39</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref040">40</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref050">50</xref>] as well as bioinformatics titles, from both theoretical [<xref ref-type="bibr" rid="pcbi.1004867.ref016">16</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref051">51</xref>] and more practical [<xref ref-type="bibr" rid="pcbi.1004867.ref052">52</xref>–<xref ref-type="bibr" rid="pcbi.1004867.ref055">55</xref>] perspectives. Also, this work complements other practical Python primers [<xref ref-type="bibr" rid="pcbi.1004867.ref056">56</xref>], guides to getting started in bioinformatics (e.g., [<xref ref-type="bibr" rid="pcbi.1004867.ref057">57</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref058">58</xref>]), and more general educational resources for scientific programming [<xref ref-type="bibr" rid="pcbi.1004867.ref059">59</xref>].</p>
<p>Programming fundamentals, including variables, expressions, types, functions, and control flow and recursion, are introduced in the first half of the text (“Fundamentals of Programming”). The next major section (“Data Collections: Tuples, Lists, For Loops, and Dictionaries”) presents data structures for collections of items (lists, tuples, dictionaries) and more control flow (loops). Classes, methods, and other basics of object-oriented programming (OOP) are described in “Object-Oriented Programming in a Nutshell”. File management and input/output (I/O) is covered in “File Management and I/O”, and another practical (and fundamental) topic associated with data-processing—regular expressions for string parsing—is covered in “Regular Expressions for String Manipulations”. As an advanced topic, the text then describes how to use Python and Tkinter to create graphical user interfaces (GUIs) in “An Advanced Vignette: Creating Graphical User Interfaces with Tkinter”. Python’s role in general scientific computing is described as a topic for further exploration (“Python in General-Purpose Scientific Computing”), as is the role of software licensing (“Python and Software Licensing”) and project management via version control systems (“Managing Large Projects: Version Control Systems”). Exercises and examples occur throughout the text to concretely illustrate the language’s usage and capabilities. A final project (“Final Project: A Structural Bioinformatics Problem”) involves integrating several lessons from the text in order to address a structural bioinformatics question.</p>
<p>A collection of Supplemental Chapters (<xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>) is also provided. The Chapters, which contain a few thousand lines of Python code, offer more detailed descriptions of much of the material in the main text. For instance, variables, functions and basic control flow are covered in Chapters 2, 3, and 5, respectively. Some topics are examined at greater depth, taking into account the interdependencies amongst topics—e.g., functions in Chapters 3, 7, and 13; lists, tuples, and other collections in Chapters 8, 9, and 10; OOP in Chapters 15 and 16. Finally, some topics that are either intermediate-level or otherwise not covered in the main text can be found in the Chapters, such as modules in Chapter 4 and lambda expressions in Chapter 13. The contents of the Chapters are summarized in <xref ref-type="table" rid="pcbi.1004867.t001">Table 1</xref> and in the <xref ref-type="supplementary-material" rid="pcbi.1004867.s002">S2 Text</xref> (§3, “Sample Python Chapters”).</p>
<table-wrap id="pcbi.1004867.t001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1004867.t001</object-id>
<label>Table 1</label>
<caption>
<title>Overview of the Supplemental Chapters (<xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>).</title>
</caption>
<alternatives>
<graphic id="pcbi.1004867.t001g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1004867.t001" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left">Chapter</th>
<th align="left">Name</th>
<th align="left">Topics</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">00</td>
<td align="left">Setup</td>
<td align="left">Commenting code. Running programs. Testing imports.</td>
</tr>
<tr>
<td align="left">01</td>
<td align="left">Introduction</td>
<td align="left">Print function. Elementary arithmetic. Function definition syntax. Strings.</td>
</tr>
<tr>
<td align="left">02</td>
<td align="left">Variables</td>
<td align="left">Variables and assignment. Semantics of <monospace>x = x + 1</monospace></td>
</tr>
<tr>
<td align="left">03</td>
<td align="left">Functions, I</td>
<td align="left">Arguments and returns in functions.</td>
</tr>
<tr>
<td align="left">04</td>
<td align="left">Modules</td>
<td align="left">Importing code from existing libraries.</td>
</tr>
<tr>
<td align="left">05</td>
<td align="left">Control Flow, I</td>
<td align="left">
<monospace>if</monospace> statements, indentation in Python. <monospace>%</monospace> and <monospace>//</monospace> operators. Boolean algebra.</td>
</tr>
<tr>
<td align="left">06</td>
<td align="left">Control Flow, II</td>
<td align="left">Iteration using <monospace>for</monospace> and <monospace>while</monospace>.</td>
</tr>
<tr>
<td align="left">07</td>
<td align="left">Functions, II</td>
<td align="left">Recursion and recursive problem decomposition. Collatz conjecture.</td>
</tr>
<tr>
<td align="left">08</td>
<td align="left">Collections, I</td>
<td align="left">Syntax and semantics of sequences. Creation, modification, indexing, and slicing of tuples, lists, strings. Stack and heap storage. String formatting.</td>
</tr>
<tr>
<td align="left">09</td>
<td align="left">Collections, II</td>
<td align="left">First-class functions. Techniques of list processing: <monospace>filter</monospace>, <monospace>fold</monospace>, <monospace>map</monospace>.</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">Collections, III</td>
<td align="left">Syntax of dictionaries. Key-value pairs.</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">File I/O</td>
<td align="left">Reading and writing files. Importance of leaving a file in a consistent state.</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left">Graphics</td>
<td align="left">Windows and basic graphics. Mouse events. External documentation.</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left">Functions, III</td>
<td align="left">Lambdas and functors. Nested function definitions and closures. Currying.</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left">Exceptions</td>
<td align="left">Indication of and recovery from errors. Exception hierarchy.</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">Classes, I</td>
<td align="left">Object-oriented programming style; methods, members, inheritance. Assignment semantics.</td>
</tr>
<tr>
<td align="left">16</td>
<td align="left">Classes, II</td>
<td align="left">Case studies of complex classes. Iterators.</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left">Regexes</td>
<td align="left">Essentials of regular expressions.</td>
</tr>
<tr>
<td align="left">18</td>
<td align="left">Tkinter, I</td>
<td align="left">Creation of windows and widgets. Geometry managers.</td>
</tr>
<tr>
<td align="left">19</td>
<td align="left">Tkinter, II</td>
<td align="left">Adding functionality to widgets. Tkinter variables.</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t001fn001">
<p>The Supplemental Chapters (<xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>) consist of a few thousand lines of Python code, heavily annotated with explanatory material and covering the topics summarized here. In general, the material ranges from relatively basic to more intermediate and advanced levels as the Chapters progress. The latest versions of the Chapters are available at <ext-link ext-link-type="uri" xlink:href="http://p4b.muralab.org" xlink:type="simple">http://p4b.muralab.org</ext-link>.</p>
</fn>
</table-wrap-foot>
</table-wrap>
</sec>
<sec id="sec007">
<title>Using This Text</title>
<p>This text and the Supplemental Chapters work like the lecture and lab components of a course, and they are designed to be used in tandem. For readers who are new to programming, we suggest reading a section of text, including working through any examples or exercises in that section, and then completing the corresponding Supplemental Chapters before moving on to the next section; such readers should also begin by looking at §3.1 in the <xref ref-type="supplementary-material" rid="pcbi.1004867.s002">S2 Text</xref>, which describes how to interact with the Python interpreter, both in the context of a Unix Shell and in an integrated development environment (IDE) such as IDLE. For bioscientists who are somewhat familiar with a programming language (Python or otherwise), we suggest reading this text for background information and to understand the conventions used in the field, followed by a study of the Supplemental Chapters to learn the syntax of Python. For those with a strong programming background, this text will provide useful information about the software and conventions that commonly appear in the biosciences; the Supplemental Chapters will be rather familiar in terms of algorithms and computer science fundamentals, while the biological examples and problems may be new for such readers.</p>
</sec>
<sec id="sec008">
<title>Typographic Conventions</title>
<p>The following typographic conventions appear in the remainder of this text: (i) all computer code is typeset in a <monospace>monospace</monospace> font; (ii) many terms are defined contextually, and are introduced in <italic>italics</italic>; (iii) <bold>boldface</bold> type is used for occasional emphasis; (iv) single (‘’) and double (“”) quote marks are used either to indicate colloquial terms or else to demarcate character or word boundaries amidst the surrounding text (for clarity); (v) module names, filenames, pseudocode, and GUI-related strings appear as <inline-formula id="pcbi.1004867.e001"><alternatives><graphic id="pcbi.1004867.e001g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e001" xlink:type="simple"/><mml:math display="inline" id="M1"><mml:mtext mathvariant="sans-serif">sans-serif</mml:mtext></mml:math></alternatives></inline-formula> text; and (vi) regular expressions are offset by <inline-formula id="pcbi.1004867.e002"><alternatives><graphic id="pcbi.1004867.e002g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e002" xlink:type="simple"/><mml:math display="inline" id="M2"><mml:mstyle mathbackground="#e6e6e6"><mml:mtext mathvariant="monospace">a gray background</mml:mtext></mml:mstyle></mml:math></alternatives></inline-formula>, e.g. <inline-formula id="pcbi.1004867.e003"><alternatives><graphic id="pcbi.1004867.e003g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e003" xlink:type="simple"/><mml:math display="inline" id="M3"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>.</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> denotes a period. We refer to delimiters in the text as (parentheses), [brackets], and {braces}.</p>
<p>Blocks of code are typeset in <monospace>monospace</monospace> font, with keywords in bold and strings in italics. Output appears on its own line without a line number, as in the following example:</p>
<p specific-use="line"><monospace>1 <bold>if</bold>(<bold>True</bold>):</monospace></p>
<p specific-use="line"><monospace>2  <bold>print</bold>("<italic>hello</italic>")</monospace></p>
<p specific-use="line"><monospace> hello</monospace></p>
<p specific-use="line"><monospace>3 <bold>exit</bold>(0)</monospace></p>
</sec>
</sec>
<sec id="sec009">
<title>Fundamentals of Programming</title>
<sec id="sec010">
<title>Variables and Expressions</title>
<p>The concept of a variable offers a natural starting point for programming. A <italic>variable</italic> is a name that can be set to represent, or “hold,” a specific value. This definition closely parallels that found in mathematics. For example, the simple algebraic statement <monospace>x = 5</monospace> is interpreted mathematically as introducing the variable <italic>x</italic> and assigning it the value 5. When Python encounters that same statement, the interpreter generates a variable named <monospace>x</monospace> (literally, by allocating memory), and assigns the value <monospace>5</monospace> to the variable name. The parallels between variables in Python and those in arithmetic continue in the following example, which can be typed at the prompt in any Python shell (§3.1 of the <xref ref-type="supplementary-material" rid="pcbi.1004867.s002">S2 Text</xref> describes how to access a Python shell):</p>
<p specific-use="line"><monospace>1 x = 5</monospace></p>
<p specific-use="line"><monospace>2 y = 7</monospace></p>
<p specific-use="line"><monospace>3 z = x + 2 * y</monospace></p>
<p specific-use="line"><monospace>4 <bold>print</bold>(z)</monospace></p>
<p specific-use="line"> <monospace>19</monospace></p>
<p>As may be expected, the value of <monospace>z</monospace> is set equal to the sum of <monospace>x</monospace> and <monospace>2*y</monospace>, or in this case 19. The <monospace>print()</monospace> function makes Python output some text (the <italic>argument</italic>) to the screen; its name is a relic of early computing, when computers communicated with human users via ink-on-paper printouts. Beyond addition (<monospace>+</monospace>) and multiplication (<monospace>*</monospace>), Python can perform subtraction (<monospace>-</monospace>) and division (<monospace>/</monospace>) operations. Python is also natively capable (i.e., without add-on libraries) of other mathematical operations, including those summarized in <xref ref-type="table" rid="pcbi.1004867.t002">Table 2</xref>.</p>
<table-wrap id="pcbi.1004867.t002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1004867.t002</object-id>
<label>Table 2</label>
<caption>
<title>Common mathematical operators in Python.</title>
</caption>
<alternatives>
<graphic id="pcbi.1004867.t002g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1004867.t002" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left">Symbol</th>
<th align="left">Functionality</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><monospace>+</monospace></td>
<td align="left">addition</td>
</tr>
<tr>
<td align="left"><monospace>–</monospace></td>
<td align="left">subtraction</td>
</tr>
<tr>
<td align="left"><monospace>*</monospace></td>
<td align="left">multiplication</td>
</tr>
<tr>
<td align="left"><monospace>/</monospace></td>
<td align="left">division</td>
</tr>
<tr>
<td align="left"><monospace>%</monospace></td>
<td align="left">modulo (yields remainder after division)</td>
</tr>
<tr>
<td align="left"><monospace>//</monospace></td>
<td align="left">integer division (truncates toward zero)</td>
</tr>
<tr>
<td align="left"><monospace>**</monospace></td>
<td align="left">exponentiation</td>
</tr>
<tr>
<td align="left"><monospace>abs(a)</monospace></td>
<td align="left">absolute value of the number <italic>a</italic>, |<italic>a</italic>|</td>
</tr>
<tr>
<td align="left"><monospace>math.sin(x)</monospace></td>
<td align="left">sine of <italic>x</italic> radians (other trigonometric functions are also available)</td>
</tr>
<tr>
<td align="left"><monospace>math.factorial(n)</monospace></td>
<td align="left">factorial of <italic>n</italic>, <italic>n</italic>!</td>
</tr>
<tr>
<td align="left"><monospace>math.log(a,b)</monospace></td>
<td align="left"><italic>log</italic><sub><italic>b</italic></sub>(<italic>a</italic>) (defaults to natural logarithm, if no base <italic>b</italic> specified)</td>
</tr>
<tr>
<td align="left"><monospace>math.sqrt(x)</monospace></td>
<td align="left">square root of <italic>x</italic>, <inline-formula id="pcbi.1004867.e004"><alternatives><graphic id="pcbi.1004867.e004g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e004" xlink:type="simple"/><mml:math display="inline" id="M4"><mml:msqrt><mml:mi>x</mml:mi></mml:msqrt></mml:math></alternatives></inline-formula></td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t002fn001">
<p>Common mathematical operators that are provided as built-in Python functions. Note that the behavior of <monospace>/</monospace> differs in versions of Python prior to 3.0; it previously acted as <monospace>//</monospace> does in recent versions of Python.</p>
</fn>
</table-wrap-foot>
</table-wrap>
<p>To expand on the above example we will now use the <inline-formula id="pcbi.1004867.e005"><alternatives><graphic id="pcbi.1004867.e005g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e005" xlink:type="simple"/><mml:math display="inline" id="M5"><mml:mtext mathvariant="sans-serif">math</mml:mtext></mml:math></alternatives></inline-formula> module, which is provided by default in Python. A <italic>module</italic> is a self-contained collection of Python code that can be imported, via the <monospace>import</monospace> command, into any other Python program in order to provide some functionality to the runtime environment. (For instance, modules exist to parse protein sequence files, read PDB files or simulation trajectories, compute geometric properties, and so on. Much of Python’s <italic>extensibility</italic> stems from the ability to use [and write] various modules, as presented in Supplemental Chapter 4 [<inline-formula id="pcbi.1004867.e006"><alternatives><graphic id="pcbi.1004867.e006g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e006" xlink:type="simple"/><mml:math display="inline" id="M6"><mml:mtext mathvariant="sans-serif">ch04modules.py</mml:mtext></mml:math></alternatives></inline-formula>].) A collection of useful modules known as the <italic>standard library</italic> is bundled with Python, and can be relied upon as always being available to a Python program. Python’s <inline-formula id="pcbi.1004867.e007"><alternatives><graphic id="pcbi.1004867.e007g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e007" xlink:type="simple"/><mml:math display="inline" id="M7"><mml:mtext mathvariant="sans-serif">math</mml:mtext></mml:math></alternatives></inline-formula> module (in the standard library) introduces several mathematical capabilities, including one that is used in this section: <monospace>sin()</monospace>, which takes an angle in radians and outputs the sine of that angle. For example,</p>
<p specific-use="line"><monospace>1 <bold>import</bold> math</monospace></p>
<p specific-use="line"><monospace>2 x = 21</monospace></p>
<p specific-use="line"><monospace>3 y = math.sin(x)</monospace></p>
<p specific-use="line"><monospace>4 <bold>print</bold>(y)</monospace></p>
<p specific-use="line"> <monospace>0.8366556385360561</monospace></p>
<p specific-use="continuation">In the above program, the sine of <monospace>21 rad</monospace> is calculated, stored in <monospace>y</monospace>, and printed to the screen as the code’s sole output. As in mathematics, an <italic>expression</italic> is formally defined as a unit of code that yields a value upon evaluation. As such, <monospace>x + 2*y</monospace>, <monospace>5 + 3</monospace>, <monospace>sin(pi)</monospace>, and even the number <monospace>5</monospace> alone, are examples of expressions (the final example is also known as a <italic>literal</italic>). All variable definitions involve setting a variable name equal to an expression.</p>
<p>Python’s operator precedence rules mirror those in mathematics. For instance, <monospace>2+5*3</monospace> is interpreted as <monospace>2+(5*3)</monospace>. Python supports some operations that are not often found in arithmetic, such as <monospace>|</monospace> and <monospace>is</monospace>; a complete listing can be found in the official documentation [<xref ref-type="bibr" rid="pcbi.1004867.ref060">60</xref>]. Even complex expressions, like <monospace>x+3&gt;&gt;1|y&amp;4&gt;=5 or 6 == z+ x)</monospace>, are fully (unambiguously) resolved by Python’s operator precedence rules. However, few programmers would have the patience to determine the meaning of such an expression by simple inspection. Instead, when expressions become complex, it is almost always a good idea to use parentheses to explicitly clarify the order: <monospace>(((x+3 &gt;&gt; 1) | y&amp;4) &gt;= 5) or (6 == (z + x))</monospace>.</p>
<p>The following block reveals an interesting deviation from the behavior of a variable as typically encountered in mathematics:</p>
<p specific-use="line"><monospace>1 x = 5</monospace></p>
<p specific-use="line"><monospace>2 x = 2</monospace></p>
<p specific-use="line"><monospace>3 <bold>print</bold>(x)</monospace></p>
<p specific-use="line"> <monospace>2</monospace></p>
<p specific-use="continuation">Viewed algebraically, the first two statements define an inconsistent system of equations (one with no solution) and may seem nonsensical. However, in Python, lines 1–2 are a perfectly valid pair of statements. When run, the <monospace>print</monospace> statement will display <monospace>2</monospace> on the screen. This occurs because Python, like most other languages, takes the statement <monospace>x = 2</monospace> to be a command to assign the value of <monospace>2</monospace> to <monospace>x</monospace>, ignoring any previous state of the variable <monospace>x</monospace>; such variable assignment statements are often denoted with the typographic convention “<italic>x</italic> ← 2”. Lines 1–2 above are <bold>instructions</bold> to the Python interpreter, rather than some system of equations with no solutions for the variable <italic>x</italic>. This example also touches upon the fact that a Python variable is purely a <bold>reference</bold> to an object such as the integer <monospace>5</monospace>(For now, take an <italic>object</italic> to simply be an addressable chunk of memory, meaning it can have a value and be referenced by a variable; objects are further described in the section on OOP.). This is a property of Python’s <italic>type system</italic>. Python is said to be <italic>dynamically typed</italic>, versus <italic>statically typed</italic> languages such as C. In statically typed languages, a program’s data (variable names) are bound to both an object and a type, and type checking is performed at compile-time; in contrast, variable names in a program written in a dynamically typed language are bound only to objects, and type checking is performed at run-time. An extensive treatment of this topic can be found in [<xref ref-type="bibr" rid="pcbi.1004867.ref061">61</xref>]. Dynamic typing is illustrated by the following example. (The pound sign, #, starts a <italic>comment</italic>; Python ignores anything after a # sign, so in-line comments offer a useful mechanism for explaining and documenting one’s code.)</p>
<p><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e008" xlink:type="simple"/></p>
<p>The above behavior results from the fact that, in Python, the notion of <italic>type</italic> (defined below) is attached to an object, not to any one of the potentially multiple names (variables) that reference that object. The first two lines illustrate that two or more variables can reference the same object (known as a <italic>shared reference</italic>), which in this case is of type <monospace>int</monospace>. When <monospace>y = x</monospace> is executed, <monospace>y</monospace> points to the object <monospace>x</monospace> points to (the integer <monospace>1</monospace>). When <monospace>x</monospace> is changed, <monospace>y</monospace> still points to that original integer object. Note that Python strings and integers are <italic>immutable</italic>, meaning they cannot be changed in-place. However, some other object types, such as lists (described below), are mutable. These aspects of the language can become rather subtle, and the various features of the variable/object relationship—shared references, object mutability, etc.—can give rise to complicated scenarios. Supplemental Chapter 8 (<xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>) explores the Python memory model in more detail.</p>
</sec>
<sec id="sec011">
<title>Statements and Types</title>
<p>A <italic>statement</italic> is a command that instructs the Python interpreter to <bold>do</bold> something. All expressions are statements, but a statement need not be an expression. For instance, a statement that, upon execution, causes a program to stop running would never return a value, so it cannot be an expression. Most broadly, statements are instructions, while expressions are combinations of symbols (variables, literals, operators, etc.) that evaluate to a particular value. This particular value might be numerical (e.g., <monospace>5</monospace>), a string (e.g., <monospace>'foo'</monospace>), Boolean (<monospace>True</monospace>/<monospace>False</monospace>), or some other type. Further distinctions between expressions and statements can become esoteric, and are not pertinent to much of the practical programming done in the biosciences.</p>
<p>The <italic>type</italic> of an object determines how the interpreter will treat the object when it is used. Given the code <monospace>x = 5</monospace>, we can say that “<monospace>x</monospace> is a variable that refers to an object that is of type <monospace>int</monospace>”. We may simplify this to say “<monospace>x</monospace> is an <monospace>int</monospace>”; while technically incorrect, that is a shorter and more natural phrase. When the Python interpreter encounters the expression <monospace>x + y</monospace>, if <monospace>x</monospace> and <monospace>y</monospace> are [variables that point to objects of type] <monospace>int</monospace>, then the interpreter would use the addition hardware on the computer to add them. If, on the other hand, <monospace>x</monospace> and <monospace>y</monospace> were of type <monospace>str</monospace>, then Python would join them together. If one is a <monospace>str</monospace> and one is an <monospace>int</monospace>, the Python interpreter would “raise an exception” and the program would crash. Thus far, each variable we have encountered has been an integer (<monospace>int</monospace>) type, a string (<monospace>str</monospace>), or, in the case of <monospace>sin()</monospace>’s output, a real number stored to high precision (a <monospace>float</monospace>, for floating-point number). Strings and their constituent characters are among the most useful of Python’s built-in types. Strings are sequences of characters, such as any word in the English language. In Python, a character is simply a string of length one. Each character in a string has a corresponding index, starting from <monospace>0</monospace> and ranging to index <monospace>n-1</monospace> for a string of <italic>n</italic> characters. <xref ref-type="fig" rid="pcbi.1004867.g001">Fig 1</xref> diagrams the composition and some of the functionality of a string, and the following code-block demonstrates how to define and manipulate strings and characters:</p>
<p specific-use="line"><monospace>1 x = "<italic>red</italic>"</monospace></p>
<p specific-use="line"><monospace>2 y = "<italic>green</italic>"</monospace></p>
<p specific-use="line"><monospace>3 z = "<italic>blue</italic>"</monospace></p>
<p specific-use="line"><monospace>4 <bold>print</bold>(x + y + z)</monospace></p>
<p specific-use="line"><monospace> redgreenblue</monospace></p>
<p specific-use="line"><monospace>5 a = x[1]</monospace></p>
<p specific-use="line"><monospace>6 b = y[2]</monospace></p>
<p specific-use="line"><monospace>7 c = z[3]</monospace></p>
<p specific-use="line"><monospace>8 <bold>print</bold>(a + " " + b + " " + c)</monospace></p>
<p specific-use="line"> <monospace>e e e</monospace></p>
<fig id="pcbi.1004867.g001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1004867.g001</object-id>
<label>Fig 1</label>
<caption>
<title>Strings in Python: anatomy and basic behavior.</title>
<p>The anatomy and basic behavior of Python strings are shown, as samples of actual code (left panel) and corresponding conceptual diagrams (right panel). The Python interpreter prompts for user input on lines beginning with <monospace>&gt;&gt;&gt;</monospace> (leftmost edge), while a starting <monospace>…</monospace> denotes a continuation of the previous line; output lines are not prefixed by an initial character (e.g., the fourth line in this example). Strings are simply character array objects (of type <monospace>str</monospace>), and a sample string-specific method (<monospace>replace</monospace>) is shown on line 3. As with ordinary lists, strings can be ‘sliced’ using the syntax shown here: the first list element to be included in the slice is indexed by <monospace>start</monospace>, and the last included element is at <monospace>stop-1</monospace>, with an optional stride of size <monospace>step</monospace> (defaults to one). Concatenation, via the <monospace>+</monospace> operator, is the joining of whole strings or subsets of strings that are generated via slicing (as in this case). For clarity, the integer indices of the string positions are shown only in the forward (left to right) direction for <monospace>mySnake1</monospace> and in the reverse direction for <monospace>mySnake2</monospace>. These two strings are sliced and concatenated to yield the object <monospace>newSnake</monospace>; note that slicing <monospace>mySnake1</monospace> as <monospace>[0:7]</monospace> and not <monospace>[0:6]</monospace> means that a whitespace char is included between the two words in the resultant <monospace>newSnake</monospace>, thus obviating the need for further manipulations to insert whitespace (e.g., concatenations of the form <monospace>word1+' '+word2</monospace>).</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1004867.g001" xlink:type="simple"/>
</fig>
<p specific-use="continuation">Here, three variables are created by assignment to three corresponding strings. The first <monospace>print</monospace> may seem unusual: the Python interpreter is instructed to “add” three strings; the interpreter joins them together in an operation known as <italic>concatenation</italic>. The second portion of code stores the character <monospace>'e'</monospace>, as extracted from each of the first three strings, in the respective variables, <monospace>a</monospace>, <monospace>b</monospace> and <monospace>c</monospace>. Then, their content is printed, just as the first three strings were. Note that spacing is not implicitly handled by Python (or most languages) so as to produce human-readable text; therefore, quoted whitespace was explicitly included between the strings (line 8; see also the underscore characters, ‘_’, in <xref ref-type="fig" rid="pcbi.1004867.g001">Fig 1</xref>).</p>
<p><bold>Exercise 1</bold>: Write a program to convert a temperature in degrees Fahrenheit to degrees Celsius and Kelvin. The topic of user input has not been covered yet (to be addressed in the section on File Management and I/O), so begin with a variable that you pre-set to the initial temperature (in °F). Your code should convert the temperature to these other units and <monospace>print</monospace> it to the console.</p>
</sec>
<sec id="sec012">
<title>Functions</title>
<p>A deep benefit of the programming approach to problem-solving is that computers enable mechanization of repetitive tasks, such as those associated with data-analysis workflows. This is true in biological research and beyond. To achieve automation, a discrete and well-defined component of the problem-solving logic is encapsulated as a function. A <italic>function</italic> is a block of code that expresses the solution to a small, standalone problem/task; quite literally, a function can be any block of code that is defined by the user as being a function. Other parts of a program can then <italic>call</italic> the function to perform its task and possibly return a solution. For instance, a function can be repetitively applied to a series of input values via looping constructs (described below) as part of a data-processing pipeline.</p>
<p>Much of a program’s versatility stems from its functions—the behavior and properties of each individual function, as well as the program’s overall repertoire of available functions. Most simply, a function typically takes some values as its input <italic>arguments</italic> and acts on them; however, note that functions can be defined so as to not require any arguments (e.g., <monospace>print()</monospace> will give an empty line). Often, a function’s arguments are specified simply by their position in the ordered list of arguments; e.g., the function is written such that the first expected argument is height, the second is weight, etc. As an alternative to such a system of <italic>positional arguments</italic>, Python has a useful feature called <italic>keyword arguments</italic>, whereby one can name a function’s arguments and provide them in any order, e.g. <monospace>plotData(dataset = dats, color = 'red', width = 10)</monospace>. Many scientific packages make extensive use of keyword arguments [<xref ref-type="bibr" rid="pcbi.1004867.ref062">62</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref063">63</xref>]. The arguments can be variables, explicitly specified values (constants, string literals, etc.), or even other functions. Most generally, <bold>any</bold> expression can serve as an argument (Supplemental Chapter 13 covers more advanced usage, such as function objects). Evaluating a function results in its <italic>return value</italic>. In this way, a function’s arguments can be considered to be its domain and its return values to be its range, as for any mathematical function <italic>f</italic> that maps a domain <italic>X</italic> to the range <italic>Y</italic>, <inline-formula id="pcbi.1004867.e009"><alternatives><graphic id="pcbi.1004867.e009g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e009" xlink:type="simple"/><mml:math display="inline" id="M10"><mml:mrow><mml:mi>X</mml:mi> <mml:mover><mml:mo>→</mml:mo> <mml:mi>f</mml:mi></mml:mover> <mml:mi>Y</mml:mi></mml:mrow></mml:math></alternatives></inline-formula>. If a Python function is given arguments outside its domain, it may return an invalid/nonsensical result, or even crash the program being run. The following illustrates how to define and then call (<italic>invoke</italic>) a function:</p>
<p specific-use="line"><monospace>1 <bold>def myFun</bold>(a,b):</monospace></p>
<p specific-use="line"><monospace>2  c = a + b</monospace></p>
<p specific-use="line"><monospace>3  d = a − b</monospace></p>
<p specific-use="line"><monospace>4  <bold>return</bold> c*d  # NB: a return does not ' print ' anything on its own</monospace></p>
<p specific-use="line"><monospace>5 x = myFun(1,3) + myFun(2,8) + myFun(-1,18)</monospace></p>
<p specific-use="line"><monospace>6 <bold>print</bold>(x)</monospace></p>
<p specific-use="line"> <monospace>-391</monospace></p>
<p>To see the utility of functions, consider how much code would be required to calculate <monospace>x</monospace> (line 5) in the absence of any calls to <monospace>myFun</monospace>. Note that discrete chunks of code, such as the body of a function, are delimited in Python via whitespace, not curly braces, <monospace>{}</monospace>, as in C or Perl. In Python, each level of indentation of the source code corresponds to a separate <italic>block</italic> of statements that group together in terms of program logic. The first line of above code illustrates the syntax to declare a function: a function definition begins with the keyword <monospace>def</monospace>, the following word names the function, and then the names within parentheses (separated by commas) define the arguments to the function. Finally, a colon terminates the function definition. (Default values of arguments can be specified as part of the function definition; e.g., writing line 1 as <monospace>def myFun(a = 1,b = 3):</monospace> would set default values of <monospace>a</monospace> and <monospace>b</monospace>.) The three statements after <monospace>def myFun(a,b):</monospace> are indented by some number of spaces (two, in this example), and so these three lines (2–4) constitute a <italic>block</italic>. In this block, lines 2–3 perform arithmetic operations on the arguments, and the final line of this function specifies the return value as the product of variables <monospace>c</monospace> and <monospace>d</monospace>. In effect, a <monospace>return</monospace> statement is what the function evaluates to when called, this return value taking the place of the original function call. It is also possible that a function returns nothing at all; e.g., a function might be intended to perform various manipulations and not necessarily return any output for downstream processing. For example, the following code defines (and then calls) a function that simply prints the values of three variables, without a <monospace>return</monospace> statement:</p>
<p specific-use="line"><monospace>1 <bold>def readOut</bold>(a,b,c):</monospace></p>
<p specific-use="line"><monospace>2  <bold>print</bold>("<italic>Variable 1 is:</italic> ", a)</monospace></p>
<p specific-use="line"><monospace>3  <bold>print</bold>("<italic>Variable 2 is:</italic> ", b)</monospace></p>
<p specific-use="line"><monospace>4  <bold>print</bold>("<italic>Variable 3 is:</italic> ", c)</monospace></p>
<p specific-use="line"><monospace>5 readOut(1,2,4)</monospace></p>
<p specific-use="line"> <monospace>Variable 1 is : 1</monospace></p>
<p specific-use="line"> <monospace>Variable 2 is : 2</monospace></p>
<p specific-use="line"> <monospace>Variable 3 is : 4</monospace></p>
<p specific-use="line"><monospace>6 readOut(21,5553,3.33)</monospace></p>
<p specific-use="line"> <monospace>Variable 1 is : 21</monospace></p>
<p specific-use="line"> <monospace>Variable 2 is : 5553</monospace></p>
<p specific-use="line"> <monospace>Variable 3 is : 3.33</monospace></p>
</sec>
<sec id="sec013">
<title>Code Organization and Scope</title>
<p>Beyond automation, structuring a program into functions also aids the modularity and interpretability of one’s code, and ultimately facilitates the debugging process—an important consideration in all programming projects, large or small.</p>
<p>Python functions can be <italic>nested</italic>; that is, one function can be defined inside another. If a particular function is needed in only one place, it can be defined where it is needed and it will be unavailable elsewhere, where it would not be useful. Additionally, nested function definitions have access to the variables that are available when the nested function is defined. Supplemental Chapter 13 explores nested functions in greater detail. A function is an object in Python, just like a string or an integer. (Languages that allow function names to behave as objects are said to have “first-class functions.”) Therefore, a function can itself serve as an argument to another function, analogous to the mathematical composition of two functions, <italic>g</italic>(<italic>f</italic>(<italic>x</italic>)). This property of the language enables many interesting programming techniques, as explored in Supplemental Chapters 9 and 13.</p>
<p>A variable created inside a block, e.g. within a function, cannot be accessed by name from outside that block. The variable’s <italic>scope</italic> is limited to the block wherein it was defined. A variable or function that is defined outside of every other block is said to be <italic>global</italic> in scope. Variables can appear within the scope in which they are defined, or any block within that scope, but the reverse is not true: variables cannot escape their scope. This rule hierarchy is diagrammed in <xref ref-type="fig" rid="pcbi.1004867.g002">Fig 2</xref>. There is only one global scope, and variables in it necessarily “persist” between function calls (unlike variables in local scope). For instance, consider two functions, <monospace>fun1</monospace> and <monospace>fun2</monospace>; for convenience, denote their local scopes as ℓ<sub>1</sub> and ℓ<sub>2</sub>, and denote the global scope as <inline-formula id="pcbi.1004867.e010"><alternatives><graphic id="pcbi.1004867.e010g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e010" xlink:type="simple"/><mml:math display="inline" id="M17"><mml:mi mathvariant="script">G</mml:mi></mml:math></alternatives></inline-formula>. Starting in <inline-formula id="pcbi.1004867.e011"><alternatives><graphic id="pcbi.1004867.e011g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e011" xlink:type="simple"/><mml:math display="inline" id="M18"><mml:mi mathvariant="script">G</mml:mi></mml:math></alternatives></inline-formula>, a call to <monospace>fun1</monospace> places us in scope ℓ<sub>1</sub>. When <monospace>fun1</monospace> successfully returns, we return to scope <inline-formula id="pcbi.1004867.e012"><alternatives><graphic id="pcbi.1004867.e012g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e012" xlink:type="simple"/><mml:math display="inline" id="M19"><mml:mi mathvariant="script">G</mml:mi></mml:math></alternatives></inline-formula>; a call to <monospace>fun2</monospace> places us in scope ℓ<sub>2</sub>, and after it completes we return yet again to <inline-formula id="pcbi.1004867.e013"><alternatives><graphic id="pcbi.1004867.e013g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e013" xlink:type="simple"/><mml:math display="inline" id="M20"><mml:mi mathvariant="script">G</mml:mi></mml:math></alternatives></inline-formula>. We always return to <inline-formula id="pcbi.1004867.e014"><alternatives><graphic id="pcbi.1004867.e014g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e014" xlink:type="simple"/><mml:math display="inline" id="M21"><mml:mi mathvariant="script">G</mml:mi></mml:math></alternatives></inline-formula>. In this sense, local scope varies, whereas global scope (by definition) persists between function calls, is available inside/outside of functions, etc. Explicitly tracking the precise scope of every object in a large body of code can be cumbersome. However, this is rarely burdensome in practice: Variables are generally defined (and are therefore in scope) where they are used. After encountering some out-of-scope errors and gaining experience with nested functions and variables, carefully managing scope in a consistent and efficient manner will become an implicit skill (and will be reflected in one’s coding style).</p>
<fig id="pcbi.1004867.g002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1004867.g002</object-id>
<label>Fig 2</label>
<caption>
<title>Python’s scope hierarchy and variable name resolution.</title>
<p>As described in the text, multiple names (variables) can reference a single object. Conversely, can a single variable, say <monospace>x</monospace>, reference multiple objects in a unique and well-defined manner? Exactly this is enabled by the concept of a <italic>namespace</italic>, which can be viewed as the set of all <inline-formula id="pcbi.1004867.e015"><alternatives><graphic id="pcbi.1004867.e015g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e015" xlink:type="simple"/><mml:math display="inline" id="M22"><mml:mtext mathvariant="sans-serif">name</mml:mtext></mml:math></alternatives></inline-formula>↔<inline-formula id="pcbi.1004867.e016"><alternatives><graphic id="pcbi.1004867.e016g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e016" xlink:type="simple"/><mml:math display="inline" id="M23"><mml:mtext mathvariant="sans-serif">object</mml:mtext></mml:math></alternatives></inline-formula> mappings for all variable names and objects at a particular “level” in a program. This is a crucial concept, as everything in Python is an object. The key idea is that <inline-formula id="pcbi.1004867.e017"><alternatives><graphic id="pcbi.1004867.e017g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e017" xlink:type="simple"/><mml:math display="inline" id="M24"><mml:mtext mathvariant="sans-serif">name</mml:mtext></mml:math></alternatives></inline-formula>↔<inline-formula id="pcbi.1004867.e018"><alternatives><graphic id="pcbi.1004867.e018g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e018" xlink:type="simple"/><mml:math display="inline" id="M25"><mml:mtext mathvariant="sans-serif">object</mml:mtext></mml:math></alternatives></inline-formula> mappings are insulated from one another, and therefore free to vary, at different “levels” in a program—e.g., <monospace>x</monospace> might refer to object <monospace>obj2</monospace> in a block of code buried (many indentation levels deep) within a program, whereas the same variable name <monospace>x</monospace> may reference an entirely different object, <monospace>obj1</monospace>, when it appears as a top-level (module-level) name definition. This seeming ambiguity is resolved by the notion of variable scope. The term <italic>scope</italic> refers to the level in the namespace hierarchy that is searched for <inline-formula id="pcbi.1004867.e019"><alternatives><graphic id="pcbi.1004867.e019g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e019" xlink:type="simple"/><mml:math display="inline" id="M26"><mml:mtext mathvariant="sans-serif">name</mml:mtext></mml:math></alternatives></inline-formula>↔<inline-formula id="pcbi.1004867.e020"><alternatives><graphic id="pcbi.1004867.e020g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e020" xlink:type="simple"/><mml:math display="inline" id="M27"><mml:mtext mathvariant="sans-serif">object</mml:mtext></mml:math></alternatives></inline-formula> mappings; different mappings can exist in different scopes, thus avoiding potential name collisions. At a specific point in a block of code, in what order does Python search the namespace levels? (And, which of the potentially multiple <inline-formula id="pcbi.1004867.e021"><alternatives><graphic id="pcbi.1004867.e021g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e021" xlink:type="simple"/><mml:math display="inline" id="M28"><mml:mtext mathvariant="sans-serif">name</mml:mtext></mml:math></alternatives></inline-formula>↔<inline-formula id="pcbi.1004867.e022"><alternatives><graphic id="pcbi.1004867.e022g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e022" xlink:type="simple"/><mml:math display="inline" id="M29"><mml:mtext mathvariant="sans-serif">object</mml:mtext></mml:math></alternatives></inline-formula> mappings takes precedence?) Python resolves variable names by traversing scope in the order <inline-formula id="pcbi.1004867.e023"><alternatives><graphic id="pcbi.1004867.e023g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e023" xlink:type="simple"/><mml:math display="inline" id="M30"><mml:mtext mathvariant="sans-serif">L</mml:mtext></mml:math></alternatives></inline-formula>→<inline-formula id="pcbi.1004867.e024"><alternatives><graphic id="pcbi.1004867.e024g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e024" xlink:type="simple"/><mml:math display="inline" id="M31"><mml:mtext mathvariant="sans-serif">E</mml:mtext></mml:math></alternatives></inline-formula>→<inline-formula id="pcbi.1004867.e025"><alternatives><graphic id="pcbi.1004867.e025g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e025" xlink:type="simple"/><mml:math display="inline" id="M32"><mml:mtext mathvariant="sans-serif">G</mml:mtext></mml:math></alternatives></inline-formula>→<inline-formula id="pcbi.1004867.e026"><alternatives><graphic id="pcbi.1004867.e026g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e026" xlink:type="simple"/><mml:math display="inline" id="M33"><mml:mtext mathvariant="sans-serif">B</mml:mtext></mml:math></alternatives></inline-formula>, as shown here. <inline-formula id="pcbi.1004867.e027"><alternatives><graphic id="pcbi.1004867.e027g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e027" xlink:type="simple"/><mml:math display="inline" id="M34"><mml:mtext mathvariant="sans-serif">L</mml:mtext></mml:math></alternatives></inline-formula> stands for the <bold>l</bold>ocal, innermost scope, which contains local names and is searched first; <inline-formula id="pcbi.1004867.e028"><alternatives><graphic id="pcbi.1004867.e028g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e028" xlink:type="simple"/><mml:math display="inline" id="M35"><mml:mtext mathvariant="sans-serif">E</mml:mtext></mml:math></alternatives></inline-formula> follows, and is the scope of any <bold>e</bold>nclosing functions; next is <inline-formula id="pcbi.1004867.e029"><alternatives><graphic id="pcbi.1004867.e029g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e029" xlink:type="simple"/><mml:math display="inline" id="M36"><mml:mtext mathvariant="sans-serif">G</mml:mtext></mml:math></alternatives></inline-formula>, which is the namespace of all <bold>g</bold>lobal names in the currently loaded modules; finally, the outermost scope <inline-formula id="pcbi.1004867.e030"><alternatives><graphic id="pcbi.1004867.e030g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e030" xlink:type="simple"/><mml:math display="inline" id="M37"><mml:mtext mathvariant="sans-serif">B</mml:mtext></mml:math></alternatives></inline-formula>, which consists of Python’s <bold>b</bold>uilt-in names (e.g., <monospace>int</monospace>), is searched last. The two code examples in this figure demonstrate variable name resolution at local and global scope levels. In the code on the right-hand side, the variable <monospace>e</monospace> is used both (i) as a name imported from the <inline-formula id="pcbi.1004867.e031"><alternatives><graphic id="pcbi.1004867.e031g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e031" xlink:type="simple"/><mml:math display="inline" id="M38"><mml:mtext mathvariant="sans-serif">math</mml:mtext></mml:math></alternatives></inline-formula> module (global scope) and (ii) as a name that is local to a function body, albeit with the <monospace>global</monospace> keyword prior to being assigned to the integer <monospace>-1234</monospace>. This construct leads to a confusing flow of logic (colored arrows), and is considered poor programming practice.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1004867.g002" xlink:type="simple"/>
</fig>
<p>Well-established practices have evolved for structuring code in a logically organized (often hierarchical) and “clean” (lucid) manner, and comprehensive treatments of both practical and abstract topics are available in numerous texts. See, for instance, the practical guide <italic>Code Complete</italic>[<xref ref-type="bibr" rid="pcbi.1004867.ref064">64</xref>], the intermediate-level <italic>Design Patterns: Elements of Reusable Object-Oriented Software</italic>[<xref ref-type="bibr" rid="pcbi.1004867.ref065">65</xref>], and the classic (and more abstract) texts <italic>Structure and Interpretation of Computer Programs</italic>[<xref ref-type="bibr" rid="pcbi.1004867.ref039">39</xref>] and <italic>Algorithms</italic>[<xref ref-type="bibr" rid="pcbi.1004867.ref050">50</xref>]; a recent, and free, text in the latter class is <italic>Introduction to Computing</italic>[<xref ref-type="bibr" rid="pcbi.1004867.ref040">40</xref>]. Another important aspect of coding is closely related to the above: usage of brief, yet informative, names as identifiers for variables and function definitions. Even a mid-sized programming project can quickly grow to thousands of lines of code, employ hundreds of functions, and involve hundreds of variables. Though the fact that many variables will lie outside the scope of one another lessens the likelihood of undesirable references to ambiguous variable names, one should note that careless, inconsistent, or undisciplined nomenclature <bold>will</bold> confuse later efforts to understand a piece of code, for instance by a collaborator or, after some time, even the original programmer. Writing clear, well-defined and well-annotated code is an essential skill to develop. <xref ref-type="table" rid="pcbi.1004867.t003">Table 3</xref> outlines some suggested naming practices.</p>
<table-wrap id="pcbi.1004867.t003" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1004867.t003</object-id>
<label>Table 3</label>
<caption>
<title>Sample variable-naming schemes in Python.</title>
</caption>
<alternatives>
<graphic id="pcbi.1004867.t003g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1004867.t003" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left">Variable Name</th>
<th align="left">Valid?</th>
<th align="left">Comments</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><monospace>numHelix</monospace></td>
<td align="left">yes</td>
<td align="left">By using the camelCase convention (capitalize the first letter of every word following the first), this variable name is reasonably descriptive, easily read, and brief.</td>
</tr>
<tr>
<td align="left"><monospace>123myVar!?</monospace></td>
<td align="left">no</td>
<td align="left">This variable uses forbidden characters (‘!’ and ‘?’), and it also starts with digits; all special characters apart from ‘<monospace>_</monospace>’ are disallowed, and no variable can begin with a digit.</td>
</tr>
<tr>
<td align="left"><monospace>int</monospace></td>
<td align="left">yes</td>
<td align="left">This Python built-in function is technically allowed as a variable name; however, its attempted usage may yield unexpected behavior, as the statement ‘<monospace>int(x)</monospace>’ converts an object ‘<monospace>x</monospace>’ to type <monospace>int</monospace>.</td>
</tr>
<tr>
<td align="left"><monospace>else</monospace></td>
<td align="left">no</td>
<td align="left">This is an element of the basic syntax in Python (a <italic>keyword</italic>). Using a keyword as a variable name is a syntax error. Other common keywords are <monospace>for</monospace>, <monospace>if</monospace>, <monospace>not</monospace>, <monospace>return</monospace>, and <monospace>def</monospace>.</td>
</tr>
<tr>
<td align="left"><monospace>_myVar2</monospace></td>
<td align="left">yes</td>
<td align="left">Though fairly nondescript, this variable does not contain forbidden characters and is technically valid (note that the underscore character is generally used to denote [protected] member variables in objects).</td>
</tr>
<tr>
<td align="left"><monospace>IlI1lI</monospace></td>
<td align="left">yes</td>
<td align="left">While technically valid, such a name is unnecessarily frustrating for those reading and maintaining code.</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t003fn001">
<p>These examples of variable-naming schemes in Python are annotated with comments as to their validity and their suitability (the latter is more subjective). In practice, variables at higher (broader) levels of scope tend to have names that are longer, more descriptive, and less ambiguous than at lower (narrower) levels of scope.</p>
</fn>
</table-wrap-foot>
</table-wrap>
<p>Python minimizes the problems of conflicting names via the concept of namespaces. A <italic>namespace</italic> is the set of all possible (valid) names that can be used to uniquely identify an object at a given level of scope, and in this way it is a more generalized concept than scope (see also <xref ref-type="fig" rid="pcbi.1004867.g002">Fig 2</xref>). To access a name in a different namespace, the programmer must tell the interpreter what namespace to search for the name. An <monospace>import</monospace>ed module, for example, creates its own new namespace. The <inline-formula id="pcbi.1004867.e032"><alternatives><graphic id="pcbi.1004867.e032g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e032" xlink:type="simple"/><mml:math display="inline" id="M39"><mml:mtext mathvariant="sans-serif">math</mml:mtext></mml:math></alternatives></inline-formula> module creates a namespace (called <monospace>math</monospace>) that contains the <monospace>sin()</monospace> function. To access <monospace>sin()</monospace>, the programmer must qualify the function call with the namespace to search, as in <monospace>y = math.sin(x)</monospace>. This precision is necessary because merging two namespaces that might possibly contain the same names (in this case, the <monospace>math</monospace> namespace and the global namespace) results in a <italic>name collision</italic>. Another example would be to consider the files in a Unix directory (or a Windows folder); in the namespace of this top-level directory, one file can be named <inline-formula id="pcbi.1004867.e033"><alternatives><graphic id="pcbi.1004867.e033g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e033" xlink:type="simple"/><mml:math display="inline" id="M40"><mml:mtext mathvariant="sans-serif">foo1</mml:mtext></mml:math></alternatives></inline-formula> and another <inline-formula id="pcbi.1004867.e034"><alternatives><graphic id="pcbi.1004867.e034g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e034" xlink:type="simple"/><mml:math display="inline" id="M41"><mml:mtext mathvariant="sans-serif">foo2</mml:mtext></mml:math></alternatives></inline-formula>, but there cannot be two files named <inline-formula id="pcbi.1004867.e035"><alternatives><graphic id="pcbi.1004867.e035g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e035" xlink:type="simple"/><mml:math display="inline" id="M42"><mml:mtext mathvariant="sans-serif">foo</mml:mtext></mml:math></alternatives></inline-formula>—that would be a name collision.</p>
<p><bold>Exercise 2</bold>: Recall the temperature conversion program of Exercise 1. Now, write a function to perform the temperature conversion; this function should take one argument (the input temperature). To test your code, use the function to convert and print the output for some arbitrary temperatures of your choosing.</p>
</sec>
<sec id="sec014">
<title>Control Flow: Conditionals</title>
<disp-quote>
<p>“Begin at the beginning,” the King said gravely, “and go on till you come to the end; then, stop.”</p>
<p>—Lewis Carroll, <italic>Alice in Wonderland</italic></p>
</disp-quote>
<p>Thus far, all of our sample code and exercises have featured a linear flow, with statements executed and values emitted in a predictable, deterministic manner. However, most scientific datasets are not amenable to analysis via a simple, predefined stream of instructions. For example, the initial data-processing stages in many types of experimental pipelines may entail the assignment of statistical confidence/reliability scores to the data, and then some form of decision-making logic might be applied to filter the data. Often, <bold>if</bold> a particular datum does not meet some statistical criterion and is considered a likely outlier, <bold>then</bold> a special task is performed; <bold>otherwise</bold>, another (default) route is taken. This branched <bold>if</bold>–<bold>then</bold>–<bold>else</bold> logic is a key decision-making component of virtually any algorithm, and it exemplifies the concept of control flow. The term <italic>control flow</italic> refers to the progression of logic as the Python interpreter traverses the code and the program “runs”—transitioning, as it runs, from one state to the next, choosing which statements are executed, iterating over a loop some number of times, and so on. (Loosely, the <italic>state</italic> can be taken as the line of code that is being executed, along with the collection of all variables, and their values, accessible to a running program at any instant; given the precise state, the next state of a deterministic program can be predicted with perfect precision.) The following code introduces the <monospace>if</monospace> statement:</p>
<p specific-use="line"><monospace>1 <bold>from</bold> random <bold>import</bold> randint</monospace></p>
<p specific-use="line"><monospace>2 a = randint(0,100)  # get a random integer between 0 and 100 (inclusive)</monospace></p>
<p specific-use="line"><monospace>3 <bold>if</bold>(a &lt; 50):</monospace></p>
<p specific-use="line"><monospace>4  <bold>print</bold>("<italic>variable is less than 50</italic>")</monospace></p>
<p specific-use="line"><monospace>5 <bold>else:</bold></monospace></p>
<p specific-use="line"><monospace>6  <bold>print</bold>("<italic>the variable is not less than 50</italic>")</monospace></p>
<p specific-use="line"> <monospace>variable is less than 50</monospace></p>
<p>In this example, a random integer between <monospace>0</monospace> and <monospace>100</monospace> is assigned to the variable <monospace>a</monospace>. (Though not applicable to <monospace>randint</monospace>, note that many sequence/list-related functions, such as <monospace>range(a,b)</monospace>, generate collections that start at the first argument and end just before the last argument. This is because the function <monospace>range(a,b)</monospace> produces <italic>b</italic> − <italic>a</italic> items starting at <italic>a</italic>; with a default stepsize of one, this makes the endpoint <monospace>b-1</monospace>.) Next, the <monospace>if</monospace> statement tests whether the variable is less than <monospace>50</monospace>. If that condition is unfulfilled, the block following <monospace>else</monospace> is executed. Syntactically, <monospace>if</monospace> is immediately followed by a <italic>test condition</italic>, and then a colon to denote the start of the <monospace>if</monospace> statement’s block (<xref ref-type="fig" rid="pcbi.1004867.g003">Fig 3</xref> illustrates the use of conditionals). Just as with functions, the further indentation on line 4 creates a block of statements that are executed together (here, the block has only one statement). Note that an <monospace>if</monospace> statement can be defined without a corresponding <monospace>else</monospace> block; in that case, Python simply continues executing the code that is indented by one less level (i.e., at the same indentation level as the <monospace>if</monospace> line). Also, Python offers a built-in <monospace>elif</monospace> keyword (a contraction of “else if”) that tests a subsequent conditional if and only if the first condition is not met. A series of <monospace>elif</monospace> statements can be used to achieve similar effects as the <monospace>switch</monospace>/<monospace>case</monospace> statement constructs found in C and in other languages (including Unix shell scripts) that are often encountered in bioinformatics.</p>
<fig id="pcbi.1004867.g003" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1004867.g003</object-id>
<label>Fig 3</label>
<caption>
<title>Sample flowchart for a sorting algorithm.</title>
<p>This flowchart illustrates the conditional constructs, loops, and other elements of control flow that comprise an algorithm for sorting, from smallest to largest, an arbitrary list of numbers (the algorithm is known as “bubble sort”). In this type of diagram, arrows symbolize the flow of logic (control flow), rounded rectangles mark the start and end points, slanted parallelograms indicate I/O (e.g., a user-provided list), rectangles indicate specific subroutines or procedures (blocks of statements), and diamonds denote conditional constructs (branch points). Note that this sorting algorithm involves a pair of nested loops over the list size (blue and orange), meaning that the calculation cost will go as the square of the input size (here, an <italic>N</italic>-element list); this cost can be halved by adjusting the inner loop conditional to be “<inline-formula id="pcbi.1004867.e036"><alternatives><graphic id="pcbi.1004867.e036g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e036" xlink:type="simple"/><mml:math display="inline" id="M43"><mml:mtext mathvariant="sans-serif">j &lt; N − i − 1</mml:mtext></mml:math></alternatives></inline-formula>”, as the largest <italic>i</italic> elements will have already reached their final positions.</p>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1004867.g003" xlink:type="simple"/>
</fig>
<p>Now, consider the following extension to the preceding block of code. Is there any fundamental issue with it?</p>
<p specific-use="line"><monospace>1 <bold>from</bold> random <bold>import</bold> randint</monospace></p>
<p specific-use="line"><monospace>2 a = randint(0,100)</monospace></p>
<p specific-use="line"><monospace>3 <bold>if</bold>(a &lt; 50):</monospace></p>
<p specific-use="line"><monospace>4  <bold>print</bold>("<italic>variable is less than 50</italic>")</monospace></p>
<p specific-use="line"><monospace>5 <bold>if</bold>(a &gt; 50):</monospace></p>
<p specific-use="line"><monospace>6  <bold>print</bold>("<italic>variable is greater than 50</italic>")</monospace></p>
<p specific-use="line"><monospace>7 <bold>else</bold>:</monospace></p>
<p specific-use="line"><monospace>8  <bold>print</bold>("<italic>the variable must be 50</italic>")</monospace></p>
<p specific-use="line"> <monospace>variable is greater than 50</monospace></p>
<p specific-use="continuation">This code will function as expected for <monospace>a = 50</monospace>, as well as values exceeding <monospace>50</monospace>. However, for <monospace>a</monospace> less than <monospace>50</monospace>, the print statements will be executed from <bold>both</bold> the less-than (line 4) and equal-to (line 8) comparisons. This erroneous behavior results because an <monospace>else</monospace> statement is bound solely to the <monospace>if</monospace> statement that it directly follows; in the above code-block, an <monospace>elif</monospace> would have been the appropriate keyword for line 5. This example also underscores the danger of assuming that lack of a certain condition (a <monospace>False</monospace> built-in Boolean type) necessarily implies the fulfillment of a second condition (a <monospace>True</monospace>) for comparisons that seem, at least superficially, to be linked. In writing code with complicated streams of logic (conditionals and beyond), robust and somewhat redundant logical tests can be used to mitigate errors and unwanted behavior. A strategy for building streams of conditional statements into code, and for debugging existing codebases, involves (i) outlining the range of possible inputs (and their expected outputs), (ii) crafting the code itself, and then (iii) testing each possible type of input, carefully tracing the logical flow executed by the algorithm against what was originally anticipated. In step (iii), a careful examination of “edge cases” can help debug code and pinpoint errors or unexpected behavior. (In software engineering parlance, <italic>edge cases</italic> refer to extreme values of parameters, such as minima/maxima when considering ranges of numerical types. Recognition of edge-case behavior is useful, as a disproportionate share of errors occur near these cases; for instance, division by zero can crash a function if the denominator in each division operation that appears in the function is not carefully checked and handled appropriately. Though beyond the scope of this primer, note that Python supplies powerful error-reporting and exception-handling capabilities; see, for instance, <italic>Python Programming</italic>[<xref ref-type="bibr" rid="pcbi.1004867.ref066">66</xref>] for more information.) Supplemental Chapters 14 and 16 in <xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref> provide detailed examples of testing the behavior of code.</p>
<p><bold>Exercise 3</bold>: Recall the temperature-conversion program designed in Exercises 1 and 2. Now, rewrite this code such that it accepts two arguments: the initial temperature, and a letter designating the units of that temperature. Have the function convert the input temperature to the alternative scale. If the second argument is <monospace>‘C’</monospace>, convert the temperature to Fahrenheit, if that argument is <monospace>‘F’</monospace>, convert it to Celsius.</p>
<p>Integrating what has been described thus far, the following example demonstrates the power of control flow—not just to define computations in a structured/ordered manner, but also to solve real problems by devising an algorithm. In this example, we sort three randomly chosen integers:</p>
<p specific-use="line"><monospace>1 <bold>from</bold> random <bold>import</bold> randint</monospace></p>
<p specific-use="line"><monospace>2 <bold>def numberSort</bold>():</monospace></p>
<p specific-use="line"><monospace>3  a = randint(0,100)</monospace></p>
<p specific-use="line"><monospace>4  b = randint(0,100)</monospace></p>
<p specific-use="line"><monospace>5  c = randint(0,100)</monospace></p>
<p specific-use="line"><monospace>6  # reminder: text following the pound sign is a comment in Python.</monospace></p>
<p specific-use="line"><monospace>7  # begin sort; note the nested conditionals here</monospace></p>
<p specific-use="line"><monospace>8  <bold>if</bold> ((a &gt; b) <bold>and</bold> (a &gt; c)):</monospace></p>
<p specific-use="line"><monospace>9   largest = a</monospace></p>
<p specific-use="line"><monospace>10   <bold>if</bold>(b &gt; c):</monospace></p>
<p specific-use="line"><monospace>11    second = b</monospace></p>
<p specific-use="line"><monospace>12    third = c</monospace></p>
<p specific-use="line"><monospace>13   <bold>else:</bold></monospace></p>
<p specific-use="line"><monospace>14    second = c</monospace></p>
<p specific-use="line"><monospace>15    third = b</monospace></p>
<p specific-use="line"><monospace>16  # a must not be largest</monospace></p>
<p specific-use="line"><monospace>17  <bold>elif</bold>(b &gt; c):</monospace></p>
<p specific-use="line"><monospace>18   largest = b</monospace></p>
<p specific-use="line"><monospace>19   <bold>if</bold>(c &gt; a):</monospace></p>
<p specific-use="line"><monospace>20    second = c</monospace></p>
<p specific-use="line"><monospace>21    third = a</monospace></p>
<p specific-use="line"><monospace>22   <bold>else:</bold></monospace></p>
<p specific-use="line"><monospace>23    second = a</monospace></p>
<p specific-use="line"><monospace>24    third = c</monospace></p>
<p specific-use="line"><monospace>25  # a and b are not largest, thus c must be</monospace></p>
<p specific-use="line"><monospace>26  <bold>else:</bold></monospace></p>
<p specific-use="line"><monospace>27   largest = c</monospace></p>
<p specific-use="line"><monospace>28   <bold>if</bold>(b &lt; a):</monospace></p>
<p specific-use="line"><monospace>29    second = a</monospace></p>
<p specific-use="line"><monospace>30    third = b</monospace></p>
<p specific-use="line"><monospace>31   <bold>else:</bold></monospace></p>
<p specific-use="line"><monospace>32    second = b</monospace></p>
<p specific-use="line"><monospace>33    third = a</monospace></p>
<p specific-use="line"><monospace>34  # Python’s assert function can be used for sanity checks.</monospace></p>
<p specific-use="line"><monospace>35  # If the argument to assert() is False, the program will crash.</monospace></p>
<p specific-use="line"><monospace>36  <bold>assert</bold>(largest &gt; second)</monospace></p>
<p specific-use="line"><monospace>37  <bold>assert</bold>(second &gt; third)</monospace></p>
<p specific-use="line"><monospace>38  <bold>print</bold>("<italic>Sorted:</italic>", largest, ",", second, ",", third)</monospace></p>
<p specific-use="line"><monospace>39 numberSort()</monospace></p>
<p specific-use="line"> <monospace>Sorted : 50, 47, 11</monospace></p>
</sec>
<sec id="sec015">
<title>Control Flow: Repetition via While Loops</title>
<p>Whereas the <monospace>if</monospace> statement tests a condition exactly once and branches the code execution accordingly, the <monospace>while</monospace> statement instructs an enclosed block of code to repeat so long as the given condition (the <italic>continuation condition</italic>) is satisfied. In fact, <monospace>while</monospace> can be considered as a repeated <monospace>if</monospace>. This is the simplest form of a loop, and is termed a <italic>while loop</italic> (<xref ref-type="fig" rid="pcbi.1004867.g003">Fig 3</xref>). The condition check occurs once before entering the associated block; thus, Python’s <monospace>while</monospace> is a <italic>pre-test</italic> loop. (Some languages feature looping constructs wherein the condition check is performed after a first iteration; C’s <italic>do–while</italic> is an example of such a <italic>post-test</italic> loop. This is mentioned because looping constructs should be carefully examined when comparing source code in different languages.) If the condition is true, the block is executed and then the interpreter effectively jumps to the <monospace>while</monospace> statement that began the block. If the condition is false, the block is skipped and the interpreter jumps to the first statement after the block. The code below is a simple example of a while loop, used to generate a counter that prints each integer between <monospace>1</monospace> and <monospace>100</monospace> (inclusive):</p>
<p specific-use="line"><monospace>1 counter = 1</monospace></p>
<p specific-use="line"><monospace>2 <bold>while</bold>(counter &lt;= 100):</monospace></p>
<p specific-use="line"><monospace>3  <bold>print</bold>(counter)</monospace></p>
<p specific-use="line"><monospace>4  counter = counter + 1</monospace></p>
<p specific-use="line"> <monospace>1</monospace></p>
<p specific-use="line"> <monospace>2</monospace></p>
<p specific-use="line"> <monospace>…</monospace></p>
<p specific-use="line"> <monospace>99</monospace></p>
<p specific-use="line"> <monospace>100</monospace></p>
<p specific-use="line"><monospace>5 <bold>print</bold>("<italic>done!</italic>")</monospace></p>
<p specific-use="line"> <monospace>done!</monospace></p>
<p>This code will begin with a variable, then print and increment it until its value is <monospace>101</monospace>, at which point the enclosing while loop ends and a final string (line 5) is printed. Crucially, one should verify that the loop termination condition can, in fact, be reached. If not—e.g., if the loop were specified as <monospace>while(True):</monospace> for some reason—then the loop would continue indefinitely, creating an infinite loop that would render the program unresponsive. (In many environments, such as a Unix shell, the keystroke <monospace>Ctrl-c</monospace> can be used as a <italic>keyboard interrupt</italic> to break out of the loop.)</p>
<p><bold>Exercise 4</bold>: With the above example as a starting point, write a function that chooses two randomly-generated integers between <monospace>0</monospace> and <monospace>100</monospace>, inclusive, and then prints all numbers between these two values, counting from the lower number to the upper number.</p>
</sec>
<sec id="sec016">
<title>Recursion</title>
<disp-quote>
<p>“In order to understand recursion, you must first understand recursion.”</p>
<p>— Anonymous</p>
</disp-quote>
<p>Recursion is a subtle concept. A while loop is conceptually straightforward: a block of statements comprising the body of the loop is repeatedly executed as long as a condition is true. A <italic>recursive</italic> function, on the other hand, calls <bold>itself</bold> repeatedly, effectively creating a loop. Recursion is the most natural programming approach (or <italic>paradigm</italic>) for solving a complex problem that can be decomposed into (easier) subproblems, each of which resembles the overall problem. Mathematically, problems that are formulated in this manner are known as <italic>recurrence relations</italic>, and a classic example is the factorial (below). Recursion is so fundamental and general a concept that iterative constructs (<monospace>for</monospace>, <monospace>while</monospace> loops) can be expressed recursively; in fact, some languages dispense with loops entirely and rely on recursion for all repetition. The key idea is that a recursive function calls itself from within its own function body, thus progressing one step closer to the final solution at each self-call. The recursion terminates once it has reached a trivially simple final operation, termed the <italic>base case</italic>. (Here, the word “simple” means only that evaluation of the final operation yields no further recursive steps, with no implication as to the computational complexity of that final operation.) Calculation of the factorial function, <italic>f</italic>(<italic>n</italic>) = <italic>n</italic>!, is a classic example of a problem that is elegantly coded in a recursive manner. Recall that the factorial of a natural number, <italic>n</italic>, is defined as:
<disp-formula id="pcbi.1004867.e037"><alternatives><graphic id="pcbi.1004867.e037g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e037" xlink:type="simple"/><mml:math display="block" id="M44"><mml:mrow><mml:mi>n</mml:mi> <mml:mo>!</mml:mo> <mml:mo>=</mml:mo> <mml:mfenced close="" open="{" separators=""><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mn>1</mml:mn></mml:mtd> <mml:mtd columnalign="right"><mml:mrow><mml:mi>n</mml:mi> <mml:mo>=</mml:mo> <mml:mn>1</mml:mn></mml:mrow></mml:mtd> <mml:mtd columnalign="right"><mml:mrow><mml:mtext>(base</mml:mtext> <mml:mspace width="4.pt"/><mml:mtext>case)</mml:mtext></mml:mrow></mml:mtd></mml:mtr> <mml:mtr><mml:mtd columnalign="left"><mml:mrow><mml:mi>n</mml:mi> <mml:mo>*</mml:mo> <mml:mo>(</mml:mo> <mml:mi>n</mml:mi> <mml:mo>-</mml:mo> <mml:mn>1</mml:mn> <mml:mo>)</mml:mo> <mml:mo>!</mml:mo></mml:mrow></mml:mtd> <mml:mtd columnalign="right"><mml:mrow><mml:mi>n</mml:mi> <mml:mo>&gt;</mml:mo> <mml:mn>1</mml:mn></mml:mrow></mml:mtd> <mml:mtd/></mml:mtr></mml:mtable></mml:mfenced></mml:mrow></mml:math></alternatives> <label>(1)</label></disp-formula>
This function can be compactly implemented in Python like so:</p>
<p specific-use="line"><monospace>1 <bold>def factorial</bold>(n):</monospace></p>
<p specific-use="line"><monospace>2  <bold>assert</bold>(n &gt; 0)  # Crash on invalid input</monospace></p>
<p specific-use="line"><monospace>3  <bold>if</bold>(n == 1):</monospace></p>
<p specific-use="line"><monospace>4   <bold>return</bold> 1</monospace></p>
<p specific-use="line"><monospace>5  <bold>else:</bold></monospace></p>
<p specific-use="line"><monospace>6   <bold>return</bold> n * factorial(n-1)</monospace></p>
<p specific-use="continuation">A call to this <monospace>factorial</monospace> function will return <monospace>1</monospace> if the input is equal to one, and otherwise will return the input value multiplied by the factorial of that integer less one (<monospace>factorial(n-1)</monospace>). Note that this recursive implementation of the factorial perfectly matches its mathematical definition. This often holds true, and many mathematical operations on data are most easily expressed recursively. When the Python interpreter encounters the call to the <monospace>factorial</monospace> function within the function block itself (line 6), it generates a new instance of the function on the fly, while retaining the original function in memory (technically, these function instances occupy the runtime’s <italic>call stack</italic>). Python places the current function call on hold in the call stack while the newly-called function is evaluated. This process continues until the base case is reached, at which point the function returns a value. Next, the previous function instance in the call stack resumes execution, calculates its result, and returns it. This process of traversing the call stack continues until the very first invocation has returned. At that point, the call stack is empty and the function evaluation has completed.</p>
</sec>
<sec id="sec017">
<title>Expressing Problems Recursively</title>
<p>Defining recursion simply as a function calling itself misses some nuances of the recursive approach to problem-solving. Any difficult problem (e.g., <italic>f</italic>(<italic>n</italic>) = <italic>n</italic>!) that can be expressed as a simpler instance of the same problem (e.g., <italic>f</italic>(<italic>n</italic>) = <italic>n</italic>*<italic>f</italic>(<italic>n</italic> − 1)) is amenable to a recursive solution. Only when the problem is trivially easy (1!, <monospace>factorial(1)</monospace> above) does the recursive solution give a direct (one-step) answer. Recursive approaches fundamentally differ from more iterative (also known as <italic>procedural</italic>) strategies: Iterative constructs (loops) express the entire solution to a problem in more explicit form, whereas recursion repeatedly makes a problem simpler until it is trivial. Many data-processing functions are most naturally and compactly solved via recursion.</p>
<p>The recursive descent/ascent behavior described above is extremely powerful, and care is required to avoid pitfalls and frustration. For example, consider the following addition algorithm, which uses the equality operator (<monospace>==</monospace>) to test for the base case:</p>
<p specific-use="line"><monospace>1 <bold>def badRecursiveAdder</bold>(x):</monospace></p>
<p specific-use="line"><monospace>2  <bold>if</bold>(x == 1):</monospace></p>
<p specific-use="line"><monospace>3   <bold>return</bold> x</monospace></p>
<p specific-use="line"><monospace>4  <bold>else:</bold></monospace></p>
<p specific-use="line"><monospace>5   <bold>return</bold> x + badRecursiveAdder(x−2)</monospace></p>
<p specific-use="continuation">This function does include a base case (lines 2–3), and at first glance may seem to act as expected, yielding a sequence of squares (1, 4, 9, 16…) for <italic>x</italic> = 1, 3, 5, 7,… Indeed, for odd <monospace>x</monospace> greater than <monospace>1</monospace>, the function will behave as anticipated. However, if the argument is negative or is an even number, the base case will never be reached (note that line 5 subtracts <monospace>2</monospace>), causing the function call to simply hang, as would an infinite loop. (In this scenario, Python’s <italic>maximum recursion depth</italic> will be reached and the call stack will overflow.) Thus, in addition to defining the function’s base case, it is also crucial to confirm that <bold>all</bold> possible inputs will reach the base case. A valid recursive function must progress towards—and eventually reach—the base case with every call. More information on recursion can be found in Supplemental Chapter 7 in <xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>, in Chapter 4 of [<xref ref-type="bibr" rid="pcbi.1004867.ref040">40</xref>], and in most computer science texts.</p>
<p><bold>Exercise 5</bold>: Consider the Fibonacci sequence of integers, 0, 1, 1, 2, 3, 5, 8, 13, …, given by
<disp-formula id="pcbi.1004867.e038"><alternatives><graphic id="pcbi.1004867.e038g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e038" xlink:type="simple"/><mml:math display="block" id="M45"><mml:mrow><mml:msub><mml:mi>F</mml:mi> <mml:mi>n</mml:mi></mml:msub> <mml:mo>=</mml:mo> <mml:mfenced close="" open="{" separators=""><mml:mtable><mml:mtr><mml:mtd columnalign="left"><mml:mi>n</mml:mi></mml:mtd> <mml:mtd columnalign="right"><mml:mrow><mml:mi>n</mml:mi> <mml:mo>≤</mml:mo> <mml:mn>1</mml:mn></mml:mrow></mml:mtd></mml:mtr> <mml:mtr><mml:mtd columnalign="left"><mml:mrow><mml:msub><mml:mi>F</mml:mi> <mml:mrow><mml:mi>n</mml:mi> <mml:mo>-</mml:mo> <mml:mn>1</mml:mn></mml:mrow></mml:msub> <mml:mo>+</mml:mo> <mml:msub><mml:mi>F</mml:mi> <mml:mrow><mml:mi>n</mml:mi> <mml:mo>-</mml:mo> <mml:mn>2</mml:mn></mml:mrow></mml:msub></mml:mrow></mml:mtd> <mml:mtd columnalign="right"><mml:mrow><mml:mi>n</mml:mi> <mml:mo>&gt;</mml:mo> <mml:mn>1</mml:mn></mml:mrow></mml:mtd></mml:mtr></mml:mtable></mml:mfenced></mml:mrow></mml:math></alternatives> <label>(2)</label></disp-formula>
This sequence appears in the study of phyllotaxis and other areas of biological pattern formation (see, e.g., [<xref ref-type="bibr" rid="pcbi.1004867.ref067">67</xref>]). Now, write a recursive Python function to compute the <italic>n</italic><sup>th</sup> Fibonacci number, <italic>F</italic><sub><italic>n</italic></sub>, and test that your program works. Include an <monospace>assert</monospace> to make sure the argument is positive. Can you generalize your code to allow for different seed values (<italic>F</italic><sub>0</sub> = <italic>l</italic>, <italic>F</italic><sub>1</sub> = <italic>m</italic>, for integers <italic>l</italic> and <italic>m</italic>) as arguments to your function, thereby creating new sequences? (Doing so gets you one step closer to Lucas sequences, <italic>L</italic><sub><italic>n</italic></sub>, which are a highly general class of recurrence relations.)</p>
<p><bold>Exercise 6</bold>: Many functions can be coded both recursively and iteratively (using loops), though often it will be clear that one approach is better suited to the given problem (the factorial is one such example). In this exercise, devise an <bold>iterative</bold> Python function to compute the factorial of a user-specified integer argument. As a bonus exercise, try coding the Fibonacci sequence in iterative form. Is this as straightforward as the recursive approach? Note that Supplemental Chapter 7 in the <xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref> might be useful here.</p>
</sec>
</sec>
<sec id="sec018">
<title>Data Collections: Tuples, Lists, For Loops, and Dictionaries</title>
<p>A staggering degree of algorithmic complexity is possible using only variables, functions, and control flow concepts. However, thus far, numbers and strings are the only data types that have been discussed. Such data types can be used to represent protein sequences (a string) and molecular masses (a floating point number), but actual scientific data are seldom so simple! The data from a mass spectrometry experiment are a list of intensities at various <italic>m</italic>/<italic>z</italic> values (the mass spectrum). Optical microscopy experiments yield thousands of images, each consisting of a large two-dimensional array of pixels, and each pixel has color information that one may wish to access [<xref ref-type="bibr" rid="pcbi.1004867.ref068">68</xref>]. A protein multiple sequence alignment can be considered as a two-dimensional array of characters drawn from a 21-letter alphabet (one letter per amino acid (AA) and a gap symbol), and a protein 3D structural alignment is even more complex. Phylogenetic trees consist of sets of species, individual proteins, or other taxonomic entities, organized as (typically) binary trees with branch weights that represent some metric of evolutionary distance. A trajectory from an MD or Brownian dynamics simulation is especially dense: Cartesian coordinates and velocities are specified for upwards of 10<sup>6</sup> atoms at &gt;10<sup>6</sup> time-points (every ps in a μs-scale trajectory). As illustrated by these examples, real scientific data exhibit a level of complexity far beyond Python’s relatively simple built-in data types. Modern datasets are often quite heterogeneous, particularly in the biosciences [<xref ref-type="bibr" rid="pcbi.1004867.ref069">69</xref>], and therefore <italic>data abstraction</italic> and <italic>integration</italic> are often the major goals. The data challenges hold true at all levels, from individual RNA transcripts [<xref ref-type="bibr" rid="pcbi.1004867.ref070">70</xref>] to whole bacterial cells [<xref ref-type="bibr" rid="pcbi.1004867.ref071">71</xref>] to biomedical informatics [<xref ref-type="bibr" rid="pcbi.1004867.ref072">72</xref>].</p>
<p>In each of the above examples, the relevant data comprise a collection of entities, each of which, in turn, is of some simpler data type. This unifying principle offers a way forward. The term <italic>data structure</italic> refers to an object that stores data in a specifically organized (structured) manner, as defined by the programmer. Given an adequately well-specified/defined data structure, arbitrarily complex collections of data can be readily handled by Python, from a simple array of integers to a highly intricate, multi-dimensional, heterogeneous (mixed-type) data structure. Python offers several built-in sequence data structures, including strings, lists, and tuples.</p>
<sec id="sec019">
<title>Tuples</title>
<p>A <italic>tuple</italic> (pronounced like “couple”) is simply an ordered sequence of objects, with essentially no restrictions as to the types of the objects. Thus, the tuple is especially useful in building data structures as higher-order collections. Data that are inherently sequential (e.g., time-series data recorded by an instrument) are naturally expressed as a tuple, as illustrated by the following syntactic form: <monospace>myTuple = (0,1,3)</monospace>. The tuple is surrounded by parentheses, and commas separate the individual elements. The empty tuple is denoted <monospace>()</monospace>, and a tuple of one element contains a comma after that element, e.g., <monospace>(1,)</monospace>; the final comma lets Python distinguish between a tuple and a mathematical operation. That is, <monospace>2*(3+1)</monospace> must not treat <monospace>(3+1)</monospace> as a tuple. A parenthesized expression is therefore not made into a tuple unless it contains commas. (The <monospace>type</monospace> function is a useful built-in function to probe an object’s type. At the Python interpreter, try the statements <monospace>type((1))</monospace> and <monospace>type((1,))</monospace>. How do the results differ?)</p>
<p>A tuple can contain any sort of object, including another tuple. For example, <monospace>diverseTuple = (15.38,"someString",(0,1))</monospace> contains a floating-point number, a string, and another tuple. This versatility makes tuples an effective means of representing complex or heterogeneous data structures. Note that any component of a tuple can be referenced using the same notation used to index individual characters within a string; e.g., <monospace>diverseTuple[0]</monospace> gives <monospace>15.38</monospace>.</p>
<p>In general, data are optimally stored, analyzed, modified, and otherwise processed using data structures that reflect any underlying structure of the data itself. Thus, for example, two-dimensional datasets are most naturally stored as tuples of tuples. This abstraction can be taken to arbitrary depth, making tuples useful for storing arbitrarily complex data. For instance, tuples have been used to create generic tensor-like objects. These rich data structures have been used in developing new tools for the analysis of MD trajectories [<xref ref-type="bibr" rid="pcbi.1004867.ref018">18</xref>] and to represent biological sequence information as hierarchical, multidimensional entities that are amenable to further processing in Python [<xref ref-type="bibr" rid="pcbi.1004867.ref020">20</xref>].</p>
<p>As a concrete example, consider the problem of representing signal intensity data collected over time. If the data are sampled with perfect periodicity, say every second, then the information could be stored (most compactly) in a one-dimensional tuple, as a simple succession of intensities; the index of an element in the tuple maps to a time-point (index <monospace>0</monospace> corresponds to the measurement at time <italic>t</italic><sub>0</sub>, index <monospace>1</monospace> is at time <italic>t</italic><sub>1</sub>, etc.). What if the data were sampled unevenly in time? Then each datum could be represented as an ordered pair, (<italic>t</italic>, <italic>I</italic>(<italic>t</italic>)), of the intensity <italic>I</italic> at each time-point <italic>t</italic>; the full time-series of measurements is then given by the sequence of 2-element tuples, like so:</p>
<p><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e039" xlink:type="simple"/></p>
<p>Three notes concern the above code: (i) From this two-dimensional data structure, the syntax <monospace>dataSet[i][j]</monospace> retrieves the <italic>j</italic><sup>th</sup> element from the <italic>i</italic><sup>th</sup> tuple. (ii) Negative indices can be used as shorthand to index from the end of most collections (tuples, lists, etc.), as shown in <xref ref-type="fig" rid="pcbi.1004867.g001">Fig 1</xref>; thus, in the above example <monospace>dataSet[-1]</monospace> represents the same value as <monospace>dataSet[4]</monospace>. (iii) Recall that Python treats all lines of code that belong to the same block (or degree of indentation) as a single unit. In the example above, the first line alone is not a valid (closed) expression, and Python allows the expression to continue on to the next line; the lengthy <monospace>dataSet</monospace> expression was formatted as above in order to aid readability.</p>
<p>Once defined, a tuple cannot be altered; tuples are said to be <italic>immutable</italic> data structures. This rigidity can be helpful or restrictive, depending on the context and intended purpose. For instance, tuples are suitable for storing numerical constants, or for ordered collections that are generated once during execution and intended only for referencing thereafter (e.g., an input stream of raw data).</p>
</sec>
<sec id="sec020">
<title>Lists</title>
<p>A mutable data structure is the Python <italic>list</italic>. This built-in sequence type allows for the addition, removal, and modification of elements. The syntactic form used to define lists resembles the definition of a tuple, except that the parentheses are replaced with square brackets, e.g. <monospace>myList = [0, 1, 42, 78]</monospace>. (A trailing comma is unnecessary in one-element lists, as <monospace>[1]</monospace> is unambiguously a list.) As suggested by the preceding line, the elements in a Python list are typically more homogeneous than might be found in a tuple: The statement <monospace>myList2 = ['a',1]</monospace>, which defines a list containing both string and numeric types, is technically valid, but <monospace>myList2 = ['a','b']</monospace> or <monospace>myList2 = [0, 1]</monospace> would be more frequently encountered in practice. Note that <monospace>myList[1] = 3.14</monospace> is a perfectly valid statement that can be applied to the already-defined object named <monospace>myList</monospace> (as long as <monospace>myList</monospace> already contains two or more elements), resulting in the modification of the second element in the list. Finally, note that <monospace>myList[5] = 3.14</monospace> will raise an error, as the list defined above does not contain a sixth element. The index is said to be <italic>out of range</italic>, and a valid approach would be to append the value via <monospace>myList.append(3.14)</monospace>.</p>
<p>The foregoing description only scratches the surface of Python’s built-in data structures. Several functions and methods are available for lists, tuples, strings, and other built-in types. For lists, <monospace>append</monospace>, <monospace>insert</monospace>, and <monospace>remove</monospace> are examples of oft-used methods; the function <monospace>len()</monospace> returns the number of items in a sequence or collection, such as the length of a string or number of elements in a list. All of these “list methods” behave similarly as any other function—arguments are generally provided as input, some processing occurs, and values may be returned. (The OOP section, below, elaborates the relationship between functions and methods.)</p>
</sec>
<sec id="sec021">
<title>Iteration with For Loops</title>
<p>Lists and tuples are examples of <italic>iterable</italic> types in Python, and the <italic>for loop</italic> is a useful construct in handling such objects. (Custom iterable types are introduced in Supplemental Chapter 17 in <xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>.) A Python <monospace>for</monospace> loop iterates over a collection, which is a common operation in virtually all data-analysis workflows. Recall that a <monospace>while</monospace> loop requires a counter to track progress through the iteration, and this counter is tested against the continuation condition. In contrast, a <monospace>for</monospace> loop handles the count implicitly, given an argument that is an iterable object:</p>
<p specific-use="line"><monospace>1 myData = [1.414, 2.718, 3.142, 4.669]</monospace></p>
<p specific-use="line"><monospace>2 total = 0</monospace></p>
<p specific-use="line"><monospace>3 <bold>for</bold> datum <bold>in</bold> myData:</monospace></p>
<p specific-use="line"><monospace>4  # the next statement uses a compound assignment operator; in</monospace></p>
<p specific-use="line"><monospace>5  # the addition assignment operator, a += b means a = a + b</monospace></p>
<p specific-use="line"><monospace>6  total += datum</monospace></p>
<p specific-use="line"><monospace>7  <bold>print</bold>("<italic>added</italic> " + <bold>str</bold>(datum) + " <italic>to sum</italic>.")</monospace></p>
<p specific-use="line"><monospace>8  # str makes a string from datum so we can concatenate with +.</monospace></p>
<p specific-use="line"> <monospace>added 1.414 to sum.</monospace></p>
<p specific-use="line"> <monospace>added 2.718 to sum.</monospace></p>
<p specific-use="line"> <monospace>added 3.142 to sum.</monospace></p>
<p specific-use="line"> <monospace>added 4.669 to sum.</monospace></p>
<p specific-use="line"><monospace>9 <bold>print</bold>(total)</monospace></p>
<p specific-use="line"> <monospace>11.942999999999998</monospace></p>
<p specific-use="continuation">In the above loop, all elements in <monospace>myData</monospace> are of the same type (namely, floating-point numbers). This is not mandatory. For instance, the heterogeneous object <monospace>myData = ['a','b',1,2]</monospace> is iterable, and therefore it is a valid argument to a <monospace>for</monospace> loop (though not the above loop, as string and integer types cannot be mixed as operands to the <monospace>+</monospace> operator). The context dependence of the <monospace>+</monospace> symbol, meaning either numeric addition or a concatenation operator, depending on the arguments, is an example of <italic>operator overloading</italic>. (Together with dynamic typing, operator overloading helps make Python a highly expressive programming language.) In each iteration of the above loop, the variable <monospace>datum</monospace> is assigned each successive element in <monospace>myData</monospace>; specifying this iterative task as a <monospace>while</monospace> loop is possible, but less straightforward. Finally, note the syntactic difference between Python’s <monospace>for</monospace> loops and the <monospace>for(&lt;initialize&gt;; &lt;condition&gt;; &lt;update&gt;) {&lt;body&gt;}</monospace> construct that is found in C, Perl, and other languages encountered in computational biology.</p>
<p><bold>Exercise 7</bold>: Consider the fermentation of glucose into ethanol: C<sub>6</sub>H<sub>12</sub>O<sub>6</sub> → 2C<sub>2</sub>H<sub>5</sub>OH + 2CO<sub>2</sub>. A fermentor is initially charged with 10,000 liters of feed solution and the rate of carbon dioxide production is measured by a sensor in moles/hour. At <italic>t</italic> = 10, 20, 30, 40, 50, 60, 70, and 80 hours, the CO<sub>2</sub> generation rates are 58.2, 65.2, 67.8, 65.4, 58.8, 49.6, 39.1, and 15.8 moles/hour respectively. Assuming that each reading represents the average CO<sub>2</sub> production rate over the previous ten hours, calculate the total amount of CO<sub>2</sub> generated and the final ethanol concentration in grams per liter. Note that Supplemental Chapters 6 and 9 might be useful here.</p>
<p><bold>Exercise 8</bold>: Write a program to compute the distance, <italic>d</italic>(<bold>r<sub>1</sub>, r<sub>2</sub></bold>), between two arbitrary (user-specified) points, <bold>r<sub>1</sub></bold> = (<italic>x</italic><sub>1</sub>, <italic>y</italic><sub>1</sub>, <italic>z</italic><sub>1</sub>) and <bold>r<sub>2</sub></bold> = (<italic>x</italic><sub>2</sub>, <italic>y</italic><sub>2</sub>, <italic>z</italic><sub>2</sub>), in 3D space. Use the usual Euclidean distance between two points—the straight-line, “as the bird flies” distance. Other distance metrics, such as the Mahalanobis and Manhattan distances, often appear in computational biology too. With your code in hand, note the ease with which you can adjust your entire data-analysis workflow simply by modifying a few lines of code that correspond to the definition of the distance function. As a bonus exercise, generalize your code to read in a list of points and compute the total path length. Supplemental Chapters 6, 7, and 9 might be useful here.</p>
</sec>
<sec id="sec022">
<title>Sets and Dictionaries</title>
<p>Whereas lists, tuples, and strings are ordered (sequential) data types, Python’s <italic>sets</italic> and <italic>dictionaries</italic> are unordered data containers. Dictionaries, also known as <italic>associative arrays</italic> or <italic>hashes</italic> in Perl and other common languages, consist of <inline-formula id="pcbi.1004867.e040"><alternatives><graphic id="pcbi.1004867.e040g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e040" xlink:type="simple"/><mml:math display="inline" id="M46"><mml:mtext mathvariant="sans-serif">key</mml:mtext></mml:math></alternatives></inline-formula>:<inline-formula id="pcbi.1004867.e041"><alternatives><graphic id="pcbi.1004867.e041g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e041" xlink:type="simple"/><mml:math display="inline" id="M47"><mml:mtext mathvariant="sans-serif">value</mml:mtext></mml:math></alternatives></inline-formula> pairs enclosed in braces. They are particularly useful data structures because, unlike lists and tuples, the values are not restricted to being indexed solely by the integers corresponding to sequential position in the data series. Rather, the keys in a dictionary serve as the index, and they can be of any immutable data type (strings, numbers, or tuples of immutable data). A simple example, indexing on three-letter abbreviations for amino acids and including molar masses, would be <monospace>aminoAcids = {'ala':('a','alanine', 89.1),'cys':('c','cysteine', 121.2)}</monospace>. A dictionary’s items are accessed via square brackets, analogously as for a tuple or list, e.g., <monospace>aminoAcids['ala']</monospace> would retrieve the tuple <monospace>('a','alanine', 89.1)</monospace>. As another example, dictionaries can be used to create lookup tables for the properties of a collection of closely related proteins. Each key could be set to a unique identifier for each protein, such as its UniProt ID (e.g., <inline-formula id="pcbi.1004867.e042"><alternatives><graphic id="pcbi.1004867.e042g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e042" xlink:type="simple"/><mml:math display="inline" id="M48"><mml:mtext mathvariant="sans-serif">Q8ZYG5</mml:mtext></mml:math></alternatives></inline-formula>), and the corresponding values could be an intricate tuple data structure that contains the protein’s isoelectric point, molecular weight, PDB accession code (if a structure exists), and so on. Dictionaries are described in greater detail in Supplemental Chapter 10 in the <xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>.</p>
</sec>
<sec id="sec023">
<title>Further Data Structures: Trees and Beyond</title>
<p>Python’s built-in data structures are made for sequential data, and using them for other purposes can quickly become awkward. Consider the task of representing genealogy: an individual may have some number of children, and each child may have their own children, and so on. There is no straightforward way to represent this type of information as a list or tuple. A better approach would be to represent each organism as a tuple containing its children. Each of those elements would, in turn, be another tuple with children, and so on. A specific organism would be a <italic>node</italic> in this data structure, with a <italic>branch</italic> leading to each of its <italic>child</italic> nodes; an organism having no children is effectively a <italic>leaf</italic>. A node that is not the child of any other node would be the <italic>root</italic> of this tree. This intuitive description corresponds, in fact, to exactly the terminology used by computer scientists in describing <italic>trees</italic> [<xref ref-type="bibr" rid="pcbi.1004867.ref073">73</xref>]. Trees are pervasive in computer science. This document, for example, could be represented purely as a list of characters, but doing so neglects its underlying structure, which is that of a tree (sections, sub-sections, sub-sub-sections, …). The whole document is the root entity, each section is a node on a branch, each sub-section a branch from a section, and so on down through the paragraphs, sentences, words, and letters. A common and intuitive use of trees in bioinformatics is to represent phylogenetic relationships. However, trees are such a general data structure that they also find use, for instance, in computational geometry applications to biomolecules (e.g., to optimally partition data along different spatial dimensions [<xref ref-type="bibr" rid="pcbi.1004867.ref074">74</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref075">75</xref>]).</p>
<p>Trees are, by definition, (i) <italic>acyclic</italic>, meaning that following a branch from node <italic>i</italic> will never lead back to node <italic>i</italic>, and any node has exactly one parent; and <italic>(ii)</italic> <italic>directed</italic>, meaning that a node knows only about the nodes “below” it, not the ones “above” it. Relaxing these requirements gives a <italic>graph</italic> [<xref ref-type="bibr" rid="pcbi.1004867.ref076">76</xref>], which is an even more fundamental and universal data structure: A graph is a set of vertices that are connected by edges. Graphs can be subtle to work with and a number of clever algorithms are available to analyze them [<xref ref-type="bibr" rid="pcbi.1004867.ref077">77</xref>].</p>
<p>There are countless data structures available, and more are constantly being devised. Advanced examples range from the biologically-inspired neural network, which is essentially a graph wherein the vertices are linked into communication networks to emulate the neuronal layers in a brain [<xref ref-type="bibr" rid="pcbi.1004867.ref078">78</xref>], to very compact probabilistic data structures such as the Bloom filter [<xref ref-type="bibr" rid="pcbi.1004867.ref079">79</xref>], to self-balancing trees [<xref ref-type="bibr" rid="pcbi.1004867.ref080">80</xref>] that provide extremely fast insertion and removal of elements for performance-critical code, to copy-on-write B-trees that organize terabytes of information on hard drives [<xref ref-type="bibr" rid="pcbi.1004867.ref081">81</xref>].</p>
</sec>
</sec>
<sec id="sec024">
<title>Object-Oriented Programming in a Nutshell: Classes, Objects, Methods, and All That</title>
<sec id="sec025">
<title>OOP in Theory: Some Basic Principles</title>
<p>Computer programs are characterized by two essential features [<xref ref-type="bibr" rid="pcbi.1004867.ref082">82</xref>]: (i) <bold>algorithms</bold> or, loosely, the “programming logic,” and (ii) <bold>data structures</bold>, or how data are represented within the program, whether certain components are manipulable, iterable, etc. The object-oriented programming (OOP) paradigm, to which Python is particularly well-suited, treats these two features of a program as inseparable. Several thorough treatments of OOP are available, including texts that are independent of any language [<xref ref-type="bibr" rid="pcbi.1004867.ref083">83</xref>] and books that specifically focus on OOP in Python [<xref ref-type="bibr" rid="pcbi.1004867.ref084">84</xref>]. The core ideas are explored in this section and in Supplemental Chapters 15 and 16 in <xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>.</p>
<p>Most scientific data have some form of inherent structure, and this serves as a starting point in understanding OOP. For instance, the time-series example mentioned above is structured as a series of ordered pairs, (<italic>t</italic>, <italic>I</italic>(<italic>t</italic>)), an X-ray diffraction pattern consists of a collection of intensities that are indexed by integer triples (<italic>h</italic>, <italic>k</italic>, <italic>l</italic>), and so on. In general, the intrinsic structure of scientific data cannot be easily or efficiently described using one of Python’s standard data structures because those types (strings, lists, etc.) are far too simple and limited. Consider, for instance, the task of representing a protein 3D structure, where “representing” means storing all the information that one may wish to access and manipulate: AA sequence (residue types and numbers), the atoms comprising each residue, the spatial coordinates of each atom, whether a cysteine residue is disulfide-bonded or not, the protein’s function, the year the protein was discovered, a list of orthologs of known structure, and so on. What data structure might be capable of most naturally representing such an entity? A simple (generic) Python tuple or list is clearly insufficient.</p>
<p>For this problem, one could try to represent the protein as a single tuple, where the first element is a list of the sequence of residues, the second element is a string describing the protein’s function, the third element lists orthologs, etc. Somewhere within this top-level list, the coordinates of the C<sub><italic>α</italic></sub> atom of Alanine-42 might be represented as <monospace>[x,y,z]</monospace>, which is a simple list of length three. (The list is “simple” in the sense that its rank is one; the <italic>rank</italic> of a tuple or list is, loosely, the number of dimensions spanned by its rows, and in this case we have but one row.) In other words, our overall data-representation problem can be hierarchically decomposed into simpler sub-problems that <bold>are</bold> amenable to representation via Python’s built-in types. While valid, such a data structure will be difficult to use: The programmer will have to recall multiple arbitrary numbers (list and sub-list indices) in order to access anything, and extensions to this approach will only make it clumsier. Additionally, there are many functions that are meaningful only in the context of proteins, not all tuples. For example, we may need to compute the solvent-accessible surface areas of all residues in all <italic>β</italic>-strands for a list of proteins, but this operation would be nonsensical for a list of Supreme Court cases. Conversely, not all tuple methods would be relevant to this protein data structure, yet a function to find Court cases that reached a 5-4 decision along party lines would accept the protein as an argument. In other words, the tuple mentioned above has no clean way to make the necessary associations. It’s just a tuple.</p>
</sec>
<sec id="sec026">
<title>OOP Terminology</title>
<p>This protein representation problem is elegantly solved via the OOP concepts of classes, objects, and methods. Briefly, an <italic>object</italic> is an instance of a data structure that contains members and methods. <italic>Members</italic> are data of potentially any type, including other objects. Unlike lists and tuples, where the elements are indexed by numbers starting from zero, the members of an object are given names, such as <monospace>yearDiscovered</monospace>. <italic>Methods</italic> are functions that (typically) make use of the members of the object. Methods perform operations that are related to the data in the object’s members. Objects are constructed from <italic>class</italic> definitions, which are blocks that define what most of the methods will be for an object. The examples in the 'OOP in Practice' section will help clarify this terminology. (Note that some languages require that all methods and members be specified in the class declaration, but Python allows <italic>duck punching</italic>, or adding members after declaring a class. Adding methods later is possible too, but uncommon. Some built-in types, such as <monospace>int</monospace>, do not support duck punching.)</p>
<p>During execution of an actual program, a specific object is created by calling the name of the class, as one would do for a function. The interpreter will set aside some memory for the object’s methods and members, and then call a method named <monospace>__init__</monospace>, which initializes the object for use.</p>
<p>Classes can be created from previously defined classes. In such cases, all properties of the parent class are said to be <italic>inherited</italic> by the child class. The child class is termed a <italic>derived class</italic>, while the parent is described as a <italic>base class</italic>. For instance, a user-defined <monospace>Biopolymer</monospace> class may have derived classes named <monospace>Protein</monospace> and <monospace>NucleicAcid</monospace>, and may itself be derived from a more general <monospace>Molecule</monospace> base class. Class names often begin with a capital letter, while object names (i.e., variables) often start with a lowercase letter. Within a class definition, a leading underscore denotes member names that will be protected. Working examples and annotated descriptions of these concepts can be found, in the context of protein structural analysis, in ref [<xref ref-type="bibr" rid="pcbi.1004867.ref085">85</xref>].</p>
<p>The OOP paradigm suffuses the Python language: Every value is an object. For example, the statement <monospace>foo = ‘bar’</monospace> instantiates a new object (of type <monospace>str</monospace>) and binds the name <monospace>foo</monospace> to that object. All built-in string methods will be exposed for that object (e.g., <monospace>foo.upper()</monospace> returns <monospace>‘BAR’</monospace>). Python’s built-in <monospace>dir()</monospace> function can be used to list all attributes and methods of an object, so <monospace>dir(foo)</monospace> will list all available attributes and valid methods on the variable <monospace>foo</monospace>. The statement <monospace>dir(1)</monospace> will show all the methods and members of an <monospace>int</monospace> (there are many!). This example also illustrates the conventional OOP dot-notation, <monospace>object.attribute</monospace>, which is used to access an object’s members, and to invoke its methods (<xref ref-type="fig" rid="pcbi.1004867.g001">Fig 1</xref>, left). For instance, <monospace>protein1.residues[2].CA.x</monospace> might give the <italic>x</italic>-coordinate of the C<sub><italic>α</italic></sub> atom of the third residue in <monospace>protein1</monospace> as a floating-point number, and <monospace>protein1.residues[5].ssbond(protein2.residues[6])</monospace> might be used to define a disulfide bond (the <monospace>ssbond()</monospace> method) between residue-6 of <monospace>protein1</monospace> and residue-7 of <monospace>protein2</monospace>. In this example, the <monospace>residues</monospace> member is a list or tuple of objects, and an item is retrieved from the collection using an index in brackets.</p>
</sec>
<sec id="sec027">
<title>Benefits of OOP</title>
<p>By effectively compartmentalizing the programming logic and implicitly requiring a disciplined approach to data structures, the OOP paradigm offers several benefits. Chief among these are (i) clean data/code separation and bundling (i.e., modularization), (ii) code reusability, (iii) greater extensibility (derived classes can be created as needs become more specialized), and (iv) encapsulation into classes/objects provides a clearer interface for other programmers and users. Indeed, a generally good practice is to discourage end-users from directly accessing and modifying all of the members of an object. Instead, one can expose a limited and clean interface to the user, while the back-end functionality (which defines the class) remains safely under the control of the class’ author. As an example, custom <italic>getter</italic> and <italic>setter</italic> methods can be specified in the class definition itself, and these methods can be called in another user’s code in order to enable the safe and controlled access/modification of the object’s members. A setter can ‘sanity-check’ its input to verify that the values do not send the object into a nonsensical or broken state; e.g., specifying the string <monospace>"ham"</monospace> as the <italic>x</italic>-coordinate of an atom could be caught before program execution continues with a corrupted object. By forcing alterations and other interactions with an object to occur via a limited number of well-defined getters/setters, one can ensure that the integrity of the object’s data structure is preserved for downstream usage.</p>
<p>The OOP paradigm also solves the aforementioned problem wherein a protein implemented as a tuple had no good way to be associated with the appropriate functions—we could call Python’s built-in <monospace>max()</monospace> on a protein, which would be meaningless, or we could try to compute the isoelectric point of an arbitrary list (of Supreme Court cases), which would be similarly nonsensical. Using classes sidesteps these problems. If our <monospace>Protein</monospace> class does not define a <monospace>max()</monospace> method, then no attempt can be made to calculate its maximum. If it does define an <monospace>isoelectricPoint()</monospace> method, then that method can be applied only to an object of type <monospace>Protein</monospace>. For users/programmers, this is invaluable: If a class from a library has a particular method, one can be assured that that method will work with objects of that class.</p>
</sec>
<sec id="sec028">
<title>OOP in Practice: Some Examples</title>
<p>A classic example of a data structure that is naturally implemented via OOP is the creation of a <monospace>Human</monospace> class. Each <monospace>Human</monospace> object can be fully characterized by her respective properties (members such as <inline-formula id="pcbi.1004867.e043"><alternatives><graphic id="pcbi.1004867.e043g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e043" xlink:type="simple"/><mml:math display="inline" id="M49"><mml:mtext mathvariant="sans-serif">height</mml:mtext></mml:math></alternatives></inline-formula>, <inline-formula id="pcbi.1004867.e044"><alternatives><graphic id="pcbi.1004867.e044g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e044" xlink:type="simple"/><mml:math display="inline" id="M50"><mml:mtext mathvariant="sans-serif">weight</mml:mtext></mml:math></alternatives></inline-formula>, etc.) and functionality (methods such as <inline-formula id="pcbi.1004867.e045"><alternatives><graphic id="pcbi.1004867.e045g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e045" xlink:type="simple"/><mml:math display="inline" id="M51"><mml:mtext mathvariant="sans-serif">breathing</mml:mtext></mml:math></alternatives></inline-formula>, <inline-formula id="pcbi.1004867.e046"><alternatives><graphic id="pcbi.1004867.e046g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e046" xlink:type="simple"/><mml:math display="inline" id="M52"><mml:mtext mathvariant="sans-serif">eating</mml:mtext></mml:math></alternatives></inline-formula>, <inline-formula id="pcbi.1004867.e047"><alternatives><graphic id="pcbi.1004867.e047g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e047" xlink:type="simple"/><mml:math display="inline" id="M53"><mml:mtext mathvariant="sans-serif">speaking</mml:mtext></mml:math></alternatives></inline-formula>, etc.). A specific human being, e.g. <monospace>guidoVanRossum</monospace>, is an instance of the <monospace>Human</monospace> class; this class may, itself, be a subclass of a <monospace>Hominidae</monospace> base class. The following code illustrates how one might define a <monospace>Human</monospace> class, including some functionality to age the <monospace>Human</monospace> and to set/get various members (descriptors such as <inline-formula id="pcbi.1004867.e048"><alternatives><graphic id="pcbi.1004867.e048g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e048" xlink:type="simple"/><mml:math display="inline" id="M54"><mml:mtext mathvariant="sans-serif">height</mml:mtext></mml:math></alternatives></inline-formula>, <inline-formula id="pcbi.1004867.e049"><alternatives><graphic id="pcbi.1004867.e049g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e049" xlink:type="simple"/><mml:math display="inline" id="M55"><mml:mtext mathvariant="sans-serif">age</mml:mtext></mml:math></alternatives></inline-formula>, etc.):</p>
<p><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e050" xlink:type="simple"/></p>
<p>Note the usage of <monospace>self</monospace> as the first argument in each method defined in the above code. The <monospace>self</monospace> keyword is necessary because when a method is invoked it must know <bold>which</bold> object to use. That is, an object instantiated from a class requires that methods on that object have some way to reference that particular instance of the class, versus other potential instances of that class. The <monospace>self</monospace> keyword provides such a “hook” to reference the specific object for which a method is called. Every method invocation for a given object, including even the initializer called <monospace>__init__</monospace>, must pass it<bold>self</bold> (the current instance) as the first argument to the method; this subtlety is further described at [<xref ref-type="bibr" rid="pcbi.1004867.ref086">86</xref>] and [<xref ref-type="bibr" rid="pcbi.1004867.ref087">87</xref>]. A practical way to view the effect of <monospace>self</monospace> is that any occurrence of <monospace>objName.methodName(arg1, arg2)</monospace> effectively becomes <monospace>methodName(objName, arg1, arg2)</monospace>. This is one key deviation from the behavior of top-level functions, which exist outside of any class. When defining methods, usage of <monospace>self</monospace> provides an explicit way for the object itself to be provided as an argument (self-reference), and its disciplined usage will help minimize confusion about expected arguments.</p>
<p>To illustrate how objects may interact with one another, consider a class to represent a chemical’s atom:</p>
<p><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e051" xlink:type="simple"/></p>
<p specific-use="continuation">Then, we can use this <monospace>Atom</monospace> class in constructing another class to represent molecules:</p>
<p><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e052" xlink:type="simple"/></p>
<p specific-use="continuation">And, finally, the following code illustrates the construction of a diatomic molecule:</p>
<p><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e053" xlink:type="simple"/></p>
<p>If the above code is run, for example, in an interactive Python session, then note that the aforementioned <monospace>dir()</monospace> function is an especially useful built-in tool for querying the properties of new classes and objects. For instance, issuing the statement <monospace>dir(Molecule)</monospace> will return detailed information about the <monospace>Molecule</monospace> class (including its available methods).</p>
<p><bold>Exercise 9</bold>: Amino acids can be effectively represented via OOP because each AA has a well-defined chemical composition: a specific number of atoms of various element types (carbon, nitrogen, etc.) and a covalent bond connectivity that adheres to a specific pattern. For these reasons, the prototype of an <sc>l</sc>-amino acid can be unambiguously defined by the SMILES [<xref ref-type="bibr" rid="pcbi.1004867.ref088">88</xref>] string <inline-formula id="pcbi.1004867.e054"><alternatives><graphic id="pcbi.1004867.e054g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e054" xlink:type="simple"/><mml:math display="inline" id="M56"><mml:mtext mathvariant="sans-serif">‘N[C@@H](R)C(=O)O’</mml:mtext></mml:math></alternatives></inline-formula>, where <inline-formula id="pcbi.1004867.e055"><alternatives><graphic id="pcbi.1004867.e055g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e055" xlink:type="simple"/><mml:math display="inline" id="M57"><mml:mtext mathvariant="sans-serif">‘R’</mml:mtext></mml:math></alternatives></inline-formula> denotes the side-chain and <inline-formula id="pcbi.1004867.e056"><alternatives><graphic id="pcbi.1004867.e056g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e056" xlink:type="simple"/><mml:math display="inline" id="M58"><mml:mtext mathvariant="sans-serif">‘@@’</mml:mtext></mml:math></alternatives></inline-formula> indicates the <sc>l</sc> enantiomer. In addition to chemical structure, each AA also features specific physicochemical properties (molar mass, isoelectric point, optical activity/specific rotation, etc.). In this exercise, create an AA class and use it to define any two of the twenty standard AAs, in terms of their chemical composition and unique physical properties. To extend this exercise, consider expanding your AA class to include additional class members (e.g., the frequency of occurrence of that AA type) and methods (e.g., the possibility of applying post-translational modifications). To see the utility of this exercise in a broader OOP schema, see the discussion of the hierarchical <bold>S</bold>tructure ⊃ <bold>M</bold>odel ⊃ <bold>C</bold>hain ⊃ <bold>R</bold>esidue ⊃ <bold>A</bold>tom (SMCRA) design used in ref [<xref ref-type="bibr" rid="pcbi.1004867.ref085">85</xref>] to create classes that can represent entire protein assemblies.</p>
</sec>
</sec>
<sec id="sec029">
<title>File Management and I/O</title>
<p>Scientific data are typically acquired, processed, stored, exchanged, and archived as computer files. As a means of input/output (I/O) communication, Python provides tools for reading, writing and otherwise manipulating files in various formats. Supplemental Chapter 11 in <xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref> focuses on file I/O in Python. Most simply, the Python interpreter allows command-line input and basic data output via the <monospace>print()</monospace> function. For real-time interaction with Python, the free IPython [<xref ref-type="bibr" rid="pcbi.1004867.ref089">89</xref>] system offers a shell that is both easy to use and uniquely powerful (e.g., it features tab completion and command history scrolling); see the <xref ref-type="supplementary-material" rid="pcbi.1004867.s002">S2 Text</xref>, §3 for more on interacting with Python. A more general approach to I/O, and a more robust (persistent) approach to data archival and exchange, is to use files for reading, writing, and processing data. Python handles file I/O via the creation of <monospace>file</monospace> objects, which are instantiated by calling the <monospace>open</monospace> function with the filename and access mode as its two arguments. The syntax is illustrated by <monospace>fileObject = open("myName.pdb",</monospace> <monospace>mode = ‘r’)</monospace>, which creates a new file object from a file named <monospace>"myName.pdb"</monospace>. This file will be only readable because the <monospace>‘r’</monospace> mode is specified; other valid modes include <monospace>‘w’</monospace> to allow writing and <monospace>‘a’</monospace> for appending. Depending on which mode is specified, different methods of the file object will be exposed for use. <xref ref-type="table" rid="pcbi.1004867.t004">Table 4</xref> describes mode types and the various methods of a <monospace>File</monospace> object.</p>
<table-wrap id="pcbi.1004867.t004" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1004867.t004</object-id>
<label>Table 4</label>
<caption>
<title>Python’s file-access modes.</title>
</caption>
<alternatives>
<graphic id="pcbi.1004867.t004g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1004867.t004" xlink:type="simple"/>
<table border="0" frame="box" rules="all">
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left">I/O Mode</th>
<th align="left">Syntax</th>
<th align="left">Behavior</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Read</td>
<td align="left">‘<monospace>r</monospace>’</td>
<td align="left">Opens the contents of a file for reading into the file interface, allowing for lines to be read-in successively.</td>
</tr>
<tr>
<td align="left">Write</td>
<td align="left">‘<monospace>w</monospace>’</td>
<td align="left">Creates a file with the specified name and allows for text to be written to the file; note that specifying a pre-existing filename will overwrite the existing file.</td>
</tr>
<tr>
<td align="left">Append</td>
<td align="left">‘<monospace>a</monospace>’</td>
<td align="left">Opens an existing file and allows for text to be written to it, starting at the conclusion of the original file contents.</td>
</tr>
<tr>
<td align="left">Read and Write</td>
<td align="left">‘<monospace>r</monospace>+’</td>
<td align="left">Opens a file such that its contents can be both read-in and written-to, thus offering great versatility.</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t004fn001">
<p>Python’s available file-access modes are summarized here.</p>
</fn>
</table-wrap-foot>
</table-wrap>
<p>The following example opens a file named <monospace>myDataFile.txt</monospace> and reads the lines, <italic>en masse</italic>, into a list named <monospace>listOfLines</monospace>. (In this example, the variable <monospace>readFile</monospace> is also known as a “file handle,” as it references the file object.) As for all lists, this object is iterable and can be looped over in order to process the data.</p>
<p specific-use="line"><monospace>1 readFile = <bold>open</bold>("<italic>myDataFile.txt</italic>", mode = ‘<italic>r</italic>’)</monospace></p>
<p specific-use="line"><monospace>2 listOfLines = readFile.readlines()</monospace></p>
<p specific-use="line"><monospace>3 # Process the lines. Simply dump the contents to the console:</monospace></p>
<p specific-use="line"><monospace>4 <bold>for</bold> l <bold>in</bold> listOfLines:</monospace></p>
<p specific-use="line"><monospace>5  <bold>print</bold>(l)</monospace></p>
<p specific-use="line"> <monospace>(The lines in the file will be printed)</monospace></p>
<p specific-use="line"><monospace>6 readFile.close()</monospace></p>
<p>Data can be extracted and processed via subsequent string operations on the list of lines drawn from the file. In fact, many data-analysis workflows commit much effort to the pre-processing of raw data and standardization of formats, simply to enable data structures to be cleanly populated. For many common input formats such as .csv(comma-separated values) and .xls(Microsoft Excel), packages such as <inline-formula id="pcbi.1004867.e057"><alternatives><graphic id="pcbi.1004867.e057g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e057" xlink:type="simple"/><mml:math display="inline" id="M59"><mml:mtext mathvariant="sans-serif">pandas</mml:mtext></mml:math></alternatives></inline-formula> [<xref ref-type="bibr" rid="pcbi.1004867.ref090">90</xref>] simplify the process of reading in complex file formats and organizing the input as flexible data structures. For more specialized file formats, much of this ‘data wrangling’ stems from the different degrees of standards-compliance of various data sources, as well as the immense heterogeneity of modern collections of datasets (sequences, 3D structures, microarray data, network graphs, etc.). A common example of the need to read and extract information is provided by the PDB file format [<xref ref-type="bibr" rid="pcbi.1004867.ref022">22</xref>], which is a container for macromolecular structural data. In addition to its basic information content—lists of atoms and their 3D coordinates—the standard PDB file format also includes a host of <italic>metadata</italic> (loosely, data that describe other (lower-level) data, for instance in terms of syntax and schemas), such as the biopolymer sequence, protein superfamily, quaternary structures, chemical moieties that may be present, X-ray or NMR refinement details, and so on. Indeed, processing and analyzing the rich data available in a PDB file motivates the Final Project at the end of this primer. For now, this brief example demonstrates how to use Python’s I/O methods to count the number of <inline-formula id="pcbi.1004867.e058"><alternatives><graphic id="pcbi.1004867.e058g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e058" xlink:type="simple"/><mml:math display="inline" id="M60"><mml:mtext mathvariant="sans-serif">HETATM</mml:mtext></mml:math></alternatives></inline-formula> records in a PDB file:</p>
<p specific-use="line"><monospace>1 fp = <bold>open</bold>(‘<italic>1I8F.pdb</italic>’, mode = ‘<italic>r</italic>’)</monospace></p>
<p specific-use="line"><monospace>2 numHetatm = 0</monospace></p>
<p specific-use="line"><monospace>3 <bold>for</bold> line <bold>in</bold> fp.readlines():</monospace></p>
<p specific-use="line"><monospace>4  <bold>if</bold>(<bold>len</bold>(line) &gt; 6):</monospace></p>
<p specific-use="line"><monospace>5   <bold>if</bold>(line[0:6] == "<italic>HETATM</italic>"):</monospace></p>
<p specific-use="line"><monospace>6    numHetatm += 1</monospace></p>
<p specific-use="line"><monospace>7 fp.close()</monospace></p>
<p specific-use="line"><monospace>8 <bold>print</bold>(numHetatm)</monospace></p>
<p specific-use="line"> <monospace>160</monospace></p>
<p>Such <inline-formula id="pcbi.1004867.e059"><alternatives><graphic id="pcbi.1004867.e059g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e059" xlink:type="simple"/><mml:math display="inline" id="M61"><mml:mtext mathvariant="sans-serif">HETATM</mml:mtext></mml:math></alternatives></inline-formula>, or heteroatom, lines in a PDB file correspond to water, ions, small-molecule ligands, and other non-biopolymer components of a structure; for example, glycerol <inline-formula id="pcbi.1004867.e060"><alternatives><graphic id="pcbi.1004867.e060g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e060" xlink:type="simple"/><mml:math display="inline" id="M62"><mml:mtext mathvariant="sans-serif">HETATM</mml:mtext></mml:math></alternatives></inline-formula> lines are often found in cryo-crystallographic structures, where glycerol was added to crystals as a cryo-protectant.</p>
<p><bold>Exercise 10</bold>: The standard FASTA file-format, used to represent protein and nucleic acid sequences, consists of two parts: (i) The first line is a description of the biomolecule, starting with a greater-than sign (<inline-formula id="pcbi.1004867.e061"><alternatives><graphic id="pcbi.1004867.e061g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e061" xlink:type="simple"/><mml:math display="inline" id="M63"><mml:mtext mathvariant="sans-serif">&gt;</mml:mtext></mml:math></alternatives></inline-formula>) in the first column; this sign is immediately followed by a non-whitespace character and any arbitrary text that describes the sequence name and other information (e.g., database accession identifiers). (ii) The subsequent lines specify the biomolecular sequence as single-letter codes, with no blank lines allowed. A protein example follows:<monospace>&gt;tr|Q8ZYG5|Q8ZYG5_PYRAE (Sm-like) OS = P aerophilum GN = PAE0790 MASDISKCFATLGATLQDSIGKQVLVKLRDSHEIRGILRSFDQHVNLLLEDAEEIIDGNVYKRGTMVVRGENVLFISPVP</monospace></p>
<p specific-use="continuation">Begin this exercise by choosing a FASTA protein sequence with more than 3000 AA residues. Then, write Python code to read in the sequence from the FASTA file and: (i) determine the relative frequencies of AAs that follow proline in the sequence; (ii) compare the distribution of AAs that follow proline to the distribution of AAs in the entire protein; and (iii) write these results to a human-readable file.</p>
</sec>
<sec id="sec030">
<title>Regular Expressions for String Manipulations</title>
<p>The <italic>regular expression</italic> (<italic>regex</italic>) is an extensible tool for pattern matching in strings. They are discussed at length in Supplemental Chapter 17 in <xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>. Regexes entered the world of practical programming in the late 1960s at Bell Labs and, like many tools of that era, they are powerful, flexible, and terse constructs. Fundamentally, a regex specifies a set of strings. The simplest type of regex is a simple string with no special characters (<italic>metacharacters</italic>). Such a regex will match itself: <inline-formula id="pcbi.1004867.e062"><alternatives><graphic id="pcbi.1004867.e062g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e062" xlink:type="simple"/><mml:math display="inline" id="M64"><mml:mstyle mathbackground="#e6e6e6"><mml:mtext>Biology</mml:mtext></mml:mstyle></mml:math></alternatives></inline-formula> would match “<inline-formula id="pcbi.1004867.e063"><alternatives><graphic id="pcbi.1004867.e063g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e063" xlink:type="simple"/><mml:math display="inline" id="M65"><mml:mtext mathvariant="sans-serif">Biology</mml:mtext></mml:math></alternatives></inline-formula>” or “<inline-formula id="pcbi.1004867.e064"><alternatives><graphic id="pcbi.1004867.e064g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e064" xlink:type="simple"/><mml:math display="inline" id="M66"><mml:mtext mathvariant="sans-serif">Biologys</mml:mtext></mml:math></alternatives></inline-formula>,” but not “<inline-formula id="pcbi.1004867.e065"><alternatives><graphic id="pcbi.1004867.e065g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e065" xlink:type="simple"/><mml:math display="inline" id="M67"><mml:mtext mathvariant="sans-serif">biology</mml:mtext></mml:math></alternatives></inline-formula>,” “<inline-formula id="pcbi.1004867.e066"><alternatives><graphic id="pcbi.1004867.e066g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e066" xlink:type="simple"/><mml:math display="inline" id="M68"><mml:mtext mathvariant="sans-serif">Biochem</mml:mtext></mml:math></alternatives></inline-formula>,” or anything else that does not start with “<inline-formula id="pcbi.1004867.e067"><alternatives><graphic id="pcbi.1004867.e067g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e067" xlink:type="simple"/><mml:math display="inline" id="M69"><mml:mtext mathvariant="sans-serif">Biology</mml:mtext></mml:math></alternatives></inline-formula>” (note the case sensitivity).</p>
<p>In Python, a regex <monospace>match</monospace>es a string if the string starts with that regex. Python also provides a <monospace>search</monospace> function to locate a regex anywhere within a string. Returning to the notion that a regex “specifies a set of strings,” given some text the <monospace>match</monospace>es to a regex will be all strings that <bold>start</bold> with the regex, while the <monospace>search</monospace> hits will be all strings that <bold>contain</bold> the regex. For clarity, we will say that a regex <monospace>find</monospace>s a string if the string is completely described by the regex, with no trailing characters. (There is no <monospace>find</monospace> in Python but, for purposes of description here, it is useful to have a term to refer to a <monospace>match</monospace> without trailing characters.)</p>
<p>Locating strings and parsing text files is a ubiquitous task in the biosciences, e.g. identifying a stop codon in a nucleic acid FASTA file or finding error messages in an instrument’s log files. Yet regexes offer even greater functionality than may be initially apparent from these examples, as described below. First, we note that the following metacharacters are special in regexes: <inline-formula id="pcbi.1004867.e068"><alternatives><graphic id="pcbi.1004867.e068g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e068" xlink:type="simple"/><mml:math display="inline" id="M70"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>$</mml:mo> <mml:mo>^</mml:mo> <mml:mo>.</mml:mo> <mml:mo>*</mml:mo> <mml:mo>+</mml:mo> <mml:mo>?</mml:mo> <mml:mo>{</mml:mo> <mml:mo>}</mml:mo> <mml:mo>[</mml:mo> <mml:mo>]</mml:mo> <mml:mo>(</mml:mo> <mml:mo>)</mml:mo> <mml:mo>|</mml:mo> <mml:mo>\</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>, and in most cases they do not <monospace>find</monospace> themselves.</p>
<p>The <inline-formula id="pcbi.1004867.e069"><alternatives><graphic id="pcbi.1004867.e069g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e069" xlink:type="simple"/><mml:math display="inline" id="M71"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>^</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> and <inline-formula id="pcbi.1004867.e070"><alternatives><graphic id="pcbi.1004867.e070g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e070" xlink:type="simple"/><mml:math display="inline" id="M72"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>$</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> metacharacters (known as <italic>anchors</italic>) are straightforward, as they <monospace>find</monospace> the start and end of a line, respectively. While <monospace>match</monospace> looks for lines beginning with the specified regex, adding a <inline-formula id="pcbi.1004867.e071"><alternatives><graphic id="pcbi.1004867.e071g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e071" xlink:type="simple"/><mml:math display="inline" id="M73"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>$</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> to the end of the regex pattern will ensure that any matching line ends at the end of the regex. (This is why there is no <monospace>find</monospace> function in Python: it is easily achieved by adding a <inline-formula id="pcbi.1004867.e072"><alternatives><graphic id="pcbi.1004867.e072g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e072" xlink:type="simple"/><mml:math display="inline" id="M74"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>$</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> to a regex used in <monospace>match</monospace>.) For example, to <monospace>find</monospace> lines in a log file that state ‘<inline-formula id="pcbi.1004867.e073"><alternatives><graphic id="pcbi.1004867.e073g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e073" xlink:type="simple"/><mml:math display="inline" id="M75"><mml:mtext mathvariant="sans-serif">Run complete</mml:mtext></mml:math></alternatives></inline-formula>’, but not ‘<inline-formula id="pcbi.1004867.e074"><alternatives><graphic id="pcbi.1004867.e074g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e074" xlink:type="simple"/><mml:math display="inline" id="M76"><mml:mtext mathvariant="sans-serif">Run completes in 5 minutes</mml:mtext></mml:math></alternatives></inline-formula>’, the regex <inline-formula id="pcbi.1004867.e075"><alternatives><graphic id="pcbi.1004867.e075g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e075" xlink:type="simple"/><mml:math display="inline" id="M77"><mml:mstyle mathbackground="#e6e6e6"><mml:mtext>Run complete</mml:mtext> <mml:mo>$</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> would <monospace>match</monospace> the desired target lines.</p>
<p>A <inline-formula id="pcbi.1004867.e076"><alternatives><graphic id="pcbi.1004867.e076g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e076" xlink:type="simple"/><mml:math display="inline" id="M78"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>.</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> (a period) <monospace>find</monospace>s literally any character. For example, if a protein kinase has a consensus motif of ‘<inline-formula id="pcbi.1004867.e077"><alternatives><graphic id="pcbi.1004867.e077g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e077" xlink:type="simple"/><mml:math display="inline" id="M79"><mml:mtext mathvariant="sans-serif">AXRSXRSXRSP</mml:mtext></mml:math></alternatives></inline-formula>’, where <inline-formula id="pcbi.1004867.e078"><alternatives><graphic id="pcbi.1004867.e078g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e078" xlink:type="simple"/><mml:math display="inline" id="M80"><mml:mtext mathvariant="sans-serif">X</mml:mtext></mml:math></alternatives></inline-formula> is any AA, then the regex <inline-formula id="pcbi.1004867.e079"><alternatives><graphic id="pcbi.1004867.e079g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e079" xlink:type="simple"/><mml:math display="inline" id="M81"><mml:mstyle mathbackground="#e6e6e6"><mml:mtext>A</mml:mtext> <mml:mo>.</mml:mo> <mml:mtext>RS</mml:mtext> <mml:mo>.</mml:mo> <mml:mtext>RS</mml:mtext> <mml:mo>.</mml:mo> <mml:mtext>RSP</mml:mtext></mml:mstyle></mml:math></alternatives></inline-formula> would succeed in <monospace>search</monospace>ing for substrates.</p>
<p>The metacharacters <inline-formula id="pcbi.1004867.e080"><alternatives><graphic id="pcbi.1004867.e080g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e080" xlink:type="simple"/><mml:math display="inline" id="M82"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>*</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>, <inline-formula id="pcbi.1004867.e081"><alternatives><graphic id="pcbi.1004867.e081g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e081" xlink:type="simple"/><mml:math display="inline" id="M83"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>+</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>, <inline-formula id="pcbi.1004867.e082"><alternatives><graphic id="pcbi.1004867.e082g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e082" xlink:type="simple"/><mml:math display="inline" id="M84"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>{</mml:mo> <mml:mo>}</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>, and <inline-formula id="pcbi.1004867.e083"><alternatives><graphic id="pcbi.1004867.e083g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e083" xlink:type="simple"/><mml:math display="inline" id="M85"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>?</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> are special <italic>quantifier</italic> operators, used to specify repetition of a character, character class, or higher-order unit within a regex (described below). A <inline-formula id="pcbi.1004867.e084"><alternatives><graphic id="pcbi.1004867.e084g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e084" xlink:type="simple"/><mml:math display="inline" id="M86"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>*</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> after a character (or group of characters) <monospace>find</monospace>s that character zero or more times. Returning to the notion of a consensus motif, a protein that recognizes RNA which contains the dinucleotide ‘<inline-formula id="pcbi.1004867.e085"><alternatives><graphic id="pcbi.1004867.e085g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e085" xlink:type="simple"/><mml:math display="inline" id="M87"><mml:mtext mathvariant="sans-serif">UG</mml:mtext></mml:math></alternatives></inline-formula>’ followed by any number of ‘<inline-formula id="pcbi.1004867.e086"><alternatives><graphic id="pcbi.1004867.e086g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e086" xlink:type="simple"/><mml:math display="inline" id="M88"><mml:mtext mathvariant="sans-serif">A</mml:mtext></mml:math></alternatives></inline-formula>’s would find its binding partners by <monospace>search</monospace>ing for the regex <inline-formula id="pcbi.1004867.e087"><alternatives><graphic id="pcbi.1004867.e087g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e087" xlink:type="simple"/><mml:math display="inline" id="M89"><mml:mstyle mathbackground="#e6e6e6"><mml:mtext>UGA</mml:mtext> <mml:mo>*</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>. One can comb through RNA-seq reads to find sequences that are 3'-polyadenylated by <monospace>search</monospace>ing for <inline-formula id="pcbi.1004867.e088"><alternatives><graphic id="pcbi.1004867.e088g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e088" xlink:type="simple"/><mml:math display="inline" id="M90"><mml:mstyle mathbackground="#e6e6e6"><mml:mtext>AAAAAA</mml:mtext> <mml:mo>*</mml:mo> <mml:mo>$</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>. This would <monospace>find</monospace> exactly five ‘<inline-formula id="pcbi.1004867.e089"><alternatives><graphic id="pcbi.1004867.e089g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e089" xlink:type="simple"/><mml:math display="inline" id="M91"><mml:mtext mathvariant="sans-serif">A</mml:mtext></mml:math></alternatives></inline-formula>’s, followed by zero or more ‘<inline-formula id="pcbi.1004867.e090"><alternatives><graphic id="pcbi.1004867.e090g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e090" xlink:type="simple"/><mml:math display="inline" id="M92"><mml:mtext mathvariant="sans-serif">A</mml:mtext></mml:math></alternatives></inline-formula>’s, followed by the end of the line. The <inline-formula id="pcbi.1004867.e091"><alternatives><graphic id="pcbi.1004867.e091g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e091" xlink:type="simple"/><mml:math display="inline" id="M93"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>+</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> metacharacter is akin to <inline-formula id="pcbi.1004867.e092"><alternatives><graphic id="pcbi.1004867.e092g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e092" xlink:type="simple"/><mml:math display="inline" id="M94"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>*</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>, except that it <monospace>find</monospace>s one or more of the preceding character. A <inline-formula id="pcbi.1004867.e093"><alternatives><graphic id="pcbi.1004867.e093g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e093" xlink:type="simple"/><mml:math display="inline" id="M95"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>?</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> <monospace>find</monospace>s the preceding character zero or one time. Most generally, the <inline-formula id="pcbi.1004867.e094"><alternatives><graphic id="pcbi.1004867.e094g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e094" xlink:type="simple"/><mml:math display="inline" id="M96"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>{</mml:mo> <mml:mtext>m</mml:mtext> <mml:mo>,</mml:mo> <mml:mtext>n</mml:mtext> <mml:mo>}</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> syntax <monospace>find</monospace>s the preceding character (possibly from a character class) between <italic>m</italic> and <italic>n</italic> times, inclusive. Thus, <inline-formula id="pcbi.1004867.e095"><alternatives><graphic id="pcbi.1004867.e095g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e095" xlink:type="simple"/><mml:math display="inline" id="M97"><mml:mstyle mathbackground="#e6e6e6"><mml:mtext>x</mml:mtext> <mml:mo>{</mml:mo> <mml:mn>3</mml:mn> <mml:mo>}</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> <monospace>find</monospace>s the character ‘<inline-formula id="pcbi.1004867.e096"><alternatives><graphic id="pcbi.1004867.e096g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e096" xlink:type="simple"/><mml:math display="inline" id="M98"><mml:mtext mathvariant="sans-serif">x</mml:mtext></mml:math></alternatives></inline-formula>’ if repeated exactly three times, <inline-formula id="pcbi.1004867.e097"><alternatives><graphic id="pcbi.1004867.e097g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e097" xlink:type="simple"/><mml:math display="inline" id="M99"><mml:mstyle mathbackground="#e6e6e6"><mml:mtext>A</mml:mtext> <mml:mo>{</mml:mo> <mml:mn>5</mml:mn> <mml:mo>,</mml:mo> <mml:mn>18</mml:mn> <mml:mo>}</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> <monospace>find</monospace>s the character ‘<inline-formula id="pcbi.1004867.e098"><alternatives><graphic id="pcbi.1004867.e098g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e098" xlink:type="simple"/><mml:math display="inline" id="M100"><mml:mtext mathvariant="sans-serif">A</mml:mtext></mml:math></alternatives></inline-formula>’ repeated five to eighteen times, and <inline-formula id="pcbi.1004867.e099"><alternatives><graphic id="pcbi.1004867.e099g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e099" xlink:type="simple"/><mml:math display="inline" id="M101"><mml:mstyle mathbackground="#e6e6e6"><mml:mtext>P</mml:mtext> <mml:mo>{</mml:mo> <mml:mn>2</mml:mn> <mml:mo>,</mml:mo> <mml:mo>}</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> <monospace>find</monospace>s runs of two or more ‘<inline-formula id="pcbi.1004867.e100"><alternatives><graphic id="pcbi.1004867.e100g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e100" xlink:type="simple"/><mml:math display="inline" id="M102"><mml:mtext mathvariant="sans-serif">P</mml:mtext></mml:math></alternatives></inline-formula>’ characters.</p>
<p>Combining the above concepts, we can <monospace>search</monospace> for protein sequences that begin with a His6×-tag (‘<inline-formula id="pcbi.1004867.e101"><alternatives><graphic id="pcbi.1004867.e101g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e101" xlink:type="simple"/><mml:math display="inline" id="M103"><mml:mtext mathvariant="sans-serif">HHHHHH</mml:mtext></mml:math></alternatives></inline-formula>’), followed by at most five residues, then a TEV protease cleavage site (‘<inline-formula id="pcbi.1004867.e102"><alternatives><graphic id="pcbi.1004867.e102g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e102" xlink:type="simple"/><mml:math display="inline" id="M104"><mml:mtext mathvariant="sans-serif">ENLYFQ</mml:mtext></mml:math></alternatives></inline-formula>’), followed immediately by a 73-residue polypeptide that ends with ‘<inline-formula id="pcbi.1004867.e103"><alternatives><graphic id="pcbi.1004867.e103g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e103" xlink:type="simple"/><mml:math display="inline" id="M105"><mml:mtext mathvariant="sans-serif">IIDGNV</mml:mtext></mml:math></alternatives></inline-formula>’. The regex to <monospace>search</monospace> for this sequence would be <inline-formula id="pcbi.1004867.e104"><alternatives><graphic id="pcbi.1004867.e104g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e104" xlink:type="simple"/><mml:math display="inline" id="M106"><mml:mstyle mathbackground="#e6e6e6"><mml:mtext>H</mml:mtext> <mml:mo>{</mml:mo> <mml:mn>6</mml:mn> <mml:mo>}</mml:mo> <mml:mo>.</mml:mo> <mml:mo>{</mml:mo> <mml:mn>0</mml:mn> <mml:mo>,</mml:mo> <mml:mn>5</mml:mn> <mml:mo>}</mml:mo> <mml:mtext>ENLYFQ</mml:mtext> <mml:mo>.</mml:mo> <mml:mo>{</mml:mo> <mml:mn>67</mml:mn> <mml:mo>}</mml:mo> <mml:mtext>IIDGNV</mml:mtext></mml:mstyle></mml:math></alternatives></inline-formula>.</p>
<p>Characters enclosed in square brackets, <inline-formula id="pcbi.1004867.e105"><alternatives><graphic id="pcbi.1004867.e105g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e105" xlink:type="simple"/><mml:math display="inline" id="M107"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>[</mml:mo> <mml:mo>]</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>, specify a <italic>character class</italic>. This functionality allows a regex to <monospace>find</monospace> any of a set of characters. For example, <inline-formula id="pcbi.1004867.e106"><alternatives><graphic id="pcbi.1004867.e106g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e106" xlink:type="simple"/><mml:math display="inline" id="M108"><mml:mstyle mathbackground="#e6e6e6"><mml:mtext>AAG</mml:mtext> <mml:mo stretchy="false">[</mml:mo> <mml:mtext>TC</mml:mtext> <mml:mo stretchy="false">]</mml:mo> <mml:mtext>G</mml:mtext></mml:mstyle></mml:math></alternatives></inline-formula> would <monospace>find</monospace> ‘<inline-formula id="pcbi.1004867.e107"><alternatives><graphic id="pcbi.1004867.e107g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e107" xlink:type="simple"/><mml:math display="inline" id="M109"><mml:mtext mathvariant="sans-serif">AAG</mml:mtext></mml:math></alternatives></inline-formula> <inline-formula id="pcbi.1004867.e108"><alternatives><graphic id="pcbi.1004867.e108g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e108" xlink:type="simple"/><mml:math display="inline" id="M110"><mml:mtext mathvariant="sans-serif-bold">T</mml:mtext></mml:math></alternatives></inline-formula> <inline-formula id="pcbi.1004867.e109"><alternatives><graphic id="pcbi.1004867.e109g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e109" xlink:type="simple"/><mml:math display="inline" id="M111"><mml:mtext mathvariant="sans-serif">G</mml:mtext></mml:math></alternatives></inline-formula>’ or ‘<inline-formula id="pcbi.1004867.e110"><alternatives><graphic id="pcbi.1004867.e110g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e110" xlink:type="simple"/><mml:math display="inline" id="M112"><mml:mtext mathvariant="sans-serif">AAG</mml:mtext></mml:math></alternatives></inline-formula> <inline-formula id="pcbi.1004867.e111"><alternatives><graphic id="pcbi.1004867.e111g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e111" xlink:type="simple"/><mml:math display="inline" id="M113"><mml:mtext mathvariant="sans-serif-bold">C</mml:mtext></mml:math></alternatives></inline-formula> <inline-formula id="pcbi.1004867.e112"><alternatives><graphic id="pcbi.1004867.e112g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e112" xlink:type="simple"/><mml:math display="inline" id="M114"><mml:mtext mathvariant="sans-serif">G</mml:mtext></mml:math></alternatives></inline-formula>’, where the variable char from the character class is bolded. A range of characters can be provided by separating them with a hyphen, <inline-formula id="pcbi.1004867.e113"><alternatives><graphic id="pcbi.1004867.e113g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e113" xlink:type="simple"/><mml:math display="inline" id="M115"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>-</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>. So, for instance, <inline-formula id="pcbi.1004867.e114"><alternatives><graphic id="pcbi.1004867.e114g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e114" xlink:type="simple"/><mml:math display="inline" id="M116"><mml:mstyle mathbackground="#e6e6e6"><mml:mo stretchy="false">[</mml:mo> <mml:mtext>A-Z</mml:mtext> <mml:mo stretchy="false">]</mml:mo> <mml:mo stretchy="false">[</mml:mo> <mml:mtext>a-z</mml:mtext> <mml:mo stretchy="false">]</mml:mo> <mml:mo>*</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> would <monospace>find</monospace> a word that starts with a capital letter. Multiple ranges can be specified, and <inline-formula id="pcbi.1004867.e115"><alternatives><graphic id="pcbi.1004867.e115g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e115" xlink:type="simple"/><mml:math display="inline" id="M117"><mml:mstyle mathbackground="#e6e6e6"><mml:mrow><mml:mo stretchy="false">[</mml:mo> <mml:mn>1</mml:mn> <mml:mo>–</mml:mo> <mml:mn>9</mml:mn> <mml:mo stretchy="false">]</mml:mo> <mml:mo stretchy="false">[</mml:mo> <mml:mtext>A</mml:mtext> <mml:mo>–</mml:mo> <mml:mtext>Za</mml:mtext> <mml:mo>–</mml:mo> <mml:mtext>z</mml:mtext> <mml:mn>0</mml:mn> <mml:mo>–</mml:mo> <mml:mn>9</mml:mn> <mml:mo stretchy="false">]</mml:mo> <mml:mo>{</mml:mo> <mml:mtext>3</mml:mtext> <mml:mo>}</mml:mo> <mml:mo>.</mml:mo> <mml:mtext>pdb</mml:mtext></mml:mrow></mml:mstyle></mml:math></alternatives></inline-formula> would <monospace>find</monospace> PDB files in some search directory. (Note that the <inline-formula id="pcbi.1004867.e116"><alternatives><graphic id="pcbi.1004867.e116g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e116" xlink:type="simple"/><mml:math display="inline" id="M118"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>.</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> in that regex will <monospace>find</monospace> any character, so ‘<inline-formula id="pcbi.1004867.e117"><alternatives><graphic id="pcbi.1004867.e117g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e117" xlink:type="simple"/><mml:math display="inline" id="M119"><mml:mtext mathvariant="sans-serif">1I8Fnpdb</mml:mtext></mml:math></alternatives></inline-formula>’ would be matched, even though we might intend for only ‘<inline-formula id="pcbi.1004867.e118"><alternatives><graphic id="pcbi.1004867.e118g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e118" xlink:type="simple"/><mml:math display="inline" id="M120"><mml:mtext mathvariant="sans-serif">1I8F.pdb</mml:mtext></mml:math></alternatives></inline-formula>’ to be found. This could be corrected by escaping the <inline-formula id="pcbi.1004867.e119"><alternatives><graphic id="pcbi.1004867.e119g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e119" xlink:type="simple"/><mml:math display="inline" id="M121"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>.</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> with a backslash, as discussed below.) The <inline-formula id="pcbi.1004867.e120"><alternatives><graphic id="pcbi.1004867.e120g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e120" xlink:type="simple"/><mml:math display="inline" id="M122"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>^</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> metacharacter can be used to negate a character class: <inline-formula id="pcbi.1004867.e121"><alternatives><graphic id="pcbi.1004867.e121g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e121" xlink:type="simple"/><mml:math display="inline" id="M123"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>[</mml:mo> <mml:mo>^</mml:mo> <mml:mn>0</mml:mn> <mml:mo>–</mml:mo> <mml:mn>9</mml:mn> <mml:mo>]</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> would <monospace>find</monospace> any non-numeric character.</p>
<p>The backslash metacharacter, <inline-formula id="pcbi.1004867.e122"><alternatives><graphic id="pcbi.1004867.e122g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e122" xlink:type="simple"/><mml:math display="inline" id="M124"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>\</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>, is used to suppress, or <italic>escape</italic>, the meaning of the immediately following character; for this reason, <monospace><italic>\</italic></monospace> is known as an <italic>escape character</italic>. For example, consider the task of finding prices exceeding $1000 in a segment of text. A regex might be <inline-formula id="pcbi.1004867.e123"><alternatives><graphic id="pcbi.1004867.e123g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e123" xlink:type="simple"/><mml:math display="inline" id="M125"><mml:mstyle mathbackground="#e6e6e6"><mml:mi>$</mml:mi> <mml:mn>0</mml:mn> <mml:mo>*</mml:mo> <mml:mo stretchy="false">[</mml:mo> <mml:mn>1</mml:mn> <mml:mo>–</mml:mo> <mml:mn>9</mml:mn> <mml:mo stretchy="false">]</mml:mo> <mml:mo stretchy="false">[</mml:mo> <mml:mn>0</mml:mn> <mml:mo>–</mml:mo> <mml:mn>9</mml:mn> <mml:mo stretchy="false">]</mml:mo> <mml:mo>{</mml:mo> <mml:mn>3</mml:mn> <mml:mo>,</mml:mo> <mml:mo>}</mml:mo> <mml:mo>.</mml:mo> <mml:mo stretchy="false">[</mml:mo> <mml:mn>0</mml:mn> <mml:mo>–</mml:mo> <mml:mn>9</mml:mn> <mml:mo stretchy="false">]</mml:mo> <mml:mo>{</mml:mo> <mml:mn>2</mml:mn> <mml:mo>}</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>. This monstrous regex should <monospace>find</monospace> a dollar sign, any number of zeros, one non-zero number, at least three numbers, a period, and two numbers. Thus, ‘<inline-formula id="pcbi.1004867.e124"><alternatives><graphic id="pcbi.1004867.e124g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e124" xlink:type="simple"/><mml:math display="inline" id="M126"><mml:mtext mathvariant="sans-serif">$01325.25</mml:mtext></mml:math></alternatives></inline-formula>’ would be found, but not ‘<inline-formula id="pcbi.1004867.e125"><alternatives><graphic id="pcbi.1004867.e125g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e125" xlink:type="simple"/><mml:math display="inline" id="M127"><mml:mtext mathvariant="sans-serif">$00125.67</mml:mtext></mml:math></alternatives></inline-formula>’. (The requirement of a non-zero number followed by three numbers is not met in this case.) But, there is a problem here: The <inline-formula id="pcbi.1004867.e126"><alternatives><graphic id="pcbi.1004867.e126g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e126" xlink:type="simple"/><mml:math display="inline" id="M128"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>$</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> metacharacter anchors the end of a line, and because no text can appear after the end of a line this regex will never <monospace>match</monospace> any text. Furthermore, the <inline-formula id="pcbi.1004867.e127"><alternatives><graphic id="pcbi.1004867.e127g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e127" xlink:type="simple"/><mml:math display="inline" id="M129"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>.</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> is meant to <monospace>find</monospace> a literal period (the decimal point), but in a regex it is a wildcard that <monospace>find</monospace>s any character. The <inline-formula id="pcbi.1004867.e128"><alternatives><graphic id="pcbi.1004867.e128g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e128" xlink:type="simple"/><mml:math display="inline" id="M130"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>\</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> metacharacter can be used to solve both of these problems: It notifies the regex engine to treat the subsequent character as a literal. Thus, a correct regex for prices over $1000 would be <inline-formula id="pcbi.1004867.e129"><alternatives><graphic id="pcbi.1004867.e129g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e129" xlink:type="simple"/><mml:math display="inline" id="M131"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>\</mml:mo> <mml:mi>$</mml:mi> <mml:mn>0</mml:mn> <mml:mo>*</mml:mo> <mml:mo stretchy="false">[</mml:mo> <mml:mn>1</mml:mn> <mml:mo>–</mml:mo> <mml:mn>9</mml:mn> <mml:mo stretchy="false">]</mml:mo> <mml:mo stretchy="false">[</mml:mo> <mml:mn>0</mml:mn> <mml:mo>–</mml:mo> <mml:mn>9</mml:mn> <mml:mo stretchy="false">]</mml:mo> <mml:mo>{</mml:mo> <mml:mn>3</mml:mn> <mml:mo>,</mml:mo> <mml:mo>}</mml:mo> <mml:mo>\</mml:mo> <mml:mo>.</mml:mo> <mml:mo stretchy="false">[</mml:mo> <mml:mn>0</mml:mn> <mml:mo>–</mml:mo> <mml:mn>9</mml:mn> <mml:mo stretchy="false">]</mml:mo> <mml:mo>{</mml:mo> <mml:mn>2</mml:mn> <mml:mo>}</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>. To <monospace>find</monospace> a literal ‘\’, use <inline-formula id="pcbi.1004867.e130"><alternatives><graphic id="pcbi.1004867.e130g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e130" xlink:type="simple"/><mml:math display="inline" id="M132"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>\</mml:mo> <mml:mo>\</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>. (The <monospace><italic>\</italic></monospace> metacharacter often appears in I/O processing as a way to escape quotation marks; for instance, the statement <monospace>print("foo")</monospace> will output <monospace>foo</monospace>, whereas <monospace>print("\"foo\"")</monospace> will print <monospace>"foo"</monospace>.)</p>
<p>Python and many other languages include a <monospace><italic>\</italic></monospace> before certain (non-reserved) characters, as a convenient built-in feature for commonly-used character classes. In particular, <inline-formula id="pcbi.1004867.e131"><alternatives><graphic id="pcbi.1004867.e131g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e131" xlink:type="simple"/><mml:math display="inline" id="M133"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>\</mml:mo> <mml:mtext>d</mml:mtext></mml:mstyle></mml:math></alternatives></inline-formula> <monospace>find</monospace>s any digit, <inline-formula id="pcbi.1004867.e132"><alternatives><graphic id="pcbi.1004867.e132g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e132" xlink:type="simple"/><mml:math display="inline" id="M134"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>\</mml:mo> <mml:mtext>s</mml:mtext></mml:mstyle></mml:math></alternatives></inline-formula> <monospace>find</monospace>s whitespace, <inline-formula id="pcbi.1004867.e133"><alternatives><graphic id="pcbi.1004867.e133g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e133" xlink:type="simple"/><mml:math display="inline" id="M135"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>\</mml:mo> <mml:mtext>S</mml:mtext></mml:mstyle></mml:math></alternatives></inline-formula> <monospace>find</monospace>s non-whitespace, and <inline-formula id="pcbi.1004867.e134"><alternatives><graphic id="pcbi.1004867.e134g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e134" xlink:type="simple"/><mml:math display="inline" id="M136"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>\</mml:mo> <mml:mtext>w</mml:mtext></mml:mstyle></mml:math></alternatives></inline-formula> <monospace>find</monospace>s any alphanumeric character or underscore (i.e., the class <inline-formula id="pcbi.1004867.e135"><alternatives><graphic id="pcbi.1004867.e135g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e135" xlink:type="simple"/><mml:math display="inline" id="M137"><mml:mstyle mathbackground="#e6e6e6"><mml:mo stretchy="false">[</mml:mo> <mml:mtext>a</mml:mtext> <mml:mo>–</mml:mo> <mml:mtext>zA</mml:mtext> <mml:mo>–</mml:mo> <mml:mtext>Z</mml:mtext> <mml:mn>0</mml:mn> <mml:mo>–</mml:mo> <mml:mn>9</mml:mn> <mml:mo>_</mml:mo> <mml:mo stretchy="false">]</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>), such as typically occurs in ordinary English words. These built-in features can be used to more compactly express the price regex, including the possibility of whitespace between the ‘$’ sign and the first digit: <inline-formula id="pcbi.1004867.e136"><alternatives><graphic id="pcbi.1004867.e136g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e136" xlink:type="simple"/><mml:math display="inline" id="M138"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>\</mml:mo> <mml:mi>$</mml:mi> <mml:mo>\</mml:mo> <mml:mtext>s</mml:mtext> <mml:mo>*</mml:mo> <mml:mn>0</mml:mn> <mml:mo>*</mml:mo> <mml:mo stretchy="false">[</mml:mo> <mml:mn>1</mml:mn> <mml:mo>–</mml:mo> <mml:mn>9</mml:mn> <mml:mo stretchy="false">]</mml:mo> <mml:mo>\</mml:mo> <mml:mtext>d</mml:mtext> <mml:mo>{</mml:mo> <mml:mn>3</mml:mn> <mml:mo>,</mml:mo> <mml:mo>}</mml:mo> <mml:mo>\</mml:mo> <mml:mo>.</mml:mo> <mml:mo>\</mml:mo> <mml:mtext>d</mml:mtext> <mml:mo>{</mml:mo> <mml:mn>2</mml:mn> <mml:mo>}</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>.</p>
<p>The <inline-formula id="pcbi.1004867.e137"><alternatives><graphic id="pcbi.1004867.e137g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e137" xlink:type="simple"/><mml:math display="inline" id="M139"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>|</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> metacharacter is the logical ‘or’ operator (also known as the <italic>alternation</italic> operator). The regex <inline-formula id="pcbi.1004867.e138"><alternatives><graphic id="pcbi.1004867.e138g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e138" xlink:type="simple"/><mml:math display="inline" id="M140"><mml:mstyle mathbackground="#e6e6e6"><mml:mtext>abc</mml:mtext> <mml:mo>|</mml:mo> <mml:mtext>xyz</mml:mtext></mml:mstyle></mml:math></alternatives></inline-formula> will find either ‘<inline-formula id="pcbi.1004867.e139"><alternatives><graphic id="pcbi.1004867.e139g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e139" xlink:type="simple"/><mml:math display="inline" id="M141"><mml:mtext mathvariant="sans-serif">abc</mml:mtext></mml:math></alternatives></inline-formula>’ or ‘<inline-formula id="pcbi.1004867.e140"><alternatives><graphic id="pcbi.1004867.e140g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e140" xlink:type="simple"/><mml:math display="inline" id="M142"><mml:mtext mathvariant="sans-serif">xyz</mml:mtext></mml:math></alternatives></inline-formula>’. Initially, the behavior of <inline-formula id="pcbi.1004867.e141"><alternatives><graphic id="pcbi.1004867.e141g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e141" xlink:type="simple"/><mml:math display="inline" id="M143"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>|</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> can be deceptive: <inline-formula id="pcbi.1004867.e142"><alternatives><graphic id="pcbi.1004867.e142g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e142" xlink:type="simple"/><mml:math display="inline" id="M144"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>£</mml:mo> <mml:mo>|</mml:mo> <mml:mi>€</mml:mi> <mml:mo>|</mml:mo> <mml:mi>$</mml:mi> <mml:mtext> </mml:mtext> <mml:mo stretchy="false">[</mml:mo> <mml:mn>0</mml:mn> <mml:mo>–</mml:mo> <mml:mn>9</mml:mn> <mml:mo stretchy="false">]</mml:mo> <mml:mo>*</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> is not equivalent to <inline-formula id="pcbi.1004867.e143"><alternatives><graphic id="pcbi.1004867.e143g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e143" xlink:type="simple"/><mml:math display="inline" id="M145"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>[</mml:mo> <mml:mo>£</mml:mo> <mml:mi>€</mml:mi> <mml:mi>$</mml:mi> <mml:mo>]</mml:mo> <mml:mtext> </mml:mtext> <mml:mo stretchy="false">[</mml:mo> <mml:mn>0</mml:mn> <mml:mo>–</mml:mo> <mml:mn>9</mml:mn> <mml:mo stretchy="false">]</mml:mo> <mml:mo>*</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>, as the former will <monospace>find</monospace> a lone pound symbol, a lone Euro symbol, or a dollar sign followed by a number. As an example, to <monospace>match</monospace> the <inline-formula id="pcbi.1004867.e144"><alternatives><graphic id="pcbi.1004867.e144g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e144" xlink:type="simple"/><mml:math display="inline" id="M146"><mml:mtext mathvariant="sans-serif">SEQRES</mml:mtext></mml:math></alternatives></inline-formula> and <inline-formula id="pcbi.1004867.e145"><alternatives><graphic id="pcbi.1004867.e145g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e145" xlink:type="simple"/><mml:math display="inline" id="M147"><mml:mtext mathvariant="sans-serif">ATOM</mml:mtext></mml:math></alternatives></inline-formula> records in a PDB file, <inline-formula id="pcbi.1004867.e146"><alternatives><graphic id="pcbi.1004867.e146g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e146" xlink:type="simple"/><mml:math display="inline" id="M148"><mml:mstyle mathbackground="#e6e6e6"><mml:mtext>ATOM</mml:mtext> <mml:mo>.</mml:mo> <mml:mo>*</mml:mo> <mml:mo>|</mml:mo> <mml:mtext>SEQRES</mml:mtext> <mml:mo>.</mml:mo> <mml:mo>*</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> would work.</p>
<p>The final metacharacters that we will explore are matched parentheses, <inline-formula id="pcbi.1004867.e147"><alternatives><graphic id="pcbi.1004867.e147g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e147" xlink:type="simple"/><mml:math display="inline" id="M149"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>(</mml:mo> <mml:mo>)</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>, which <monospace>find</monospace> <italic>character groups</italic>. While <inline-formula id="pcbi.1004867.e148"><alternatives><graphic id="pcbi.1004867.e148g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e148" xlink:type="simple"/><mml:math display="inline" id="M150"><mml:mstyle mathbackground="#e6e6e6"><mml:mrow><mml:mtext>x</mml:mtext> <mml:mo stretchy="false">[</mml:mo> <mml:mtext>abc</mml:mtext> <mml:mo stretchy="false">]</mml:mo> <mml:mtext>y</mml:mtext></mml:mrow></mml:mstyle></mml:math></alternatives></inline-formula> will <monospace>find</monospace> ‘<inline-formula id="pcbi.1004867.e149"><alternatives><graphic id="pcbi.1004867.e149g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e149" xlink:type="simple"/><mml:math display="inline" id="M151"><mml:mtext mathvariant="sans-serif">xay</mml:mtext></mml:math></alternatives></inline-formula>’, ‘<inline-formula id="pcbi.1004867.e150"><alternatives><graphic id="pcbi.1004867.e150g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e150" xlink:type="simple"/><mml:math display="inline" id="M152"><mml:mtext mathvariant="sans-serif">xby</mml:mtext></mml:math></alternatives></inline-formula>’, or ‘<inline-formula id="pcbi.1004867.e151"><alternatives><graphic id="pcbi.1004867.e151g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e151" xlink:type="simple"/><mml:math display="inline" id="M153"><mml:mtext mathvariant="sans-serif">xcy</mml:mtext></mml:math></alternatives></inline-formula>’, the regex <inline-formula id="pcbi.1004867.e152"><alternatives><graphic id="pcbi.1004867.e152g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e152" xlink:type="simple"/><mml:math display="inline" id="M154"><mml:mstyle mathbackground="#e6e6e6"><mml:mrow><mml:mtext>x</mml:mtext> <mml:mo stretchy="false">(</mml:mo> <mml:mtext>abc</mml:mtext> <mml:mo stretchy="false">)</mml:mo> <mml:mtext>y</mml:mtext></mml:mrow></mml:mstyle></mml:math></alternatives></inline-formula> <monospace>match</monospace>es only those strings starting with ‘<inline-formula id="pcbi.1004867.e153"><alternatives><graphic id="pcbi.1004867.e153g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e153" xlink:type="simple"/><mml:math display="inline" id="M155"><mml:mtext mathvariant="sans-serif">xabcy</mml:mtext></mml:math></alternatives></inline-formula>’—i.e., it is equivalent to <inline-formula id="pcbi.1004867.e154"><alternatives><graphic id="pcbi.1004867.e154g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e154" xlink:type="simple"/><mml:math display="inline" id="M156"><mml:mstyle mathbackground="#e6e6e6"><mml:mrow><mml:mtext>xabcy</mml:mtext></mml:mrow></mml:mstyle></mml:math></alternatives></inline-formula>. The utility of groups stems from the ability to use them as units of repetition. For example, to see if a sequence is delimited by a start and stop codon, and therefore is a potential ORF, we could use <inline-formula id="pcbi.1004867.e155"><alternatives><graphic id="pcbi.1004867.e155g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e155" xlink:type="simple"/><mml:math display="inline" id="M157"><mml:mstyle mathbackground="#e6e6e6"><mml:mrow><mml:mtext>AUG</mml:mtext> <mml:mo>.</mml:mo> <mml:mo>*</mml:mo> <mml:mtext>U</mml:mtext> <mml:mo stretchy="false">(</mml:mo> <mml:mtext>AA</mml:mtext> <mml:mo>|</mml:mo> <mml:mtext>AG</mml:mtext> <mml:mo>|</mml:mo> <mml:mtext>GA</mml:mtext> <mml:mo stretchy="false">)</mml:mo></mml:mrow></mml:mstyle></mml:math></alternatives></inline-formula>; this regex will <monospace>search</monospace> for ‘<inline-formula id="pcbi.1004867.e156"><alternatives><graphic id="pcbi.1004867.e156g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e156" xlink:type="simple"/><mml:math display="inline" id="M158"><mml:mtext mathvariant="sans-serif">UAA</mml:mtext></mml:math></alternatives></inline-formula>’, ‘<inline-formula id="pcbi.1004867.e157"><alternatives><graphic id="pcbi.1004867.e157g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e157" xlink:type="simple"/><mml:math display="inline" id="M159"><mml:mtext mathvariant="sans-serif">UAG</mml:mtext></mml:math></alternatives></inline-formula>’, or ‘<inline-formula id="pcbi.1004867.e158"><alternatives><graphic id="pcbi.1004867.e158g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e158" xlink:type="simple"/><mml:math display="inline" id="M160"><mml:mtext mathvariant="sans-serif">UGA</mml:mtext></mml:math></alternatives></inline-formula>’ at the end of the sequence. (Note that parentheses delimit the <inline-formula id="pcbi.1004867.e159"><alternatives><graphic id="pcbi.1004867.e159g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e159" xlink:type="simple"/><mml:math display="inline" id="M161"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>|</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>.) Note that this regex does not check that the start and stop codon are in the same frame, since the characters that <monospace>find</monospace> captures by the <inline-formula id="pcbi.1004867.e160"><alternatives><graphic id="pcbi.1004867.e160g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e160" xlink:type="simple"/><mml:math display="inline" id="M162"><mml:mstyle mathbackground="#e6e6e6"><mml:mo>.</mml:mo> <mml:mo>*</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula> may not be a multiple of three. To address this, the regex could be changed to <inline-formula id="pcbi.1004867.e161"><alternatives><graphic id="pcbi.1004867.e161g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e161" xlink:type="simple"/><mml:math display="inline" id="M163"><mml:mstyle mathbackground="#e6e6e6"><mml:mtext>AUG</mml:mtext> <mml:mo stretchy="false">(</mml:mo> <mml:mo>…</mml:mo> <mml:mo stretchy="false">)</mml:mo> <mml:mo>*</mml:mo> <mml:mtext>U</mml:mtext> <mml:mo stretchy="false">(</mml:mo> <mml:mtext>AA</mml:mtext> <mml:mo>|</mml:mo> <mml:mtext>AG</mml:mtext> <mml:mo>|</mml:mo> <mml:mtext>GA</mml:mtext> <mml:mo stretchy="false">)</mml:mo></mml:mstyle></mml:math></alternatives></inline-formula>. Another feature of groups is the ability to refer to previous occurrences of a group within the regex (a <italic>backreference</italic>), enabling even more versatile pattern matching. To explore groups and other powerful features of regexes, readers can consult thorough texts [<xref ref-type="bibr" rid="pcbi.1004867.ref091">91</xref>] and numerous online resources (e.g., [<xref ref-type="bibr" rid="pcbi.1004867.ref092">92</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref093">93</xref>]).</p>
<p>Beyond the central role of the regex in analyzing biological sequences, parsing datasets, etc., note that any effort spent learning Python regexes is highly transferable. In terms of general syntactic forms and functionality, regexes behave roughly similarly in Python and in many other mainstream languages (e.g., Perl, R), as well as in the shell scripts and command-line utilities (e.g., grep) found in the Unix family of operating systems (including all Linux distributions and Apple’s OS X).</p>
<p><bold>Exercise 11</bold>: Many human hereditary neurodegenerative disorders, such as Huntington’s disease (HD), are linked to anomalous expansions in the number of trinucleotide repeats in particular genes [<xref ref-type="bibr" rid="pcbi.1004867.ref094">94</xref>]. In HD, the pathological severity correlates with the number of (CAG)<sub><italic>n</italic></sub> repeats in exon-1 of the gene (<italic>htt</italic>) encoding the protein (huntingtin): More repeats means an earlier age of onset and a more rapid disease progression. The CAG codon specifies glutamine, and HD belongs to a broad class of polyglutamine (polyQ) diseases. Healthy (wild-type) variants of this gene feature <italic>n</italic> ≈ 6–35 tandem repeats, whereas <italic>n</italic> &gt; 35 virtually assures the disease. For this exercise, write a Python regex that will locate any consecutive runs of (CAG)<sub><italic>n</italic>&gt;10</sub> in an input DNA sequence. Because the codon CAA also encodes Q and has been found in long runs of CAGs, your regex should also allow interspersed CAAs. To extend this exercise, write code that uses your regex to count the number of CAG repeats (allow CAA too), and apply it to a publically-available genome sequence of your choosing (e.g., the NCBI GI code 588282786:1-585 is exon-1 from a human’s <italic>htt</italic> gene [accessible at <ext-link ext-link-type="uri" xlink:href="http://1.usa.gov/1NjrDNJ" xlink:type="simple">http://1.usa.gov/1NjrDNJ</ext-link>]).</p>
</sec>
<sec id="sec031">
<title>An Advanced Vignette: Creating Graphical User Interfaces with Tkinter</title>
<p>Thus far, this primer has centered on Python programming as a tool for interacting with data and processing information. To illustrate an advanced topic, this section shifts the focus towards approaches for creating software that relies on user interaction, via the development of a graphical user interface (GUI; pronounced ‘gooey’). Text-based interfaces (e.g., the Python shell) have several distinct advantages over purely graphical interfaces, but such interfaces can be intimidating to the uninitiated. For this reason, many general users will prefer GUI-based software that permits options to be configured via graphical check boxes, radio buttons, pull-down menus and the like, versus text-based software that requires typing commands and editing configuration files. In Python, the <monospace>tkinter</monospace> package (pronounced ‘T-K-inter’) provides a set of tools to create GUIs. (Python 2.x calls this package <monospace>Tkinter</monospace>, with a capital <monospace>T</monospace>; here, we use the Python 3.x notation.)</p>
<p>Tkinter programming has its own specialized vocabulary. <italic>Widgets</italic> are objects, such as text boxes, buttons and frames, that comprise the user interface. The <italic>root window</italic> is the widget that contains all other widgets. The root window is responsible for monitoring user interactions and informing the contained widgets to respond when the user triggers an interaction with them (called an <italic>event</italic>). A <italic>frame</italic> is a widget that contains other widgets. Frames are used to group related widgets together, both in the code and on-screen. A <italic>geometry manager</italic> is a system that places widgets in a frame according to some style determined by the programmer. For example, the <monospace>grid</monospace> geometry manager arranges widgets on a grid, while the <monospace>pack</monospace> geometry manager places widgets in unoccupied space. Geometry managers are discussed at length in Supplemental Chapter 18 in <xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>, which shows how intricate layouts can be generated.</p>
<p>The basic style of GUI programming fundamentally differs from the material presented thus far. The reason for this is that the programmer cannot predict what actions a user might perform, and, more importantly, in what order those actions will occur. As a result, GUI programming consists of placing a set of widgets on the screen and providing instructions that the widgets execute when a user interaction triggers an event. (Similar techniques are used, for instance, to create web interfaces and widgets in languages such as JavaScript.) Supplemental Chapter 19 (<xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>) describes available techniques for providing functionality to widgets. Once the widgets are configured, the root window then awaits user input. A simple example follows:</p>
<p specific-use="line"><monospace>1 <bold>from</bold> tkinter <bold>import</bold> Tk, Button</monospace></p>
<p specific-use="line"><monospace>2 <bold>def buttonWindow</bold>():</monospace></p>
<p specific-use="line"><monospace>3  window = Tk()</monospace></p>
<p specific-use="line"><monospace>4  <bold>def onClick</bold>():</monospace></p>
<p specific-use="line"><monospace>5   <bold>print</bold>("<italic>Button clicked</italic>")</monospace></p>
<p specific-use="line"><monospace>6  btn = Button(window, text = "<italic>Sample Button</italic>", command = onClick)</monospace></p>
<p specific-use="line"><monospace>7  btn.pack()</monospace></p>
<p specific-use="line"><monospace>8  window.mainloop()</monospace></p>
<p>To spawn the Tk window, enter the above code in a Python shell and then issue the statement <monospace>buttonWindow()</monospace>. Then, press the “<inline-formula id="pcbi.1004867.e162"><alternatives><graphic id="pcbi.1004867.e162g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e162" xlink:type="simple"/><mml:math display="inline" id="M164"><mml:mtext mathvariant="sans-serif">Sample Button</mml:mtext></mml:math></alternatives></inline-formula>” while viewing the output on the console. The first line in the above code imports the <monospace>Tk</monospace> and <monospace>Button</monospace> classes. <monospace>Tk</monospace> will form the root window, and <monospace>Button</monospace> will create a button widget. Inside the function, line 3 creates the root window. Lines 4 and 5 define a function that the button will call when the user interacts with it. Line 6 creates the button. The first argument to the <monospace>Button</monospace> constructor is the widget that will contain the button, and in this case the button is placed directly in the root window. The <monospace>text</monospace> argument specifies the text to be displayed on the button widget. The <monospace>command</monospace> argument attaches the function named <monospace>onClick</monospace> to the button. When the user presses the button, the root window will instruct the button widget to call this function. Line 7 uses the <monospace>pack</monospace> geometry manager to place the button in the root window. Finally, line 8 instructs the root window to enter <monospace>mainloop</monospace>, and the root window is said to <italic>listen</italic> for user input until the window is closed.</p>
<p>Graphical widgets, such as text entry fields and check-boxes, receive data from the user, and must communicate that data within the program. To provide a conduit for this information, the programmer must provide a variable to the widget. When the value in the widget changes, the widget will update the variable and the program can read it. Conversely, when the program should change the data in a widget (e.g., to indicate the status of a real-time calculation), the programmer sets the value of the variable and the variable updates the value displayed on the widget. This roundabout tack is a result of differences in the architecture of Python and Tkinter—an integer in Python is represented differently than an integer in Tkinter, so reading the widget’s value directly would result in a nonsensical Python value. These variables are discussed in Supplemental Chapter 19 in <xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>.</p>
<p>From a software engineering perspective, a drawback to graphical interfaces is that multiple GUIs cannot be readily composed into new programs. For instance, a GUI to display how a particular restriction enzyme will cleave a DNA sequence will not be practically useful in predicting the products of digesting thousands of sequences with the enzyme, even though some core component of the program (the key, non-GUI program logic) would be useful in automating that task. For this reason, GUI applications should be written in as modular a style as possible—one should be able to extract the useful functionality without interacting with the GUI-specific code. In the restriction enzyme example, an optimal solution would be to write the code that computes cleavage sites as a separate module, and then have the GUI code interact with the components of that module.</p>
</sec>
<sec id="sec032">
<title>Python in General-purpose Scientific Computing: Numerical Efficiency, Libraries</title>
<p>In pursuing biological research, the computational tasks that arise will likely resemble problems that have already been solved, problems for which software libraries already exist. This occurs largely because of the interdisciplinary nature of biological research, wherein relatively well-established formalisms and algorithms from physics, computer science, and mathematics are applied to biological systems. For instance, (i) the simulated annealing method was developed as a physically-inspired approach to combinatorial optimization, and soon thereafter became a cornerstone in the refinement of biomolecular structures determined by NMR spectroscopy or X-ray crystallography [<xref ref-type="bibr" rid="pcbi.1004867.ref095">95</xref>]; (ii) dynamic programming was devised as an optimization approach in operations research, before becoming ubiquitous in sequence alignment algorithms and other areas of bioinformatics; and (iii) the Monte Carlo method, invented as a sampling approach in physics, underlies the algorithms used in problems ranging from protein structure prediction to phylogenetic tree estimation.</p>
<p>Each computational approach listed above can be implemented in Python. The language is well-suited to rapidly develop and prototype any algorithm, be it intended for a relatively lightweight problem or one that is more computationally intensive (see [<xref ref-type="bibr" rid="pcbi.1004867.ref096">96</xref>] for a text on general-purpose scientific computing in Python). When considering Python and other possible languages for a project, software development time must be balanced against a program’s execution time. These two factors are generally countervailing because of the inherent performance trade-offs between codes that are written in interpreted (high-level) versus compiled (lower-level) languages; ultimately, the computational demands of a problem will help guide the choice of language. In practice, the feasibility of a pure Python versus non-Python approach can be practically explored via numerical benchmarking. While Python enables rapid development, and is of sufficient computational speed for many bioinformatics problems, its performance simply cannot match the compiled languages that are traditionally used for high-performance computing applications (e.g., many MD integrators are written in C or Fortran). Nevertheless, Python codes are available for molecular simulations, parallel execution, and so on. Python’s popularity and utility in the biosciences can be attributed to its ease of use (expressiveness), its adequate numerical efficiency for many bioinformatics calculations, and the availability of numerous libraries that can be readily integrated into one’s Python code (and, conversely, one’s Python code can “hook” into the APIs of larger software tools, such as PyMOL). Finally, note that rapidly-developed Python software can be integrated with numerically efficient, high-performance code written in a low-level languages such as C, in an approach known as “mixed-language programming” [<xref ref-type="bibr" rid="pcbi.1004867.ref049">49</xref>].</p>
<p>Many third-party Python libraries are now well-established. In general, these mature projects are (i) well-documented, (ii) freely available as stable (production) releases, (iii) undergoing continual development to add new features, and (iv) characterized by large user-bases and active communities (mailing lists, etc.). A useful collection of such tools can be found at the SciPy resource [<xref ref-type="bibr" rid="pcbi.1004867.ref097">97</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref098">98</xref>], which is a platform for the maintenance and distribution of several popular packages: (i) <inline-formula id="pcbi.1004867.e163"><alternatives><graphic id="pcbi.1004867.e163g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e163" xlink:type="simple"/><mml:math display="inline" id="M165"><mml:mtext mathvariant="sans-serif">NumPy</mml:mtext></mml:math></alternatives></inline-formula>, which is invaluable for matrix-related calculations [<xref ref-type="bibr" rid="pcbi.1004867.ref099">99</xref>]; (ii) <inline-formula id="pcbi.1004867.e164"><alternatives><graphic id="pcbi.1004867.e164g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e164" xlink:type="simple"/><mml:math display="inline" id="M166"><mml:mtext mathvariant="sans-serif">SciPy</mml:mtext></mml:math></alternatives></inline-formula>, which provides routines from linear algebra, signal processing, statistics, and a wealth of other numerical tools; (iii) <inline-formula id="pcbi.1004867.e165"><alternatives><graphic id="pcbi.1004867.e165g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e165" xlink:type="simple"/><mml:math display="inline" id="M167"><mml:mtext mathvariant="sans-serif">pandas</mml:mtext></mml:math></alternatives></inline-formula>, which facilitates data import, management, and organization [<xref ref-type="bibr" rid="pcbi.1004867.ref090">90</xref>]; and (iv) <inline-formula id="pcbi.1004867.e166"><alternatives><graphic id="pcbi.1004867.e166g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e166" xlink:type="simple"/><mml:math display="inline" id="M168"><mml:mtext mathvariant="sans-serif">matplotlib</mml:mtext></mml:math></alternatives></inline-formula>, a premiere codebase for plotting and general-purpose visualization [<xref ref-type="bibr" rid="pcbi.1004867.ref062">62</xref>]. The package <inline-formula id="pcbi.1004867.e167"><alternatives><graphic id="pcbi.1004867.e167g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e167" xlink:type="simple"/><mml:math display="inline" id="M169"><mml:mtext mathvariant="sans-serif">scikit-learn</mml:mtext></mml:math></alternatives></inline-formula> extends SciPy with machine learning and statistical analysis functionalities [<xref ref-type="bibr" rid="pcbi.1004867.ref100">100</xref>]. Other statistical tools are available in the <inline-formula id="pcbi.1004867.e168"><alternatives><graphic id="pcbi.1004867.e168g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e168" xlink:type="simple"/><mml:math display="inline" id="M170"><mml:mtext mathvariant="sans-serif">statistics</mml:mtext></mml:math></alternatives></inline-formula> standard library, in <inline-formula id="pcbi.1004867.e169"><alternatives><graphic id="pcbi.1004867.e169g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e169" xlink:type="simple"/><mml:math display="inline" id="M171"><mml:mtext mathvariant="sans-serif">SciPy</mml:mtext></mml:math></alternatives></inline-formula> [<xref ref-type="bibr" rid="pcbi.1004867.ref097">97</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref098">98</xref>], and in <inline-formula id="pcbi.1004867.e170"><alternatives><graphic id="pcbi.1004867.e170g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e170" xlink:type="simple"/><mml:math display="inline" id="M172"><mml:mtext mathvariant="sans-serif">NumPy</mml:mtext></mml:math></alternatives></inline-formula> [<xref ref-type="bibr" rid="pcbi.1004867.ref099">99</xref>]; finally, many more-specialized packages also exist, such as <inline-formula id="pcbi.1004867.e171"><alternatives><graphic id="pcbi.1004867.e171g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e171" xlink:type="simple"/><mml:math display="inline" id="M173"><mml:mtext mathvariant="sans-serif">pyBrain</mml:mtext></mml:math></alternatives></inline-formula> [<xref ref-type="bibr" rid="pcbi.1004867.ref078">78</xref>] and <inline-formula id="pcbi.1004867.e172"><alternatives><graphic id="pcbi.1004867.e172g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e172" xlink:type="simple"/><mml:math display="inline" id="M174"><mml:mtext mathvariant="sans-serif">DEAP</mml:mtext></mml:math></alternatives></inline-formula> [<xref ref-type="bibr" rid="pcbi.1004867.ref101">101</xref>]. Properly interacting with Python modules, such as those mentioned above, is detailed in Supplemental Chapter 4 (<xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>).</p>
<p>Many additional libraries can be found at the official Python Package Index (PyPI; [<xref ref-type="bibr" rid="pcbi.1004867.ref102">102</xref>]), as well as myriad packages from unofficial third-party repositories. The BioPython project, mentioned above in the 'Why Python?' subsection, offers an integrated suite of tools for sequence- and structure-based bioinformatics, as well as phylogenetics, machine learning, and other feature sets. We survey the computational biology software landscape in the <xref ref-type="supplementary-material" rid="pcbi.1004867.s002">S2 Text</xref> (§2), including tools for structural bioinformatics, phylogenetics, omics-scale data-processing pipelines, and workflow management systems. Finally, note that Python code can be interfaced with other languages. For instance, current support is provided for low-level integration of Python and R [<xref ref-type="bibr" rid="pcbi.1004867.ref103">103</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref104">104</xref>], as well as C-extensions in Python (Cython; [<xref ref-type="bibr" rid="pcbi.1004867.ref105">105</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref106">106</xref>]). Such cross-language interfaces extend Python’s versatility and flexibility for computational problems at the intersection of multiple scientific domains, as often occurs in the biosciences.</p>
</sec>
<sec id="sec033">
<title>Python and Software Licensing</title>
<p>Any discussion of libraries, modules, and extensions merits a brief note on the important role of licenses in scientific software development. As evidenced by the widespread utility of existing software libraries in modern research communities, the development work done by one scientist will almost certainly aid the research pursuits of others—either near-term or long-term, in subfields that might be near to one’s own or perhaps more distant (and unforeseen). <italic>Free software</italic> licenses promote the unfettered advance of scientific research by encouraging the open exchange, transparency, communicability, and reproducibility of research projects. To qualify as free software, a program must allow the user to view and change the source code (for any purpose), distribute the code to others, and distribute modified versions of the code to others. The Open Source Initiative provides alphabetized and categorized lists of licenses that comply, to various degrees, with the open-source definition [<xref ref-type="bibr" rid="pcbi.1004867.ref107">107</xref>]. As an example, the Python interpreter, itself, is under a free license. Software licensing is a major topic unto itself, and helpful primers are available on technical [<xref ref-type="bibr" rid="pcbi.1004867.ref038">38</xref>] and strategic [<xref ref-type="bibr" rid="pcbi.1004867.ref037">37</xref>,<xref ref-type="bibr" rid="pcbi.1004867.ref108">108</xref>] considerations in adopting one licensing scheme versus another. All of the content (code and comments) that is provided as Supplemental Chapters (<xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>) is licensed under the GNU Affero General Public License (AGPL) version 3, which permits anyone to examine, edit, and distribute the source so long as any works using it are released under the same license.</p>
</sec>
<sec id="sec034">
<title>Managing Large Projects: Version Control Systems</title>
<p>As a project grows, it becomes increasingly difficult—yet increasingly important—to be able to track changes in source code. A <italic>version control system</italic> (VCS) tracks changes to documents and facilitates the sharing of code among multiple individuals. In a <italic>distributed</italic> (as opposed to centralized) VCS, each developer has his own complete copy of the project, locally stored. Such a VCS supports the “committing,” “pulling,” “branching,” and “merging” of code. After making a change, the programmer <italic>commits</italic> the change to the VCS. The VCS stores a snapshot of the project, preserving the development history. If it is later discovered that a particular commit introduced a bug, one can easily revert the offending commit. Other developers who are working on the same project can <italic>pull</italic> from the author of the change (the most recent version, or any earlier snapshot). The VCS will incorporate the changes made by the author into the puller’s copy of the project. If a new feature will make the code temporarily unusable (until the feature is completely implemented), then that feature should be developed in a separate <italic>branch</italic>. Developers can switch between branches at will, and a commit made to one branch will not affect other branches. The <italic>master branch</italic> will still contain a working version of the program, and developers can still commit non-breaking changes to the master branch. Once the new feature is complete, the branches can be <italic>merged</italic> together. In a distributed VCS, each developer is, conceptually, a branch. When one developer pulls from others, this is equivalent to merging a branch from each developer. Git, Mercurial, and Darcs are common distributed VCS. In contrast, in a <italic>centralized</italic> VCS all commits are tracked in one central place (for both distributed and centralized VCS, this “place” is often a repository hosted in the cloud). When a developer makes a commit, it is pushed to every other developer (who is on the same branch). The essential behaviors—committing, branching, merging—are otherwise the same as for a distributed VCS. Examples of popular centralized VCSs include the Concurrent Versioning System (CVS) and Subversion.</p>
<p>While VCS are mainly designed to work with source code, they are not limited to this type of file. A VCS is useful in many situations where multiple people are collaborating on a single project, as it simplifies the task of combining, tracking, and otherwise reconciling the contributions of each person. In fact, this very document was developed using LaTeX and the Git VCS, enabling each author to work on the text in parallel. A helpful guide to Git and GitHub (a popular Git repository hosting service) was very recently published [<xref ref-type="bibr" rid="pcbi.1004867.ref109">109</xref>]; in addition to a general introduction to VCS, that guide offers extensive practical advice, such as what types of data/files are more or less ideal for version controlling.</p>
</sec>
<sec id="sec035">
<title>Final Project: A Structural Bioinformatics Problem</title>
<p>Fluency in a programming language is developed actively, not passively. The exercises provided in this text have aimed to develop the reader’s command of basic features of the Python language. Most of these topics are covered more deeply in the Supplemental Chapters (<xref ref-type="supplementary-material" rid="pcbi.1004867.s001">S1 Text</xref>), which also include some advanced features of the language that lie beyond the scope of the main body of this primer. As a final exercise, a cumulative project is presented below. This project addresses a substantive scientific question, and its successful completion requires one to apply and integrate the skills from the foregoing exercises. Note that a project such as this—and really any project involving more than a few dozen lines of code—will benefit greatly from an initial planning phase. In this initial stage of software design, one should consider the basic functions, classes, algorithms, control flow, and overall code structure.</p>
<p><bold>Exercise 12</bold> (cumulative project): First, obtain a set of several hundred protein structures from the PDB, as plaintext <inline-formula id="pcbi.1004867.e173"><alternatives><graphic id="pcbi.1004867.e173g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e173" xlink:type="simple"/><mml:math display="inline" id="M175"><mml:mtext mathvariant="sans-serif">.pdb</mml:mtext></mml:math></alternatives></inline-formula> files (the exact number of entries is immaterial). Then, from this pool of data, determine the relative frequencies of the constituent amino acids for each protein secondary structural class; use only the three descriptors “helix,” “sheet,” and, for any AA not within a helix or sheet, “irregular.” (Hint: In considering file parsing and potential data structures, search online for the PDB’s file-format specifications.) Output your statistical data to a human-readable file format (e.g., comma-separated values, <inline-formula id="pcbi.1004867.e174"><alternatives><graphic id="pcbi.1004867.e174g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e174" xlink:type="simple"/><mml:math display="inline" id="M176"><mml:mtext mathvariant="sans-serif">.csv</mml:mtext></mml:math></alternatives></inline-formula>) such that the results can be opened in a statistical or graphical software package for further processing and analysis. As a bonus exercise, use Python’s <inline-formula id="pcbi.1004867.e175"><alternatives><graphic id="pcbi.1004867.e175g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1004867.e175" xlink:type="simple"/><mml:math display="inline" id="M177"><mml:mtext mathvariant="sans-serif">matplotlib</mml:mtext></mml:math></alternatives></inline-formula> package to visualize the findings of your structural bioinformatics analysis.</p>
</sec>
<sec id="sec036" sec-type="conclusions">
<title>Conclusion</title>
<p>Data and algorithms are two pillars of modern biosciences. Data are acquired, filtered, and otherwise manipulated in preparation for further processing, and algorithms are applied in analyzing datasets so as to obtain results. In this way, computational workflows transform primary data into results that can, over time, become formulated into general principles and new knowledge. In the biosciences, modern scientific datasets are voluminous and heterogeneous. Thus, in developing and applying computational tools for data analysis, the two central goals are <bold>scalability</bold>, for handling the data-volume problem, and <bold>robust abstractions</bold>, for handling data heterogeneity and integration. These two challenges are particularly vexing in biology, and are exacerbated by the traditional lack of training in computational and quantitative methods in many biosciences curricula. Motivated by these factors, this primer has sought to introduce general principles of computer programming, at both basic and intermediate levels. The Python language was adopted for this purpose because of its broad prevalence and deep utility in the biosciences.</p>
</sec>
<sec id="sec037">
<title>Supporting Information</title>
<supplementary-material id="pcbi.1004867.s001" mimetype="application/zip" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1004867.s001" xlink:type="simple">
<label>S1 Text</label>
<caption>
<title>Python Chapters.</title>
<p>This suite of 19 Supplemental Chapters covers the essentials of programming. The Chapters are written in Python and guide the reader through the core concepts of programming, via numerous examples and explanations. The most recent versions of all materials are maintained at <ext-link ext-link-type="uri" xlink:href="http://p4b.muralab.org" xlink:type="simple">http://p4b.muralab.org</ext-link>. For purposes of self-study, solutions to the in-text exercises are also included.</p>
<p>(ZIP)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1004867.s002" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1004867.s002" xlink:type="simple">
<label>S2 Text</label>
<caption>
<title>Supplemental text.</title>
<p>The supplemental text contains sections on: <italic>(i)</italic> Python as a general language for scientific computing, including the concepts of imperative and declarative languages, Python’s relationship to other languages, and a brief account of languages widely used in the biosciences; <italic>(ii)</italic> a structured guide to some of the available software packages in computational biology, with an emphasis on Python; and <italic>(iii)</italic> two sample Supplemental Chapters (one basic, one more advanced), along with a brief, practical introduction to the Python interpreter and integrated development environment (IDE) tools such as IDLE.</p>
<p>(PDF)</p>
</caption>
</supplementary-material>
</sec>
</body>
<back>
<ack>
<p>We thank M. Cline, S. Coupe, S. Ehsan, D. Evans, R. Sood, and K. Stanek for critical reading and helpful feedback on the manuscript.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pcbi.1004867.ref001">
<label>1</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Metzker</surname> <given-names>ML</given-names></name>. <article-title>Sequencing Technologies—The Next Generation</article-title>. <source>Nature Reviews: Genetics</source>. <year>2010</year> <month>Jan</month>;<volume>11</volume>(<issue>1</issue>):<fpage>31</fpage>–<lpage>46</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/nrg2626" xlink:type="simple">10.1038/nrg2626</ext-link></comment> <object-id pub-id-type="pmid">19997069</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref002">
<label>2</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Larance</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Lamond</surname> <given-names>AI</given-names></name>. <article-title>Multidimensional Proteomics for Cell Biology</article-title>. <source>Nature Reviews: Molecular Cell Biology</source>. <year>2015</year> <month>May</month>;<volume>16</volume>(<issue>5</issue>):<fpage>269</fpage>–<lpage>280</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/nrm3970" xlink:type="simple">10.1038/nrm3970</ext-link></comment> <object-id pub-id-type="pmid">25857810</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref003">
<label>3</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Wang</surname> <given-names>Z</given-names></name>, <name name-style="western"><surname>Gerstein</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Snyder</surname> <given-names>M</given-names></name>. <article-title>RNA-Seq: A Revolutionary Tool for Transcriptomics</article-title>. <source>Nature Reviews: Genetics</source>. <year>2009</year> <month>Jan</month>;<volume>10</volume>(<issue>1</issue>):<fpage>57</fpage>–<lpage>63</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/nrg2484" xlink:type="simple">10.1038/nrg2484</ext-link></comment> <object-id pub-id-type="pmid">19015660</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref004">
<label>4</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Wishart</surname> <given-names>DS</given-names></name>. <article-title>Computational Approaches to Metabolomics</article-title>. <source>Methods in Molecular Biology</source>. <year>2010</year>;<volume>593</volume>:<fpage>283</fpage>–<lpage>313</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1007/978-1-60327-194-3_14" xlink:type="simple">10.1007/978-1-60327-194-3_14</ext-link></comment> <object-id pub-id-type="pmid">19957155</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref005">
<label>5</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<collab>OMICS</collab>: <source>A Journal of Integrative Biology</source>;. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.liebertpub.com/overview/omics-a-journal-of-integrative-biology/43" xlink:type="simple">http://www.liebertpub.com/overview/omics-a-journal-of-integrative-biology/43</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref006">
<label>6</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lederberg</surname> <given-names>J</given-names></name>. <article-title>‘Ome Sweet ‘Omics—A Genealogical Treasury of Words</article-title>. <source>The Scientist</source>. <year>2001</year> <month>April</month>; Available from: <ext-link ext-link-type="uri" xlink:href="http://www.the-scientist.com/?articles.view/articleNo/13313/title/-Ome-Sweet--Omics---A-Genealogical-Treasury-of-Words" xlink:type="simple">http://www.the-scientist.com/?articles.view/articleNo/13313/title/-Ome-Sweet--Omics---A-Genealogical-Treasury-of-Words</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref007">
<label>7</label>
<mixed-citation publication-type="other" xlink:type="simple">Gerstein Lab. “O M E S Table”;. Available from: <ext-link ext-link-type="uri" xlink:href="http://bioinfo.mbb.yale.edu/what-is-it/omes/omes.html" xlink:type="simple">http://bioinfo.mbb.yale.edu/what-is-it/omes/omes.html</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref008">
<label>8</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Bolhuis</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Cretoiu</surname> <given-names>MS</given-names></name>, <name name-style="western"><surname>Stal</surname> <given-names>LJ</given-names></name>. <article-title>Molecular Ecology of Microbial Mats</article-title>. <source>FEMS Microbiology Ecology</source>. <year>2014</year> <month>Nov</month>;<volume>90</volume>(<issue>2</issue>):<fpage>335</fpage>–<lpage>350</lpage>. <object-id pub-id-type="pmid">25109247</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref009">
<label>9</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Tottey</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Denonfoux</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Jaziri</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Parisot</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Missaoui</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Hill</surname> <given-names>D</given-names></name>, <etal>et al</etal>. <article-title>The Human Gut Chip “HuGChip”, an Explorative Phylogenetic Microarray for Determining Gut Microbiome Diversity at Family Level</article-title>. <source>PLoS ONE</source>. <year>2013</year>;<volume>8</volume>(<issue>5</issue>):<fpage>e62544</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pone.0062544" xlink:type="simple">10.1371/journal.pone.0062544</ext-link></comment> <object-id pub-id-type="pmid">23690942</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref010">
<label>10</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Turner</surname> <given-names>TL</given-names></name>, <name name-style="western"><surname>Bourne</surname> <given-names>EC</given-names></name>, <name name-style="western"><surname>Von Wettberg</surname> <given-names>EJ</given-names></name>, <name name-style="western"><surname>Hu</surname> <given-names>TT</given-names></name>, <name name-style="western"><surname>Nuzhdin</surname> <given-names>SV</given-names></name>. <article-title>Population Resequencing Reveals Local Adaptation of <italic>Arabidopsis lyrata</italic> to Serpentine Soils</article-title>. <source>Nature Genetics</source>. <year>2010</year> <month>Mar</month>;<volume>42</volume>(<issue>3</issue>):<fpage>260</fpage>–<lpage>263</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/ng.515" xlink:type="simple">10.1038/ng.515</ext-link></comment> <object-id pub-id-type="pmid">20101244</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref011">
<label>11</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Shendure</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Ji</surname> <given-names>H</given-names></name>. <article-title>Next-generation DNA Sequencing</article-title>. <source>Nature Biotechnology</source>. <year>2008</year> <month>Oct</month>;<volume>26</volume>(<issue>10</issue>):<fpage>1135</fpage>–<lpage>1145</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/nbt1486" xlink:type="simple">10.1038/nbt1486</ext-link></comment> <object-id pub-id-type="pmid">18846087</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref012">
<label>12</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Schuster</surname> <given-names>SC</given-names></name>. <article-title>Next-generation Sequencing Transforms Today’s Biology</article-title>. <source>Nature Methods</source>. <year>2008</year> <month>Jan</month>;<volume>5</volume>(<issue>1</issue>):<fpage>16</fpage>–<lpage>18</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/nmeth1156" xlink:type="simple">10.1038/nmeth1156</ext-link></comment> <object-id pub-id-type="pmid">18165802</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref013">
<label>13</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Glenn</surname> <given-names>TC</given-names></name>. <article-title>Field Guide to Next-generation DNA Sequencers</article-title>. <source>Molecular Ecology Resources</source>. <year>2011</year> <month>Sep</month>;<volume>11</volume>(<issue>5</issue>):<fpage>759</fpage>–<lpage>769</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1111/j.1755-0998.2011.03024.x" xlink:type="simple">10.1111/j.1755-0998.2011.03024.x</ext-link></comment> <object-id pub-id-type="pmid">21592312</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref014">
<label>14</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Klock</surname> <given-names>HE</given-names></name>, <name name-style="western"><surname>White</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Koesema</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Lesley</surname> <given-names>SA</given-names></name>. <article-title>Methods and Results for Semi-automated Cloning Using Integrated Robotics</article-title>. <source>Journal of Structural and Functional Genomics</source>. <year>2005</year>;<volume>6</volume>(<issue>2–3</issue>):<fpage>89</fpage>–<lpage>94</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1007/s10969-005-3084-1" xlink:type="simple">10.1007/s10969-005-3084-1</ext-link></comment> <object-id pub-id-type="pmid">16211504</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref015">
<label>15</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Viola</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Carman</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Walsh</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Frankel</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Rupp</surname> <given-names>B</given-names></name>. <article-title>Automated Robotic Harvesting of Protein Crystals—Addressing a Critical Bottleneck or Instrumentation Overkill?</article-title> <source>Journal of Structural and Functional Genomics</source>. <year>2007</year> <month>Dec</month>;<volume>8</volume>(<issue>4</issue>):<fpage>145</fpage>–<lpage>152</lpage>. <object-id pub-id-type="pmid">17965947</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref016">
<label>16</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Baldi</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Brunak</surname> <given-names>S</given-names></name>. <source>Bioinformatics: The Machine Learning Approach</source> (<edition>2<sup>nd</sup> Edition</edition>). <publisher-name>A Bradford Book</publisher-name>; <year>2001</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref017">
<label>17</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Mura</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>McAnany</surname> <given-names>CE</given-names></name>. <article-title>An Introduction to Biomolecular Simulations and Docking</article-title>. <source>Molecular Simulation</source>. <year>2014</year> <month>Aug</month>;<volume>40</volume>(<issue>10–11</issue>):<fpage>732</fpage>–<lpage>764</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1080/08927022.2014.935372" xlink:type="simple">10.1080/08927022.2014.935372</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref018">
<label>18</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Ramanathan</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Agarwal</surname> <given-names>PK</given-names></name>, <name name-style="western"><surname>Kurnikova</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Langmead</surname> <given-names>CJ</given-names></name>. <article-title>An Online Approach for Mining Collective Behaviors from Molecular Dynamics Simulations</article-title>. <source>Journal of Computational Biology</source>. <year>2010</year> <month>Mar</month>;<volume>17</volume>(<issue>3</issue>):<fpage>309</fpage>–<lpage>324</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1089/cmb.2009.0167" xlink:type="simple">10.1089/cmb.2009.0167</ext-link></comment> <object-id pub-id-type="pmid">20377447</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref019">
<label>19</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Tribello</surname> <given-names>GA</given-names></name>, <name name-style="western"><surname>Bonomi</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Branduardi</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Camilloni</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Bussi</surname> <given-names>G</given-names></name>. <article-title>PLUMED 2: New Feathers for an Old Bird</article-title>. <source>Computer Physics Communications</source>. <year>2014</year> <month>Feb</month>;<volume>185</volume>(<issue>2</issue>):<fpage>604</fpage>–<lpage>613</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.cpc.2013.09.018" xlink:type="simple">10.1016/j.cpc.2013.09.018</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref020">
<label>20</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Cieślik</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Mura</surname> <given-names>C</given-names></name>. <article-title>A Lightweight, Flow-based Toolkit for Parallel and Distributed Bioinformatics Pipelines</article-title>. <source>BMC Bioinformatics</source>. <year>2011</year>;<volume>12</volume>:<fpage>61</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1186/1471-2105-12-61" xlink:type="simple">10.1186/1471-2105-12-61</ext-link></comment> <object-id pub-id-type="pmid">21352538</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref021">
<label>21</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Levitt</surname> <given-names>M</given-names></name>. <article-title>Nature of the Protein Universe</article-title>. <source>Proceedings of the National Academy of Sciences of the United States of America</source>. <year>2009</year> <month>Jul</month>;<volume>106</volume>(<issue>27</issue>):<fpage>11079</fpage>–<lpage>11084</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1073/pnas.0905029106" xlink:type="simple">10.1073/pnas.0905029106</ext-link></comment> <object-id pub-id-type="pmid">19541617</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref022">
<label>22</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Bernstein</surname> <given-names>FC</given-names></name>, <name name-style="western"><surname>Koetzle</surname> <given-names>TF</given-names></name>, <name name-style="western"><surname>Williams</surname> <given-names>GJ</given-names></name>, <name name-style="western"><surname>Meyer</surname> <given-names>EF</given-names></name>, <name name-style="western"><surname>Brice</surname> <given-names>MD</given-names></name>, <name name-style="western"><surname>Rodgers</surname> <given-names>JR</given-names></name>, <etal>et al</etal>. <article-title>The Protein Data Bank: A Computer-based Archival File for Macromolecular Structures</article-title>. <source>Journal of Molecular Biology</source>. <year>1977</year> <month>May</month>;<volume>112</volume>(<issue>3</issue>):<fpage>535</fpage>–<lpage>542</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/S0022-2836(77)80200-3" xlink:type="simple">10.1016/S0022-2836(77)80200-3</ext-link></comment> <object-id pub-id-type="pmid">875032</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref023">
<label>23</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Pennisi</surname> <given-names>E</given-names></name>. <article-title>Human genome 10<sup>th</sup> anniversary. Will computers crash genomics?</article-title> <source>Science</source>. <year>2011</year> <month>Feb</month>;<volume>331</volume>(<issue>6018</issue>):<fpage>666</fpage>–<lpage>668</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1126/science.331.6018.666" xlink:type="simple">10.1126/science.331.6018.666</ext-link></comment> <object-id pub-id-type="pmid">21310981</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref024">
<label>24</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Barabási</surname> <given-names>AL</given-names></name>, <name name-style="western"><surname>Gulbahce</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Loscalzo</surname> <given-names>J</given-names></name>. <article-title>Network Medicine: A Network-based Approach to Human Disease</article-title>. <source>Nature Reviews Genetics</source>. <year>2011</year> <month>Jan</month>;<volume>12</volume>(<issue>1</issue>):<fpage>56</fpage>–<lpage>68</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/nrg2918" xlink:type="simple">10.1038/nrg2918</ext-link></comment> <object-id pub-id-type="pmid">21164525</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref025">
<label>25</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lichtman</surname> <given-names>JW</given-names></name>, <name name-style="western"><surname>Pfister</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Shavit</surname> <given-names>N</given-names></name>. <article-title>The Big Data Challenges of Connectomics</article-title>. <source>Nature Neuroscience</source>. <year>2014</year> <month>Nov</month>;<volume>17</volume>(<issue>11</issue>):<fpage>1448</fpage>–<lpage>1454</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/nn.3837" xlink:type="simple">10.1038/nn.3837</ext-link></comment> <object-id pub-id-type="pmid">25349911</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref026">
<label>26</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Engert</surname> <given-names>F</given-names></name>. <article-title>The Big Data Problem: Turning Maps into Knowledge</article-title>. <source>Neuron</source>. <year>2014</year> <month>Sep</month>;<volume>83</volume>(<issue>6</issue>):<fpage>1246</fpage>–<lpage>1248</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.neuron.2014.09.008" xlink:type="simple">10.1016/j.neuron.2014.09.008</ext-link></comment> <object-id pub-id-type="pmid">25233305</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref027">
<label>27</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Costa</surname> <given-names>FF</given-names></name>. <article-title>Big Data in Biomedicine</article-title>. <source>Drug Discovery Today</source>. <year>2014</year> <month>Apr</month>;<volume>19</volume>(<issue>4</issue>):<fpage>433</fpage>–<lpage>440</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.drudis.2013.10.012" xlink:type="simple">10.1016/j.drudis.2013.10.012</ext-link></comment> <object-id pub-id-type="pmid">24183925</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref028">
<label>28</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Rudin</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Dunson</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Irizarry</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Ji</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Laber</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Leek</surname> <given-names>J</given-names></name>, <etal>et al</etal>. <source>Discovery with Data: Leveraging Statistics with Computer Science to Transform Science and Society</source>. <publisher-name>American Statistical Association</publisher-name>; <year>2014</year>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.amstat.org/policy/pdfs/BigDataStatisticsJune2014.pdf" xlink:type="simple">http://www.amstat.org/policy/pdfs/BigDataStatisticsJune2014.pdf</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref029">
<label>29</label>
<mixed-citation publication-type="book" xlink:type="simple">
<collab>Committee on a New Biology for the 21<sup>st</sup> Century</collab>: <chapter-title>Ensuring the United States Leads the Coming Biology Revolution and Board on Life Sciences and Division on Earth and Life Studies and National Research Council</chapter-title>. <source>A New Biology for the 21<sup>st</sup> Century</source>. <publisher-name>National Academies Press</publisher-name>; <year>2009</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref030">
<label>30</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Pevzner</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Shamir</surname> <given-names>R</given-names></name>. <article-title>Computing Has Changed Biology—Biology Education Must Catch Up</article-title>. <source>Science</source>. <year>2009</year> <month>Jul</month>;<volume>325</volume>(<issue>5940</issue>):<fpage>541</fpage>–<lpage>542</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1126/science.1173876" xlink:type="simple">10.1126/science.1173876</ext-link></comment> <object-id pub-id-type="pmid">19644094</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref031">
<label>31</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Tan</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Lim</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Khan</surname> <given-names>AM</given-names></name>, <name name-style="western"><surname>Ranganathan</surname> <given-names>S</given-names></name>. <article-title>A Proposed Minimum Skill Set for University Graduates to Meet the Informatics Needs and Challenges of the “-omics” Era</article-title>. <source>BMC Genomics</source>. <year>2009</year>;<volume>10</volume>(<issue>Suppl 3</issue>):<fpage>S36</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1186/1471-2164-10-S3-S36" xlink:type="simple">10.1186/1471-2164-10-S3-S36</ext-link></comment> <object-id pub-id-type="pmid">19958501</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref032">
<label>32</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Welch</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Lewitter</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Schwartz</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Brooksbank</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Radivojac</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Gaeta</surname> <given-names>B</given-names></name>, <etal>et al</etal>. <article-title>Bioinformatics Curriculum Guidelines: Toward a Definition of Core Competencies</article-title>. <source>PLoS Comput Biol</source>. <year>2014</year> <month>Mar</month>;<volume>10</volume>(<issue>3</issue>):<fpage>e1003496</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1003496" xlink:type="simple">10.1371/journal.pcbi.1003496</ext-link></comment> <object-id pub-id-type="pmid">24603430</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref033">
<label>33</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Rubinstein</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Chor</surname> <given-names>B</given-names></name>. <article-title>Computational Thinking in Life Science Education</article-title>. <source>PLoS Comput Biol</source>. <year>2014</year> <month>Nov</month>;<volume>10</volume>(<issue>11</issue>):<fpage>e1003897</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1003897" xlink:type="simple">10.1371/journal.pcbi.1003897</ext-link></comment> <object-id pub-id-type="pmid">25411839</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref034">
<label>34</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Goodman</surname> <given-names>AL</given-names></name>, <name name-style="western"><surname>Dekhtyar</surname> <given-names>A</given-names></name>. <article-title>Teaching Bioinformatics in Concert</article-title>. <source>PLoS Comput Biol</source>. <year>2014</year> <month>Nov</month>;<volume>10</volume>(<issue>11</issue>):<fpage>e1003896</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1003896" xlink:type="simple">10.1371/journal.pcbi.1003896</ext-link></comment> <object-id pub-id-type="pmid">25411792</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref035">
<label>35</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>McIlroy</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Pinson</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Tague</surname> <given-names>B</given-names></name>. <article-title>UNIX Time-sharing System</article-title>. <source>The Bell System Technical Journal</source>. <year>1978</year> <month>July-August</month>;<volume>57</volume>(<issue>6</issue>):<fpage>1899</fpage>–<lpage>1904</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1002/j.1538-7305.1978.tb02135.x" xlink:type="simple">10.1002/j.1538-7305.1978.tb02135.x</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref036">
<label>36</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Steele</surname> <given-names>GL</given-names></name>. <article-title>Growing a Language</article-title>. <source>Higher Order Symbolic Computation</source>. <year>1999</year> <month>October</month>;<volume>12</volume>(<issue>3</issue>):<fpage>221</fpage>–<lpage>236</lpage>. For the video, see <ext-link ext-link-type="uri" xlink:href="http://www.youtube.com/watch?v=_ahvzDzKdB0" xlink:type="simple">http://www.youtube.com/watch?v=_ahvzDzKdB0</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1023/A:1010085415024" xlink:type="simple">10.1023/A:1010085415024</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref037">
<label>37</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Barnes</surname> <given-names>N</given-names></name>. <article-title>Publish Your Computer Code: It Is Good Enough</article-title>. <source>Nature</source>. <year>2010</year> <month>Oct</month>;<volume>467</volume>(<issue>7317</issue>):<fpage>753</fpage>–<lpage>753</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/467753a" xlink:type="simple">10.1038/467753a</ext-link></comment> <object-id pub-id-type="pmid">20944687</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref038">
<label>38</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Morin</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Urban</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Sliz</surname> <given-names>P</given-names></name>. <article-title>A Quick Guide to Software Licensing for the Scientist-Programmer</article-title>. <source>PLoS Comput Biol</source>. <year>2012</year> <month>Jul</month>;<volume>8</volume>(<issue>7</issue>):<fpage>e1002598</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1002598" xlink:type="simple">10.1371/journal.pcbi.1002598</ext-link></comment> <object-id pub-id-type="pmid">22844236</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref039">
<label>39</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Abelson</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Sussman</surname> <given-names>GJ</given-names></name>. <source>Structure and Interpretation of Computer Programs</source> (<edition>2<sup>nd</sup> Edition</edition>). <publisher-name>The MIT Press</publisher-name>; <year>1996</year>. Available from: <ext-link ext-link-type="uri" xlink:href="http://mitpress.mit.edu/sicp/full-text/book/book.html" xlink:type="simple">http://mitpress.mit.edu/sicp/full-text/book/book.html</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref040">
<label>40</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Evans</surname> <given-names>D</given-names></name>. <source>Introduction to Computing: Explorations in Language, Logic, and Machines</source>. <publisher-name>CreateSpace Independent Publishing Platform</publisher-name>; <year>2011</year>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.computingbook.org" xlink:type="simple">http://www.computingbook.org</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref041">
<label>41</label>
<mixed-citation publication-type="book" xlink:type="simple">
<source>The PyMOL Molecular Graphics System</source>, <publisher-name>Schrödinger, LLC</publisher-name>;. Available from: <ext-link ext-link-type="uri" xlink:href="http://pymol.org" xlink:type="simple">http://pymol.org</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref042">
<label>42</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Humphrey</surname> <given-names>W</given-names></name>, <name name-style="western"><surname>Dalke</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Schulten</surname> <given-names>K</given-names></name>. <article-title>VMD—Visual Molecular Dynamics</article-title>. <source>Journal of Molecular Graphics</source>. <year>1996</year>;<volume>14</volume>:<fpage>33</fpage>–<lpage>38</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/0263-7855(96)00018-5" xlink:type="simple">10.1016/0263-7855(96)00018-5</ext-link></comment> <object-id pub-id-type="pmid">8744570</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref043">
<label>43</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Emsley</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Lohkamp</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Scott</surname> <given-names>WG</given-names></name>, <name name-style="western"><surname>Cowtan</surname> <given-names>K</given-names></name>. <article-title>Features and Development of Coot</article-title>. <source>Acta Crystallographica Section D—Biological Crystallography</source>. <year>2010</year>;<volume>66</volume>:<fpage>486</fpage>–<lpage>501</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1107/S0907444910007493" xlink:type="simple">10.1107/S0907444910007493</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref044">
<label>44</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Mura</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>McCrimmon</surname> <given-names>CM</given-names></name>, <name name-style="western"><surname>Vertrees</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Sawaya</surname> <given-names>MR</given-names></name>. <article-title>An Introduction to Biomolecular Graphics</article-title>. <source>PLoS Comput Biol</source>. <year>2010</year> <month>Aug</month>;<volume>6</volume>(<issue>8</issue>):<fpage>e1000918</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1000918" xlink:type="simple">10.1371/journal.pcbi.1000918</ext-link></comment> <object-id pub-id-type="pmid">20865174</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref045">
<label>45</label>
<mixed-citation publication-type="other" xlink:type="simple">PBCTools Plugin, Version 2.7;. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ks.uiuc.edu/Research/vmd/plugins/pbctools" xlink:type="simple">http://www.ks.uiuc.edu/Research/vmd/plugins/pbctools</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref046">
<label>46</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Fourment</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Gillings</surname> <given-names>MR</given-names></name>. <article-title>A Comparison of Common Programming Languages Used in Bioinformatics</article-title>. <source>BMC Bioinformatics</source>. <year>2008</year>;<volume>9</volume>(<issue>1</issue>):<fpage>82</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1186/1471-2105-9-82" xlink:type="simple">10.1186/1471-2105-9-82</ext-link></comment> <object-id pub-id-type="pmid">18251993</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref047">
<label>47</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Cock</surname> <given-names>PJA</given-names></name>, <name name-style="western"><surname>Antao</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Chang</surname> <given-names>JT</given-names></name>, <name name-style="western"><surname>Chapman</surname> <given-names>BA</given-names></name>, <name name-style="western"><surname>Cox</surname> <given-names>CJ</given-names></name>, <name name-style="western"><surname>Dalke</surname> <given-names>A</given-names></name>, <etal>et al</etal>. <article-title>BioPython: Freely Available Python Tools for Computational Molecular Biology and Bioinformatics</article-title>. <source>Bioinformatics</source>. <year>2009</year> <month>Mar</month>;<volume>25</volume>(<issue>11</issue>):<fpage>1422</fpage>–<lpage>1423</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1093/bioinformatics/btp163" xlink:type="simple">10.1093/bioinformatics/btp163</ext-link></comment> <object-id pub-id-type="pmid">19304878</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref048">
<label>48</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Hinsen</surname> <given-names>K</given-names></name>. <article-title>The Molecular Modeling Toolkit: A New Approach to Molecular Simulations</article-title>. <source>Journal of Computational Chemistry</source>. <year>2000</year> <month>Jan</month>;<volume>21</volume>(<issue>2</issue>):<fpage>79</fpage>–<lpage>85</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1002/(SICI)1096-987X(20000130)21:2%3C79::AID-JCC1%3E3.0.CO;2-B" xlink:type="simple">10.1002/(SICI)1096-987X(20000130)21:2%3C79::AID-JCC1%3E3.0.CO;2-B</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref049">
<label>49</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Hinsen</surname> <given-names>K</given-names></name>. <chapter-title>High-Level Scientific Programming with Python</chapter-title>. In: <source>Proceedings of the International Conference on Computational Science-Part III. ICCS’02</source>. <publisher-loc>London, UK, UK</publisher-loc>: <publisher-name>Springer-Verlag</publisher-name>; <year>2002</year>. p. <fpage>691</fpage>–<lpage>700</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref050">
<label>50</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Cormen</surname> <given-names>TH</given-names></name>, <name name-style="western"><surname>Leiserson</surname> <given-names>CE</given-names></name>, <name name-style="western"><surname>Rivest</surname> <given-names>RL</given-names></name>, <name name-style="western"><surname>Stein</surname> <given-names>C</given-names></name>. <source>Introduction to Algorithms</source> (<edition>3<sup>rd</sup> Edition</edition>). <publisher-name>The MIT Press</publisher-name>; <year>2009</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref051">
<label>51</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Jones</surname> <given-names>NC</given-names></name>, <name name-style="western"><surname>Pevzner</surname> <given-names>PA</given-names></name>. <source>An Introduction to Bioinformatics Algorithms</source>. <publisher-name>The MIT Press</publisher-name>; <year>2004</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref052">
<label>52</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Wünschiers</surname> <given-names>R</given-names></name>. <source>Computational Biology: Unix/Linux, Data Processing and Programming</source>. <publisher-name>Springer-Verlag</publisher-name>; <year>2004</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref053">
<label>53</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Model</surname> <given-names>ML</given-names></name>. <source>Bioinformatics Programming Using Python: Practical Programming for Biological Data</source>. <publisher-name>O’Reilly Media</publisher-name>; <year>2009</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref054">
<label>54</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Buffalo</surname> <given-names>V</given-names></name>. <source>Bioinformatics Data Skills: Reproducible and Robust Research with Open Source Tools</source>. <publisher-name>O’Reilly Media</publisher-name>; <year>2015</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref055">
<label>55</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Libeskind-Hadas</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Bush</surname> <given-names>E</given-names></name>. <source>Computing for Biologists: Python Programming and Principles</source>. <publisher-name>Cambridge University Press</publisher-name>; <year>2014</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref056">
<label>56</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Bassi</surname> <given-names>S</given-names></name>. <article-title>A Primer on Python for Life Science Researchers</article-title>. <source>PLoS Comput Biol</source>. <year>2007</year>;<volume>3</volume>(<issue>11</issue>):<fpage>e199</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.0030199" xlink:type="simple">10.1371/journal.pcbi.0030199</ext-link></comment> <object-id pub-id-type="pmid">18052533</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref057">
<label>57</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Dudley</surname> <given-names>JT</given-names></name>, <name name-style="western"><surname>Butte</surname> <given-names>AJ</given-names></name>. <article-title>A Quick Guide for Developing Effective Bioinformatics Programming Skills</article-title>. <source>PLoS Comput Biol</source>. <year>2009</year> <month>Dec</month>;<volume>5</volume>(<issue>12</issue>):<fpage>e1000589</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1000589" xlink:type="simple">10.1371/journal.pcbi.1000589</ext-link></comment> <object-id pub-id-type="pmid">20041221</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref058">
<label>58</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Noble</surname> <given-names>WS</given-names></name>. <article-title>A Quick Guide to Organizing Computational Biology Projects</article-title>. <source>PLoS Comput Biol</source>. <year>2009</year> <month>Jul</month>;<volume>5</volume>(<issue>7</issue>):<fpage>e1000424</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1000424" xlink:type="simple">10.1371/journal.pcbi.1000424</ext-link></comment> <object-id pub-id-type="pmid">19649301</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref059">
<label>59</label>
<mixed-citation publication-type="other" xlink:type="simple">Software Carpentry;. Accessed 2016-01-18. Available from: <ext-link ext-link-type="uri" xlink:href="http://software-carpentry.org/" xlink:type="simple">http://software-carpentry.org/</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref060">
<label>60</label>
<mixed-citation publication-type="other" xlink:type="simple">Expressions—Python 3.5.1 documentation; 2016. Accessed 2016-01-18. Available from: <ext-link ext-link-type="uri" xlink:href="https://docs.python.org/3/reference/expressions.html#operator-precedence" xlink:type="simple">https://docs.python.org/3/reference/expressions.html#operator-precedence</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref061">
<label>61</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Pierce</surname> <given-names>BC</given-names></name>. <source>Types and Programming Languages</source>. <publisher-name>The MIT Press</publisher-name>; <year>2002</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref062">
<label>62</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Hunter</surname> <given-names>JD</given-names></name>. <article-title>Matplotlib: A 2D Graphics Environment</article-title>. <source>Computing in Science &amp; Engineering</source>. <year>2007</year>;<volume>9</volume>(<issue>3</issue>):<fpage>90</fpage>–<lpage>95</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1109/MCSE.2007.55" xlink:type="simple">10.1109/MCSE.2007.55</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref063">
<label>63</label>
<mixed-citation publication-type="other" xlink:type="simple">More Control Flow Tools—Python 3.5.1 documentation; 2016. Accessed 2016-01-18. Available from: <ext-link ext-link-type="uri" xlink:href="https://docs.python.org/3.5/tutorial/controlflow.html#keyword-arguments" xlink:type="simple">https://docs.python.org/3.5/tutorial/controlflow.html#keyword-arguments</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref064">
<label>64</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>McConnell</surname> <given-names>S</given-names></name>. <source>Code Complete: A Practical Handbook of Software Construction</source> (<edition>2<sup>nd</sup> Edition</edition>). <publisher-name>Pearson Education</publisher-name>; <year>2004</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref065">
<label>65</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Gamma</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Helm</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Johnson</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Vlissides</surname> <given-names>J</given-names></name>. <source>Design Patterns: Elements of Reusable Object-oriented Software</source>. <publisher-name>Pearson Education</publisher-name>; <year>1994</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref066">
<label>66</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Zelle</surname> <given-names>J</given-names></name>. <source>Python Programming: An Introduction to Computer Science</source>. <edition>2<sup>nd</sup> ed</edition>. <publisher-name>Franklin, Beedle &amp; Associates Inc.</publisher-name>; <year>2010</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref067">
<label>67</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Mirabet</surname> <given-names>V</given-names></name>, <name name-style="western"><surname>Besnard</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Vernoux</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Boudaoud</surname> <given-names>A</given-names></name>. <article-title>Noise and Robustness in Phyllotaxis</article-title>. <source>PLoS Comput Biol</source>. <year>2012</year> <month>Feb</month>;<volume>8</volume>(<issue>2</issue>):<fpage>e1002389</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1002389" xlink:type="simple">10.1371/journal.pcbi.1002389</ext-link></comment> <object-id pub-id-type="pmid">22359496</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref068">
<label>68</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>van der Walt</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Schönberger</surname> <given-names>JL</given-names></name>, <name name-style="western"><surname>Nunez-Iglesias</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Boulogne</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Warner</surname> <given-names>JD</given-names></name>, <name name-style="western"><surname>Yager</surname> <given-names>N</given-names></name>, <etal>et al</etal>. <article-title>scikit-image: image processing in Python</article-title>. <source>PeerJ</source>. <year>2014</year>;<volume>2</volume>:<fpage>e453</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.7717/peerj.453" xlink:type="simple">10.7717/peerj.453</ext-link></comment> <object-id pub-id-type="pmid">25024921</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref069">
<label>69</label>
<mixed-citation publication-type="book" xlink:type="simple">
<collab>National Research Council (US) Committee on Frontiers at the Interface of Computing and Biology</collab>. <chapter-title>On the Nature of Biological Data</chapter-title>. In: <name name-style="western"><surname>Lin</surname> <given-names>HS</given-names></name>, <name name-style="western"><surname>Wooley</surname> <given-names>JC</given-names></name>, editors. <source>Catalyzing Inquiry at the Interface of Computing and Biology</source>. <publisher-loc>Washington, DC</publisher-loc>: <publisher-name>The National Academies Press</publisher-name>; <year>2005</year>. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/books/NBK25464" xlink:type="simple">http://www.ncbi.nlm.nih.gov/books/NBK25464</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref070">
<label>70</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Agirre</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Eyras</surname> <given-names>E</given-names></name>. <article-title>Databases and Resources for Human Small Non-coding RNAs</article-title>. <source>Human Genomics</source>. <year>2011</year> <month>Mar</month>;<volume>5</volume>(<issue>3</issue>):<fpage>192</fpage>–<lpage>199</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1186/1479-7364-5-3-192" xlink:type="simple">10.1186/1479-7364-5-3-192</ext-link></comment> <object-id pub-id-type="pmid">21504869</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref071">
<label>71</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>De Keersmaecker</surname> <given-names>SCJ</given-names></name>, <name name-style="western"><surname>Thijs</surname> <given-names>IMV</given-names></name>, <name name-style="western"><surname>Vanderleyden</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Marchal</surname> <given-names>K</given-names></name>. <article-title>Integration of Omics Data: How Well Does it Work for Bacteria?</article-title> <source>Molecular Microbiology</source>. <year>2006</year> <month>Dec</month>;<volume>62</volume>(<issue>5</issue>):<fpage>1239</fpage>–<lpage>1250</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1111/j.1365-2958.2006.05453.x" xlink:type="simple">10.1111/j.1365-2958.2006.05453.x</ext-link></comment> <object-id pub-id-type="pmid">17040488</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref072">
<label>72</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Phan</surname> <given-names>JH</given-names></name>, <name name-style="western"><surname>Quo</surname> <given-names>CF</given-names></name>, <name name-style="western"><surname>Cheng</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Wang</surname> <given-names>MD</given-names></name>. <article-title>Multiscale Integration of -Omic, Imaging, and Clinical Data in Biomedical Informatics</article-title>. <source>IEEE Reviews in Biomedical Engineering</source>. <year>2012</year>;<volume>5</volume>:<fpage>74</fpage>–<lpage>87</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1109/RBME.2012.2212427" xlink:type="simple">10.1109/RBME.2012.2212427</ext-link></comment> <object-id pub-id-type="pmid">23231990</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref073">
<label>73</label>
<mixed-citation publication-type="other" xlink:type="simple">Wikipedia. Tree (data structure); 2016. Accessed 2016-01-18. Available from: <ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/Tree_%28data_structure%29" xlink:type="simple">https://en.wikipedia.org/wiki/Tree_%28data_structure%29</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref074">
<label>74</label>
<mixed-citation publication-type="other" xlink:type="simple">Scipy. scipy.spatial.KDTree—SciPy v0.14.0 Reference Guide; 2014. Accessed 2016-01-18. Available from: <ext-link ext-link-type="uri" xlink:href="http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.spatial.KDTree.html" xlink:type="simple">http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.spatial.KDTree.html</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref075">
<label>75</label>
<mixed-citation publication-type="other" xlink:type="simple">Wikipedia. k-d tree; 2016. Accessed 2016-01-18. Available from: <ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/K-d_tree" xlink:type="simple">https://en.wikipedia.org/wiki/K-d_tree</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref076">
<label>76</label>
<mixed-citation publication-type="other" xlink:type="simple">Wikipedia. Graph (abstract data type); 2015. Accessed 2016-01-18. Available from: <ext-link ext-link-type="uri" xlink:href="https://en.wikipedia.org/wiki/Graph_%28abstract_data_type%29" xlink:type="simple">https://en.wikipedia.org/wiki/Graph_%28abstract_data_type%29</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref077">
<label>77</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Hagberg</surname> <given-names>AA</given-names></name>, <name name-style="western"><surname>Schult</surname> <given-names>DA</given-names></name>, <name name-style="western"><surname>Swart</surname> <given-names>PJ</given-names></name>. <chapter-title>Exploring network structure, dynamics, and function using NetworkX</chapter-title>. In: <source>Proceedings of the 7th Python in Science Conference (SciPy2008)</source>. <publisher-loc>Pasadena, CA USA</publisher-loc>; <year>2008</year>. p. <fpage>11</fpage>–<lpage>15</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref078">
<label>78</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<article-title>PyBrain</article-title>. <source>Journal of Machine Learning Research</source>. <year>2010</year>;<volume>11</volume>:<fpage>743</fpage>–<lpage>746</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref079">
<label>79</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Bloom</surname> <given-names>BH</given-names></name>. <article-title>Space/Time Trade-offs in Hash Coding with Allowable Errors</article-title>. <source>Commun ACM</source>. <year>1970</year> <month>Jul</month>;<volume>13</volume>(<issue>7</issue>):<fpage>422</fpage>–<lpage>426</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://doi.acm.org/10.1145/362686.362692" xlink:type="simple">http://doi.acm.org/10.1145/362686.362692</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1145/362686.362692" xlink:type="simple">10.1145/362686.362692</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref080">
<label>80</label>
<mixed-citation publication-type="other" xlink:type="simple">Moitzi M. bintrees 2.0.2; 2016. Accessed 2016-01-18. Available from: <ext-link ext-link-type="uri" xlink:href="https://pypi.python.org/pypi/bintrees/2.0.2" xlink:type="simple">https://pypi.python.org/pypi/bintrees/2.0.2</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref081">
<label>81</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Rodeh</surname> <given-names>O</given-names></name>, <name name-style="western"><surname>Bacik</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Mason</surname> <given-names>C</given-names></name>. <article-title>BTRFS: The Linux B-Tree Filesystem</article-title>. <source>Trans Storage</source>. <year>2013</year> <month>Aug</month>;<volume>9</volume>(<issue>3</issue>):9:<fpage>1</fpage>–<lpage>9</lpage>:<fpage>32</fpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://doi.acm.org/10.1145/2501620.2501623" xlink:type="simple">http://doi.acm.org/10.1145/2501620.2501623</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1145/2501620.2501623" xlink:type="simple">10.1145/2501620.2501623</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref082">
<label>82</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Wirth</surname> <given-names>N</given-names></name>. <chapter-title>Algorithms + Data Structures = Programs</chapter-title>. <source>Prentice-Hall Series in Automatic Computation</source>. <publisher-name>Prentice Hall</publisher-name>; <year>1976</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref083">
<label>83</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Budd</surname> <given-names>T</given-names></name>. <source>An Introduction to Object-Oriented Programming</source>. <edition>3<sup>rd</sup> ed</edition>. <publisher-name>Pearson</publisher-name>; <year>2001</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref084">
<label>84</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Phillips</surname> <given-names>D</given-names></name>. <source>Python 3 Object Oriented Programming</source>. <publisher-name>Packt Publishing</publisher-name>; <year>2010</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref085">
<label>85</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Cieślik</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Derewenda</surname> <given-names>ZS</given-names></name>, <name name-style="western"><surname>Mura</surname> <given-names>C</given-names></name>. <article-title>Abstractions, Algorithms and Data Structures for Structural Bioinformatics in PyCogent</article-title>. <source>Journal of Applied Crystallography</source>. <year>2011</year> <month>Feb</month>;<volume>44</volume>(<issue>2</issue>):<fpage>424</fpage>–<lpage>428</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1107/S0021889811004481" xlink:type="simple">10.1107/S0021889811004481</ext-link></comment> <object-id pub-id-type="pmid">22479120</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref086">
<label>86</label>
<mixed-citation publication-type="other" xlink:type="simple">The Self Variable in Python Explained;. Available from: <ext-link ext-link-type="uri" xlink:href="http://pythontips.com/2013/08/07/the-self-variable-in-python-explained" xlink:type="simple">http://pythontips.com/2013/08/07/the-self-variable-in-python-explained</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref087">
<label>87</label>
<mixed-citation publication-type="other" xlink:type="simple">Why Explicit Self Has to Stay;. Available from: <ext-link ext-link-type="uri" xlink:href="http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html" xlink:type="simple">http://neopythonic.blogspot.com/2008/10/why-explicit-self-has-to-stay.html</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref088">
<label>88</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Weininger</surname> <given-names>D</given-names></name>. <article-title>SMILES: A Chemical Language and Information System. 1. Introduction to Methodology and Encoding Rules</article-title>. <source>Journal of Chemical Information and Modeling</source>. <year>1988</year> <month>Feb</month>;<volume>28</volume>(<issue>1</issue>):<fpage>31</fpage>–<lpage>36</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1021/ci00057a005" xlink:type="simple">10.1021/ci00057a005</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref089">
<label>89</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Pérez</surname> <given-names>F</given-names></name>, <name name-style="western"><surname>Granger</surname> <given-names>BE</given-names></name>. <article-title>IPython: a System for Interactive Scientific Computing</article-title>. <source>Computing in Science and Engineering</source>. <year>2007</year> <month>May</month>;<volume>9</volume>(<issue>3</issue>):<fpage>21</fpage>–<lpage>29</lpage>. Available from: <ext-link ext-link-type="uri" xlink:href="http://ipython.org" xlink:type="simple">http://ipython.org</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1109/MCSE.2007.53" xlink:type="simple">10.1109/MCSE.2007.53</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref090">
<label>90</label>
<mixed-citation publication-type="other" xlink:type="simple">Python Data Analysis Library;. Available from: <ext-link ext-link-type="uri" xlink:href="http://pandas.pydata.org/" xlink:type="simple">http://pandas.pydata.org/</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref091">
<label>91</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Friedl</surname> <given-names>JEF</given-names></name>. <source>Mastering Regular Expressions</source>. <publisher-name>O’Reilly Media</publisher-name>; <year>2006</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref092">
<label>92</label>
<mixed-citation publication-type="other" xlink:type="simple">Regexes on Stack Overflow;. Available from: <ext-link ext-link-type="uri" xlink:href="http://stackoverflow.com/tags/regex/info" xlink:type="simple">http://stackoverflow.com/tags/regex/info</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref093">
<label>93</label>
<mixed-citation publication-type="other" xlink:type="simple">Regex Tutorials, Examples and Reference;. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.regular-expressions.info" xlink:type="simple">http://www.regular-expressions.info</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref094">
<label>94</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Lee</surname> <given-names>DY</given-names></name>, <name name-style="western"><surname>McMurray</surname> <given-names>CT</given-names></name>. <article-title>Trinucleotide Expansion in Disease: Why Is There a Length Threshold?</article-title> <source>Current Opinion in Genetics &amp; Development</source>. <year>2014</year> <month>Jun</month>;<volume>26</volume>:<fpage>131</fpage>–<lpage>140</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1016/j.gde.2014.07.003" xlink:type="simple">10.1016/j.gde.2014.07.003</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref095">
<label>95</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Brunger</surname> <given-names>AT</given-names></name>, <name name-style="western"><surname>Adams</surname> <given-names>PD</given-names></name>. <article-title>Molecular Dynamics Applied to X-ray Structure Refinement</article-title>. <source>Accounts of Chemical Research</source>. <year>2002</year> <month>Jun</month>;<volume>35</volume>(<issue>6</issue>):<fpage>404</fpage>–<lpage>412</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1021/ar010034r" xlink:type="simple">10.1021/ar010034r</ext-link></comment> <object-id pub-id-type="pmid">12069625</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref096">
<label>96</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Langtangen</surname> <given-names>HP</given-names></name>. <chapter-title>A Primer on Scientific Programming with Python</chapter-title>. <source>Texts in Computational Science and Engineering</source>. <publisher-name>Springer</publisher-name>; <year>2014</year>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref097">
<label>97</label>
<mixed-citation publication-type="other" xlink:type="simple">Jones E, Oliphant T, Peterson P, et al. SciPy: Open-source Scientific Tools for Python; 2001-. [Online; accessed 2015-06-30]. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.scipy.org/" xlink:type="simple">http://www.scipy.org/</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref098">
<label>98</label>
<mixed-citation publication-type="other" xlink:type="simple">Scientific Computing Tools for Python;. Available from: <ext-link ext-link-type="uri" xlink:href="http://www.scipy.org/about.html" xlink:type="simple">http://www.scipy.org/about.html</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref099">
<label>99</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>van der Walt</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Colbert</surname> <given-names>SC</given-names></name>, <name name-style="western"><surname>Varoquaux</surname> <given-names>G</given-names></name>. <article-title>The NumPy Array: A Structure for Efficient Numerical Computation</article-title>. <source>Computing in Science &amp; Engineering</source>. <year>2011</year> <month>Mar</month>;<volume>13</volume>(<issue>2</issue>):<fpage>22</fpage>–<lpage>30</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1109/MCSE.2011.37" xlink:type="simple">10.1109/MCSE.2011.37</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref100">
<label>100</label>
<mixed-citation publication-type="other" xlink:type="simple">scikit-learn: machine learning in Python;. Available from: <ext-link ext-link-type="uri" xlink:href="http://scikit-learn.org/" xlink:type="simple">http://scikit-learn.org/</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref101">
<label>101</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Fortin</surname> <given-names>FA</given-names></name>, <name name-style="western"><surname>Rainville</surname> <given-names>FMD</given-names></name>, <name name-style="western"><surname>Gardner</surname> <given-names>MA</given-names></name>, <name name-style="western"><surname>Parizeau</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Gagné</surname> <given-names>C</given-names></name>. <article-title>DEAP: Evolutionary Algorithms Made Easy</article-title>. <source>Journal of Machine Learning Research</source>. <year>2012</year> <month>jul</month>;<fpage>2171</fpage>–<lpage>2175</lpage>(<issue>13</issue>).</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref102">
<label>102</label>
<mixed-citation publication-type="other" xlink:type="simple">PyPI: The Python Package Index;. Available from: <ext-link ext-link-type="uri" xlink:href="http://pypi.python.org" xlink:type="simple">http://pypi.python.org</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref103">
<label>103</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Xia</surname> <given-names>XQ</given-names></name>, <name name-style="western"><surname>McClelland</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Wang</surname> <given-names>Y</given-names></name>. <article-title>PypeR, A Python Package for Using R in Python</article-title>. <source>Journal of Statistical Software</source>. <year>2010</year>;<volume>35</volume>(<issue>c02</issue>). Available from: <ext-link ext-link-type="uri" xlink:href="http://EconPapers.repec.org/RePEc:jss:jstsof:35:c02" xlink:type="simple">http://EconPapers.repec.org/RePEc:jss:jstsof:35:c02</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref104">
<label>104</label>
<mixed-citation publication-type="other" xlink:type="simple">rpy2, R in Python;. Available from: <ext-link ext-link-type="uri" xlink:href="http://rpy.sourceforge.net" xlink:type="simple">http://rpy.sourceforge.net</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref105">
<label>105</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Behnel</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Bradshaw</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Citro</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Dalcin</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Seljebotn</surname> <given-names>DS</given-names></name>, <name name-style="western"><surname>Smith</surname> <given-names>K</given-names></name>. <article-title>Cython: The Best of Both Worlds</article-title>. <source>Computing in Science &amp; Engineering</source>. <year>2011</year> <month>Mar</month>;<volume>13</volume>(<issue>2</issue>):<fpage>31</fpage>–<lpage>39</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1109/MCSE.2010.118" xlink:type="simple">10.1109/MCSE.2010.118</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref106">
<label>106</label>
<mixed-citation publication-type="other" xlink:type="simple">Cython: C-extensions for Python;. Available from: <ext-link ext-link-type="uri" xlink:href="http://cython.org" xlink:type="simple">http://cython.org</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref107">
<label>107</label>
<mixed-citation publication-type="other" xlink:type="simple">Open Source Initiative: Licenses &amp; Standards;. Available from: <ext-link ext-link-type="uri" xlink:href="http://opensource.org/licenses" xlink:type="simple">http://opensource.org/licenses</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1004867.ref108">
<label>108</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Morin</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Urban</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Adams</surname> <given-names>PD</given-names></name>, <name name-style="western"><surname>Foster</surname> <given-names>I</given-names></name>, <name name-style="western"><surname>Sali</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Baker</surname> <given-names>D</given-names></name>, <etal>et al</etal>. <article-title>Shining Light into Black Boxes</article-title>. <source>Science</source>. <year>2012</year> <month>Apr</month>;<volume>336</volume>(<issue>6078</issue>):<fpage>159</fpage>–<lpage>160</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1126/science.1218263" xlink:type="simple">10.1126/science.1218263</ext-link></comment> <object-id pub-id-type="pmid">22499926</object-id></mixed-citation>
</ref>
<ref id="pcbi.1004867.ref109">
<label>109</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Blischak</surname> <given-names>JD</given-names></name>, <name name-style="western"><surname>Davenport</surname> <given-names>ER</given-names></name>, <name name-style="western"><surname>Wilson</surname> <given-names>G</given-names></name>. <article-title>A Quick Introduction to Version Control with Git and GitHub</article-title>. <source>PLoS Comput Biol</source>. <year>2016</year> <month>Jan</month>;<volume>12</volume>(<issue>1</issue>):<fpage>e1004668</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1004668" xlink:type="simple">10.1371/journal.pcbi.1004668</ext-link></comment> <object-id pub-id-type="pmid">26785377</object-id></mixed-citation>
</ref>
</ref-list>
</back>
</article>