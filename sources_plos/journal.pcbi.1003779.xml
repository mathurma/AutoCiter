<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="3.0" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id><journal-title-group>
<journal-title>PLoS Computational Biology</journal-title></journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, USA</publisher-loc></publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-13-02152</article-id>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1003779</article-id>
<article-categories><subj-group subj-group-type="heading"><subject>Research Article</subject></subj-group><subj-group subj-group-type="Discipline-v2"><subject>Biology and life sciences</subject><subj-group><subject>Psychology</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v2"><subject>Computer and information sciences</subject><subj-group><subject>Computerized simulations</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v2"><subject>Social sciences</subject></subj-group></article-categories>
<title-group>
<article-title>Optimal Behavioral Hierarchy</article-title>
<alt-title alt-title-type="running-head">Optimal Behavioral Hierarchy</alt-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple"><name name-style="western"><surname>Solway</surname><given-names>Alec</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib>
<contrib contrib-type="author" equal-contrib="yes" xlink:type="simple"><name name-style="western"><surname>Diuk</surname><given-names>Carlos</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="fn" rid="fn1"><sup>¤</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Córdova</surname><given-names>Natalia</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Yee</surname><given-names>Debbie</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Barto</surname><given-names>Andrew G.</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Niv</surname><given-names>Yael</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff3"><sup>3</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Botvinick</surname><given-names>Matthew M.</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="aff" rid="aff3"><sup>3</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib>
</contrib-group>
<aff id="aff1"><label>1</label><addr-line>Princeton Neuroscience Institute, Princeton University, Princeton, New Jersey, United States of America</addr-line></aff>
<aff id="aff2"><label>2</label><addr-line>School of Computer Science, University of Massachusetts Amherst, Amherst, Massachusetts, United States of America</addr-line></aff>
<aff id="aff3"><label>3</label><addr-line>Department of Psychology, Princeton University, Princeton, New Jersey, United States of America</addr-line></aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple"><name name-style="western"><surname>Sporns</surname><given-names>Olaf</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/></contrib>
</contrib-group>
<aff id="edit1"><addr-line>Indiana University, United States of America</addr-line></aff>
<author-notes>
<corresp id="cor1">* E-mail: <email xlink:type="simple">matthewb@princeton.edu</email></corresp>
<fn fn-type="conflict"><p>The authors have declared that no competing interests exist.</p></fn>
<fn fn-type="con"><p>Conceived and designed the experiments: AS CD NC DY MMB AGB YN. Performed the experiments: AS CD DY NC. Analyzed the data: AS CD DY NC MMB. Contributed reagents/materials/analysis tools: AS CD DY NC MMB YN AGB. Wrote the paper: AS CD NC DY MMB YN AGB.</p></fn>
<fn id="fn1" fn-type="current-aff"><label>¤</label><p>Current address: Facebook Inc., Menlo Park, California, United States of America</p></fn>
</author-notes>
<pub-date pub-type="collection"><month>8</month><year>2014</year></pub-date>
<pub-date pub-type="epub"><day>14</day><month>8</month><year>2014</year></pub-date>
<volume>10</volume>
<issue>8</issue>
<elocation-id>e1003779</elocation-id>
<history>
<date date-type="received"><day>6</day><month>12</month><year>2013</year></date>
<date date-type="accepted"><day>30</day><month>6</month><year>2014</year></date>
</history>
<permissions>
<copyright-year>2014</copyright-year>
<copyright-holder>Solway et al</copyright-holder><license xlink:type="simple"><license-p>This is an open-access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p></license></permissions>
<abstract>
<p>Human behavior has long been recognized to display hierarchical structure: actions fit together into subtasks, which cohere into extended goal-directed activities. Arranging actions hierarchically has well established benefits, allowing behaviors to be represented efficiently by the brain, and allowing solutions to new tasks to be discovered easily. However, these payoffs depend on the particular way in which actions are organized into a hierarchy, the specific way in which tasks are carved up into subtasks. We provide a mathematical account for what makes some hierarchies better than others, an account that allows an <italic>optimal</italic> hierarchy to be identified for any set of tasks. We then present results from four behavioral experiments, suggesting that human learners spontaneously discover optimal action hierarchies.</p>
</abstract>
<abstract abstract-type="summary"><title>Author Summary</title>
<p>In order to accomplish everyday tasks, we often divide them up into subtasks: to make spaghetti, we (1) get out a pot, (2) fill it with water, (3) bring the water to a boil, and so forth. But how do we learn to subdivide our goals in this way? Work from computer science suggests that the way a task is subdivided or decomposed can have a dramatic impact on how easy the task is to accomplish: certain decompositions speed learning and planning compared to others. Moreover, some decompositions allow behaviors to be represented more simply. Despite this general insight, little work has been done to formalize these ideas. We outline a mathematical framework to address this question, based on methods for comparing between statistical models. We then present four behavioral experiments, showing that human learners spontaneously discover optimal task decompositions.</p>
</abstract>
<funding-group><funding-statement>James S. McDonnell Foundation (<ext-link ext-link-type="uri" xlink:href="http://www.jsmf.org/" xlink:type="simple">http://www.jsmf.org/</ext-link>). National Science Foundation (#1207833) (nsf.gov). John Templeton Foundation (<ext-link ext-link-type="uri" xlink:href="http://www.templeton.org/" xlink:type="simple">http://www.templeton.org/</ext-link>). The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement></funding-group><counts><page-count count="10"/></counts></article-meta>
</front>
<body><sec id="s1">
<title>Introduction</title>
<p>Since the earliest days of psychology and neuroscience, a core objective within both fields has been to understand the formal structure of behavior <xref ref-type="bibr" rid="pcbi.1003779-Hebb1">[1]</xref>–<xref ref-type="bibr" rid="pcbi.1003779-Tolman1">[4]</xref>. In pursuing this question, both in humans and in other animals, a crucial and recurring observation has been that behavior displays a hierarchical organization. Simple actions fit together into coherent subtasks, which themselves combine to accomplish higher-level goals <xref ref-type="bibr" rid="pcbi.1003779-Botvinick1">[5]</xref>, <xref ref-type="bibr" rid="pcbi.1003779-Shallice1">[6]</xref>. This kind of tiered or nested structure is readily apparent in our everyday activities: Turning on the stove forms part of boiling water, which in turn forms part of cooking pasta. It has also been quantified in detailed formal analyses of behavior, both in the laboratory and in the field <xref ref-type="bibr" rid="pcbi.1003779-Whiten1">[7]</xref>, <xref ref-type="bibr" rid="pcbi.1003779-Zacks1">[8]</xref>.</p>
<p>The ubiquity of hierarchical structure in behavior presumably reflects an adaptive benefit. Consistent with this, computational analyses have revealed at least two important advantages that can be gained by organizing behavior hierarchically. First, hierarchical representations of behavior can be more compact or efficient than non-hierarchical (flat) representations, allowing complex behaviors to be encoded more economically at the neural level <xref ref-type="bibr" rid="pcbi.1003779-Graybiel1">[9]</xref>. Second, hierarchical representations of action can facilitate the discovery of new adaptive behaviors, either through learning or through on-line planning <xref ref-type="bibr" rid="pcbi.1003779-Barto1">[10]</xref>–<xref ref-type="bibr" rid="pcbi.1003779-Foster1">[12]</xref> or problem-solving <xref ref-type="bibr" rid="pcbi.1003779-Anderson1">[13]</xref>–<xref ref-type="bibr" rid="pcbi.1003779-Newell1">[16]</xref>.</p>
<p>An illustration of this latter point is provided in <xref ref-type="fig" rid="pcbi-1003779-g001">Figure 1</xref>. The example centers on an artificial reinforcement learning agent <xref ref-type="bibr" rid="pcbi.1003779-Sutton1">[17]</xref> that navigates from vertex to vertex in the grid shown in panel A. The agent must learn, through trial and error, to move from the start location highlighted in green to a rewarded goal location, highlighted in red. The black data-series in panel B charts the agent's improvement over successive trials. In contrast, the blue data-series tracks learning in a hierarchical reinforcement learning agent <xref ref-type="bibr" rid="pcbi.1003779-Botvinick2">[11]</xref>, <xref ref-type="bibr" rid="pcbi.1003779-Sutton2">[18]</xref>. This agent is furnished with subtask representations or subroutines for navigating to each of the “doorway” locations marked in blue in panel A (simulation code available online at <ext-link ext-link-type="uri" xlink:href="http://www.princeton.edu/~matthewb" xlink:type="simple">www.princeton.edu/~matthewb</ext-link>). It can thus behave hierarchically, choosing among subroutines that in turn specify concrete, low-level actions. As is clear from the learning curve, the hierarchical agent converges on shortest-path behavior much more quickly than the flat agent.</p>
<fig id="pcbi-1003779-g001" position="float"><object-id pub-id-type="doi">10.1371/journal.pcbi.1003779.g001</object-id><label>Figure 1</label><caption>
<title>A. Rooms domain.</title>
<p>Vertices represent states (green = start, red = goal), and edges feasible transitions. <bold>B</bold>. Mean performance of three hierarchical reinforcement learning agents in the rooms task. <italic>Inset</italic>: Results based on four graph decompositions. Blue: decomposition from panel C. Purple: decomposition from panel D. Black: entire graph treated as one region. Orange: decomposition with orange vertices in panel A segregated out as singleton regions. <italic>Model evidence</italic> is on a log scale (data range <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e001" xlink:type="simple"/></inline-formula> to <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e002" xlink:type="simple"/></inline-formula>). <italic>Search time</italic> denotes the expected number of trial-and-error attempts to discover the solution to a randomly drawn task or subtask (geometric mean; range 685 to 65947; tick mark indicates the origin). <italic>Codelength</italic> signifies the number of bits required to encode the entire data-set under a Shannon code (range <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e003" xlink:type="simple"/></inline-formula> to <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e004" xlink:type="simple"/></inline-formula>). Note that the abscissa refers both to model evidence and codelength. Model evidence increases left to right, and codelength increases right to left. <bold>C</bold>. Optimal decomposition. <bold>D</bold>. An alternative decomposition.</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1003779.g001" position="float" xlink:type="simple"/></fig>
<p>Another way of interpreting this illustrative simulation is in terms of planning. In many models of planning (e.g. <xref ref-type="bibr" rid="pcbi.1003779-Sutton3">[19]</xref>), action plans are gradually refined based on a series of internal simulations, in each of which the outcomes of a potential line of behavior are projected. Interpreting the model in this way, the “trials” in <xref ref-type="fig" rid="pcbi-1003779-g001">Figure 1B</xref> correspond to successive internal simulations, and the effect of hierarchy is to reduce planning time.</p>
<p>While this example illustrates the point that hierarchy can facilitate the discovery of new adaptive behaviors, there is an important caveat: Not all hierarchies are created equal. The wrong hierarchical representation can actually undermine adaptive behavior. This point is again illustrated in <xref ref-type="fig" rid="pcbi-1003779-g001">Figure 1B</xref>. The orange data-series in the figure tracks the course of learning for a second hierarchical agent. This agent, like the one just considered, is furnished with a set of subroutines. However, here each subroutine involves navigating not to a doorway but into a corner (one of the locations highlighted in orange in panel A). In contrast to the doorway agent, this corner agent learns much more slowly than the flat agent. Obviously, it is not hierarchy <italic>per se</italic> that facilitates adaptive behavior. It matters very much which specific set of hierarchical representations an agent carries.</p>
<p>These observations bring to the surface a fundamental point concerning behavioral hierarchy: While hierarchy can facilitate learning, it also introduces a new learning problem, the problem of discovering beneficial rather than disruptive subtask representations.</p>
<p>Computational work in the area of hierarchical reinforcement learning has given rise to a number of approaches aimed at discovering useful behavioral hierarchies, leveraging ideas from information theory, graph theory, and developmental psychology <xref ref-type="bibr" rid="pcbi.1003779-Barto1">[10]</xref>, <xref ref-type="bibr" rid="pcbi.1003779-Botvinick2">[11]</xref>, <xref ref-type="bibr" rid="pcbi.1003779-Simsek1">[20]</xref>–<xref ref-type="bibr" rid="pcbi.1003779-Vigorito1">[22]</xref>. For example, Simsek and Barto <xref ref-type="bibr" rid="pcbi.1003779-Simsek1">[20]</xref> describe a method based on betweenness, a graph centrality metric which measures the fraction of shortest paths that go through each vertex of a graph. They construct what they call an interaction graph, representing possible state transitions, and compute a weighted betweenness metric that depends on the costs associated with each path. Local maxima, which often appear in “bottleneck” states (described further below), represent subgoal locations that can be utilized in hierarchical representations. Van Dijk and Polani <xref ref-type="bibr" rid="pcbi.1003779-vanDijk1">[21]</xref> take an information theoretic approach and define subgoals as states in which there is a significant change in the amount of relevant goal information, a measure of the amount of information that needs to be maintained about the goal at each step in order to perform well. Still other work has suggested that useful task decompositions might be learned through analyses of the causal structure of the environment, or via curiosity-driven learning mechanisms <xref ref-type="bibr" rid="pcbi.1003779-Vigorito1">[22]</xref>.</p>
<p>However, such work has never <italic>directly</italic> confronted the key underlying question of what exactly the agent should learn. Given that some hierarchies are better than others, can one specify for any given behavioral domain the best hierarchy overall? In other words, what would it mean for a behavioral hierarchy to be optimal?</p>
<p>It is this question that we confront in the present work. Our basic proposal is that the optimal hierarchy is one that best facilitates adaptive behavior in the face of new problems. We show how this notion can be made precise using the framework of Bayesian model selection. After presenting the formal framework, we present results from four behavioral experiments suggesting that human learners are able to discover decompositions deemed optimal in this way.</p>
</sec><sec id="s2">
<title>Results/Discussion</title>
<sec id="s2a">
<title>Formal approach</title>
<p>In order to set the stage, we briefly introduce some additional terminology from the reinforcement learning literature. The goal of a reinforcement learning agent is to find a reward maximizing <italic>policy</italic>, a mapping from states to actions, in an environment obeying certain Markovian dynamics. In particular, it is assumed the environment consists of a set of states, <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e005" xlink:type="simple"/></inline-formula> a set of actions, <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e006" xlink:type="simple"/></inline-formula>, a transition function <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e007" xlink:type="simple"/></inline-formula> and a reward function <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e008" xlink:type="simple"/></inline-formula>, where <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e009" xlink:type="simple"/></inline-formula> is expectation and <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e010" xlink:type="simple"/></inline-formula> is scalar reward. There are several ways of incorporating hierarchy into reinforcement learning; we adopt the options framework approach <xref ref-type="bibr" rid="pcbi.1003779-Sutton2">[18]</xref> in this paper. An option may be thought of as a temporally extended action and consists of: an initiation set containing the states from which it may be invoked, a termination function <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e011" xlink:type="simple"/></inline-formula> specifying the probability of terminating the option in each state, and a policy. Once invoked, the agent's behavior is controlled by the option-specific policy until it terminates, at which point the higher level policy again takes over. Options may also be nested, resulting in arbitrarily deep hierarchies. In this paper, we will use the terms option and subtask interchangeably. <italic>Root-level</italic> policy will refer to the policy at the top level (outside of all options), in contrast to option-level or subtask policies.</p>
<p>In any optimization problem, the crucial first step is to identify the objective. In the present case, this means asking: What exactly should an optimal hierarchy optimize? The rooms example in <xref ref-type="fig" rid="pcbi-1003779-g001">Figure 1</xref> suggests a sensible answer to this question: An optimal hierarchy should maximize the efficiency with which an agent can discover new reward-maximizing behaviors. To make good on this idea, a method is needed for scoring or ranking candidate hierarchies on this property.</p>
<p>In order to solve this problem, we reframe it in terms of Bayesian model selection, where a set of candidate models are compared in their ability to account for a set of target data <xref ref-type="bibr" rid="pcbi.1003779-MacKay1">[23]</xref>. In the present case, the set of candidate models comprises all possible combinations of options with which the agent can be furnished. The data, in turn, are a target set of optimal behaviors (i.e. policies, a series of state–action pairs) representing the solutions to an <italic>ensemble</italic> of tasks faced by the candidate agent. That is, the agent is assumed to occupy a world in which it will be faced with a specific <italic>set</italic> of tasks in an unpredictable order, and the objective is to find a hierarchical representation that will beget the best performance on average across this set of tasks. An important aspect of this scenario is that the agent may <italic>reuse</italic> subtask policies across tasks (as well as task policies if tasks recur).</p>
<p>In what follows, we first describe how Bayesian model selection can be applied in this context. We then explain how model selection achieves the desired optimum, maximizing the ease with which adaptive behaviors can be discovered.</p>
<p>In Bayesian model selection, each candidate model is assumed to be associated with a set of parameters, and the fit between the model and the target data is quantified by the marginal likelihood or <italic>model evidence</italic>:<disp-formula id="pcbi.1003779.e012"><graphic position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1003779.e012" xlink:type="simple"/><label>(1)</label></disp-formula>where <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e013" xlink:type="simple"/></inline-formula> is the set of feasible model parameterizations. In the present setting, where the models in question are different possible hierarchies, and the data are a set of target behaviors, the model evidence becomes:<disp-formula id="pcbi.1003779.e014"><graphic position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1003779.e014" xlink:type="simple"/><label>(2)</label></disp-formula>where <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e015" xlink:type="simple"/></inline-formula> spans the set of behavioral policies available to the candidate agent, given its inventory of subtask representations (this includes the root policy for each task in the target ensemble, as well as the policy for each subtask itself). The optimal hierarchy is the one that maximizes the model evidence, as formulated in <xref ref-type="disp-formula" rid="pcbi.1003779.e014">Equation 2</xref>.</p>
<p>Note that while the target behavior consists of the <italic>optimal</italic> (flat) policies specified as a series of state–action pairs, the parameter <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e016" xlink:type="simple"/></inline-formula> spans the range of <italic>all</italic> (hierarchical) policies the agent may be equipped with. Some of these will be compatible with the data, and some will not. Importantly, multiple settings of <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e017" xlink:type="simple"/></inline-formula> may be compatible with the data. In particular, the root-level policy for a state (in a particular task) is irrelevant if the state is covered by an option policy. The root policy is, in this setting, unconstrained, and can vary arbitrarily. This “freeing up” of parameters is critical in determining the optimal hierarchy.</p>
<p>In order to illustrate this approach, we consider an agent like the one in the rooms example from <xref ref-type="fig" rid="pcbi-1003779-g001">Figure 1:</xref> an agent whose actions equate to deterministic, reversible transitions between discrete states, visualizable as vertices in a graph. We assume, for concreteness, that the ensemble of tasks that the agent faces comprises the set of all shortest-path problems within the graph. In order to build an inventory of subtask representations, the agent is permitted to decompose the graph into a set of connected components (see <xref ref-type="fig" rid="pcbi-1003779-g001">Figure 1</xref>), defining regions within the state-space of its environment. The agent is then furnished with a subtask representation for each available method of transitioning between regions <xref ref-type="bibr" rid="pcbi.1003779-Hauskrecht1">[24]</xref> (see Methods for further detail). For example, given the partitioning shown in <xref ref-type="fig" rid="pcbi-1003779-g001">Figure 1C</xref>, the rooms agent would obtain two subtask representations for each room, each with one doorway as its goal.</p>
<p>(Note that the foregoing exposition assumes that hierarchies are one level deep, and that the termination function for each option is non-zero in a single sub-goal state. This restriction was made for simplicity and for tractability in implementation. However, the general Bayesian model selection framework and optimality guarantees apply to arbitrary hierarchies without change.)</p>
<p>Applying Bayesian model selection under this problem formulation, the data to be modeled take the form of state–action pairs, where the states represent all of the shortest paths within the state-transition graph. In order to mark task boundaries, this concatenation is supplemented by a set of task-unique symbols, associated with indices specifying where each new task begins. The set of models (behavioral hierarchies) corresponds to the set of all possible decompositions of the graph. In this context, the model evidence assumes a surprisingly compact form:<disp-formula id="pcbi.1003779.e018"><graphic position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1003779.e018" xlink:type="simple"/><label>(3)</label></disp-formula>where <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e019" xlink:type="simple"/></inline-formula> indexes vertex identifiers within the data; <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e020" xlink:type="simple"/></inline-formula> is the degree of the vertex appearing as data element i; <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e021" xlink:type="simple"/></inline-formula> is <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e022" xlink:type="simple"/></inline-formula> plus the number of subtasks initiable at <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e023" xlink:type="simple"/></inline-formula>; and <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e024" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e025" xlink:type="simple"/></inline-formula> are indicator functions of <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e026" xlink:type="simple"/></inline-formula>, assuming a value (1 or 0) that indicates whether each element constrains the agent's task-level action policy (<inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e027" xlink:type="simple"/></inline-formula>) or a subtask-level policy (<inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e028" xlink:type="simple"/></inline-formula>). As detailed under Methods and in the online supplement, each of the terms in <xref ref-type="disp-formula" rid="pcbi.1003779.e018">Equation 3</xref> can be quantified based strictly on the target data and the graph itself.</p>
<p><xref ref-type="fig" rid="pcbi-1003779-g001">Figure 1B</xref> (inset) applies <xref ref-type="disp-formula" rid="pcbi.1003779.e018">Equation 3</xref> to the rooms domain, plotting the model evidence for four agent hierarchies. The hierarchy with the greatest evidence corresponds to the partition shown in <xref ref-type="fig" rid="pcbi-1003779-g001">Figure 1C</xref>. This partition, with subgoals corresponding to the doors, in fact represents the optimal behavioral hierarchy in this particular domain. Another example is shown in <xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2F</xref>. This shows the task graph for the Tower of Hanoi, a puzzle in which disks must be moved from a start arrangement to a goal arrangement, without ever placing any disk upon a smaller one. The optimal hierarchy for this task divides the state space into three regions, each corresponding to one position of the largest disk.</p>
<fig id="pcbi-1003779-g002" position="float"><object-id pub-id-type="doi">10.1371/journal.pcbi.1003779.g002</object-id><label>Figure 2</label><caption>
<title>A. Graph studied by Schapiro et al. <xref ref-type="bibr" rid="pcbi.1003779-Schapiro1">[41]</xref>, showing the optimal decomposition.</title>
<p><bold>B</bold>. Task display from Experiment 1. Participants used the computer mouse to select three locations adjacent to the probe location. <bold>C</bold>. Graph employed in Experiment 1, showing the optimal decomposition. Width of each gray ring indicates mean proportion of cases in which the relevant location was chosen. <bold>D</bold>. Graph studied in Experiments 2 and 3, showing the optimal decomposition (two regions, with central vertex grouped either to left or right). <italic>Top:</italic> Illustration of a “delivery” assignment from Experiment 3 (green = start, red = goal), where bottleneck (purple) and non-bottleneck (blue) probes called for a positive response. <italic>Bottom</italic>: An assignment where bottleneck and non-bottleneck probes called for a negative response. <bold>E</bold>. Mean correct response times from Experiment 3. <italic>Affirm</italic>: trials where the probe fell on the shortest path between the specified start and goal locations. <italic>Reject</italic>: trials where it did not. Purple: bottleneck probes. Blue: non-bottleneck probes. <bold>F</bold>. State-transition graph for the Tower of Hanoi puzzle, showing the optimal decomposition and indicating the start and goal configurations of the kind studied in Experiment 4. A different set of colors was used for the beads in the actual experiment. Furthermore, as explained under Methods, the beads were the same size. The changes were made here for display purposes.</p>
</caption><graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1003779.g002" position="float" xlink:type="simple"/></fig>
<p>Crucially, by maximizing the model evidence, these hierarchies also turn out to satisfy our original desideratum, maximizing the agent's ability to efficiently discover target behaviors. Specifically, the optimal hierarchy minimizes the geometric mean number of trial-and-error attempts necessary for the agent to discover the optimal policy for any selected task or subtask (see <xref ref-type="fig" rid="pcbi-1003779-g001">Figure 1B</xref>, inset, for illustrative data). An explicit proof of this point is provided in the online supplement. However, the conclusion follows from the fact that every candidate hierarchy induces a probability distribution over behaviors (see Eq. 2), and that the optimal hierarchy, by definition, places the greatest probability mass on the agent's target behavior. This further implies that the optimal hierarchy will minimize the number of trials needed, on average, to discover the target behavior.</p>
<p>It also happens that the optimal hierarchy, by maximizing the model evidence, is guaranteed to minimize the expected number of information-theoretic bits needed to specify a hierarchical policy consistent with the target data. That is, if we treat the target behavior as a stream of data, we can encode this stream using a set of symbols representing the top level and option policies (see e.g., <xref ref-type="bibr" rid="pcbi.1003779-Rosvall1">[25]</xref>, for a related example outside reinforcement learning). Depending on the set of options available, some encodings are more compact than others. The hierarchy that maximizes the model evidence induces an encoding that is the <italic>most</italic> compact. This once again follows directly from the fact that every candidate hierarchy induces a probability distribution over behaviors, and that the optimal hierarchy places the greatest probability mass on the target behavior. The optimal hierarchy will thus accord this behavior the shortest code length under a Shannon code assignment <xref ref-type="bibr" rid="pcbi.1003779-Cover1">[26]</xref>, also implying the shortest expected description for any task-specific behavior (i.e., shortest path).</p>
<p><xref ref-type="fig" rid="pcbi-1003779-g001">Figure 1B</xref> (inset) shows the expected description length for several agent hierarchies in the rooms domain. As is clear from the figure, the hierarchy that maximizes the efficiency of representation also maximizes the efficiency of learning. This is no coincidence: It is a well established result from learning theory, echoed in empirical observations of human behavior, that ease of learning is directly related to descriptive complexity <xref ref-type="bibr" rid="pcbi.1003779-Feldman1">[27]</xref>, <xref ref-type="bibr" rid="pcbi.1003779-Kemp1">[28]</xref>. Indeed, this connection has inspired previous efforts to identify useful subtask representations through data compression <xref ref-type="bibr" rid="pcbi.1003779-vanDijk1">[21]</xref>, <xref ref-type="bibr" rid="pcbi.1003779-Schmidhuber1">[29]</xref>–<xref ref-type="bibr" rid="pcbi.1003779-vanDijk2">[31]</xref>.</p>
<p>A salient aspect of the specific hierarchies we have considered so far (<xref ref-type="fig" rid="pcbi-1003779-g001">Figures 1C</xref>, <xref ref-type="fig" rid="pcbi-1003779-g002">2F</xref>), is that they carve the state-space at topological bottlenecks, narrow segments bridging between densely interconnected clusters of vertices. Further examples are shown in <xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2</xref>, panels A, C, and D. The decompositions discovered here by Bayesian model selection strikingly resemble those arising from graph-theoretic algorithms for community detection, which explicitly aim to isolate tightly connected clusters within complex networks. Indeed, compression of walks on graphs has been employed as one method of community detection <xref ref-type="bibr" rid="pcbi.1003779-Rosvall1">[25]</xref>. In the present case, where graph decompositions correspond to behavioral hierarchies, the prominence of bottlenecks is intuitive, in the sense that subtask representations are useful precisely to the extent that they carve tasks “at their joints.” Recognizing this parallel, some work in hierarchical reinforcement learning has used community structure in order to identify useful subtasks <xref ref-type="bibr" rid="pcbi.1003779-Simsek1">[20]</xref>, <xref ref-type="bibr" rid="pcbi.1003779-Kazemitabar1">[32]</xref>, <xref ref-type="bibr" rid="pcbi.1003779-Moradi1">[33]</xref>. The present results place this past research on a normative basis, by showing that the behavioral hierarchies resulting from community or bottleneck detection approximate hierarchies that provably maximize the agent's ability to discover reward-maximizing behaviors. In fact, the two approaches are complementary: While the present work provides a normative basis for understanding which partitions are best, previous work on bottleneck detection offers heuristic algorithms that may find such partitions more efficiently than searching through the entire space of possible hierarchies. Of course, the approaches will not always coincide, and understanding how and when they differ is an interesting challenge for future work.</p>
</sec><sec id="s2b">
<title>Behavioral experiments</title>
<p>Having introduced a framework for identifying optimal behavioral hierarchies, we turn to the question of whether human learners decompose novel tasks in an optimal fashion. Some encouragement for this possibility comes from previous work in which related formal principles have been proposed to underlie learning in other domains, including vision <xref ref-type="bibr" rid="pcbi.1003779-Feldman2">[34]</xref>, <xref ref-type="bibr" rid="pcbi.1003779-Orbn1">[35]</xref>, working memory <xref ref-type="bibr" rid="pcbi.1003779-Brady1">[36]</xref>, <xref ref-type="bibr" rid="pcbi.1003779-Mathy1">[37]</xref>, language <xref ref-type="bibr" rid="pcbi.1003779-Finley1">[38]</xref>, and others <xref ref-type="bibr" rid="pcbi.1003779-Chater1">[39]</xref>, <xref ref-type="bibr" rid="pcbi.1003779-Robinet1">[40]</xref>. Still more germane is a recent study in which participants were asked to parse sequences of visual stimuli whose ordering, unbeknownst to them, was determined by a random walk in the graph shown in <xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2A</xref> <xref ref-type="bibr" rid="pcbi.1003779-Schapiro1">[41]</xref>. Participants marked the transitions between the five-vertex clusters as natural breaking points, consistent with the idea that human sequence perception spontaneously detects temporal community structure.</p>
<p>In order to examine hierarchy learning in the context of goal-directed action, we conducted four new behavioral experiments. In each of these, undergraduate participants learned about and chose actions within graph-like domains. Our general prediction, probed in different ways in each experiment, was that participants would develop a hierarchical representation of each domain aligning with the one predicted by our theoretical framework. As in the rooms domain, the setup in all four experiments is that the agent is able to make deterministic reversible transitions between (discrete) states, and that the task ensemble consists of shortest path problems between all pairs of states. Although this is our present focus, it is not a general limitation of the framework. The optimality guarantees outlined above and detailed in the online supplement apply to arbitrary tasks.</p>
<p>In our first experiment, a group of forty participants prepared to make a set of “deliveries” by learning the layout of a small town. The town comprised a set of ten locations, each associated with a distinctive visual icon (<xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2B</xref>). Participants were never given a bird's eye view of the town. Instead, during an initial training period, participants were drilled on the adjacency relations among individual locations. On each trial a randomly selected location was highlighted, and the participant's task was to select the three locations immediately adjacent to this probe (see <xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2B</xref>). Following this training period, participants were informed that they would next be asked to navigate through the town in order to make a series of deliveries between randomly selected locations, receiving a payment for each delivery that rewarded use of the fewest possible steps. Before making any deliveries, however, participants were asked to choose the position for a “bus stop” within the town. Instructions indicated that, during the subsequent deliveries, participants would be able to “take a ride” to the bus stop's location from anywhere in the town, potentially saving steps and thereby increasing payments. Participants were asked to identify three locations as their first-, second- and third-choice bus-stop sites.</p>
<p>Crucially, the pattern of adjacencies to which participants were exposed was based on the graph shown in <xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2C</xref>. As is obvious upon inspection, the graph has a single bottleneck at its center, and an optimal partition reflecting this fact (indicated by color in the figure). Bayesian model selection identifies two graph vertices, lying at this bottleneck, as optimal subgoal locations. Given the structure of the task and the goal of navigating rapidly to an <italic>a priori</italic> unknown location, the optimal strategy is to place the bus stop at one of these locations. The objective of the experiment was to evaluate whether participants could detect the bottleneck and exploit it in this way. It is important to stress that participants were never given a bird's-eye view of the town, or even direct information about relative Cartesian positions. The topology of the town graph had to be inferred solely from local adjacency information. Furthermore, all of the locations had exactly three neighbors and received on average equal exposure during training. There was thus nothing specially salient about any of them. Despite this challenge, participants showed a marked tendency to place the bus-stop at the locations predicted (see <xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2C</xref>). After adjusting for chance, the two bottleneck locations were identified as first-choice locations 4.4 times as often as the remaining locations (<inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e029" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e030" xlink:type="simple"/></inline-formula>). Among participants who were able at the end of the experiment to draw the underlying graph perfectly, <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e031" xlink:type="simple"/></inline-formula> chose a bottleneck location first (<inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e032" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e033" xlink:type="simple"/></inline-formula>).</p>
<p>The results of this initial experiment are consistent with the notion that human learners identify and exploit optimal task decompositions or behavioral hierarchies. However, it might be argued that the bus stop manipulation prompted a special, task-specific orientation. Two further experiments investigated whether human learners identify and exploit optimal hierarchies spontaneously, without such a prompt. In Experiment 2, ten participants completed a set of deliveries, with no mention of bus stops, within a town whose layout was based on the bottleneck graph in <xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2D</xref>. Some deliveries were completed step by step, using a graphical interface that showed participants their current location and allowed them to select among adjacent locations. However, on another subset of trials participants were shown all town location icons concurrently and asked either to (1) indicate all locations lying on the shortest path between a specified start and goal <italic>in any order</italic>, or (2) identify any <italic>single</italic> location lying on this path. In the former condition, participants showed a strong tendency to select the bottleneck location first (<inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e034" xlink:type="simple"/></inline-formula> of correct responses on relevant trials; Monte Carlo test, <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e035" xlink:type="simple"/></inline-formula>). And in the single-location condition, participants again showed a strong tendency to select the bottleneck (<inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e036" xlink:type="simple"/></inline-formula> of correct responses on relevant trials; Monte Carlo test, <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e037" xlink:type="simple"/></inline-formula>). These findings suggest that participants planned their routes hierarchically, “thinking first” of transition-points between subregions, and then planning the specific steps needed to reach those transition points <xref ref-type="bibr" rid="pcbi.1003779-Wiener1">[42]</xref>. More importantly, the observed behavior confirms that participants decomposed the task space in an optimal fashion, consistent with the Bayesian model selection account.</p>
<p>These conclusions were reinforced by the results of a third experiment. Here, 21 participants made deliveries within a town based again on the graph from Experiment 2. Interleaved with step-by-step delivery trials like those in Experiments 1 and 2 were trials in which participants were presented with a start location and a goal location, and asked whether a third location would lie on the shortest path from one to the other (see <xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2D</xref>). Correct response times were faster when the probe location lay at the boundary between subregions in the optimal parse than when it lay elsewhere in the graph (<xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2D–E</xref>; <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e038" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e039" xlink:type="simple"/></inline-formula>), again consistent with the idea that route planning occurred initially at the level of the regions arising from the optimal decomposition, followed later by finer-grained selection. Further statistical analysis, detailed in the supplement, showed that this main effect was not explained by differences in probe frequency.</p>
<p>In a final experiment, we tested whether the predictions of the optimal hierarchy framework extend beyond the domain of spatial navigation. Here, we leveraged the Tower of Hanoi task. As shown earlier, the optimal decomposition of this task separates it into three regions (<xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2F</xref>). Consider the problem defined by the start and goal states shown in <xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2F</xref>. As also shown in the figure, there are two shortest-path solutions to this problem, each involving the same number of steps. The two paths differ, however, in terms of the number of boundaries they traverse between regions: One traverses one such boundary, the other two. Based on the idea that planning occurs first at the level of the regions defined by the optimal hierarchy, and that maintaining subgoals in memory is costly <xref ref-type="bibr" rid="pcbi.1003779-Anderson2">[43]</xref>, we predicted that participants faced with this particular problem would prefer the path crossing only a single region boundary. This prediction was confirmed in an experiment involving thirty-five participants, who solved a series of Tower of Hanoi problems. When the problems of interest occurred, participants pursued the single-boundary solution in <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e040" xlink:type="simple"/></inline-formula> of cases (right-tail sign test, <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e041" xlink:type="simple"/></inline-formula>). Seventeen subjects traversed the single-boundary route most often, while only seven showed the opposite asymmetry (one-tailed t-test, <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e042" xlink:type="simple"/></inline-formula>).</p>
<p>The results of these four experiments support the conclusion that human learners discover optimal task decompositions and leverage these decompositions in planning action sequences. The data suggest that novel behavioral domains are spontaneously decomposed into subdomains or regions, and that planning initially focuses on transitions between these, typically via topological bottlenecks. More specifically, the decompositions selected are optimal in the sense specified in the Bayesian model selection account.</p>
<p>Although our focus has been on a reinforcement learning <xref ref-type="bibr" rid="pcbi.1003779-Sutton1">[17]</xref> characterization of learning and planning, this view includes more classic notions of planning both in artificial intelligence <xref ref-type="bibr" rid="pcbi.1003779-Boutilier1">[14]</xref> and in psychology <xref ref-type="bibr" rid="pcbi.1003779-Newell1">[16]</xref>. Such problems may be cast in the reinforcement learning framework (i.e. as Markov decision processes) by encoding the goal state in the reward function (e.g. by setting reward to be 0 in the goal state and -1 everywhere else). Although planning in reinforcement learning is often performed in the forward direction, when the goal state is isolable, one can also perform goal regression, serially satisfying a chain of preconditions. Subgoal discovery at the hierarchical level may help to determine the relevant preconditions, with the same optimality construct applying.</p>
<p>In psychology, a number of theorists have attempted to understand planning in the context of broader unified frameworks for cognition, such as ACT-R <xref ref-type="bibr" rid="pcbi.1003779-Anderson1">[13]</xref> and Soar <xref ref-type="bibr" rid="pcbi.1003779-Laird1">[15]</xref>. In ACT-R, both goals and subgoals are specified by the task model. In Soar, subgoals specifically related to solving impasses in decision making are automatically acquired. The present paper outlines a normative framework for understanding task decompositions, and this information could in theory be applied to either ACT-R or Soar, specifying the type of decompositions each should <italic>strive</italic> to achieve.</p>
<p>This raises a final issue of note: It is not our proposal that human learners discover optimal hierarchies by literally computing the Bayesian model evidence given foreknowledge of target behaviors, as in <xref ref-type="disp-formula" rid="pcbi.1003779.e018">Equation 3</xref>. The present experimental results thus raise the important question of what discovery procedure human learners actually employ in order to approximate the same result. One possible answer comes from recent work on statistical learning, which shows that simply learning to predict future events can support discovery of community structure and topological bottlenecks in novel behavioral domains <xref ref-type="bibr" rid="pcbi.1003779-Schapiro1">[41]</xref>. An inviting direction for further work is to test whether this learning procedure might underlie the kind of hierarchy induction observed in the present experiments.</p>
</sec></sec><sec id="s3" sec-type="methods">
<title>Methods</title>
<sec id="s3a">
<title>Computational analysis</title>
<sec id="s3a1">
<title>Problem formulation</title>
<p>The Bayesian model selection approach compares agents equipped with different action hierarchies, but faced with the same ensemble of tasks. Our application of the approach focused on tasks taking the form of episodic Markov decision problems or MDPs <xref ref-type="bibr" rid="pcbi.1003779-Sutton1">[17]</xref>. A MDP comprises a set of states, a set of actions, a transition function that specifies the results proceeding from selection of specific actions in specific states, and a reward function attaching a scalar reward to each state transition. The challenge posed is to discover an action policy – a mapping from states to actions – that maximizes expected cumulative reward. For simplicity, we focused on MDPs with discrete, tabular representations of state, deterministic transition functions, and fully reversible actions (where reversibility means that for every action causing a transition from state <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e043" xlink:type="simple"/></inline-formula> to <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e044" xlink:type="simple"/></inline-formula>, there is another action taking <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e045" xlink:type="simple"/></inline-formula> to <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e046" xlink:type="simple"/></inline-formula>). This focus allowed us to represent any particular problem domain in the form of an undirected graph, with a vertex for each state and edges marking feasible actions (i.e., transitions between states). Within this setting, we considered a task ensemble (<inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e047" xlink:type="simple"/></inline-formula>) comprising the set of all shortest-path problems within the graph, each task being specified in terms of a start vertex (state), a goal vertex, and a negative reward associated with traversal of each edge (randomly sampled between <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e048" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e049" xlink:type="simple"/></inline-formula>, and held constant across tasks).</p>
<p>The agents considered under our model comparison approach were assumed to take the form of hierarchical reinforcement learning (HRL) agents implementing the options framework <xref ref-type="bibr" rid="pcbi.1003779-Sutton2">[18]</xref> (see also <xref ref-type="bibr" rid="pcbi.1003779-Botvinick2">[11]</xref>, <xref ref-type="bibr" rid="pcbi.1003779-Barto2">[44]</xref>). Each agent was assumed to carry a set of policies, including (1) a deterministic root-level policy for each task in the target ensemble <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e050" xlink:type="simple"/></inline-formula> and (2) a fixed, agent-unique set of option policies <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e051" xlink:type="simple"/></inline-formula>, the same across all tasks. Note that, while the HRL framework includes learning procedures for tuning action policies at root and subtask levels, the “agents” we considered did not deploy such learning algorithms; they merely carried already optimal policies structured as in HRL.</p>
<p>As described earlier, the option set for each agent was fully determined by an agent-specific decomposition of the state-transition graph into connected components or regions. Following Hauskrecht et al. <xref ref-type="bibr" rid="pcbi.1003779-Hauskrecht1">[24]</xref>, we define a region's <italic>entrance vertices/states</italic> as the set of all vertices within the region that have at least one neighbor outside of it. Conversely, the <italic>exit vertices/states</italic> for a region comprise those vertices outside the region that receive at least one edge from a vertex inside it. Armed with these definitions, we viewed any region within a given graph decomposition as inducing a set of option representations, each having the region's entrance states plus the start state for the current task as its initiation set, the exit states for the region as its termination set, and one specific exit as its subgoal (see <xref ref-type="bibr" rid="pcbi.1003779-Botvinick2">[11]</xref>, <xref ref-type="bibr" rid="pcbi.1003779-Sutton2">[18]</xref> for a full explanation of these terms). Each option policy was assumed to cover only the states/vertices lying within the relevant region, with an action set including only atomic actions, i.e., transitions between neighboring states/vertices. The action set for root-level policies, in contrast, included options as well as atomic actions.</p>
<p>As introduced earlier, Bayesian model selection takes into account a dataset and a set of candidate models, each associated with a set of parameters (see <xref ref-type="disp-formula" rid="pcbi.1003779.e012">Equation 1</xref>). In the present application, the target data comprise the set of behaviors representing solutions to the target task ensemble, here the set of all shortest paths within the state-transition graph. The set of models to be compared includes one HRL agent for each possible decomposition of the state-transition graph. Each candidate agent is associated with a policy set consisting of each task (<inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e052" xlink:type="simple"/></inline-formula>) and option (<inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e053" xlink:type="simple"/></inline-formula>) policy. The parameters, <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e054" xlink:type="simple"/></inline-formula>, dictate the values of these policies, with a separate parameter specifying the optimal action for a single state in either the task or option policy. In the case of <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e055" xlink:type="simple"/></inline-formula>, the number of possible values for each parameter equals the number of atomic actions available in the relevant state, which in turn is equal to the number of edges projecting from the corresponding vertex in the graph representation (i.e. the vertex degree). In the case of <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e056" xlink:type="simple"/></inline-formula>, the number of possible values equals the number of atomic actions available plus the number of options available, a sum we designate as <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e057" xlink:type="simple"/></inline-formula>. The number of options available corresponds to the number of exit states for the region: there is a separate option for navigating to each neighboring state in each adjacent region.</p>
<p>Note that the details of this application imply that option policies may only call primitive actions, and not other options. The depth of the behavioral hierarchy is thus limited to two levels. This restriction was adopted to assure computational tractability in the present application. However, it is important to note that the overall theoretical framework generalizes without any alteration to deeper hierarchies.</p>
</sec><sec id="s3a2">
<title>Calculation of model evidence</title>
<p>Given the above formulation, the model evidence can be written as in <xref ref-type="disp-formula" rid="pcbi.1003779.e014">Equation 2</xref>. We assume a uniform distribution over model parameterizations. Thus, we can rewrite the model evidence as follows:<disp-formula id="pcbi.1003779.e058"><graphic position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1003779.e058" xlink:type="simple"/><label>(4)</label></disp-formula></p>
<p>We assume the parameter space to span only deterministic policies. This means that any specific model parameterization will be either perfectly compatible with the data (i.e., <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e059" xlink:type="simple"/></inline-formula>) or categorically incompatible (<inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e060" xlink:type="simple"/></inline-formula>). If we denote the set of all compatible parameterizations as <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e061" xlink:type="simple"/></inline-formula>, then<disp-formula id="pcbi.1003779.e062"><graphic position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1003779.e062" xlink:type="simple"/><label>(5)</label></disp-formula></p>
<p>Thus, in order to calculate the model evidence, it suffices to determine the proportion of all parameterizations that are compatible with the data.</p>
<p>Imagine starting with all of the parameters unset. The number of possible parameterizations, <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e063" xlink:type="simple"/></inline-formula>, is equal to the product of the number of values that each parameter can take. The target data then arrive sequentially, one vertex–action pair at a time. Because the policy parameters for the relevant task must specify the actions that actually occur in the data, each newly arriving element has the potential to reduce the set of compatible parameterizations. That is, each element of the data has the potential to fix the value of one or more parameters, ruling out the remaining inconsistent values. Mathematically speaking, the consequence is to divide the number of compatible parameterizations by the number of values the parameter can take. If we designate this number as <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e064" xlink:type="simple"/></inline-formula>, with <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e065" xlink:type="simple"/></inline-formula> indexing the data element, then the number of compatible parameterizations is<disp-formula id="pcbi.1003779.e066"><graphic position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1003779.e066" xlink:type="simple"/><label>(6)</label></disp-formula>and the model evidence is thus<disp-formula id="pcbi.1003779.e067"><graphic position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1003779.e067" xlink:type="simple"/><label>(7)</label></disp-formula></p>
<p>All that remains is to specify how <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e068" xlink:type="simple"/></inline-formula> should be chosen for any element <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e069" xlink:type="simple"/></inline-formula>. To see this, consider that any state transition in the data can constrain (1) the root policy <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e070" xlink:type="simple"/></inline-formula> for the current task, (2) an option-specific policy <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e071" xlink:type="simple"/></inline-formula>, (3) both the root policy and an option policy, or (4) neither. Because each state-specific parameter in <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e072" xlink:type="simple"/></inline-formula> can take on <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e073" xlink:type="simple"/></inline-formula> values, case (1) requires <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e074" xlink:type="simple"/></inline-formula>. Because each state-specific parameter in <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e075" xlink:type="simple"/></inline-formula> can take on <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e076" xlink:type="simple"/></inline-formula> values, case (2) requires <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e077" xlink:type="simple"/></inline-formula>. It naturally follows that case (3) requires <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e078" xlink:type="simple"/></inline-formula>. In case (4), where no constraint is added, <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e079" xlink:type="simple"/></inline-formula> should remain unchanged, thus requiring <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e080" xlink:type="simple"/></inline-formula>. Taking these points on board,<disp-formula id="pcbi.1003779.e081"><graphic position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1003779.e081" xlink:type="simple"/><label>(8)</label></disp-formula>where <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e082" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e083" xlink:type="simple"/></inline-formula> are indicator functions of <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e084" xlink:type="simple"/></inline-formula>: <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e085" xlink:type="simple"/></inline-formula> assumes value 1 if data-element <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e086" xlink:type="simple"/></inline-formula> imposes a constraint at the root (task) level; <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e087" xlink:type="simple"/></inline-formula> does so if the element imposes a constraint at the option (subtask) level; and each is otherwise zero. One further requirement we impose is that if a subsequence can be represented by an option, then the option policy is invoked (constrained) rather than the root-level policy (except on the first step, where both policies are constrained). This assumption is mild, but necessary for the optimality arguments to logically follow: If an agent is equipped with an option, it is assumed the option is used and not ignored.</p>
<p>The online supplement illustrates calculation of the model evidence through a concrete example. Also presented in the supplement are formal proofs of the optimality assertions advanced in the main body of the paper.</p>
</sec><sec id="s3a3">
<title>Ancillary procedures</title>
<p>As noted earlier, shortest paths were generated by adding a small amount of frozen noise to the edge weights. This approach was taken to avoid ties and to assure that the same path would always be followed between any two nodes, a condition necessary in order for deterministic option policies to transfer between tasks. We found that for some but not all graphs tested, the optimal partition varied slightly depending on the choice of shortest paths. For example, in the rooms domain (<xref ref-type="fig" rid="pcbi-1003779-g001">Figure 1</xref>), although the optimal hierarchy always separated out the four rooms at the doorways, it sometimes also included an isolated singleton near the center of one of the rooms. This coincides with previous work grounded in information theory, which suggests that in addition to bottlenecks, such locations are salient because they correspond to local maxima in goal information transitions <xref ref-type="bibr" rid="pcbi.1003779-vanDijk1">[21]</xref>, <xref ref-type="bibr" rid="pcbi.1003779-vanDijk3">[45]</xref>. However, such results were idiosyncratic and appeared to arise from shortest-path choices that happened to channel behavior across small sets of edges, effectively creating behavioral bottlenecks not reflected in the topology of the graph itself. Because this is not a general property, it is unlikely to be reflected in the mean effects across participants that we focus on in the present paper. We thus do not pursue this point further. Instead, in order to avoid this nuisance effect, we searched for sets of shortest paths whose edge-traversal statistics closely approximated the betweenness-centrality statistics of the set of all edges in the underlying graph, quantifying the goodness of fit using Euclidean distance. This optimization was performed based on a sample of 100,000 shortest path sets. That is, for each graph, we first computed the edge betweenness statistics based on all possible shortest paths, and then separately based on each candidate set of consistent shortest paths (as described above). The set of edge betweenness statistics based on each set of paths was treated as a point in a high dimensional space, and the set of consistent shortest paths closest to the set of all paths in this space was selected.</p>
<p>In order to search the space of partitions for the partition yielding the highest model evidence, we followed Brandes et al. <xref ref-type="bibr" rid="pcbi.1003779-Brandes1">[46]</xref> and reformulated the problem as binary integer programming. In this formulation, the optimization is over a set of binary variables, with one variable for each edge in the graph. Setting a variable to ‘1’ turns the corresponding edge ‘on’, and the connected components correspond to separate communities. We used a genetic algorithm to search the resulting space, as implemented by the GA library in R <xref ref-type="bibr" rid="pcbi.1003779-Scrucca1">[47]</xref>. Each generation consisted of 2000 individuals. The search was halted when the best score remained unchanged for 20 generations. Because genetic algorithms are not guaranteed to find the global optimum, we ran the search for each graph multiple times, each time with a different starting population. The space of partitions for each of the graphs from the navigation experiments and for the graph from Schapiro et al. <xref ref-type="bibr" rid="pcbi.1003779-Schapiro1">[41]</xref> (see <xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2A</xref>) was searched 1000 times. The space of partitions for the Tower of Hanoi graph was searched 500 times, and that for the rooms graph was searched 20 times.</p>
<p>In Experiments 2-3 the optimal parse involved two regions, with the bottleneck vertex assimilated to one. However note that, given the graph's symmetry, this implies the existence of two parses with equal model evidence: One incorporating the bottleneck vertex into one region, the other parse incorporating it into the other region. <xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2D</xref> was designed to reflect this tie outcome.</p>
</sec></sec><sec id="s3b">
<title>Behavioral experiment 1</title>
<p>Ethics statement: All experimental procedures, including procedures for informed consent, were approved by the Princeton University Institutional Review Board.</p>
<sec id="s3b1">
<title>Subjects</title>
<p>Forty adults from the Princeton community (21 female; ages 18–21) participated. All gave written consent and were either given course credit or a nominal payment for their participation.</p>
</sec><sec id="s3b2">
<title>Materials and procedure</title>
<p>Participants were told that they were going to navigate through a virtual town to make deliveries. Each in a set of locations (icons) was mapped to a node in a graph (see <xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2C</xref>). The present experiment began with an extended training phase, which took place before any deliveries were actually assigned. During each trial within the training period, participants saw all ten location icons in a randomly sorted array (see <xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2B</xref>). One of the locations was highlighted, and the participant was asked to identify that location's three immediate neighbors in the town, using mouse clicks, in a self-paced fashion. Three selections were permitted. Each icon selected was immediately circled in green if it was a neighbor, and in red if not. If three correct selections were made, a new location was highlighted (sampled randomly without replacement), initiating the next trial. If, after each three selections, any selection was incorrect, the original index item remained highlighted while the rest of the display was reinitialized, and the participant made another attempt at identifying the relevant neighbors. When participants managed to identify all three neighbors correctly on the first round of any trial, they received a “point.” The training phase continued for a total of 55 minutes (for the first twenty participants) or 40 minutes (for remaining participants). The time was reduced partway through the experiment because we noticed that performance was at ceiling for most participants after 40 minutes.</p>
<p>Following the training phase, the experimenter introduced the delivery task, informing participants that deliveries would involve randomly selected initial and target locations, and that a “point” would be awarded for deliveries completed in the fewest possible steps. Participants were shown an example display, which showed icons indicating the current location, goal location and all locations adjacent to the current location, and 20 subjects completed a <italic>single</italic> practice delivery trial, using key presses to transition from the current location to an adjacent location until the goal was reached. (This practice trial was omitted for the remaining subjects based on a late-coming concern that the sequence of actions it elicited might bias later behavior. However, no difference was ultimately observed between the behavior of participants who completed the practice trial and participants who did not.)</p>
<p>The notion of a bus-stop was also introduced at this point. Participants were told that before embarking on the delivery task, they would be asked to position a bus stop within the town. They were told that a well-chosen location could help them navigate efficiently. During subsequent delivery trials, the participant was informed, their chosen location would appear in the display, and they could transition to it in one step, at any time, by pressing the 0 key. If they used the bus-stop to complete the delivery in fewer steps than the shortest path attainable without a bus-stop jump, they would receive an additional bonus point for the delivery.</p>
<p>Following provision of this information, participants were asked to provide their first, second and third choices for the bus-stop location. Participants then completed three delivery trials, to confirm that they had understood the task description. At the close of the experiment, participants were asked to draw a map of the town in the form of a graph, with nodes representing locations and edges indicating adjacency relations.</p>
<p>Supplementary results from this and the subsequent experiments are reported in the online supplement.</p>
</sec></sec><sec id="s3c">
<title>Behavioral experiment 2</title>
<sec id="s3c1">
<title>Subjects</title>
<p>Ten adults from the Princeton community (5 female, ages 18–21) participated. All gave written consent and were either given course credit or a nominal payment for their participation.</p>
</sec><sec id="s3c2">
<title>Materials and procedure</title>
<p>As in Experiment 1, participants were told that they were going to navigate through a virtual town to make deliveries. And once again, each in a set of locations (icons) was mapped to a node in a graph, in this case a graph of size nineteen (see <xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2D</xref>). The experiment consisted of 19 blocks. It began with 6 blocks of 6 deliveries each. Each delivery trial was exactly as in Experiment 1, but without the bus-stop destination. In order to ensure proper learning of the town structure, this time participants were aided by periodic displays of a birds-eye view of the town's underlying map. Note that this visual aid makes bottleneck discovery straightforward. However, in this experiment we were not interested in bottleneck discovery per se, but rather in the question of whether participants used this knowledge to plan action sequences hierarchically. In the first 6 blocks, participants could look at the map as long as they wished. From the end of block 7 through the end of the task, they could look at the map for 3 seconds. This latter design decision was imposed with the assumption that participants should already be familiar with the town layout in later trials, reducing the time spent looking at the map and allowing for more trials to be collected.</p>
<p>Starting at the end of block 6 and through block 19 (the last block), some of the trials were normal delivery trials, and some were “path identification” tasks (the type of trial was determined with probability 0.5). In “path identification” trials participants were shown a grid with all 19 locations in random order with a start location identified with a green box and a target location with a red box. In 40% of these trials, participants were asked to identify, using mouse-clicks, all the locations that would lie on a shortest path between the start and target, in any order. Participants could choose locations by clicking on them and un-choose them by clicking again. Chosen locations were marked by a gray square around them. The trial ended either when the chosen locations formed a shortest path, or after a maximum of 15 clicks. In the other 60% of “path identification” trials, participants were shown the grid with the start and target locations and asked to click on just one location that lay in some shortest path between them. The trial ended after one click, regardless of whether the choice was correct or not. In all path identification trials participants received feedback indicating whether their choices were correct. A 40/60 split was chosen because the trials on which participants were asked for the full path were significantly longer in duration, limiting the number of data points that we would be able to collect overall.</p>
</sec></sec><sec id="s3d">
<title>Behavioral experiment 3</title>
<sec id="s3d1">
<title>Subjects</title>
<p>Twenty-one adults from the Princeton community (11 female, ages 18–21) participated. All gave written consent and were either given course credit or a nominal payment for their participation.</p>
</sec><sec id="s3d2">
<title>Materials and procedure</title>
<p>As in Experiments 1 and 2, participants were told that they were going to navigate through a virtual town to make deliveries. And once again, each in a set of locations (icons) was mapped to a node in a graph, in this case the graph of size nineteen used in Experiment 2 (see <xref ref-type="fig" rid="pcbi-1003779-g002">Figure 2D</xref>). Following the structure of Experiment 2, this experiment began with 6 blocks of 6 deliveries each, followed by a birds-eye view of the town's map, to aid in learning the town's distribution. At the end of these first 6 blocks, participants could look at the map as long as they wished. From the end of block 7 through the end of the task, they could look at the map for 3 seconds.</p>
<p>Each delivery trial was exactly as in Experiment 1 and 2. From block 6 through block 19 (the last block), at the end of each set of deliveries participants were asked ten Yes/No questions of the form “If you had to navigate from A to B, would you go through C?” Locations A, B and C were depicted graphically using their corresponding icon. The questions of interest were chosen randomly from a pool of four types, plus some extra filler questions: queries could be about local (A and B on the same side of town) or non-local (A and B on opposite sides) locations, and they could be about the bottleneck (C corresponding to bottleneck location) or about another non-bottleneck node. Type 1 queries were about non-local deliveries and the probe node C was the bottleneck (therefore the correct answer was always Yes). Type 2 queries were non-local deliveries and the through node was either of the nodes adjacent to the bottleneck on the target side of town (correct response was always Yes). Type 3 and Type 4 queries were local ones (A and B on same side), with or without the bottleneck as the through node, respectively (correct response was always No). A set of extra filler queries involved local deliveries, sometimes with the bottleneck as either start or target, with the through node selected from the same side of the city (correct answer could be Yes or No, depending on the participant's choice of shortest path).</p>
<p>All response times faster than 250 msec or slower than 7000 msec were excluded, and the remaining response times were log-transformed. Participants answered the queries correctly 98% of the time, and we excluded from our analyses the few incorrect responses. Our central predictions were that in queries where the bottleneck was the queried through node (Types 1 and 3), participants would be faster to correctly respond Yes or No than in queries involving the adjacent nodes (Types 2 and 4).</p>
</sec></sec><sec id="s3e">
<title>Behavioral experiment 4</title>
<sec id="s3e1">
<title>Subjects</title>
<p>Thirty-five adults from the Princeton University community (15 female, ages 18–46) participated in this study. All gave written consent and received a nominal payment for their participation.</p>
</sec><sec id="s3e2">
<title>Materials and procedure</title>
<p>Participants were trained to perform a computer-based version of the three-disk Tower of Hanoi (ToH) puzzle. The display showed a rectangular base supporting three posts, with three beads (isoluminant in red, green and blue) threaded onto the posts. Participants solved a series of puzzles, moving beads from post to post, one at a time, to transform initial configurations into target configurations. To move a bead, keys corresponding to its current and desired new positions were pressed in series (the J, K, and L keys and right index, middle and ring fingers were used for this purpose). In addition to the current bead configuration, the display also included an image of the goal configuration in the upper right portion of the screen.</p>
<p>Participants were required to follow a set of rules restricting the range of legal moves. Specifically, if the three colors are designated C1, C2 and C3, the rules specified that C2 could never be placed on top of C1 and that C3 could never be placed on top of either C1 or C2. The specific colors assigned to these three roles was counterbalanced across subjects. (The standard ToH task involves disks of different diameters rather than different colors; we used colors in preparation for a follow-up fMRI study, where considerations of visual similarity will be important). If an illegal move was attempted, a brief tone was sounded and no change would occur in the display.</p>
<p>After an initial orientation, participants performed a series of randomly selected ToH problems consisting of random start and goal configurations. This phase of the session lasted twenty minutes and was entirely self-paced. No limit was imposed on the number of moves allowed. However, participants received a monetary bonus of 2 cents for each puzzle solved, and were rewarded with a performance bonus of 3 cents for reaching the goal state in the minimum numbers of moves. At the end of each game, subjects were informed of their earnings (e.g., “You have earned <inline-formula><inline-graphic xlink:href="info:doi/10.1371/journal.pcbi.1003779.e088" xlink:type="simple"/></inline-formula>”). Participants then pressed the space bar to begin a new trial.</p>
</sec></sec></sec><sec id="s4">
<title>Supporting Information</title>
<supplementary-material id="pcbi.1003779.s001" mimetype="application/pdf" xlink:href="info:doi/10.1371/journal.pcbi.1003779.s001" position="float" xlink:type="simple"><label>Text S1</label><caption>
<p>Includes a step-by-step example of how to calculate the model evidence, the optimality proofs described in the main text, and supplementary experimental results.</p>
<p>(PDF)</p>
</caption></supplementary-material></sec></body>
<back><ref-list>
<title>References</title>
<ref id="pcbi.1003779-Hebb1"><label>1</label>
<mixed-citation publication-type="other" xlink:type="simple">Hebb DO (1949) The organization of behavior: A neuropsychological theory. New York, NY: John Wiley &amp; Sons.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Miller1"><label>2</label>
<mixed-citation publication-type="other" xlink:type="simple">Miller GA, Galanter E, Pribram KH (1960) Plans and the structure of behavior. New York, NY: Holt, Rinehart &amp; Winston.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Tinbergen1"><label>3</label>
<mixed-citation publication-type="other" xlink:type="simple">Tinbergen N (1951) The study of instinct. Oxford, England: Clarendon Press.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Tolman1"><label>4</label>
<mixed-citation publication-type="other" xlink:type="simple">Tolman EC (1932) Purposive behavior in animals and men. New York, NY: Century.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Botvinick1"><label>5</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Botvinick</surname><given-names>MM</given-names></name> (<year>2008</year>) <article-title>Hierarchical models of behavior and prefrontal function</article-title>. <source>Trends in Cognitive Sciences</source> <volume>12</volume>: <fpage>201</fpage>–<lpage>208</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Shallice1"><label>6</label>
<mixed-citation publication-type="other" xlink:type="simple">Shallice T, Cooper RP (2011) The organization of mind. Oxford, England: Oxford University Press.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Whiten1"><label>7</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Whiten</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Flynn</surname><given-names>E</given-names></name>, <name name-style="western"><surname>Brown</surname><given-names>K</given-names></name>, <name name-style="western"><surname>Lee</surname><given-names>T</given-names></name> (<year>2006</year>) <article-title>Imitation of hierarchical action structure by young children</article-title>. <source>Developmental Science</source> <volume>9</volume>: <fpage>574</fpage>–<lpage>582</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Zacks1"><label>8</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Zacks</surname><given-names>JM</given-names></name>, <name name-style="western"><surname>Kurby</surname><given-names>CA</given-names></name>, <name name-style="western"><surname>Eisenberg</surname><given-names>ML</given-names></name>, <name name-style="western"><surname>Haroutunian</surname><given-names>N</given-names></name> (<year>2011</year>) <article-title>Prediction error associated with the perceptual segmentation of naturalistic events</article-title>. <source>Journal of Cognitive Neuroscience</source> <volume>23</volume>: <fpage>4057</fpage>–<lpage>4066</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Graybiel1"><label>9</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Graybiel</surname><given-names>AM</given-names></name> (<year>1998</year>) <article-title>The basal ganglia and chunking of action repertoires</article-title>. <source>Neurobiology of Learning and Memory</source> <volume>70</volume>: <fpage>119</fpage>–<lpage>136</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Barto1"><label>10</label>
<mixed-citation publication-type="other" xlink:type="simple">Barto AG, Konidaris GD, Vigorito CM (2013) Behavioral Hierarchy: Exploration and Representation, Springer. pp. 13–46.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Botvinick2"><label>11</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Botvinick</surname><given-names>MM</given-names></name>, <name name-style="western"><surname>Niv</surname><given-names>Y</given-names></name>, <name name-style="western"><surname>Barto</surname><given-names>AC</given-names></name> (<year>2009</year>) <article-title>Hierarchically organized behavior and its neural foundations: A reinforcement learning perspective</article-title>. <source>Cognition</source> <volume>113</volume>: <fpage>262</fpage>–<lpage>280</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Foster1"><label>12</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Foster</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Dayan</surname><given-names>P</given-names></name> (<year>2002</year>) <article-title>Structure in the space of value functions</article-title>. <source>Machine Learning</source> <volume>49</volume>: <fpage>325</fpage>–<lpage>346</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Anderson1"><label>13</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Anderson</surname><given-names>JR</given-names></name>, <name name-style="western"><surname>Bothell</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Byrne</surname><given-names>MD</given-names></name>, <name name-style="western"><surname>Douglass</surname><given-names>S</given-names></name>, <name name-style="western"><surname>Lebiere</surname><given-names>C</given-names></name>, <etal>et al</etal>. (<year>2004</year>) <article-title>An integrated theory of the mind</article-title>. <source>Psychological Review</source> <volume>111</volume>: <fpage>1036</fpage>–<lpage>1060</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Boutilier1"><label>14</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Boutilier</surname><given-names>C</given-names></name>, <name name-style="western"><surname>Dean</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Hanks</surname><given-names>S</given-names></name> (<year>1999</year>) <article-title>Decision-theoretic planning: structural assumptions and computational leverage</article-title>. <source>Journal of Artificial Intelligence Research</source> <volume>11</volume>: <fpage>1</fpage>–<lpage>94</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Laird1"><label>15</label>
<mixed-citation publication-type="other" xlink:type="simple">Laird JE (2012) The Soar cognitive architecture. Cambridge, MA: The MIT Press.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Newell1"><label>16</label>
<mixed-citation publication-type="other" xlink:type="simple">Newell A, Simon HA (1972) Human problem solving. Englewood Cliffs, NJ: Prentice-Hall.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Sutton1"><label>17</label>
<mixed-citation publication-type="other" xlink:type="simple">Sutton RS, Barto AG (1998) Reinforcement learning: An introduction. The MIT Press.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Sutton2"><label>18</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Sutton</surname><given-names>RS</given-names></name>, <name name-style="western"><surname>Precup</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Singh</surname><given-names>S</given-names></name> (<year>1999</year>) <article-title>Between MDPs and semi-MDPs: A framework for temporal abstraction in reinforcement learning</article-title>. <source>Artificial Intelligence</source> <volume>112</volume>: <fpage>181</fpage>–<lpage>211</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Sutton3"><label>19</label>
<mixed-citation publication-type="other" xlink:type="simple">Sutton RS (1990) Integrated architectures for learning, planning, and reacting based on approximating dynamic programming. In: Proceedings of the 7th International Conference on Machine Learning. pp. 216–224.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Simsek1"><label>20</label>
<mixed-citation publication-type="other" xlink:type="simple">Simsek Ö, Barto AG (2008) Skill characterization based on betweenness. In: Koller D, Schuurmans D, Bengio Y, Bottou L, editors, Advances in Neural Information Processing Systems. <volume>volume 21</volume> , pp. 1497–1504.</mixed-citation>
</ref>
<ref id="pcbi.1003779-vanDijk1"><label>21</label>
<mixed-citation publication-type="other" xlink:type="simple">van Dijk SG, Polani D (2011) Grounding subgoals in information transitions. In: IEEE Symposium on Adaptive Dynamic Programming And Reinforcement Learning (ADPRL). IEEE, pp. 105–111.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Vigorito1"><label>22</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Vigorito</surname><given-names>CM</given-names></name>, <name name-style="western"><surname>Barto</surname><given-names>AG</given-names></name> (<year>2010</year>) <article-title>Intrinsically motivated hierarchical skill learning in structured environments</article-title>. <source>IEEE Transactions on Autonomous Mental Development</source> <volume>2</volume>: <fpage>132</fpage>–<lpage>143</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-MacKay1"><label>23</label>
<mixed-citation publication-type="other" xlink:type="simple">MacKay DJC (2003) Information theory, inference and learning algorithms. Cambridge University Press.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Hauskrecht1"><label>24</label>
<mixed-citation publication-type="other" xlink:type="simple">Hauskrecht M, Meuleau N, Kaelbling LP, Dean T, Boutilier C (1998) Hierarchical solution of Markov decision processes using macro-actions. In: Proceedings of the Fourteenth Conference on Uncertainty in Artificial Intelligence. San Francisco, CA: Morgan Kaufmann, pp. 220–229.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Rosvall1"><label>25</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Rosvall</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Bergstrom</surname><given-names>CT</given-names></name> (<year>2008</year>) <article-title>Maps of random walks on complex networks reveal community structure</article-title>. <source>Proceedings of the National Academy of Sciences</source> <volume>105</volume>: <fpage>1118</fpage>–<lpage>1123</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Cover1"><label>26</label>
<mixed-citation publication-type="other" xlink:type="simple">Cover TM, Thomas JA (2012) Elements of information theory. Hoboken, NJ: John Wiley &amp; Sons.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Feldman1"><label>27</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Feldman</surname><given-names>J</given-names></name> (<year>2000</year>) <article-title>Minimization of boolean complexity in human concept learning</article-title>. <source>Nature</source> <volume>407</volume>: <fpage>630</fpage>–<lpage>633</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Kemp1"><label>28</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Kemp</surname><given-names>C</given-names></name> (<year>2012</year>) <article-title>Exploring the conceptual universe</article-title>. <source>Psychological Review</source> <volume>119</volume>: <fpage>685</fpage>–<lpage>722</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Schmidhuber1"><label>29</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Schmidhuber</surname><given-names>J</given-names></name> (<year>1992</year>) <article-title>Learning complex, extended sequences using the principle of history compression</article-title>. <source>Neural Computation</source> <volume>4</volume>: <fpage>234</fpage>–<lpage>242</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Thrun1"><label>30</label>
<mixed-citation publication-type="other" xlink:type="simple">Thrun S, Schwartz A (1995) Finding structure in reinforcement learning. In: Tesauro G, Touretzky DS, Leen TK, editors, Advances in Neural Information Processing Systems, <volume>volume 7</volume> . pp. 385–392.</mixed-citation>
</ref>
<ref id="pcbi.1003779-vanDijk2"><label>31</label>
<mixed-citation publication-type="other" xlink:type="simple">van Dijk SG, Polani D, Nehaniv CL (2011) Hierarchical behaviours: getting the most bang for your bit. In: Kampis G, Karsai I, Szathmáry E, editors, Advances in Artificial Life: Darwin Meets von Neumann, Springer. pp. 342–349.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Kazemitabar1"><label>32</label>
<mixed-citation publication-type="other" xlink:type="simple">Kazemitabar SJ, Beigy H (2009) Automatic discovery of subgoals in reinforcement learning using strongly connected components. In: Köppen M, Kasabov N, Coghill G, editors, Advances in Neuro-Information Processing. Springer, <volume>volume 5506</volume> , pp.829–834.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Moradi1"><label>33</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Moradi</surname><given-names>P</given-names></name>, <name name-style="western"><surname>Shiri</surname><given-names>ME</given-names></name>, <name name-style="western"><surname>Rad</surname><given-names>AA</given-names></name>, <name name-style="western"><surname>Khadivi</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Hasler</surname><given-names>M</given-names></name> (<year>2012</year>) <article-title>Automatic skill acquisition in reinforcement learning using graph centrality measures</article-title>. <source>Intelligent Data Analysis</source> <volume>16</volume>: <fpage>113</fpage>–<lpage>135</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Feldman2"><label>34</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Feldman</surname><given-names>J</given-names></name> (<year>2009</year>) <article-title>Bayes and the simplicity principle in perception</article-title>. <source>Psychological Review</source> <volume>116</volume>: <fpage>875</fpage>–<lpage>887</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Orbn1"><label>35</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Orbán</surname><given-names>G</given-names></name>, <name name-style="western"><surname>Fiser</surname><given-names>J</given-names></name>, <name name-style="western"><surname>Aslin</surname><given-names>RN</given-names></name>, <name name-style="western"><surname>Lengyel</surname><given-names>M</given-names></name> (<year>2008</year>) <article-title>Bayesian learning of visual chunks by human observers</article-title>. <source>Proceedings of the National Academy of Sciences</source> <volume>105</volume>: <fpage>2745</fpage>–<lpage>2750</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Brady1"><label>36</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Brady</surname><given-names>TF</given-names></name>, <name name-style="western"><surname>Konkle</surname><given-names>T</given-names></name>, <name name-style="western"><surname>Alvarez</surname><given-names>GA</given-names></name> (<year>2009</year>) <article-title>Compression in visual working memory: Using statistical regularities to form more efficient memory representations</article-title>. <source>Journal of Experimental Psychology: General</source> <volume>138</volume>: <fpage>487</fpage>–<lpage>502</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Mathy1"><label>37</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Mathy</surname><given-names>F</given-names></name>, <name name-style="western"><surname>Feldman</surname><given-names>J</given-names></name> (<year>2012</year>) <article-title>What's magic about magic numbers? Chunking and data compression in short-term memory</article-title>. <source>Cognition</source> <volume>122</volume>: <fpage>346</fpage>–<lpage>362</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Finley1"><label>38</label>
<mixed-citation publication-type="other" xlink:type="simple">Finley S, Newport EL (2010) Morpheme segmentation from distributional information. In: Boston University Conference on Language Development (BUCLD) Online Proceedings Supplement.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Chater1"><label>39</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Chater</surname><given-names>N</given-names></name>, <name name-style="western"><surname>Vitányi</surname><given-names>P</given-names></name> (<year>2003</year>) <article-title>Simplicity: A unifying principle in cognitive science?</article-title> <source>Trends in Cognitive Sciences</source> <volume>7</volume>: <fpage>19</fpage>–<lpage>22</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Robinet1"><label>40</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Robinet</surname><given-names>V</given-names></name>, <name name-style="western"><surname>Lemaire</surname><given-names>B</given-names></name>, <name name-style="western"><surname>Gordon</surname><given-names>MB</given-names></name> (<year>2011</year>) <article-title>MDLChunker: A MDL-based cognitive model of inductive learning</article-title>. <source>Cognitive Science</source> <volume>35</volume>: <fpage>1352</fpage>–<lpage>1389</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Schapiro1"><label>41</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Schapiro</surname><given-names>AC</given-names></name>, <name name-style="western"><surname>Rogers</surname><given-names>TT</given-names></name>, <name name-style="western"><surname>Cordova</surname><given-names>NI</given-names></name>, <name name-style="western"><surname>Turk-Browne</surname><given-names>NB</given-names></name>, <name name-style="western"><surname>Botvinick</surname><given-names>MM</given-names></name> (<year>2013</year>) <article-title>Neural representations of events arise from temporal community structure</article-title>. <source>Nature Neuroscience</source> <volume>16</volume>: <fpage>486</fpage>–<lpage>492</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Wiener1"><label>42</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Wiener</surname><given-names>JM</given-names></name>, <name name-style="western"><surname>Mallot</surname><given-names>HA</given-names></name> (<year>2003</year>) <article-title>‘Fine-to-coarse’ route planning and navigation in regionalized environments</article-title>. <source>Spatial Cognition &amp; Computation</source> <volume>3</volume>: <fpage>331</fpage>–<lpage>358</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Anderson2"><label>43</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Anderson</surname><given-names>JR</given-names></name>, <name name-style="western"><surname>Douglass</surname><given-names>S</given-names></name> (<year>2001</year>) <article-title>Tower of Hanoi: Evidence for the cost of goal retrieval</article-title>. <source>Journal of Experimental Psychology: Learning, Memory, and Cognition</source> <volume>27</volume>: <fpage>1331</fpage>–<lpage>1346</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Barto2"><label>44</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Barto</surname><given-names>AG</given-names></name>, <name name-style="western"><surname>Mahadevan</surname><given-names>S</given-names></name> (<year>2003</year>) <article-title>Recent advances in hierarchical reinforcement learning</article-title>. <source>Discrete Event Dynamic Systems</source> <volume>13</volume>: <fpage>341</fpage>–<lpage>379</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-vanDijk3"><label>45</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>van Dijk</surname><given-names>SG</given-names></name>, <name name-style="western"><surname>Polani</surname><given-names>D</given-names></name> (<year>2013</year>) <article-title>Informational constraints-driven organization in goal-directed behavior</article-title>. <source>Advances in Complex Systems</source> <volume>16</volume>: <fpage>1350016</fpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Brandes1"><label>46</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Brandes</surname><given-names>U</given-names></name>, <name name-style="western"><surname>Delling</surname><given-names>D</given-names></name>, <name name-style="western"><surname>Gaertler</surname><given-names>M</given-names></name>, <name name-style="western"><surname>Gorke</surname><given-names>R</given-names></name>, <name name-style="western"><surname>Hoefer</surname><given-names>M</given-names></name>, <etal>et al</etal>. (<year>2008</year>) <article-title>On modularity clustering</article-title>. <source>IEEE Transactions on Knowledge and Data Engineering</source> <volume>20</volume>: <fpage>172</fpage>–<lpage>188</lpage>.</mixed-citation>
</ref>
<ref id="pcbi.1003779-Scrucca1"><label>47</label>
<mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Scrucca</surname><given-names>L</given-names></name> (<year>2013</year>) <article-title>GA: a package for genetic algorithms in R. Journal of Statistical Software</article-title>. <volume>53</volume>: <fpage>1</fpage>–<lpage>37</lpage>.</mixed-citation>
</ref>
</ref-list></back>
</article>