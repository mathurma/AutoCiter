<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="3.0" xml:lang="EN">
<front>
<journal-meta><journal-id journal-id-type="publisher-id">plos</journal-id><journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id><journal-id journal-id-type="pmc">ploscomp</journal-id><!--===== Grouping journal title elements =====--><journal-title-group><journal-title>PLoS Computational Biology</journal-title></journal-title-group><issn pub-type="ppub">1553-734X</issn><issn pub-type="epub">1553-7358</issn><publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, USA</publisher-loc></publisher></journal-meta>
<article-meta><article-id pub-id-type="publisher-id">10-PLCB-RA-1935R3</article-id><article-id pub-id-type="doi">10.1371/journal.pcbi.1000858</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research Article</subject></subj-group><subj-group subj-group-type="Discipline"><subject>Computational Biology</subject><subject>Mathematics</subject><subject>Neuroscience/Psychology</subject></subj-group></article-categories><title-group><article-title>Categorial Compositionality: A Category Theory Explanation for the Systematicity of Human Cognition</article-title><alt-title alt-title-type="running-head">Categorial Compositionality</alt-title></title-group><contrib-group>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Phillips</surname><given-names>Steven</given-names></name><xref ref-type="aff" rid="aff1"><sup>1</sup></xref><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Wilson</surname><given-names>William H.</given-names></name><xref ref-type="aff" rid="aff2"><sup>2</sup></xref></contrib>
</contrib-group><aff id="aff1"><label>1</label><addr-line>Mathematical Neuroinformatics Group, Human Technology Research Institute, National Institute of Advanced Industrial Science and Technology (AIST), Tsukuba, Ibaraki, Japan</addr-line>       </aff><aff id="aff2"><label>2</label><addr-line>School of Computer Science and Engineering, The University of New South Wales, Sydney, New South Wales, Australia</addr-line>       </aff><contrib-group>
<contrib contrib-type="editor" xlink:type="simple"><name name-style="western"><surname>Friston</surname><given-names>Karl J.</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/></contrib>
</contrib-group><aff id="edit1">University College London, United Kingdom</aff><author-notes>
<corresp id="cor1">* E-mail: <email xlink:type="simple">steve@ni.aist.go.jp</email></corresp>
<fn fn-type="con"><p>Analyzed the data: SP WHW. Contributed reagents/materials/analysis tools: SP WHW. Wrote the paper: SP WHW.</p></fn>
<fn fn-type="conflict"><p>The authors have declared that no competing interests exist.</p></fn></author-notes><pub-date pub-type="collection"><month>7</month><year>2010</year></pub-date><pub-date pub-type="epub"><day>22</day><month>7</month><year>2010</year></pub-date><volume>6</volume><issue>7</issue><elocation-id>e1000858</elocation-id><history>
<date date-type="received"><day>15</day><month>3</month><year>2010</year></date>
<date date-type="accepted"><day>13</day><month>6</month><year>2010</year></date>
</history><!--===== Grouping copyright info into permissions =====--><permissions><copyright-year>2010</copyright-year><copyright-holder>Phillips, Wilson</copyright-holder><license><license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p></license></permissions><abstract>
<p>Classical and Connectionist theories of cognitive architecture seek to explain systematicity (i.e., the property of human cognition whereby cognitive capacity comes in groups of related behaviours) as a consequence of syntactically and functionally compositional representations, respectively. However, both theories depend on <italic>ad hoc</italic> assumptions to exclude specific instances of these forms of compositionality (e.g. grammars, networks) that do not account for systematicity. By analogy with the Ptolemaic (i.e. geocentric) theory of planetary motion, although either theory can be made to be consistent with the data, both nonetheless fail to fully explain it. Category theory, a branch of mathematics, provides an alternative explanation based on the formal concept of adjunction, which relates a pair of structure-preserving maps, called functors. A functor generalizes the notion of a map between representational states to include a map between state transformations (or processes). In a formal sense, systematicity is a necessary consequence of a higher-order theory of cognitive architecture, in contrast to the first-order theories derived from Classicism or Connectionism. Category theory offers a re-conceptualization for cognitive science, analogous to the one that Copernicus provided for astronomy, where representational states are no longer the center of the cognitive universe—replaced by the relationships between the maps that transform them.</p>
</abstract><abstract abstract-type="summary"><title>Author Summary</title>
<p>Our minds are not the sum of some arbitrary collection of mental abilities. Instead, our mental abilities come in groups of related behaviours. This property of human cognition has substantial biological advantage in that the benefits afforded by a cognitive behaviour transfer to a related situation without any of the cost that came with acquiring that behaviour in the first place. The problem of systematicity is to explain why our mental abilities are organized this way. Cognitive scientists, however, have been unable to agree on a satisfactory explanation. Existing theories cannot explain systematicity without some overly strong assumptions. We provide a new explanation based on a mathematical theory of structure called Category Theory. The key difference between our explanation and previous ones is that systematicity emerges as a natural consequence of structural relationships between cognitive processes, rather than relying on the specific details of the cognitive representations on which those processes operate, and without relying on overly strong assumptions.</p>
</abstract><funding-group><funding-statement>The authors received no specific funding for this article.</funding-statement></funding-group><counts><page-count count="14"/></counts></article-meta>
</front>
<body><sec id="s1">
<title>Introduction</title>
<p>For more than two decades, since Fodor and Pylyshyn's seminal paper on the foundations of a theory of cognitive architecture (i.e., roughly, the component processes and their modes of composition that together comprise cognitive behaviour) <xref ref-type="bibr" rid="pcbi.1000858-Fodor1">[1]</xref>, the problem of explaining systematicity has remained unresolved <xref ref-type="bibr" rid="pcbi.1000858-Aizawa1">[2]</xref> despite numerous Classicist and Connectionist attempts <xref ref-type="bibr" rid="pcbi.1000858-Fodor2">[3]</xref>–<xref ref-type="bibr" rid="pcbi.1000858-Smolensky2">[7]</xref>. In general terms, the problem of systematicity for a theory of cognition is to explain why various cognitive abilities are intrinsically connected in the sense that the capacity to exhibit some abilities is indivisibly linked to the capacity to exhibit some other related abilities. Why, for example, is it the case that if one has the ability to infer that <italic>John</italic> is the lover from <italic>John loves Mary</italic>, then one also has the ability to infer that <italic>Mary</italic> is the lover from <italic>Mary loves John</italic>, where both abilities involve a common relation, <italic>loves</italic>? That is to ask, in general: what is it about our cognitive system that necessitates a particular group-oriented distribution of cognitive capacities, whereby you don't find people with the capacity for some but not all the behaviours pertaining to the same group (excluding, of course, individuals who lack a particular capacity for reasons clearly unrelated to normal development, because of brain damage for example)? Although the debate over what systematicity implies for a theory of cognition has many aspects (see <xref ref-type="bibr" rid="pcbi.1000858-Aizawa1">[2]</xref>), the generally accepted common ground is that: systematicity is a property of some (though not all) components of human cognition; a complete theory of human cognitive architecture must include an explanation for this property; and no theory of cognition has a satisfactory explanation for it. In the remainder of this section, we outline the systematicity property and the main problem it still poses for existing theories, what is required for a theory to explain it, and how our approach meets those requirements.</p>
<p>The systematicity problem consists of three component problems:</p>
<list list-type="order"><list-item>
<p><italic>Systematicity of representation</italic>—why is it the case that the capacity to generate some representations (e.g., the representation <monospace>John loves Mary</monospace>) is intrinsically linked to the capacity to generate some other representations (e.g., the representation <monospace>Mary loves John</monospace>)?</p>
</list-item><list-item>
<p><italic>Systematicity of inference</italic>—why is it the case that the capacity to make some inferences (e.g., that <monospace>John</monospace> is the lover in the proposition <monospace>John loves Mary</monospace>) is intrinsically linked to the capacity to make some other inferences (e.g., that <monospace>Mary</monospace> is the lover in the proposition <monospace>Mary loves John</monospace>)?</p>
</list-item><list-item>
<p><italic>Compositionality of representation</italic>—why is it the case that the capacity for some semantic content (e.g., the thought that <monospace>John loves Mary</monospace>, however that thought may be represented) is intrinsically linked to the capacity for some other semantic content (e.g., the thought that <monospace>Mary loves John</monospace>, however that thought may also be represented)?</p>
</list-item></list>
<p>These problems are logically independent—one does not necessarily follow from another <xref ref-type="bibr" rid="pcbi.1000858-Aizawa2">[8]</xref>, and so a theory is required to explain all three, though for some theories an explanation for one property may entail explanations for others.</p>
<p>Classicists and Connectionists employ some form of combinatorial representations to explain systematicity. For Classicists, representations are combined in such a way that the tokening of complex representations entails the tokening of representations of their constituent entities, so that the syntactic relationships between the constituent representations mirror the semantics ones—systematicity is a result of a combinatorial syntax and semantics <xref ref-type="bibr" rid="pcbi.1000858-Fodor1">[1]</xref>. For Connectionists, representations of complex entities are constructed more generally so that their tokening does not necessarily imply tokening constituent entity representations <xref ref-type="bibr" rid="pcbi.1000858-vanGelder1">[5]</xref>, <xref ref-type="bibr" rid="pcbi.1000858-Smolensky1">[6]</xref>. An example of a Classicist's representation of <monospace>John loves Mary</monospace> would be <monospace>loves</monospace> (<monospace>John</monospace>, <monospace>Mary</monospace>), and a Connectionist representation would be a tensor product so that the vectors representing <monospace>John</monospace>, <monospace>loves</monospace>, and <monospace>Mary</monospace> do not literally appear anywhere in the tensor representation. We refer to the former as <italic>classical compositionality</italic>, and the latter as <italic>connectionist</italic> (or, <italic>functional) compositionality</italic>.</p>
<p>In general, a Classical or Connectionist architecture can demonstrate systematicity by having the “right” collection of grammatical rules, or functions such that one capacity is indivisibly linked to another. Suppose, for example, a Classical system with the following three rules:</p>
<p>G1:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e001" xlink:type="simple"/></disp-formula></p>
<p>G1 provides the capacities to generate all four representations (i.e., <monospace>John loves John</monospace>, <monospace>John loves Mary</monospace>, etc.), and these capacities are indivisibly linked, because absence of any one of those rules means the system cannot generate any of those representations. In no case can the system generate one without being able to generate the others. So, this Classical architecture has the systematicity of representation property with respect to this group of four propositions. A tensor product <xref ref-type="bibr" rid="pcbi.1000858-Smolensky3">[9]</xref>, or Gödel numbering <xref ref-type="bibr" rid="pcbi.1000858-vanGelder1">[5]</xref> scheme is a functionally compositional analogue of this explanation. Systematicity of inference follows from having additional processes that are sensitive to the structure of these representations. For Classical architectures, at least, compositionality of representation also follows, because the semantic content of a complex representation is built up from the semantic contents of the constituents and their syntactic relationships <xref ref-type="bibr" rid="pcbi.1000858-Aizawa2">[8]</xref>. Aizawa <xref ref-type="bibr" rid="pcbi.1000858-Aizawa1">[2]</xref>, <xref ref-type="bibr" rid="pcbi.1000858-Aizawa2">[8]</xref> disputes whether a Connectionist architecture can also demonstrate compositionality of representation. Regardless, though, neither Classicism, nor Connectionism can derive theories that provide a full account of systematicity <xref ref-type="bibr" rid="pcbi.1000858-Aizawa1">[2]</xref>.</p>
<p>A demonstration of systematicity is not an explanation for it. In particular, although grammar G1 has the systematicity of representation property, the following grammar:</p>
<p>G2:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e002" xlink:type="simple"/></disp-formula>does not. This architecture cannot generate a representation of the proposition <monospace>Mary loves John</monospace> even though it can generate representations of both <monospace>John</monospace> and <monospace>Mary</monospace> as agents and patients, and the <monospace>John loves Mary</monospace> proposition. The essential problem for Classical theory—likewise Connectionist theory—is that syntactic compositionality by itself is not sufficient without some additional assumptions for admitting grammars such as G1 that have the systematicity property, while excluding grammars such as G2 that do not. An explanation for systematicity in these cases turns on the nature of those additional, possibly <italic>ad hoc</italic> assumptions.</p>
<sec id="s1a">
<title>An explanatory standard for systematicity</title>
<p>To further clarify what is required of a theory to explain systematicity <xref ref-type="bibr" rid="pcbi.1000858-Fodor1">[1]</xref>, <xref ref-type="bibr" rid="pcbi.1000858-Fodor2">[3]</xref>, Aizawa <xref ref-type="bibr" rid="pcbi.1000858-Aizawa1">[2]</xref> presents an explanatory standard for systematicity and the problem of <italic>ad hoc</italic> assumptions, which we follow, by analogy with the Ptolemean (geocentric) versus Copernican (heliocentric) explanations for the motions of the planets (see <xref ref-type="bibr" rid="pcbi.1000858-Phillips1">[10]</xref> for a review). The geocentric explanation for planetary motion places the Earth at the center of the other planets' circular orbits. Although this theory can roughly predict planetary position, it fails to predict periods of apparent retrograde motion for the superior planets (i.e. Mars, Jupiter, etc.) across the night sky without the assumption of <italic>epicycles</italic> (i.e., circular orbits with centers that orbit the Earth). This additional assumption is <italic>ad hoc</italic> in that it is unconnected with the rest of the theory and motivated only by the need to fit the data—the assumption could not be confirmed independently of confirming the theory. The heliocentric explanation, having all planets move around the Sun, eschews this <italic>ad hoc</italic> assumption. Retrograde motion falls out as a natural consequence of the positions of the Earth and other planets relative to the Sun. Tellingly, as more accurate data became available, the geocentric theory had to be further augmented with epicycles on epicycles to account for planetary motion; not so for the heliocentric theory.</p>
<p>The theory of planetary motion, of course, does not end there. The heliocentric theory, with its circular orbits, cannot explain the elliptical motion of the planets without further assumptions, and so was superseded by Newtonian mechanics. Newtonian mechanics cannot explain the precession of planetary orbits, and was in turn superseded by Einstein's theory of relativity. In each case, the superseding theory incorporates all that was explained by the preceding theory. Evaluating competing theories in this manner has an extensive history in science, and so one may expect it to be a reasonable standard for an explanation of systematicity in cognitive science.</p>
<p>Aizawa <xref ref-type="bibr" rid="pcbi.1000858-Aizawa1">[2]</xref> notes that although philosophers of science may not have a precise definition for the concept of an <italic>ad hoc</italic> assumption, one can nonetheless usefully characterize the idea by analogy with generally accepted examples, such as the assumption of epicycles, which we just mentioned. Another example Aizawa uses is the Creationist versus Darwinian theory of speciation, where the appeal to a supernatural being to explain the existence of different species is an <italic>ad hoc</italic> assumption. The general sense in which a theory fails to provide a satisfactory explanation by its appeal to <italic>ad hoc</italic> assumptions is when those additional, so called auxiliary, assumptions are unconnected to the core assumptions and principles of the theory, motivated only by the need to fit the data, and cannot be confirmed independently of confirming the theory. In this sense, the core theory has no explanatory power for the particular phenomenon of interest. Note that an auxiliary assumption is not necessarily <italic>ad hoc</italic>, nor is it precluded from subsequent inclusion into the set of core assumptions of the modified theory. Orthogonal experiments may provide confirmatory data for an auxiliary assumption, independent of the theory in question. Observations of the Jovian moons would have been the sort of independent confirmatory evidence for epicycles, had such data been available at the time, to justifiably include it as one of the core assumptions. However, the assumption that all heavenly bodies are governed this way ultimately proved untenable. The kind of theory sought here is one where systematicity necessarily follows without requiring such <italic>ad hoc</italic> assumptions. This characterization guides our analysis of the problem posed by the systematicity property, and our explanation for it.</p>
<p>The problem for Classical and Connectionist theories is that they cannot explain systematicity without recourse to their own <italic>ad hoc</italic> assumptions <xref ref-type="bibr" rid="pcbi.1000858-Aizawa1">[2]</xref>. For Classicism, having a combinatorial syntax and semantics does not differentiate between grammars such as G1 and G2. For Connectionism, a common recourse to learning also does not work, whereby systematicity is acquired by adjusting network parameters (e.g., connection weights) to realize some behaviours—training set—while generalizing to others—test set. Learning also requires <italic>ad hoc</italic> assumptions, because even widely used learning models, such as feedforward <xref ref-type="bibr" rid="pcbi.1000858-Rumelhart1">[11]</xref> and simple recurrent networks <xref ref-type="bibr" rid="pcbi.1000858-Elman1">[12]</xref>, fail to achieve systematicity <xref ref-type="bibr" rid="pcbi.1000858-Marcus1">[13]</xref>–<xref ref-type="bibr" rid="pcbi.1000858-Phillips4">[17]</xref> when construed as a degree of generalization <xref ref-type="bibr" rid="pcbi.1000858-Hadley1">[18]</xref>, <xref ref-type="bibr" rid="pcbi.1000858-Niklasson1">[19]</xref>. Hence, neither Classical nor Connectionist proposals satisfy the explanatory standard laid out by Fodor and Pylyshyn <xref ref-type="bibr" rid="pcbi.1000858-Fodor1">[1]</xref> and Fodor and McLaughlin <xref ref-type="bibr" rid="pcbi.1000858-Fodor2">[3]</xref> (see also <xref ref-type="bibr" rid="pcbi.1000858-Fodor4">[20]</xref>, Appendix), and further articulated by Aizawa <xref ref-type="bibr" rid="pcbi.1000858-Aizawa1">[2]</xref>. Ironically, failure to meet this criterion was one of the reasons Classicists rejected Connectionist explanations for systematicity. The import of Aizawa's analysis is that the same shortcoming also befalls Classicism, and so an explanation for systematicity is still needed. In this regard, it would appear that the 90s were also the “lost decade” for cognitive science.</p>
<p>In hindsight, the root of the difficulty that surrounds the systematicity problem has been that cognitive scientists never had a theory of structure to start with (i.e. one that was divorced, or at least separated from specific implementations of structure-sensitive processes). In fact, such a theory has been available for quite some time, but its relevance to one of the foundational problems of cognitive science has not previously been realized. Our category-theory based approach addresses the problem of <italic>ad hoc</italic> assumptions because the concept of an <italic>adjunction</italic>, which is central to our argument, ensures that the construct we seek not only exists, but is unique. That is to say, from this core assumption and category theory principles, the systematicity property necessarily follows for the particular cognitive domains of interest, because in each case the one and only collection of cognitive capacities derived from our theory is the systematic collection, without further restriction by additional (<italic>ad hoc</italic>) assumptions.</p>
</sec></sec><sec id="s2" sec-type="methods">
<title>Methods</title>
<p>Category theory is a theory of structure <italic>par excellence</italic> <xref ref-type="bibr" rid="pcbi.1000858-Awodey1">[21]</xref>–<xref ref-type="bibr" rid="pcbi.1000858-MacLane1">[23]</xref>. It was developed out of a need to formalize commonalities between various mathematical structures <xref ref-type="bibr" rid="pcbi.1000858-Eilenberg1">[24]</xref>, and has been used extensively in computer science for the analysis of computation <xref ref-type="bibr" rid="pcbi.1000858-Arbib1">[25]</xref>–<xref ref-type="bibr" rid="pcbi.1000858-Pierce1">[28]</xref>. Yet, despite computationalism being the catchcry of many psychologists since the cognitive revolution, applications of category theory to cognitive psychology have been almost non-existent (but, see <xref ref-type="bibr" rid="pcbi.1000858-Halford1">[29]</xref>, <xref ref-type="bibr" rid="pcbi.1000858-Phillips5">[30]</xref> for two examples). Our explanation of systematicity is based on the concept of an <italic>adjunction</italic>, which depends on the concepts of <italic>category</italic>, <italic>morphism</italic>, <italic>product</italic>, <italic>functor</italic>, and <italic>natural transformation</italic>. So, in this section, we provide formal definitions of these concepts. (For further explanation of some category theory concepts in the context of cognition, see <xref ref-type="bibr" rid="pcbi.1000858-Phillips5">[30]</xref>.)</p>
<p>An adjunction is a formal means for capturing the intuition that a relationship between mathematical objects is “natural”—additional constructs are unnecessary to establish that relationship (see also <xref ref-type="bibr" rid="pcbi.1000858-MacLane1">[23]</xref>, p2). The mathematical notion of being natural dates back at least to <xref ref-type="bibr" rid="pcbi.1000858-Eilenberg1">[24]</xref>, and the technical aspect is given starting where we define <italic>natural transformation</italic>. In the current context of meeting the explanatory standard for systematicity, identifying a suitable adjunction means that no further (<italic>ad hoc</italic>, or arbitrary) assumptions are needed to define the relationship between a particular cognitive architecture and a desired group of cognitive capacities. Such constructs <italic>look</italic> natural (once understood), but it is the mathematical criterion that definitely establishes naturality.</p>
<sec id="s2a">
<title>Category</title>
<p>A <italic>category</italic> <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e003" xlink:type="simple"/></inline-formula> consists of a class of objects <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e004" xlink:type="simple"/></inline-formula>; a set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e005" xlink:type="simple"/></inline-formula> of morphisms (also called arrows, or maps) from <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e006" xlink:type="simple"/></inline-formula> to <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e007" xlink:type="simple"/></inline-formula> where each morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e008" xlink:type="simple"/></inline-formula> has <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e009" xlink:type="simple"/></inline-formula> as its domain and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e010" xlink:type="simple"/></inline-formula> as its codomain, including the <italic>identity</italic> morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e011" xlink:type="simple"/></inline-formula> for each object <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e012" xlink:type="simple"/></inline-formula>; and a composition operation, denoted “<inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e013" xlink:type="simple"/></inline-formula>”, of morphisms <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e014" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e015" xlink:type="simple"/></inline-formula>, written <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e016" xlink:type="simple"/></inline-formula> that satisfy the laws of:</p>
<list list-type="bullet"><list-item>
<p><italic>identity</italic>, where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e017" xlink:type="simple"/></inline-formula>, for all <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e018" xlink:type="simple"/></inline-formula>; and</p>
</list-item><list-item>
<p><italic>associativity</italic>, where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e019" xlink:type="simple"/></inline-formula>, for all <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e020" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e021" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e022" xlink:type="simple"/></inline-formula>.</p>
</list-item></list>
<p>The most familiar example of a category is <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e023" xlink:type="simple"/></inline-formula>, which has sets for objects and functions for morphisms, where the identity morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e024" xlink:type="simple"/></inline-formula> is the identity function and the composition operation is the usual function composition operator “<inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e025" xlink:type="simple"/></inline-formula>”. Another example, where continuity is important, is the category of metric spaces and continuous functions.</p>
</sec><sec id="s2b">
<title>Morphisms</title>
<p>Certain morphisms have important properties that warrant giving them names. Two such morphisms, which we will refer to later, are called isomorphisms and homomorphisms. A morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e026" xlink:type="simple"/></inline-formula> is an <italic>isomorphism</italic> if there exists a morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e027" xlink:type="simple"/></inline-formula>, such that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e028" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e029" xlink:type="simple"/></inline-formula>. If <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e030" xlink:type="simple"/></inline-formula> exists, then it is the <italic>inverse</italic> of <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e031" xlink:type="simple"/></inline-formula>, also denoted as <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e032" xlink:type="simple"/></inline-formula>.</p>
<p>Homomorphisms pertain to categories whose objects have additional internal structure, such as groups. For example, the category <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e033" xlink:type="simple"/></inline-formula> has groups for objects, and the morphisms are group homomorphisms. A group consists of a set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e034" xlink:type="simple"/></inline-formula> of elements, and an associative binary operation <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e035" xlink:type="simple"/></inline-formula>, satisfying identity and inverse axioms. That is, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e036" xlink:type="simple"/></inline-formula> has an identity element <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e037" xlink:type="simple"/></inline-formula>, and for each <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e038" xlink:type="simple"/></inline-formula>, an inverse element <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e039" xlink:type="simple"/></inline-formula>, such that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e040" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e041" xlink:type="simple"/></inline-formula>. A <italic>group homomorphism</italic> is a morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e042" xlink:type="simple"/></inline-formula>, such that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e043" xlink:type="simple"/></inline-formula>, for all <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e044" xlink:type="simple"/></inline-formula>. Homomorphisms in other categories (e.g., graph homomorphisms) are defined analogously.</p>
</sec><sec id="s2c">
<title>Product</title>
<p>A <italic>product</italic> of two objects <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e045" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e046" xlink:type="simple"/></inline-formula> in a category <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e047" xlink:type="simple"/></inline-formula> is an object <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e048" xlink:type="simple"/></inline-formula> together with two morphisms <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e049" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e050" xlink:type="simple"/></inline-formula>, such that for any pair of morphisms <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e051" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e052" xlink:type="simple"/></inline-formula>, there is a unique morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e053" xlink:type="simple"/></inline-formula>, such that the following diagram <italic>commutes</italic>:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e495" xlink:type="simple"/><label>(1)</label></disp-formula>where a broken arrow indicates that there exists exactly one morphism making the diagram commute. To say that a diagram commutes is to mean that the compositions along any two paths with the same start object and the same finish object are the same. So, in this diagram, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e054" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e055" xlink:type="simple"/></inline-formula>, where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e056" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e057" xlink:type="simple"/></inline-formula> are sometimes called projection morphisms. A product object <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e058" xlink:type="simple"/></inline-formula> is <italic>unique up to a unique isomorphism</italic>. That is, for any other product object <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e059" xlink:type="simple"/></inline-formula> with morphisms <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e060" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e061" xlink:type="simple"/></inline-formula> there is one and only one isomorphism between <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e062" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e063" xlink:type="simple"/></inline-formula> that makes a diagram like this one commute. Hence, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e064" xlink:type="simple"/></inline-formula> is not unique, only unique with respect to another product object via isomorphism. This characteristic has an important consequence for our explanation of systematicity, which we present in the <xref ref-type="sec" rid="s3">Results</xref> section. An essential characteristic of a product object is that the constituents <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e065" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e066" xlink:type="simple"/></inline-formula> are retrievable via the projection morphisms. <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e067" xlink:type="simple"/></inline-formula> is also written <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e068" xlink:type="simple"/></inline-formula>, and since <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e069" xlink:type="simple"/></inline-formula> is uniquely determined by <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e070" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e071" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e072" xlink:type="simple"/></inline-formula> is often written as <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e073" xlink:type="simple"/></inline-formula>, and the diagram used in defining a product then becomes<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e496" xlink:type="simple"/><label>(2)</label></disp-formula></p>
<p>In <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e074" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e075" xlink:type="simple"/></inline-formula> is (up to isomorphism) the Cartesian product (<inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e076" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e077" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e078" xlink:type="simple"/></inline-formula>), where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e079" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e080" xlink:type="simple"/></inline-formula>, and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e081" xlink:type="simple"/></inline-formula> is the product function <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e082" xlink:type="simple"/></inline-formula>, sending <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e083" xlink:type="simple"/></inline-formula> to <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e084" xlink:type="simple"/></inline-formula>, so that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e085" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e086" xlink:type="simple"/></inline-formula>. The “maps to” arrow, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e087" xlink:type="simple"/></inline-formula>, indicates the action of a function on a domain element, so <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e088" xlink:type="simple"/></inline-formula> is equivalent to <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e089" xlink:type="simple"/></inline-formula>. (<inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e090" xlink:type="simple"/></inline-formula> refers both to a general product in any category with products and the more specific Cartesian product in the category <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e091" xlink:type="simple"/></inline-formula>.)</p>
<p>The categorical concept of product is a very general notion of combinatoriality. Not surprisingly, then, Classical and Connectionist notions of combinatoriality can be seen as special cases of categorical products. A grammar like G1 (<xref ref-type="sec" rid="s1">Introduction</xref>), for instance, can be used to realize the Cartesian product of the set of agents and the set of patients (i.e. by employing the first production without the <monospace>loves</monospace> symbol). A categorical product can also be realized by including suitable rules for inferring the agent and patient from this Cartesian product. (A grammar like G2 cannot realize a Cartesian product, or categorical product; in fact, it realizes a union of two partial products.) Similarly, a Connectionist method such as the outer product of two vector spaces with suitable projections from the outer product space to the original vector spaces also realizes a categorical product. However, an explanation for systematicity requires more than just realization, and as we shall see, additional category theory concepts are needed.</p>
</sec><sec id="s2d">
<title>Functor</title>
<p>A functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e092" xlink:type="simple"/></inline-formula> is a structure-preserving map between categories <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e093" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e094" xlink:type="simple"/></inline-formula> that associates each object <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e095" xlink:type="simple"/></inline-formula> in <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e096" xlink:type="simple"/></inline-formula> to an object <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e097" xlink:type="simple"/></inline-formula> in <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e098" xlink:type="simple"/></inline-formula>; and each morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e099" xlink:type="simple"/></inline-formula> in <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e100" xlink:type="simple"/></inline-formula> to a morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e101" xlink:type="simple"/></inline-formula> in <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e102" xlink:type="simple"/></inline-formula>, such that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e103" xlink:type="simple"/></inline-formula> for each object <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e104" xlink:type="simple"/></inline-formula> in <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e105" xlink:type="simple"/></inline-formula>; and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e106" xlink:type="simple"/></inline-formula> for all morphisms <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e107" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e108" xlink:type="simple"/></inline-formula> for which compositions <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e109" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e110" xlink:type="simple"/></inline-formula> are defined in categories <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e111" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e112" xlink:type="simple"/></inline-formula>, respectively. The following diagram shows the details of a functor:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e497" xlink:type="simple"/><label>(3)</label></disp-formula>where dashed rectangles encapsulate the categories, and arrows between morphisms are omitted. The object and morphism components of a functor are sometimes explicitly distinguished as <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e113" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e114" xlink:type="simple"/></inline-formula>, respectively. Otherwise, the functor component is implicitly identified by its argument.</p>
<p>Functor composition and isomorphism are defined analogously to morphisms (above). That is, the composition of functors <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e115" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e116" xlink:type="simple"/></inline-formula> is the functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e117" xlink:type="simple"/></inline-formula>, sending all objects <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e118" xlink:type="simple"/></inline-formula> in <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e119" xlink:type="simple"/></inline-formula> to objects <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e120" xlink:type="simple"/></inline-formula> in <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e121" xlink:type="simple"/></inline-formula>; and morphisms <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e122" xlink:type="simple"/></inline-formula> in <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e123" xlink:type="simple"/></inline-formula> to morphisms <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e124" xlink:type="simple"/></inline-formula>, such that identity and composition are respected. That is, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e125" xlink:type="simple"/></inline-formula>; and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e126" xlink:type="simple"/></inline-formula>. A functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e127" xlink:type="simple"/></inline-formula> is an <italic>isomorphic functor</italic>, if and only if there exists a functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e128" xlink:type="simple"/></inline-formula> such that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e129" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e130" xlink:type="simple"/></inline-formula>, where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e131" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e132" xlink:type="simple"/></inline-formula> are the identity functors sending objects and morphisms to themselves in the respective categories.</p>
<p>Theories of cognition employ some form of representation. Functors provide a theoretical basis for constructing representations. For example, computational systems often employ lists of items, such as numbers. In category theory, lists can be modeled as monoids from the category <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e133" xlink:type="simple"/></inline-formula> whose objects are monoids, and morphisms are monoid homomorphisms <xref ref-type="bibr" rid="pcbi.1000858-Pierce1">[28]</xref>. A <italic>monoid</italic> <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e134" xlink:type="simple"/></inline-formula> is a set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e135" xlink:type="simple"/></inline-formula>, with an associative binary operation <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e136" xlink:type="simple"/></inline-formula>, and an identity element <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e137" xlink:type="simple"/></inline-formula>, such that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e138" xlink:type="simple"/></inline-formula> for all <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e139" xlink:type="simple"/></inline-formula>. A <italic>list monoid</italic> <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e140" xlink:type="simple"/></inline-formula> <xref ref-type="bibr" rid="pcbi.1000858-Pierce1">[28]</xref> is the set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e141" xlink:type="simple"/></inline-formula> of all ordered lists constructed from set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e142" xlink:type="simple"/></inline-formula> by concatenation operator <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e143" xlink:type="simple"/></inline-formula>, where the identity element <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e144" xlink:type="simple"/></inline-formula> is the empty list (so that, e.g., <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e145" xlink:type="simple"/></inline-formula>). (It is worth noting that strings, e.g., lists of characters, of length 2 over the set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e146" xlink:type="simple"/></inline-formula> are denoted <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e147" xlink:type="simple"/></inline-formula>, and strings of length <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e148" xlink:type="simple"/></inline-formula> denoted <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e149" xlink:type="simple"/></inline-formula>. In computer science, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e150" xlink:type="simple"/></inline-formula> often means “match anything”, hence the notation <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e151" xlink:type="simple"/></inline-formula> can be read as strings of any length <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e152" xlink:type="simple"/></inline-formula>.) Lists can be constructed from sets by the functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e153" xlink:type="simple"/></inline-formula>, as indicated in the example diagram<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e498" xlink:type="simple"/><label>(4)</label></disp-formula>where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e154" xlink:type="simple"/></inline-formula> is the object part of <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e155" xlink:type="simple"/></inline-formula> (i.e., <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e156" xlink:type="simple"/></inline-formula>) and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e157" xlink:type="simple"/></inline-formula> is the morphism part (i.e., <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e158" xlink:type="simple"/></inline-formula>), so that, e.g., <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e159" xlink:type="simple"/></inline-formula> (i.e., morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e160" xlink:type="simple"/></inline-formula> is mapped to monoid homomorphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e161" xlink:type="simple"/></inline-formula>, which we will refer to as <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e162" xlink:type="simple"/></inline-formula>). (For simplicity, we have omitted composition with a second morphism in each of the categories and functor mappings, as was shown in Diagram 3.) So, for example, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e163" xlink:type="simple"/></inline-formula>. The examples pertaining to lists were adapted from <xref ref-type="bibr" rid="pcbi.1000858-Pierce1">[28]</xref> (Chapter 2), where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e164" xlink:type="simple"/></inline-formula> in <xref ref-type="bibr" rid="pcbi.1000858-Pierce1">[28]</xref> corresponds to our <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e165" xlink:type="simple"/></inline-formula>. We choose to label the object component of the functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e166" xlink:type="simple"/></inline-formula> rather than <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e167" xlink:type="simple"/></inline-formula> to emphasize the fact that the functor constructs a set of lists of numbers from a set of numbers, not just a single list containing those numbers.</p>
<p>The two different sorts of arrows in Diagrams 3 and 4 highlight the constructive nature of functors. The objects are (co)domains with respect to the morphisms within categories, but are themselves elements of larger objects (in general, the class <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e168" xlink:type="simple"/></inline-formula>) with respect to the morphisms between categories. In programmer parlance, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e169" xlink:type="simple"/></inline-formula> was “lifted” from being a function over numbers to become a function <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e170" xlink:type="simple"/></inline-formula> over lists of numbers. In this way, functors provide a means for constructing new representations and processes from existing ones in a structurally consistent manner.</p>
<p>Notice that the definition of functor does not dictate a particular choice for monoid homomorphism as part of the definition of <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e171" xlink:type="simple"/></inline-formula>. A natural choice is to define <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e172" xlink:type="simple"/></inline-formula> so that functions applied to one-item lists result in one-item lists (i.e., <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e173" xlink:type="simple"/></inline-formula>). Another choice that turns out to also respect the definition of a functor includes <italic>two</italic> copies of each transformed element (i.e., <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e174" xlink:type="simple"/></inline-formula>). In this case,<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e175" xlink:type="simple"/></disp-formula>So, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e176" xlink:type="simple"/></inline-formula> and in particular <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e177" xlink:type="simple"/></inline-formula> are monoid homomorphisms. In fact, there are many possible monoid homomorphisms that could be chosen to define this functor. Consequently, in the case of an architectural component of a cognitive system, there are many possible ways of constructing structurally consistent representations and processes from existing ones. We need to find a principled way to choose the “right” monoid homomorphism. In the context of explaining systematicity, a similarly principled choice is necessary. To narrow the choice down to a particular monoid homomorphisms, and hence a particular representational scheme, we need two additional category theory concepts: natural transformation and adjunction.</p>
</sec><sec id="s2e">
<title>Natural transformation</title>
<p>A <italic>natural transformation</italic> <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e178" xlink:type="simple"/></inline-formula> is a structure-preserving morphism from domain functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e179" xlink:type="simple"/></inline-formula> to codomain functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e180" xlink:type="simple"/></inline-formula> that consists of <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e181" xlink:type="simple"/></inline-formula> <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e182" xlink:type="simple"/></inline-formula> for each object <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e183" xlink:type="simple"/></inline-formula> in <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e184" xlink:type="simple"/></inline-formula>, such that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e185" xlink:type="simple"/></inline-formula>, as indicated by the commutative diagram in the category <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e186" xlink:type="simple"/></inline-formula><disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e499" xlink:type="simple"/><label>(5)</label></disp-formula></p>
<p>Again for expository purposes, we include the source category and functor arrows, which are usually left implicit in such diagrams. When a transformation is natural in the technical sense it seems natural in the intuitive sense, for mathematicians. In fact, category theory was founded in an attempt to formalize such intuitions <xref ref-type="bibr" rid="pcbi.1000858-Eilenberg1">[24]</xref>. We will return to this point about naturality, in the <xref ref-type="sec" rid="s4">Discussion</xref>, as it pertains to an explanation of systematicity without reliance on <italic>ad hoc</italic> assumptions.</p>
<p>A natural transformation is a <italic>natural isomorphism</italic>, or <italic>natural equivalence</italic> if and only if each <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e187" xlink:type="simple"/></inline-formula> is an isomorphism. That is, for each <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e188" xlink:type="simple"/></inline-formula> there exists a <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e189" xlink:type="simple"/></inline-formula> such that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e190" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e191" xlink:type="simple"/></inline-formula>. Natural transformations also compose, and the composition of two natural transformations is also a natural transformation. Just as there are identity morphisms mapping objects to themselves, and identity functors mapping categories to themselves, there are also identity natural transformations, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e192" xlink:type="simple"/></inline-formula>, mapping functors to themselves. And, so, the composition of a natural isomorphism (isomorphic natural transformation), <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e193" xlink:type="simple"/></inline-formula>, with its inverse, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e194" xlink:type="simple"/></inline-formula>, is an identity natural transformation, i.e., <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e195" xlink:type="simple"/></inline-formula>.</p>
<p>Functors preserve structure between categories; natural transformations identify the similarities between functors. For our purposes, functors construct new representations and processes from existing ones; natural transformations identify the similarities between constructions. A simple example that is closely related to the <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e196" xlink:type="simple"/></inline-formula> functor example, illustrating this perspective, involves list reversal as indicated by the commutative diagram<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e500" xlink:type="simple"/><label>(6)</label></disp-formula>where the domain and codomain objects of each morphism are sets of lists, such as <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e197" xlink:type="simple"/></inline-formula>; and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e198" xlink:type="simple"/></inline-formula> is essentially <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e199" xlink:type="simple"/></inline-formula> with (co)domain the set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e200" xlink:type="simple"/></inline-formula> instead of the monoid <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e201" xlink:type="simple"/></inline-formula>. As the diagram illustrates, squaring a reversed list is the same as reversing a squared list. So, there is a non-trivial (i.e. non-identity) relationship between the list monoid construction functor (<inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e202" xlink:type="simple"/></inline-formula>) and itself. The functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e203" xlink:type="simple"/></inline-formula> constructing the lists in Diagram 6 is closely related to <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e204" xlink:type="simple"/></inline-formula> in that the returned object <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e205" xlink:type="simple"/></inline-formula> is just the underlying set of the monoid <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e206" xlink:type="simple"/></inline-formula>, forgetting the binary operation <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e207" xlink:type="simple"/></inline-formula> and the identity element. The underlying set can also be extracted by a functor from the category <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e208" xlink:type="simple"/></inline-formula>, as we will see in the next section. This example shows how two ways of constructing individual lists, via the <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e209" xlink:type="simple"/></inline-formula> functor, are related by the list reversal natural transformation, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e210" xlink:type="simple"/></inline-formula>.</p>
<p>Although their associated diagrams look similar, there is an important difference between functor and natural transformation pertaining to the equality constraint that defines the relationships between object elements. For a functor, the equality constraint is local to the codomain of the transformation, i.e. the relationships between object elements within the constructed category. And so, the elements of the objects in the new category are only indirectly related to the elements in the corresponding objects of the source category by the categories' common external structure (i.e. inter-object relationships). For a natural transformation, the equality constraint spans the transformation, involving object elements mapped by both domain and codomain functors. And so, the two functors are directly related to each other by the internal structure of their associated objects (i.e. the relationships between object elements within an object). As part of a theory of cognitive architecture, there is a tension between the freedom afforded by functorial construction on the one hand—allowing an architecture to transcend the specific details of the source elements to realize a variety of possible representational schemes for those elements—and the need to pin down such possibilities to specific referents on the other. This tension is resolved with adjunctions.</p>
</sec><sec id="s2f">
<title>Adjunction</title>
<p>An <italic>adjunction</italic> consists of a pair of functors <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e211" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e212" xlink:type="simple"/></inline-formula> and a natural transformation <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e213" xlink:type="simple"/></inline-formula>, such that for every <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e214" xlink:type="simple"/></inline-formula> <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e215" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e216" xlink:type="simple"/></inline-formula> <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e217" xlink:type="simple"/></inline-formula> there exists a <italic>unique</italic> <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e218" xlink:type="simple"/></inline-formula> <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e219" xlink:type="simple"/></inline-formula>, such that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e220" xlink:type="simple"/></inline-formula>, indicated by the following commutative diagram:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e501" xlink:type="simple"/><label>(7)</label></disp-formula>where the functors are implicitly identified by (co)domain categories <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e221" xlink:type="simple"/></inline-formula> (left subdiagram) and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e222" xlink:type="simple"/></inline-formula> (right subdiagram). The two functors are called an <italic>adjoint pair</italic>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e223" xlink:type="simple"/></inline-formula>, where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e224" xlink:type="simple"/></inline-formula> is the <italic>left adjoint</italic> of <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e225" xlink:type="simple"/></inline-formula>, and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e226" xlink:type="simple"/></inline-formula> is the <italic>right adjoint</italic> of <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e227" xlink:type="simple"/></inline-formula>; and natural transformation <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e228" xlink:type="simple"/></inline-formula> is called the <italic>unit</italic> of the adjunction.</p>
<p>The left and right functors of an adjoint pair are like “inverses” of each other, but unlike an isomorphic functor whose composition with its inverse sends all objects and morphisms to themselves, the returned objects and their elements of a composition of left and right adjoints are related to the argument (source) objects and their elements by a natural transformation. For categories <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e229" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e230" xlink:type="simple"/></inline-formula>, the adjoint pair <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e231" xlink:type="simple"/></inline-formula>, consisting of functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e232" xlink:type="simple"/></inline-formula> that constructs the <italic>free monoid</italic> <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e233" xlink:type="simple"/></inline-formula> on the set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e234" xlink:type="simple"/></inline-formula>, and then “forgetful” functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e235" xlink:type="simple"/></inline-formula> returns the underlying set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e236" xlink:type="simple"/></inline-formula> of monoid <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e237" xlink:type="simple"/></inline-formula>, are related by an injection. The injection is called an <italic>insertion of generators</italic>, whose component at <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e238" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e239" xlink:type="simple"/></inline-formula>, sends each element of <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e240" xlink:type="simple"/></inline-formula> to the corresponding element (one-item list) in <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e241" xlink:type="simple"/></inline-formula>. The elements <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e242" xlink:type="simple"/></inline-formula> together generate the set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e243" xlink:type="simple"/></inline-formula> (i.e. <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e244" xlink:type="simple"/></inline-formula> is the alphabet from which the set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e245" xlink:type="simple"/></inline-formula> of all “words” is constructed where each <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e246" xlink:type="simple"/></inline-formula> is mapped to <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e247" xlink:type="simple"/></inline-formula>). In this context, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e248" xlink:type="simple"/></inline-formula> is the unit of this adjoint pair.</p>
<p>The effect of <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e249" xlink:type="simple"/></inline-formula> on objects has just been given; the effect on morphisms is as follows: if <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e250" xlink:type="simple"/></inline-formula> is a function, then <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e251" xlink:type="simple"/></inline-formula> is defined as follows:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e252" xlink:type="simple"/></disp-formula><disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e253" xlink:type="simple"/></disp-formula>(cf. <xref ref-type="bibr" rid="pcbi.1000858-Arbib1">[25]</xref>, p.111–112). Note that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e254" xlink:type="simple"/></inline-formula> is the functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e255" xlink:type="simple"/></inline-formula> defined in the Functors section.</p>
<p>Monoid <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e256" xlink:type="simple"/></inline-formula> is “free” in the informal sense that there are no missing or extra bits in the construction used to satisfy commutativity. The precise definition of <italic>free</italic> is as follows. Given the forgetful functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e257" xlink:type="simple"/></inline-formula>, and an object <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e258" xlink:type="simple"/></inline-formula> of <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e259" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e260" xlink:type="simple"/></inline-formula> is free on <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e261" xlink:type="simple"/></inline-formula> if there is a morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e262" xlink:type="simple"/></inline-formula> such that for any morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e263" xlink:type="simple"/></inline-formula>, there exists a unique morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e264" xlink:type="simple"/></inline-formula> such that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e265" xlink:type="simple"/></inline-formula>, indicated in the following commutative diagram:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e502" xlink:type="simple"/><label>(8)</label></disp-formula></p>
<p>However, not just any monoid generated from a set is a free monoid. For instance, the monoid <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e266" xlink:type="simple"/></inline-formula> (i.e. addition modulo 2) in the diagram<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e503" xlink:type="simple"/><label>(9)</label></disp-formula>is not the free monoid on any set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e267" xlink:type="simple"/></inline-formula>, because the only homomorphism, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e268" xlink:type="simple"/></inline-formula>, maps 0 and 1 to <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e269" xlink:type="simple"/></inline-formula>, which does not make the diagram commute for <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e270" xlink:type="simple"/></inline-formula>. That is, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e271" xlink:type="simple"/></inline-formula>. (It is easy to show that the free monoid on the empty set is <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e272" xlink:type="simple"/></inline-formula>. So <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e273" xlink:type="simple"/></inline-formula> is not the free monoid on the empty set, either.) Other free objects, such as the <italic>free group</italic> on a set are defined analogously (see <xref ref-type="bibr" rid="pcbi.1000858-Awodey1">[21]</xref>). A simple example of a free monoid as may be employed by a cognitive system is a primitive form of counting, where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e274" xlink:type="simple"/></inline-formula> is the free monoid counter, having elements <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e275" xlink:type="simple"/></inline-formula>, on singleton set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e276" xlink:type="simple"/></inline-formula>. This monoid is isomorphic to addition over the natural numbers, i.e. the monoid <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e277" xlink:type="simple"/></inline-formula>.</p>
<p>From free objects we get an alternative (equivalent) definition of adjunction: consider functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e278" xlink:type="simple"/></inline-formula> from the original definition. If for every object <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e279" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e280" xlink:type="simple"/></inline-formula> is <italic>free</italic> on <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e281" xlink:type="simple"/></inline-formula> with morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e282" xlink:type="simple"/></inline-formula>, then functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e283" xlink:type="simple"/></inline-formula>, with morphism mappings defined so that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e284" xlink:type="simple"/></inline-formula>, is the left adjoint of <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e285" xlink:type="simple"/></inline-formula>, and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e286" xlink:type="simple"/></inline-formula> is the right adjoint of <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e287" xlink:type="simple"/></inline-formula> <xref ref-type="bibr" rid="pcbi.1000858-Walters1">[31]</xref>.</p>
<p>Yet another (equivalent) definition of adjunction, favoured by category theorists for its conceptual elegance, highlights the symmetry between a pair of adjoint functors: a bijection (one-to-one correspondence) between the set of morphisms from object <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e288" xlink:type="simple"/></inline-formula> to <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e289" xlink:type="simple"/></inline-formula> in category <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e290" xlink:type="simple"/></inline-formula> and the set of morphisms from object <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e291" xlink:type="simple"/></inline-formula> to <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e292" xlink:type="simple"/></inline-formula> in category <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e293" xlink:type="simple"/></inline-formula>. So, identifying the unique morphism in one category means that it is associated with one and only one morphism in the other category.</p>
<p>In the list construction example, the unit of the adjunction is the injection <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e294" xlink:type="simple"/></inline-formula> sending each element <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e295" xlink:type="simple"/></inline-formula> in the set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e296" xlink:type="simple"/></inline-formula> to the one-item list <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e297" xlink:type="simple"/></inline-formula> in the set of all lists <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e298" xlink:type="simple"/></inline-formula> constructed from <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e299" xlink:type="simple"/></inline-formula>, as shown in the following diagram:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e504" xlink:type="simple"/><label>(10)</label></disp-formula>where the left adjoint, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e300" xlink:type="simple"/></inline-formula>, constructs the <italic>free</italic> monoid <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e301" xlink:type="simple"/></inline-formula> on the set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e302" xlink:type="simple"/></inline-formula>; and the right adjoint, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e303" xlink:type="simple"/></inline-formula>, returns the underlying set, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e304" xlink:type="simple"/></inline-formula>, of a list monoid, as mentioned earlier. In this way, given <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e305" xlink:type="simple"/></inline-formula>, the only homomorphism in the constructed category making the diagram commute is <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e306" xlink:type="simple"/></inline-formula>. The definition for arrow <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e307" xlink:type="simple"/></inline-formula> is essentially the same as <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e308" xlink:type="simple"/></inline-formula>, except that its (co)domain is a set, not a monoid. Other monoid homomorphisms that could have been chosen as part of the <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e309" xlink:type="simple"/></inline-formula> functor definition, such as <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e310" xlink:type="simple"/></inline-formula>, are excluded by <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e311" xlink:type="simple"/></inline-formula> and the commutativity property of the adjunction, because <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e312" xlink:type="simple"/></inline-formula>.</p>
<p>Since this arrangement works for any morphism in <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e313" xlink:type="simple"/></inline-formula>, it can also be used to define a particular list length function from a family of analogous “length” functions as indicated in the following commutative diagram:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e505" xlink:type="simple"/><label>(11)</label></disp-formula>where monoid <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e314" xlink:type="simple"/></inline-formula> is the set of non-negative integers with addition as the operator and 0 as the identity element; <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e315" xlink:type="simple"/></inline-formula> is a constant function sending every element to the number 1; and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e316" xlink:type="simple"/></inline-formula>/<inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e317" xlink:type="simple"/></inline-formula> are functions returning the number of items in a list. As in the previous example, the definition of functor affords other choices for “length”, such as <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e318" xlink:type="simple"/></inline-formula>, where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e319" xlink:type="simple"/></inline-formula> is a list. This arrow is also a monoid homomorphism, since <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e320" xlink:type="simple"/></inline-formula>, where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e321" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e322" xlink:type="simple"/></inline-formula> are the lengths of lists <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e323" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e324" xlink:type="simple"/></inline-formula>, respectively. Again, however, the morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e325" xlink:type="simple"/></inline-formula> and the commutativity property force the usual choice for length function (i.e. <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e326" xlink:type="simple"/></inline-formula>), and excludes others such as <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e327" xlink:type="simple"/></inline-formula>, because <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e328" xlink:type="simple"/></inline-formula>.</p>
<p>A general pattern emerges from this use of adjunction. Functor construction may afford multiple choices for particular morphisms (processes) in the constructed category, but a principled choice is obtained through the commutativity property of the adjunction. This arrangement means that we are not committed <italic>a priori</italic> to a particular representational scheme; i.e., we do not have to make an <italic>ad hoc</italic> assumption about what that representational format should be. Given that an architecture has the capacity for an instance of the group of computations under consideration, then necessarily it applies to all other computations in that group. In the case of list length, for example, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e329" xlink:type="simple"/></inline-formula> may indeed be the “correct” choice when we require the length of a list of characters in number of bytes for characters that are 2-byte unicodes (i.e. the characters appearing in the extended set that includes other special symbols and language scripts requiring two bytes for unique identification). So, to paraphrase, a computational architecture with the capacity to count the length (in bytes) of some lists of 2-byte unicodes necessarily has the capacity to compute byte lengths for all other unicode lists. In this way, the explanation for the “systematicity of list length” has two parts: existence is afforded by the possible list length functions; and uniqueness is afforded by the commutativity property of the adjunction. Without the adjunction, the choice of construction is by <italic>ad hoc</italic> assumption. Our explanation for the systematicity of human cognition follows this pattern.</p>
</sec></sec><sec id="s3">
<title>Results</title>
<p>With these formal concepts in hand, we now proceed to our explanation of systematicity. We apply our explanation in two domains: systematicity with respect to relational propositions, and systematicity with respect to relational schemas. Then, we contrast our explanation with the Classical and Connectionist ones.</p>
<sec id="s3a">
<title>Systematicity of relational propositions: (<italic>diagonal</italic>, <italic>product</italic>) adjoint</title>
<p>For expository purposes, we develop our adjoint functors explanation from its components. One may wonder whether a simpler category theory construct would suffice to explain systematicity. For this example domain, the components of this adjoint have some systematicity properties, but in and of themselves do not explain systematicity—just as for Classicism and Connectionism, having a property is not the same as explaining it. This bottom-up approach motivates the more complex category theory construct from which the systematicity properties necessarily follow. Our approach has three steps. <italic>First</italic>, we show a categorical product that has the systematicity of representation and systematicity of inference properties. However, a product of two objects may afford many isomorphic product objects that do not also have the compositionality of representation property. <italic>Second</italic>, we show that the product functor provides the principled means for constructing only those products that also have the compositionality of representation property. There may, however, be several products that have the compositionality property, but which differ in semantic content by having different orders between identical sets of constituents. So, a principled choice is needed to determine <italic>the</italic> product. So, <italic>third</italic>, we show that the diagonal functor, which is left adjoint to the product functor, provides that principled choice by the commutativity property of the (diagonal, product) adjoint functor pair. For concreteness, we refer to the category <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e330" xlink:type="simple"/></inline-formula>, but our explanation does not depend on this category.</p>
<p>(If we require an explanation of systematicity with respect to ternary relational propositions, then a ternary product <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e331" xlink:type="simple"/></inline-formula> is employed. The explanation for systematicity extends analogously, where the diagonal and product functors involve object triples. We may also need to explicitly represent a symbol for a relation, such as Loves. In this case, an object representing the relation symbol is paired with the product object representing the related entities. We address this situation in the next section. For present purposes, we omit relation symbols, since the relation is constant across the instances considered here and nothing essentially changes by its omission.</p>
<p>First, suppose objects <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e332" xlink:type="simple"/></inline-formula> (say, agents) and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e333" xlink:type="simple"/></inline-formula> (patients) are sets containing representations of <monospace>John</monospace> and <monospace>Mary</monospace>, denoted as <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e334" xlink:type="simple"/></inline-formula>. Although <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e335" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e336" xlink:type="simple"/></inline-formula> are the same set of members, we maintain distinct names to keep track of the distinction between member pairs. (The assignment of elements to objects is itself an assumption, but not an <italic>ad hoc</italic> one for our theory, as explained in the next section and in the <xref ref-type="sec" rid="s4">Discussion</xref>.) A categorical product of these two sets is the Cartesian product of <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e337" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e338" xlink:type="simple"/></inline-formula>, which is the set of all pairwise combinations of elements from <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e339" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e340" xlink:type="simple"/></inline-formula>, together with projections <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e341" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e342" xlink:type="simple"/></inline-formula> for retrieving the first and second constituents in each case. That is, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e343" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e344" xlink:type="simple"/></inline-formula>, and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e345" xlink:type="simple"/></inline-formula>. By definition, the Cartesian product <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e346" xlink:type="simple"/></inline-formula> generates all pairwise combinations of elements from <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e347" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e348" xlink:type="simple"/></inline-formula>, therefore this Cartesian product has the systematicity of representation property. Moreover, by definition, the categorical product <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e349" xlink:type="simple"/></inline-formula> affords the retrieval of each constituent from each representation (otherwise it is not a product), therefore the categorical product also has the systematicity of inference property. In this case, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e350" xlink:type="simple"/></inline-formula> from the categorical product definition takes the role of input, so in terms of Diagram 2 inferring <monospace>John</monospace> as the lover from <monospace>John loves Mary</monospace> is just <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e351" xlink:type="simple"/></inline-formula>, where <monospace>JM</monospace> is the input and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e352" xlink:type="simple"/></inline-formula> is the input-to-product object map, whose unique existence is guaranteed by definition.</p>
<p>The Cartesian product, however, is not the only product object that satisfies the definition of a categorical product of <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e353" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e354" xlink:type="simple"/></inline-formula>. An alternative product has <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e355" xlink:type="simple"/></inline-formula> as the product object, and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e356" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e357" xlink:type="simple"/></inline-formula> as the projections. Indeed, for this example, any four-item set together with the appropriate projections for retrieving the constituents would suffice. However, these alternatives do not have the compositionality of representation property: the semantic contents of these representations, whatever they may be, are not systematically related to each other, or the semantic content of <monospace>John</monospace>, or <monospace>Mary</monospace>. Hence, categorical products, in themselves, do not necessarily provide an explanation of systematicity.</p>
<p>Second, for any category <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e358" xlink:type="simple"/></inline-formula> that has products (i.e. every pair of objects in <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e359" xlink:type="simple"/></inline-formula> has a product), one can define a product functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e360" xlink:type="simple"/></inline-formula> (or, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e361" xlink:type="simple"/></inline-formula>, in the ternary case), that is from the Cartesian product of categories, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e362" xlink:type="simple"/></inline-formula>, itself a category, to <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e363" xlink:type="simple"/></inline-formula>, where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e364" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e365" xlink:type="simple"/></inline-formula>, as indicated by the following diagram:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e506" xlink:type="simple"/><label>(12)</label></disp-formula>recalling that our functor diagrams explicitly identify the object component, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e366" xlink:type="simple"/></inline-formula>, but not the morphism component, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e367" xlink:type="simple"/></inline-formula>, of the functor. In this case, the semantic contents of these elements are systematically related to each other and their constituents <monospace>John</monospace> and <monospace>Mary</monospace>. This categorical construction is an instance of Classical compositionality, whereby the constituents <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e368" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e369" xlink:type="simple"/></inline-formula> are tokened wherever the compositions <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e370" xlink:type="simple"/></inline-formula> are tokened. As such, it has the compositionality of representation property.</p>
<p>Although the product functor has the compositionality of representation property, it introduces a different problem: <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e371" xlink:type="simple"/></inline-formula>, where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e372" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e373" xlink:type="simple"/></inline-formula> is also a valid product, but the semantic content of <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e374" xlink:type="simple"/></inline-formula> is not the same as <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e375" xlink:type="simple"/></inline-formula>. That is because they have different order relationships between their constituents even though the corresponding constituents are identical. Thus, a principled choice is required to determine whether, for example, <monospace>John loves Mary</monospace> should map to (<monospace>John</monospace>, <monospace>Mary</monospace>), or (<monospace>Mary</monospace>, <monospace>John</monospace>). Otherwise, one can define an architecture that does not have the systematicity of inference property by employing both products to correctly infer <monospace>John</monospace>as the lover in <monospace>John loves Mary</monospace> via <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e376" xlink:type="simple"/></inline-formula>, yet incorrectly infer <monospace>John</monospace> as the lover in <monospace>Mary loves John</monospace> via <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e377" xlink:type="simple"/></inline-formula>, where position within the product triple identifies the relevant projection. The assumption that architectures employ only the first product is <italic>ad hoc</italic> just like the assumption that Classical architectures employ grammars such as G1, but not G2. So, a principled choice is needed to determine <italic>the</italic> product.</p>
<p>Third—final step, this problem brings us to the second aspect of our explanation foreshadowed in the <xref ref-type="sec" rid="s1">Introduction</xref> (i.e. uniqueness). Again, as we saw with lists, a particular construction is specified through the left adjoint functor. The left adjoint to the product functor is the <italic>diagonal</italic> functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e378" xlink:type="simple"/></inline-formula> (or, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e379" xlink:type="simple"/></inline-formula>, in the ternary case), where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e380" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e381" xlink:type="simple"/></inline-formula> as indicated by the following diagram:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e507" xlink:type="simple"/><label>(13)</label></disp-formula></p>
<p>The (diagonal, product) adjoint pair is indicated by the following commutative diagram:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e508" xlink:type="simple"/><label>(14)</label></disp-formula>(see <xref ref-type="bibr" rid="pcbi.1000858-Pierce1">[28]</xref> Example 2.4.6). In this manner, the <monospace>John loves Mary</monospace> family of cognitive capacities is specified by the commutative diagram<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e509" xlink:type="simple"/><label>(15)</label></disp-formula>where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e382" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e383" xlink:type="simple"/></inline-formula> are the <italic>agent</italic> and <italic>patient</italic> maps from the set of proposition inputs <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e384" xlink:type="simple"/></inline-formula> into the set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e385" xlink:type="simple"/></inline-formula> containing all the possible constituent representations. Here, we explicitly consider the case of equality, so that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e386" xlink:type="simple"/></inline-formula>. When <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e387" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e388" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e389" xlink:type="simple"/></inline-formula> have different codomains, since <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e390" xlink:type="simple"/></inline-formula>, so the conflict between these products does not come into play, therefore the adjunction is not required and the product functor is sufficient. With the understanding that sets <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e391" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e392" xlink:type="simple"/></inline-formula> are equal, we maintain the notational distinction for clarity in the subsequent text. Given <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e393" xlink:type="simple"/></inline-formula> as the morphism used by the architecture to map proposition inputs to their corresponding internal representations, then the definition of an adjunction guarantees that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e394" xlink:type="simple"/></inline-formula> is unique with respect to making Diagram 15 commute via <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e395" xlink:type="simple"/></inline-formula>. That is, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e396" xlink:type="simple"/></inline-formula>, where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e397" xlink:type="simple"/></inline-formula> is the input for proposition <monospace>John loves Mary</monospace>. The alternative construction <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e398" xlink:type="simple"/></inline-formula> is excluded because <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e399" xlink:type="simple"/></inline-formula>. Having excluded <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e400" xlink:type="simple"/></inline-formula> by the commutativity property of the adjunction, the only two remaining ways to map the other inputs (i.e. <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e401" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e402" xlink:type="simple"/></inline-formula>) are equal. So, given that the architecture can represent <monospace>John loves Mary</monospace> as <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e403" xlink:type="simple"/></inline-formula> via <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e404" xlink:type="simple"/></inline-formula> and infer <monospace>John</monospace> as the lover via <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e405" xlink:type="simple"/></inline-formula> from the product <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e406" xlink:type="simple"/></inline-formula>, then necessarily it can represent <monospace>Mary loves John</monospace> and infer <monospace>Mary</monospace> as the lover using the same morphisms. That is, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e407" xlink:type="simple"/></inline-formula>, or <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e408" xlink:type="simple"/></inline-formula>.</p>
<p>This explanation works regardless of whether proposition <monospace>John loves Mary</monospace> is represented as (<monospace>John</monospace>, <monospace>Mary</monospace>) via <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e409" xlink:type="simple"/></inline-formula>, or (<monospace>Mary</monospace>, <monospace>John</monospace>) via <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e410" xlink:type="simple"/></inline-formula>. In the latter case, the adjunction picks out just the construction <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e411" xlink:type="simple"/></inline-formula>, and hence <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e412" xlink:type="simple"/></inline-formula>, because it is the one and only one that makes the following diagram commute:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e510" xlink:type="simple"/><label>(16)</label></disp-formula></p>
<p>That is, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e413" xlink:type="simple"/></inline-formula>,but <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e414" xlink:type="simple"/></inline-formula>. Given that the architecture can represent <monospace>John loves Mary</monospace> as <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e415" xlink:type="simple"/></inline-formula> via <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e416" xlink:type="simple"/></inline-formula> and infer <monospace>John</monospace> as the lover via <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e417" xlink:type="simple"/></inline-formula> from the product <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e418" xlink:type="simple"/></inline-formula>, then necessarily it can do so for <monospace>Mary loves John</monospace> using the same morphisms. That is, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e419" xlink:type="simple"/></inline-formula>, or <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e420" xlink:type="simple"/></inline-formula>.</p>
</sec><sec id="s3b">
<title>Explicit (multiple) relational propositions</title>
<p>If we need to explicitly represent a symbol for a relation, such as <monospace>Loves</monospace>, the product object is paired with an object, say <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e421" xlink:type="simple"/></inline-formula>, representing the context in which the entities are related. The object representing the relation in this case is <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e422" xlink:type="simple"/></inline-formula>. This situation may arise where we need an explanation for systematicity that involves multiple similar relations, e.g., <italic>loves</italic>, <italic>likes</italic>, <italic>dislikes</italic>, and <italic>hates</italic>, where the capacity for instances of each of these relationships is co-extensive. That is, if one can represent <monospace>John loves Mary</monospace> <italic>and</italic> <monospace>John likes Mary</monospace>, then one can also represent the other six combinations, such as <monospace>Mary loves John</monospace> and <monospace>Mary likes John</monospace>. If one can represent <monospace>John loves Mary</monospace>, but not <monospace>John likes Mary</monospace>, then one can represent <monospace>Mary loves John</monospace>, but not <monospace>Mary likes John</monospace>. In this case, there is a category <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e423" xlink:type="simple"/></inline-formula> of relation symbols whose objects, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e424" xlink:type="simple"/></inline-formula>, are symbols referring to each relation (e.g., <italic>loves</italic>, <italic>likes</italic>, etc.), and whose morphisms, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e425" xlink:type="simple"/></inline-formula>, are just the identity morphisms for each object. (Such a category is called a <italic>discrete</italic> category.) Each relation, in this case, is a pair <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e426" xlink:type="simple"/></inline-formula>. Hence, the capacity to represent instances of the <italic>loves</italic> and <italic>likes</italic> relations extends to the other instances for both relations.</p>
<p>For these situations, the diagonal and product functors have extensions. The extension to the diagonal functor is: <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e427" xlink:type="simple"/></inline-formula>, such that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e428" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e429" xlink:type="simple"/></inline-formula>. The product functor is: <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e430" xlink:type="simple"/></inline-formula>, such that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e431" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e432" xlink:type="simple"/></inline-formula>. The adjunction, which is an extension of the one shown in Diagram 15, is shown in the following commutative diagram:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e511" xlink:type="simple"/><label>(17)</label></disp-formula></p>
<p>In this situation, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e433" xlink:type="simple"/></inline-formula> provides the explicit context in which entities are related.</p>
<p>Under the assumption that these relation symbols belong to a different category, then cases such as <monospace>loves loves loves</monospace> cannot be generated. Note that supposing different objects for these entities is not an <italic>ad hoc</italic> assumption for our theory. <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e434" xlink:type="simple"/></inline-formula> does not contain members such as <monospace>John</monospace> or <monospace>Mary</monospace>, and likewise <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e435" xlink:type="simple"/></inline-formula> (or, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e436" xlink:type="simple"/></inline-formula>) does not contain relation symbols, because they refer to different types of entities with respect to the theory—<monospace>Loves</monospace> refers to a relation, which is at the level of objects in our theory, whereas <monospace>John</monospace> and <monospace>Mary</monospace> refer to entities in a relationship, which are members of objects.</p>
</sec><sec id="s3c">
<title>Summary</title>
<p>In summary, products may have the systematicity of representation and inference properties (see also <xref ref-type="sec" rid="s4">Discussion</xref>), but may not have the compositionality of representation property. Product functors construct products that have the compositionality property, but there may be more than one product with this property. The possible presence of multiple products requires a principled choice for fixing <italic>the</italic> product. That choice is provided by the (diagonal, product) adjoint functor pair. Importantly, the unit of the adjunction, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e437" xlink:type="simple"/></inline-formula>, is not a free parameter of the explanation, it defines the specific adjunction in part; and there is no choice in representational format (i.e. left-right, or right-left constituent order)—the given capacity to represent a proposition fixes the same order for all the other propositions. The same situation also applies for the explicit (multiple) relational propositions domain. Hence, systematicity is a necessary consequence of this (extended) adjoint pair without recourse to <italic>ad hoc</italic> assumptions, and so meets the explanatory standard set by Aizawa <xref ref-type="bibr" rid="pcbi.1000858-Aizawa1">[2]</xref>, and Fodor and Pylyshyn <xref ref-type="bibr" rid="pcbi.1000858-Fodor1">[1]</xref>, for this domain.</p>
</sec><sec id="s3d">
<title>Systematicity of relational schemas: (<italic>free</italic>, <italic>forgetful</italic>) adjoint</title>
<p>Another domain in which humans exhibit systematicity is relational schema induction. This domain is more complex than the previous one in that the intrinsic connection is between relations, rather than within one. In the relational schema induction paradigm <xref ref-type="bibr" rid="pcbi.1000858-Halford2">[32]</xref>, participants are required to do cue-response prediction over a set of stimuli, such as letters and shapes, whose relationships conform to a group-like structure. For example, participants are shown (trigram, shape) pairs generated from a set of four trigrams (e.g., NEJ, POB, KEF, BEJ) and two shapes (e.g., square, circle), and are required to predict the response trigram, also from the same trigram set. Suppose, for example, a participant is presented with NEJ and square. After making a prediction, the correct response trigram is presented. This procedure is repeated with a new cue-response trial. The first two responses are not predictable prior to the feedback provided by the correct trigram. Hence, the first two trials are regarded as “information” trials. Each block of eight trials (i.e. all possible trigram-shape combinations) is repeatedly presented until a certain criterion level of correct performance is reached (e.g., correct responses to all eight trials in a block). Each set of eight cue-response pairs (i.e., four trigram times two shapes) constitutes a task instance. Once participants reach criterion a new task instance of eight cue-response pairs was randomly generated from a larger pool of possible trigrams and shapes (task instance examples are shown in <xref ref-type="table" rid="pcbi-1000858-t001">Tables 1</xref> and <xref ref-type="table" rid="pcbi-1000858-t002">2</xref>). The crucial data for this paradigm are the performances on subsequent task instances. When subsequent task instances conformed to the same structure, albeit with different stimuli, mean response error over the 48 participants was at or near optimal level: 2.00 errors per eight trials for the sequence of task instances conforming to the Klein group, and 2.67 for task instances conforming to the cyclic-4 group—two information trials are needed to determine the assignment of novel stimuli to structural elements <xref ref-type="bibr" rid="pcbi.1000858-Halford2">[32]</xref>. The results provide another example of systematicity of human cognition: given that a person can correctly do one task instance and the information trials from the new task instance, then necessarily they can predict trials of all others, with the usual provision for a distinction between competence and performance.</p>
<table-wrap id="pcbi-1000858-t001" position="float"><object-id pub-id-type="doi">10.1371/journal.pcbi.1000858.t001</object-id><label>Table 1</label><caption>
<title>First task instance.</title>
</caption><!--===== Grouping alternate versions of objects =====--><alternatives><graphic id="pcbi-1000858-t001-1" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.t001" xlink:type="simple"/><table><colgroup span="1"><col align="left" span="1"/><col align="center" span="1"/><col align="center" span="1"/><col align="center" span="1"/><col align="center" span="1"/></colgroup>
<tbody>
<tr>
<td align="left" colspan="1" rowspan="1"><italic>acts-on</italic></td>
<td align="left" colspan="1" rowspan="1">NEJ</td>
<td align="left" colspan="1" rowspan="1">POB</td>
<td align="left" colspan="1" rowspan="1">KEF</td>
<td align="left" colspan="1" rowspan="1">BEJ</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1">square</td>
<td align="left" colspan="1" rowspan="1">POB</td>
<td align="left" colspan="1" rowspan="1">NEJ</td>
<td align="left" colspan="1" rowspan="1">BEJ</td>
<td align="left" colspan="1" rowspan="1">KEF</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1">circle</td>
<td align="left" colspan="1" rowspan="1">BEJ</td>
<td align="left" colspan="1" rowspan="1">KEF</td>
<td align="left" colspan="1" rowspan="1">POB</td>
<td align="left" colspan="1" rowspan="1">NEJ</td>
</tr>
</tbody>
</table></alternatives></table-wrap><table-wrap id="pcbi-1000858-t002" position="float"><object-id pub-id-type="doi">10.1371/journal.pcbi.1000858.t002</object-id><label>Table 2</label><caption>
<title>Second task instance.</title>
</caption><!--===== Grouping alternate versions of objects =====--><alternatives><graphic id="pcbi-1000858-t002-2" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.t002" xlink:type="simple"/><table><colgroup span="1"><col align="left" span="1"/><col align="center" span="1"/><col align="center" span="1"/><col align="center" span="1"/><col align="center" span="1"/></colgroup>
<tbody>
<tr>
<td align="left" colspan="1" rowspan="1"><italic>acts-on</italic></td>
<td align="left" colspan="1" rowspan="1">GUD</td>
<td align="left" colspan="1" rowspan="1">QAD</td>
<td align="left" colspan="1" rowspan="1">JOQ</td>
<td align="left" colspan="1" rowspan="1">REZ</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1">cross</td>
<td align="left" colspan="1" rowspan="1">QAD</td>
<td align="left" colspan="1" rowspan="1">GUD</td>
<td align="left" colspan="1" rowspan="1">REZ</td>
<td align="left" colspan="1" rowspan="1">JOQ</td>
</tr>
<tr>
<td align="left" colspan="1" rowspan="1">triangle</td>
<td align="left" colspan="1" rowspan="1">REZ</td>
<td align="left" colspan="1" rowspan="1">JOQ</td>
<td align="left" colspan="1" rowspan="1">QAD</td>
<td align="left" colspan="1" rowspan="1">GUD</td>
</tr>
</tbody>
</table></alternatives></table-wrap>
<p>This task is modelled as the category of <italic>sets with actions</italic>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e438" xlink:type="simple"/></inline-formula> (cf. <xref ref-type="bibr" rid="pcbi.1000858-Arbib1">[25]</xref>, 6.3.1, and <xref ref-type="bibr" rid="pcbi.1000858-Wilson1">[33]</xref> Definition 5.2), that has objects <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e439" xlink:type="simple"/></inline-formula> for task instances, where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e440" xlink:type="simple"/></inline-formula> is a set of states indicated by trigrams, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e441" xlink:type="simple"/></inline-formula> is a set of “actions” indicated by shapes, and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e442" xlink:type="simple"/></inline-formula> specifies the action of a shape on a trigram resulting in a trigram. The morphisms <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e443" xlink:type="simple"/></inline-formula> in this category consist of pairs of maps <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e444" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e445" xlink:type="simple"/></inline-formula>, such that the following diagram commutes:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e512" xlink:type="simple"/><label>(18)</label></disp-formula>where the identity morphism <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e446" xlink:type="simple"/></inline-formula> is the pair of identity maps <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e447" xlink:type="simple"/></inline-formula>, and compositions are defined component-wise. In our example, the set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e448" xlink:type="simple"/></inline-formula> consists of four elements representing the four trigrams, and the set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e449" xlink:type="simple"/></inline-formula> consists of two elements representing the two shapes.</p>
<p>For the purpose of finding a suitable adjoint, we need to see how <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e450" xlink:type="simple"/></inline-formula> is naturally embedded in a monoid. Recall that a monoid <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e451" xlink:type="simple"/></inline-formula> consists of a set <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e452" xlink:type="simple"/></inline-formula> and a binary associative operator <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e453" xlink:type="simple"/></inline-formula> that satisfies closure: i.e., for all <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e454" xlink:type="simple"/></inline-formula>, whenever <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e455" xlink:type="simple"/></inline-formula> is defined, and there is an identity element <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e456" xlink:type="simple"/></inline-formula>, such that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e457" xlink:type="simple"/></inline-formula>. In terms of our ASets (i.e. objects in <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e458" xlink:type="simple"/></inline-formula>), the monoid identity corresponds to a “shape” whose action is to do nothing at all to the trigrams on which it acts: it leaves them unchanged. (However, this shape was not included in the experiments <xref ref-type="bibr" rid="pcbi.1000858-Halford2">[32]</xref>.)</p>
<p>The adjoint functor pair used for this domain consists of the <italic>forgetful</italic> functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e459" xlink:type="simple"/></inline-formula>, which returns the underlying sets, i.e. <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e460" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e461" xlink:type="simple"/></inline-formula>, and its left adjoint, the <italic>free</italic> functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e462" xlink:type="simple"/></inline-formula>, which constructs ASets. The (free, forgetful) adjoint is shown in the following commutative diagram:<disp-formula><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e513" xlink:type="simple"/><label>(19)</label></disp-formula>where <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e463" xlink:type="simple"/></inline-formula> and, for the instance of interest to us, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e464" xlink:type="simple"/></inline-formula> and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e465" xlink:type="simple"/></inline-formula> are the (trigram, shape) pairs of sets for the first and second tasks (respectively), as defined for example in <xref ref-type="table" rid="pcbi-1000858-t001">Tables 1</xref> and <xref ref-type="table" rid="pcbi-1000858-t002">2</xref> so that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e466" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e467" xlink:type="simple"/></inline-formula>, etc. Full details and a proof that <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e468" xlink:type="simple"/></inline-formula> is an adjoint functor pair are provided in <xref ref-type="supplementary-material" rid="pcbi.1000858.s001">Text S1</xref>.</p>
<p>Our explanation for systematicity in this domain follows the now familiar pattern, where monoids model the relationships between actions in each task instance. (Though our argument employs monoids, nothing essential changes if instead we use semigroups, or groups, where for example each task instance is extended with two additional shapes, one explicitly corresponding to the identity element, and the other to the remaining element in the Klein, or cyclic-4 group. For these cases, the proofs of adjointness can be extended to involve free semigroups and free groups, respectively.) Given an ASet modelling the first task instance and an ASet modelling the second task instance, there is more than one homomorphism from the first to the second, only some of which afford the correct responses to the stimuli in the second task instance. For example, one homomorphism has the following trigram and shape mappings: <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e469" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e470" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e471" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e472" xlink:type="simple"/></inline-formula>, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e473" xlink:type="simple"/></inline-formula>, and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e474" xlink:type="simple"/></inline-formula>. Basically, the &lt;1?show=[to]?&gt;first table collapses to a table with one row and two columns. It is straight forward to check that it is indeed a homomorphism, for example, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e475" xlink:type="simple"/></inline-formula>. However, this homomorphism does not yield the correct responses to some of the stimuli in the second task instance. For example, all predictions to trigrams <monospace>REZ</monospace> and <monospace>JOQ</monospace> are no longer possible. Thus, a principled choice is required to select only those homomorphisms that indeed result in models for the second task instance. That choice is determined by <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e476" xlink:type="simple"/></inline-formula> and the commutative property of the adjunction. That is, having obtained the first task instance, and given the two information trials of the second task instance that identify the correspondences between task stimuli, then there is one and only one homomorphism making the diagram commute, so that correct responses are obtained from the remaining trials of the second task instance. And so, systematicity is a necessary consequence of this adjunction.</p>
</sec><sec id="s3e">
<title>Explanatory levels: <italic>n</italic>-category theory</title>
<p>Some readers may be interested in developing alternatives, or extensions to existing theories to address the systematicity problem in light of our explanation, so it is worth formally characterizing how our approach differs from previous ones. The difference between our category theory explanation and Classical/Connectionist approaches to systematicity may be characterized as higher-order versus first-order theories. Category theory also provides a formal basis for this distinction in terms of more general <italic>n</italic>-category theory (see, e.g., <xref ref-type="bibr" rid="pcbi.1000858-Leinster1">[34]</xref>). Though the concerns of <italic>n</italic>-category theorists go way beyond what we need here, some elementary aspects of the theory are used to formalize the difference between why our adjoint functors explanation addresses the systematicity problem and why the Classical or Connectionist approach does not.</p>
<p>Notice that the definitions of functor and natural transformation are very similar to the definition of a morphism. In fact, functors and natural transformations are morphisms at different levels of analysis: a natural transformation is a morphism one level above functors as we shall see. For <italic>n</italic>-category theory, a category such as <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e477" xlink:type="simple"/></inline-formula> is a 1-category, with 0-objects (i.e. sets) for objects and 1-morphisms (i.e. functions) for arrows. A functor is a morphism between categories. The category of categories, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e478" xlink:type="simple"/></inline-formula>, has categories for objects and functors for arrows. Thus, a functor is a 2-morphism between 1-objects (i.e. 1-categories) in a 2-category. A natural transformation is a morphism between functors. The functor category, <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e479" xlink:type="simple"/></inline-formula> of functors from <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e480" xlink:type="simple"/></inline-formula> to <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e481" xlink:type="simple"/></inline-formula>, has functors for objects and natural transformations for arrows. Thus, a natural transformation is a 3-morphism between 2-objects (i.e. functors) in a 3-category. (A 0-category is just a <italic>discrete</italic> category, where the only arrows are identities, which are 0-morphisms.) In this way, the order <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e482" xlink:type="simple"/></inline-formula> of the category provides a formal notion of explanatory level.</p>
<p>Classical or Connectionist compositionality is essentially a lower-levels attempt to account for systematicity. For the examples we used, that level is perhaps best described in terms of a 1-category. Indeed, a context-free grammar defined by a graph is modelled as the <italic>free category</italic> on that graph containing sets of terminal and non-terminal symbols for objects and productions for morphisms <xref ref-type="bibr" rid="pcbi.1000858-Walters1">[31]</xref>. By contrast, our category theory explanation involves higher levels of analysis, specifically functors and natural transformations, which live in 2-categories and 3-categories, respectively. Of course, one can also develop higher-order grammars that take as input or return as output other grammars. Similarly, one can develop higher-order networks that take as input or return as output other networks (e.g., networks whose connectivity is dynamic, such as cascade correlation <xref ref-type="bibr" rid="pcbi.1000858-Fahlman1">[35]</xref>). However, the problem is that neither Classical nor Connectionist compositionality delineates those (higher-order) grammars or networks that have the systematicity property from those that do not. Likewise for our category theory explanation, not just any functor, nor just any natural transformation accounts for systematicity. If the explanation was left at either of these levels, then our approach would also succumb to the same problem that befalls Classicism and Connectionism—i.e. the problem of having to stipulate, <italic>ad hoc</italic>, just which functors or natural transformations account for the systematicity property. Rather, it is a natural transformation between an identity functor and a composition of two other functors (<inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e483" xlink:type="simple"/></inline-formula>) that defines the adjunction that accounts for systematicity relative to the particular domain of interest. In this formal sense, a crucial difference is that there is also a between-levels aspect to our explanation.</p>
</sec></sec><sec id="s4">
<title>Discussion</title>
<p>Our adjoints explanation of systematicity has essentially two parts: (1) existence, showing how a particular connection between cognitive capacities is possible from a functorial specification of the architecture; and (2) uniqueness, explaining why that particular connection is necessary because it is the one and only one that satisfies the commutativity property of the adjunction. In contrast, the Classical and Connectionist explanations only provide an account of existence, but not uniqueness. That is, some grammars/networks afford the required intrinsic links between capacities and some do not, just like some functorial constructions do and some do not; but, for Classicism or Connectionism, there is no further explanation determining only those grammars or networks yielding systematicity (other than by <italic>ad hoc</italic> assumption), whereas for the category theory explanation the adjunction specifies only the systematic functors. So, our explanation meets the explanatory standard laid out by Aizawa.</p>
<p>To be regarded as a theoretical explanation for systematicity, such an explanation should be potentially falsifiable. Our explanation could be challenged by an alternative theory that accounts for systematicity (without <italic>ad hoc</italic> assumptions) in a way that does not require, or implement an adjunction. This possibility would not falsify our explanation as such, but may provide an alternative theory that is preferred on other grounds. Alternatively, there may exist a domain in which humans exhibit systematicity but for which there does not exist a relevant adjunction. Hence, the category theory approach we have put forward is in principle falsifiable.</p>
<p>The unit of an adjunction is a natural transformation between functors. The sense in which a transformation is natural is that the transformation does not depend on a particular “basis”. A mathematician's example is to contrast the dual of a vector space with the, natural, double dual (dual of the dual) of a vector space—the former depends on a specific set of basis vectors chosen <italic>ad hoc</italic>, the latter does not. The analogue, here, is that our explanation of systematicity is natural in that it does not depend on a particular representational scheme (i.e., constituent order for relational propositions). Hence, the explanation does not depend on <italic>ad hoc</italic> assumptions about internal representations. Contrast this explanation with the Classical one, which must assume a particular grammatical form (e.g., G1 over G2) to fit the data.</p>
<p>In addition to explaining systematicity, our category theory approach has further implications. According to our explanation, systematicity with respect to binary relational propositions requires a category with products. A category theory account has also been provided for the strikingly similar profiles of development for a suite of reasoning abilities that included <italic>Transitive Inference</italic> and <italic>Class Inclusion</italic>, among others <xref ref-type="bibr" rid="pcbi.1000858-Phillips5">[30]</xref>—all abilities are acquired around the age of five years. The difference between the difficulties of younger children and the successes of older children (relative to age five) across all these reasoning tasks was explained as their capacity to compute (co)products. (A <italic>coproduct</italic> is related to a product by arrow reversal—see, e.g., <xref ref-type="bibr" rid="pcbi.1000858-Pierce1">[28]</xref> for a formal definition.) Therefore, our explanation implies that systematicity is not a property of younger children's cognition. Some support for this implication is found on memory tasks that require binding the background context of memorized items <xref ref-type="bibr" rid="pcbi.1000858-Lloyd1">[36]</xref>, though further work is needed to test this implication directly.</p>
<p>Our explanation for systematicity in regard to binary relational propositions does not depend on <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e484" xlink:type="simple"/></inline-formula>, it only requires a category with products. For example, the categories <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e485" xlink:type="simple"/></inline-formula> of topological spaces and continuous mappings, and <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e486" xlink:type="simple"/></inline-formula> of vector spaces and linear mappings <xref ref-type="bibr" rid="pcbi.1000858-Awodey1">[21]</xref> could also be used. These possibilities imply that an explanation of systematicity does not depend on a particular (discrete symbolic, or continuous subsymbolic) representational format. Thus, a further benefit is that our approach opens the way for integration of other (sub/symbolic) levels of analysis.</p>
<p>Though some effort is needed to provide a category theory explanation for systematicity, even for a relatively simple domain such as relational propositions, the potential payoff is that our explanation generalizes to other domains where an appropriate adjunction is identified. This sort of tradeoff has been noted elsewhere in the context of a category theory treatment of automata <xref ref-type="bibr" rid="pcbi.1000858-Arbib1">[25]</xref>. We sketch one possibility in the domain of context-free grammars. Languages conforming to context-free grammars can be modelled as the <italic>free category</italic> on the directed graph that defines the grammar, whose vertices are sets of terminal and non-terminal symbols, and edges are transitions <xref ref-type="bibr" rid="pcbi.1000858-Walters1">[31]</xref>. The left adjoint is the functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e487" xlink:type="simple"/></inline-formula> from the category of directed graphs and graph homomorphisms to the category of categories and functors (category homomorphisms). The right adjoint is the forgetful functor <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e488" xlink:type="simple"/></inline-formula>, which returns the underlying graph (i.e. the arrows, forgetting their compositions). The explanation here is analogous to our explanation for relational schemas. The problem Aizawa raised with respect to Classicism is avoided here because systematicity is not derived from individual grammars, but homomorphic relationships between grammars.</p>
<p>Having provided an explanation of systematicity in terms of the rather abstract category theory concept of adjoint functors, one may wonder what this explanation means for a more typical conception of cognitive architecture in terms of internal representations and processes, and their realization in the brain. Human cognition is remarkable in that it affords the ability to think about things that have no sensory access (e.g., “a dog that is one lightyear long …”); yet reason about such entities as if they were grounded in our everyday experience (“… is smaller than a dog that is two lightyears long”). However, these two aspects must be reconciled: unbridled abstraction means that one can no longer determine what a particular internal representation is supposed to refer to; yet blinkering the system with over-narrowly defined representations curtails one's ability to <italic>think outside the box</italic>. These aspects appear in the form of functors and natural transformations in category theory. The adjunction is the category theory way of bringing them into precise “synchrony”, or co-ordination, so that we may think abstractly about very specific things.</p>
<p>The realization of computational processes in the brain is classically conceived as a <italic>physical instantiation mapping</italic> from computational states to brain states, where the syntactic relationships between computational states correspond to physical relationships between brain states via such maps (see <xref ref-type="bibr" rid="pcbi.1000858-Fodor1">[1]</xref>, p13). Category theory affords a similar, but more general and formal treatment in terms of functors. Diagrams of categories are formally defined as functors that map graphs (i.e. the shape of the diagram) to categories (see, e.g., <xref ref-type="bibr" rid="pcbi.1000858-Crole1">[37]</xref>). Analogously, a categorial cognitive system would involve a functor from a categorial computational model to a brain system.</p>
<p>Up to this point, we have not considered the relatively new Bayesian approach to cognitive modelling (see, e.g., <xref ref-type="bibr" rid="pcbi.1000858-Griffiths1">[38]</xref>, <xref ref-type="bibr" rid="pcbi.1000858-Tenenbaum1">[39]</xref> for summaries) because, to our knowledge, a Bayesian explanation for systematicity has not yet been articulated. Nonetheless, the hierarchical Bayesian approach offers a significant advance with the ability to learn a diverse range of structures, such as lists, trees, and other (acyclic or cyclic) graphs, from data <xref ref-type="bibr" rid="pcbi.1000858-Kemp1">[40]</xref>. An important aspect of this approach is that structural form (or the type of structure) is encoded as prior beliefs by hyperparameters in the higher layers, and instances of those structures are encoded as parameters in the lower layers in so far as they conform to the constraints imposed by the data (environment). In this way, the architecture is not required to presume one particular structure to induce a group of behaviours from data. The hierarchical Bayesian approach affords the sort of higher-order theory that our analysis in the previous section implies. However, the question for the Bayesians is essentially the same as for the Classicists and Connectionists: that is, to articulate the Bayesian architectural principles from which systematicity necessarily follows. As the approach currently stands, systematicity depends on a number of factors including the available data, network connectivity, and optimization parameters. A Bayesian network with independently modifiable parameters for representing the distributions of constituents in each argument position of a relation may not have the systematicity property in the absence of data with, say, <monospace>Mary</monospace> in the patient position (so called <italic>strong systematicity</italic> <xref ref-type="bibr" rid="pcbi.1000858-Hadley1">[18]</xref>), simply because there may be no (prior) information available to determine the value of the associated parameters. Hyperparameters may enable a dependency between lower level parameters so that the acquisition of one entails the acquisition of another. Still, systematicity may not necessarily follow from hyperparameters alone: for example, one can envisage a network where partial hyperparametrization links some but not all behaviours within the group, analogous to the problem that was raised with respect to classical compositionality.</p>
<p>All theories make certain assumptions. The question is whether those assumptions are extrinsic to the theory and carry the essential explanatory burden (i.e. they are <italic>ad hoc</italic>). In our case, one may question whether supposing that an object contains representations of <monospace>John</monospace> and <monospace>Mary</monospace> is not itself an <italic>ad hoc</italic> assumption, for the Cartesian product does not necessarily represent all possible combinations of mental representations <xref ref-type="bibr" rid="pcbi.1000858-Johnson1">[41]</xref> (e.g., <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e489" xlink:type="simple"/></inline-formula> generates representations corresponding to <monospace>John loves Mary</monospace> and <monospace>Mary loves Mary</monospace>, but not <monospace>John loves John</monospace>). Our explanation for systematicity of binary relational propositions is a consequence of the (diagonal, product) adjoint (Diagram 15), not a specific categorical product. Though the categorical product is a component of the explanation, the particular product is derived from the adjunction, not chosen independently of it. Where the constituent entities are of the same sort, and so belong to the same object (<inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e490" xlink:type="simple"/></inline-formula>) in our theory, the diagonal functor generates the object pair <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e491" xlink:type="simple"/></inline-formula>, and the product functor takes <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e492" xlink:type="simple"/></inline-formula> and generates the product object <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e493" xlink:type="simple"/></inline-formula>, hence cases like <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000858.e494" xlink:type="simple"/></inline-formula> cannot occur in this formulation. The assumption that relation symbols belong to a different category than the related arguments precludes the generation of intrinsically unconnected cases, such as <monospace>loves loves loves</monospace>. Typing, in this sense, shares some of the explanatory burden, but types are not extrinsic to our theory. An element cannot exist without belonging to an object (its type) in a category, by definition. Hence, types are intrinsic to the theory. Moreover, the explanatory burden is also born by the adjunction in our example domains. Even with typing, there must still be a principled choice for the order of those constituents, when they involve the same objects, which is provided by the adjunction. And, given that adjunctions are central to category theory, neither the assumption of types, nor our use of adjunction can be regarded as <italic>ad hoc</italic> for the purpose of explaining systematicity in these domains. Classicism also makes a distinction between atomic and molecular representations, as a core assumption <xref ref-type="bibr" rid="pcbi.1000858-Fodor1">[1]</xref>. However, even under core assumptions that are equivalent to ours—<monospace>John</monospace> and <monospace>Mary</monospace> belong to the same word classes, which differ from <monospace>loves</monospace>—systematicity does not necessarily follow, as exemplified by grammar G2. Hence, the critical difference between our explanation of systematicity and the Classical approach is the adjunction.</p>
<p>This assumption of typing, though, is acute for quasi-systematic domains, where cognitive capacity may extend to some but not all possible constituent combinations, which appear to be particularly prevalent in language (see <xref ref-type="bibr" rid="pcbi.1000858-Johnson1">[41]</xref>). For these cases, we would also need category theory-derived principled restrictions to products. <italic>Equalizers</italic> and <italic>pullbacks</italic> (see <xref ref-type="bibr" rid="pcbi.1000858-Phillips5">[30]</xref> for an application to cognitive development) are two ways to restrict (product) objects, in the same arrow-theoretic style. Products, pullbacks and equalizers are all instances of the general, formal concept of a <italic>limit</italic> in category theory. The existence of adjoint functors is closely linked to the existence of limits in the respective categories (cf. <italic>adjoint functor theorems</italic> <xref ref-type="bibr" rid="pcbi.1000858-Awodey1">[21]</xref>, p210–214), which suggests that an appropriate adjunction can also be found for domains that require an explanation for quasi-systematicity.</p>
<p>Needless to say, our category theory explanation is not the final word on a theory of cognitive architecture. For our approach (and Classicism), where the assignment of elements to objects (and, words to word classes) is asserted, there is also the broader question of why they get assigned in a particular way. This question pertains to the acquisition of representations, whereas the systematicity problem pertains to their intrinsic connections. Incorporating category theory into the Bayesian approach may provide a more integrative theory in this regard. A connection between category theory and probability has been known for some time (see <xref ref-type="bibr" rid="pcbi.1000858-Giry1">[42]</xref>), and category theory concepts have been incorporated into the development of probabilistic functional programming <xref ref-type="bibr" rid="pcbi.1000858-Erwig1">[43]</xref>. A potentially fruitful line of future research, then, may be to identify a suitable adjunction with respect to, say, a category of Bayesian models, if such a category exists.</p>
<p>From a category theory perspective, we now see why cognitive science lacked a satisfactory explanation for systematicity—cognitive scientists were working with lower-order theories in attempting to explain an essentially higher-order property. Category theory offers a re-conceptualization for cognitive science, analogous to the one that Copernicus provided for astronomy, where representational states are no longer the center of the cognitive universe—replaced by the relationships between the maps that transform them.</p></sec><sec id="s5">
<title>Supporting Information</title>
<supplementary-material id="pcbi.1000858.s001" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000858.s001" xlink:type="simple"><label>Text S1</label><caption>
<p>Proof that the free and forgetful functors for the category ASet form an adjoint functor pair.</p>
<p>(0.10 MB PDF)</p>
</caption></supplementary-material></sec></body>
<back>
<ack>
<p>We thank the reviewers for comments that have helped improve the exposition of this work.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pcbi.1000858-Fodor1"><label>1</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Fodor</surname><given-names>JA</given-names></name>
<name name-style="western"><surname>Pylyshyn</surname><given-names>ZW</given-names></name>
</person-group>             <year>1988</year>             <article-title>Connectionism and cognitive architecture: A critical analysis.</article-title>             <source>Cognition</source>             <volume>28</volume>             <fpage>3</fpage>             <lpage>71</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Aizawa1"><label>2</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Aizawa</surname><given-names>K</given-names></name>
</person-group>             <year>2003</year>             <source>The systematicity arguments. Studies in Mind and Brain</source>             <publisher-loc>New York</publisher-loc>             <publisher-name>Kluwer Academic</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000858-Fodor2"><label>3</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Fodor</surname><given-names>JA</given-names></name>
<name name-style="western"><surname>McLaughlin</surname><given-names>BP</given-names></name>
</person-group>             <year>1990</year>             <article-title>Connectionism and the problem of systematicity: Why Smolensky's solution doesn't work.</article-title>             <source>Cognition</source>             <volume>35</volume>             <fpage>183</fpage>             <lpage>204</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Fodor3"><label>4</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Fodor</surname><given-names>JA</given-names></name>
</person-group>             <year>1997</year>             <article-title>Connectionism and the problem of systematicity (continued): Why Smolensky's solution still doesn't work.</article-title>             <source>Cognition</source>             <volume>63</volume>             <fpage>109</fpage>             <lpage>119</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-vanGelder1"><label>5</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>van Gelder</surname><given-names>T</given-names></name>
</person-group>             <year>1990</year>             <article-title>Compositionality: A connectionist variation on a classical theme.</article-title>             <source>Cogn Sci</source>             <volume>14</volume>             <fpage>355</fpage>             <lpage>384</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Smolensky1"><label>6</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Smolensky</surname><given-names>P</given-names></name>
</person-group>             <year>1987</year>             <article-title>The constituent structure of connectionist mental states: A reply to Fodor and Pylyshyn.</article-title>             <source>Southern J Philos</source>             <volume>26</volume>             <fpage>137</fpage>             <lpage>161</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Smolensky2"><label>7</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Smolensky</surname><given-names>P</given-names></name>
</person-group>             <year>1991</year>             <article-title>Connectionism, constituency, and the language of thought.</article-title>             <person-group person-group-type="editor">
<name name-style="western"><surname>Loewer</surname><given-names>B</given-names></name>
<name name-style="western"><surname>Rey</surname><given-names>G</given-names></name>
</person-group>             <source>Meaning in Mind: Fodor and his critics</source>             <publisher-loc>Cambridge, MA</publisher-loc>             <publisher-name>Blackwells</publisher-name>             <comment>chapter 12</comment>          </element-citation></ref>
<ref id="pcbi.1000858-Aizawa2"><label>8</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Aizawa</surname><given-names>K</given-names></name>
</person-group>             <year>2003</year>             <article-title>Cognitive architecture: The structure of cognitive representations.</article-title>             <person-group person-group-type="editor">
<name name-style="western"><surname>Stich</surname><given-names>SP</given-names></name>
<name name-style="western"><surname>Warfield</surname><given-names>TA</given-names></name>
</person-group>             <source>The Blackwell guide to philosophy of mind</source>             <publisher-loc>Cambridge, MA</publisher-loc>             <publisher-name>Blackwell</publisher-name>             <fpage>172</fpage>             <lpage>189</lpage>             <comment>chapter 7</comment>          </element-citation></ref>
<ref id="pcbi.1000858-Smolensky3"><label>9</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Smolensky</surname><given-names>P</given-names></name>
</person-group>             <year>1990</year>             <article-title>Tensor product variable binding and the representation of symbolic structures in connectionist systems.</article-title>             <source>Artif Intell</source>             <volume>46</volume>             <fpage>159</fpage>             <lpage>216</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Phillips1"><label>10</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Phillips</surname><given-names>S</given-names></name>
</person-group>             <year>2007</year>             <article-title>Kenneth Aizawa, The systematicity arguments, Studies in brain and mind.</article-title>             <source>Mind Mach</source>             <volume>17</volume>             <fpage>357</fpage>             <lpage>360</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Rumelhart1"><label>11</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Rumelhart</surname><given-names>DE</given-names></name>
<name name-style="western"><surname>Hinton</surname><given-names>GE</given-names></name>
<name name-style="western"><surname>Williams</surname><given-names>RJ</given-names></name>
</person-group>             <year>1986</year>             <article-title>Learning representations by back-propagation of error.</article-title>             <source>Nature</source>             <volume>323</volume>             <fpage>533</fpage>             <lpage>536</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Elman1"><label>12</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Elman</surname><given-names>JL</given-names></name>
</person-group>             <year>1990</year>             <article-title>Finding structure in time.</article-title>             <source>Cogn Sci</source>             <volume>14</volume>             <fpage>179</fpage>             <lpage>211</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Marcus1"><label>13</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Marcus</surname><given-names>GF</given-names></name>
</person-group>             <year>1998</year>             <article-title>Rethinking eliminative connectionism.</article-title>             <source>Cogn Psychol</source>             <volume>37</volume>             <fpage>243</fpage>             <lpage>282</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Marcus2"><label>14</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Marcus</surname><given-names>GF</given-names></name>
</person-group>             <year>1998</year>             <article-title>Can connectionism save constructivism?</article-title>             <source>Cognition</source>             <volume>66</volume>             <fpage>153</fpage>             <lpage>182</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Phillips2"><label>15</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Phillips</surname><given-names>S</given-names></name>
</person-group>             <year>1998</year>             <article-title>Are feedforward and recurrent networks systematic? analysis and implications for a connectionist cognitive architecture.</article-title>             <source>Connect Sci</source>             <volume>10</volume>             <fpage>137</fpage>             <lpage>160</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Phillips3"><label>16</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Phillips</surname><given-names>S</given-names></name>
</person-group>             <year>1999</year>             <article-title>Systematic minds, unsystematic models: Learning transfer in humans and networks.</article-title>             <source>Mind Mach</source>             <volume>9</volume>             <fpage>383</fpage>             <lpage>398</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Phillips4"><label>17</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Phillips</surname><given-names>S</given-names></name>
</person-group>             <year>2000</year>             <article-title>Constituent similarity and systematicity: The limits of first-order connectionism.</article-title>             <source>Connect Sci</source>             <volume>12</volume>             <fpage>1</fpage>             <lpage>19</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Hadley1"><label>18</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Hadley</surname><given-names>RF</given-names></name>
</person-group>             <year>1994</year>             <article-title>Systematicity in connectionist language learning.</article-title>             <source>Mind Lang</source>             <volume>9</volume>             <fpage>247</fpage>             <lpage>272</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Niklasson1"><label>19</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Niklasson</surname><given-names>L</given-names></name>
<name name-style="western"><surname>van Gelder</surname><given-names>T</given-names></name>
</person-group>             <year>1994</year>             <article-title>Systematicity and connectionist language learning.</article-title>             <source>Mind Lang</source>             <volume>9</volume>             <fpage>288</fpage>             <lpage>302</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Fodor4"><label>20</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Fodor</surname><given-names>JA</given-names></name>
</person-group>             <year>1987</year>             <source>Psychosemantics: The problem of meaning in the philosophy of mind. Explorations in cognitive science</source>             <publisher-loc>Cambridge, MA</publisher-loc>             <publisher-name>MIT Press</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000858-Awodey1"><label>21</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Awodey</surname><given-names>S</given-names></name>
</person-group>             <year>2006</year>             <source>Category theory. Oxford Logic Guides</source>             <publisher-loc>New York, NY</publisher-loc>             <publisher-name>Oxford University Press</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000858-Lawvere1"><label>22</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Lawvere</surname><given-names>FW</given-names></name>
<name name-style="western"><surname>Schanuel</surname><given-names>SH</given-names></name>
</person-group>             <year>1997</year>             <source>Conceptual mathematics: A first introduction to categories. Foundations of Computing</source>             <publisher-loc>Cambridge, UK</publisher-loc>             <publisher-name>Cambridge University Press</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000858-MacLane1"><label>23</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Mac Lane</surname><given-names>S</given-names></name>
</person-group>             <year>2000</year>             <source>Categories for the working mathematician. Graduate Texts in Mathematics</source>             <publisher-loc>New York, NY</publisher-loc>             <publisher-name>Springer</publisher-name>             <comment>2nd edition</comment>          </element-citation></ref>
<ref id="pcbi.1000858-Eilenberg1"><label>24</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Eilenberg</surname><given-names>S</given-names></name>
<name name-style="western"><surname>Mac Lane</surname><given-names>S</given-names></name>
</person-group>             <year>1945</year>             <article-title>General theory of natural equivalences.</article-title>             <source>Trans Amer Math Soc</source>             <volume>58</volume>             <fpage>231</fpage>             <lpage>294</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Arbib1"><label>25</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Arbib</surname><given-names>MA</given-names></name>
<name name-style="western"><surname>Manes</surname><given-names>EG</given-names></name>
</person-group>             <year>1975</year>             <source>Arrows, structures, and functors: The categorical imperative</source>             <publisher-loc>London, UK</publisher-loc>             <publisher-name>Academic Press</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000858-Barr1"><label>26</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Barr</surname><given-names>M</given-names></name>
<name name-style="western"><surname>Wells</surname><given-names>C</given-names></name>
</person-group>             <year>1990</year>             <source>Category theory for computing science. Prentice Hall International Series in Computer Science</source>             <publisher-loc>New York</publisher-loc>             <publisher-name>Prentice Hall</publisher-name>             <comment>first edition</comment>          </element-citation></ref>
<ref id="pcbi.1000858-Goguen1"><label>27</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Goguen</surname><given-names>J</given-names></name>
</person-group>             <year>1991</year>             <article-title>A categorical manifesto.</article-title>             <source>Math Structures Comput Sci</source>             <volume>1</volume>             <fpage>49</fpage>             <lpage>67</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Pierce1"><label>28</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Pierce</surname><given-names>BC</given-names></name>
</person-group>             <year>1991</year>             <source>Basic category theory for computer scientists. Foundations of Computing</source>             <publisher-loc>Cambridge, UK</publisher-loc>             <publisher-name>MIT Press</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000858-Halford1"><label>29</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Halford</surname><given-names>GS</given-names></name>
<name name-style="western"><surname>Wilson</surname><given-names>WH</given-names></name>
</person-group>             <year>1980</year>             <article-title>A category theory approach to cognitive development.</article-title>             <source>Cogn Psychol</source>             <volume>12</volume>             <fpage>356</fpage>             <lpage>411</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Phillips5"><label>30</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Phillips</surname><given-names>S</given-names></name>
<name name-style="western"><surname>Wilson</surname><given-names>WH</given-names></name>
<name name-style="western"><surname>Halford</surname><given-names>GS</given-names></name>
</person-group>             <year>2009</year>             <article-title>What do Transitive Inference and Class Inclusion have in common? Categorical (co)products and cognitive development.</article-title>             <source>PLoS Comput Biol</source>             <volume>5</volume>             <fpage>e1000599</fpage>          </element-citation></ref>
<ref id="pcbi.1000858-Walters1"><label>31</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Walters</surname><given-names>RFC</given-names></name>
</person-group>             <year>1991</year>             <source>Categories and computer science. Cambridge Computer Science Texts</source>             <publisher-loc>Cambridge, UK</publisher-loc>             <publisher-name>Cambridge University Press</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000858-Halford2"><label>32</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Halford</surname><given-names>GS</given-names></name>
<name name-style="western"><surname>Bain</surname><given-names>JD</given-names></name>
<name name-style="western"><surname>Maybery</surname><given-names>MT</given-names></name>
<name name-style="western"><surname>Andrews</surname><given-names>G</given-names></name>
</person-group>             <year>1998</year>             <article-title>Induction of relational schemas: Common processes in reasoning and complex learning.</article-title>             <source>Cogn Psychol</source>             <volume>35</volume>             <fpage>201</fpage>             <lpage>245</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Wilson1"><label>33</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Wilson</surname><given-names>WH</given-names></name>
</person-group>             <year>1979</year>             <article-title>On induced representations of Lie algebras, groups, and coalgebras.</article-title>             <source>J Algebra</source>             <volume>58</volume>             <fpage>37</fpage>             <lpage>50</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Leinster1"><label>34</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Leinster</surname><given-names>T</given-names></name>
</person-group>             <year>2003</year>             <source>Higher operads, higher categories. London Mathematical Society Lecture Notes Series</source>             <publisher-loc>Cambridge, UK</publisher-loc>             <publisher-name>Cambridge University Press</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000858-Fahlman1"><label>35</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Fahlman</surname><given-names>SE</given-names></name>
<name name-style="western"><surname>Lebiere</surname><given-names>C</given-names></name>
</person-group>             <year>1990</year>             <article-title>The cascade-correlation learning algorithm.</article-title>             <comment>Technical Report CMU-CS-90-100, Carnegie Mellon University</comment>          </element-citation></ref>
<ref id="pcbi.1000858-Lloyd1"><label>36</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Lloyd</surname><given-names>ME</given-names></name>
<name name-style="western"><surname>Doydum</surname><given-names>AO</given-names></name>
<name name-style="western"><surname>Newcombe</surname><given-names>NS</given-names></name>
</person-group>             <year>2009</year>             <article-title>Memory binding in early childhood: evidence for a retrieval deficit.</article-title>             <source>Child Dev</source>             <volume>80</volume>             <fpage>1321</fpage>             <lpage>1328</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Crole1"><label>37</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Crole</surname><given-names>RL</given-names></name>
</person-group>             <year>1993</year>             <source>Categories for types</source>             <publisher-loc>New York, NY</publisher-loc>             <publisher-name>Cambridge University Press</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000858-Griffiths1"><label>38</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Griffiths</surname><given-names>TL</given-names></name>
<name name-style="western"><surname>Kemp</surname><given-names>C</given-names></name>
<name name-style="western"><surname>Tenenbaum</surname><given-names>JB</given-names></name>
</person-group>             <year>2008</year>             <article-title>Bayesian models of cognition.</article-title>             <person-group person-group-type="editor">
<name name-style="western"><surname>Sun</surname><given-names>R</given-names></name>
</person-group>             <source>Cambridge Handbook of Computational Cognitive Modeling</source>             <publisher-loc>New York, NY</publisher-loc>             <publisher-name>Cambridge University Press</publisher-name>             <fpage>59</fpage>             <lpage>100</lpage>             <comment>chapter 3</comment>          </element-citation></ref>
<ref id="pcbi.1000858-Tenenbaum1"><label>39</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Tenenbaum</surname><given-names>JB</given-names></name>
<name name-style="western"><surname>Griffiths</surname><given-names>TL</given-names></name>
<name name-style="western"><surname>Kemp</surname><given-names>C</given-names></name>
</person-group>             <year>2006</year>             <article-title>Theory-based Bayesian models of inductive learning and reasoning.</article-title>             <source>Trend Cogn Sci</source>             <volume>10</volume>             <fpage>309</fpage>             <lpage>318</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Kemp1"><label>40</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Kemp</surname><given-names>C</given-names></name>
<name name-style="western"><surname>Tenenbaum</surname><given-names>JB</given-names></name>
</person-group>             <year>2008</year>             <article-title>The discovery of structural form.</article-title>             <source>PNAS</source>             <volume>105</volume>             <fpage>10687</fpage>             <lpage>10692</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Johnson1"><label>41</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Johnson</surname><given-names>K</given-names></name>
</person-group>             <year>2004</year>             <article-title>On the systematicity of language and thought.</article-title>             <source>J Philos</source>             <volume>101</volume>             <fpage>111</fpage>             <lpage>139</lpage>          </element-citation></ref>
<ref id="pcbi.1000858-Giry1"><label>42</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Giry</surname><given-names>M</given-names></name>
</person-group>             <year>1981</year>             <article-title>A categorical approach to probability theory.</article-title>             <person-group person-group-type="editor">
<name name-style="western"><surname>Banaschewski</surname><given-names>Bernhard</given-names></name>
</person-group>             <source>Categorical aspects of topology and analysis</source>             <publisher-name>Springer-Verlag</publisher-name>             <fpage>65</fpage>             <lpage>85</lpage>             <comment>volume 915 of <italic>Lecture Notes in Mathematics</italic></comment>          </element-citation></ref>
<ref id="pcbi.1000858-Erwig1"><label>43</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Erwig</surname><given-names>M</given-names></name>
<name name-style="western"><surname>Kollmansberger</surname><given-names>S</given-names></name>
</person-group>             <year>2006</year>             <article-title>Probabilistic functional programming in Haskell.</article-title>             <source>J Funct Program</source>             <volume>16</volume>             <fpage>21</fpage>             <lpage>34</lpage>          </element-citation></ref>
</ref-list>

</back>
</article>