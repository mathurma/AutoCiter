<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN" "http://jats.nlm.nih.gov/publishing/1.1d3/JATS-journalpublishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article" dtd-version="1.1d3" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id>
<journal-title-group>
<journal-title>PLOS Computational Biology</journal-title>
</journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1005659</article-id>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-16-01696</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Research Article</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Physical sciences</subject><subj-group><subject>Chemistry</subject><subj-group><subject>Computational chemistry</subject><subj-group><subject>Molecular dynamics</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Simulation and modeling</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Organisms</subject><subj-group><subject>Protozoans</subject><subj-group><subject>Amoebas</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Biochemistry</subject><subj-group><subject>Biochemical simulations</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Computational biology</subject><subj-group><subject>Biochemical simulations</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Applied mathematics</subject><subj-group><subject>Algorithms</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Simulation and modeling</subject><subj-group><subject>Algorithms</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Programming languages</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Research and analysis methods</subject><subj-group><subject>Mathematical and statistical techniques</subject><subj-group><subject>Statistical methods</subject><subj-group><subject>Monte Carlo method</subject></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Physical sciences</subject><subj-group><subject>Mathematics</subject><subj-group><subject>Statistics (mathematics)</subject><subj-group><subject>Statistical methods</subject><subj-group><subject>Monte Carlo method</subject></subj-group></subj-group></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Source code</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Source code</subject></subj-group></subj-group></subj-group></article-categories>
<title-group>
<article-title>OpenMM 7: Rapid development of high performance algorithms for molecular dynamics</article-title>
<alt-title alt-title-type="running-head">OpenMM 7</alt-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-9566-9684</contrib-id>
<name name-style="western">
<surname>Eastman</surname>
<given-names>Peter</given-names>
</name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Supervision</role>
<role content-type="http://credit.casrai.org/">Writing – original draft</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Swails</surname>
<given-names>Jason</given-names>
</name>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-0542-119X</contrib-id>
<name name-style="western">
<surname>Chodera</surname>
<given-names>John D.</given-names>
</name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Resources</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-3337-954X</contrib-id>
<name name-style="western">
<surname>McGibbon</surname>
<given-names>Robert T.</given-names>
</name>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Zhao</surname>
<given-names>Yutong</given-names>
</name>
<role content-type="http://credit.casrai.org/">Software</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Beauchamp</surname>
<given-names>Kyle A.</given-names>
</name>
<role content-type="http://credit.casrai.org/">Software</role>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
<xref ref-type="fn" rid="currentaff001"><sup>¤</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Wang</surname>
<given-names>Lee-Ping</given-names>
</name>
<role content-type="http://credit.casrai.org/">Software</role>
<xref ref-type="aff" rid="aff004"><sup>4</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-5921-9272</contrib-id>
<name name-style="western">
<surname>Simmonett</surname>
<given-names>Andrew C.</given-names>
</name>
<role content-type="http://credit.casrai.org/">Methodology</role>
<role content-type="http://credit.casrai.org/">Software</role>
<xref ref-type="aff" rid="aff005"><sup>5</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0001-9412-0553</contrib-id>
<name name-style="western">
<surname>Harrigan</surname>
<given-names>Matthew P.</given-names>
</name>
<role content-type="http://credit.casrai.org/">Software</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Stern</surname>
<given-names>Chaya D.</given-names>
</name>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
<xref ref-type="aff" rid="aff006"><sup>6</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-8961-7183</contrib-id>
<name name-style="western">
<surname>Wiewiora</surname>
<given-names>Rafal P.</given-names>
</name>
<role content-type="http://credit.casrai.org/">Writing – review &amp; editing</role>
<xref ref-type="aff" rid="aff003"><sup>3</sup></xref>
<xref ref-type="aff" rid="aff006"><sup>6</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Brooks</surname>
<given-names>Bernard R.</given-names>
</name>
<role content-type="http://credit.casrai.org/">Methodology</role>
<xref ref-type="aff" rid="aff005"><sup>5</sup></xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<name name-style="western">
<surname>Pande</surname>
<given-names>Vijay S.</given-names>
</name>
<role content-type="http://credit.casrai.org/">Conceptualization</role>
<role content-type="http://credit.casrai.org/">Funding acquisition</role>
<role content-type="http://credit.casrai.org/">Resources</role>
<role content-type="http://credit.casrai.org/">Supervision</role>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff007"><sup>7</sup></xref>
</contrib>
</contrib-group>
<aff id="aff001"><label>1</label> <addr-line>Department of Chemistry, Stanford University, Stanford, California, United States of America</addr-line></aff>
<aff id="aff002"><label>2</label> <addr-line>Department of Chemistry and Chemical Biology and BioMaPS Institute, Rutgers University, Piscataway, New Jersey, United States of America</addr-line></aff>
<aff id="aff003"><label>3</label> <addr-line>Computational and Systems Biology Program, Sloan Kettering Institute, Memorial Sloan Kettering Cancer Center, New York, New York, United States of America</addr-line></aff>
<aff id="aff004"><label>4</label> <addr-line>Department of Chemistry, University of California, Davis, Davis, California, United States of America</addr-line></aff>
<aff id="aff005"><label>5</label> <addr-line>Laboratory of Computational Biology, National Heart, Lung, and Blood Institute, National Institutes of Health, Bethesda, Maryland, United States of America</addr-line></aff>
<aff id="aff006"><label>6</label> <addr-line>Tri-Institutional PhD Program in Chemical Biology, Memorial Sloan Kettering Cancer Center, New York, New York, United States of America</addr-line></aff>
<aff id="aff007"><label>7</label> <addr-line>Department of Computer Science, Stanford University, Stanford, California, United States of America</addr-line></aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>Gentleman</surname>
<given-names>Robert</given-names>
</name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1"><addr-line>23andMe, UNITED STATES</addr-line></aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>I have read the journal's policy and the authors of this manuscript have the following competing interests: VSP is an SAB member of Schrödinger, LLC and a General Partner at Andreessen Horowtiz. JDC is an SAB member of Schrödinger, LLC. KAB is currently an employee of Counsyl, Inc.</p>
</fn>
<fn fn-type="current-aff" id="currentaff001">
<label>¤</label>
<p>Current address: Counsyl Research, South San Francisco, California, United States of America</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">peastman@stanford.edu</email></corresp>
</author-notes>
<pub-date pub-type="epub">
<day>26</day>
<month>7</month>
<year>2017</year>
</pub-date>
<pub-date pub-type="collection">
<month>7</month>
<year>2017</year>
</pub-date>
<volume>13</volume>
<issue>7</issue>
<elocation-id>e1005659</elocation-id>
<history>
<date date-type="received">
<day>20</day>
<month>10</month>
<year>2016</year>
</date>
<date date-type="accepted">
<day>27</day>
<month>6</month>
<year>2017</year>
</date>
</history>
<permissions>
<license xlink:href="https://creativecommons.org/publicdomain/zero/1.0/" xlink:type="simple">
<license-p>This is an open access article, free of all copyright, and may be freely reproduced, distributed, transmitted, modified, built upon, or otherwise used by anyone for any lawful purpose. The work is made available under the <ext-link ext-link-type="uri" xlink:href="https://creativecommons.org/publicdomain/zero/1.0/" xlink:type="simple">Creative Commons CC0</ext-link> public domain dedication.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pcbi.1005659"/>
<abstract>
<p>OpenMM is a molecular dynamics simulation toolkit with a unique focus on extensibility. It allows users to easily add new features, including forces with novel functional forms, new integration algorithms, and new simulation protocols. Those features automatically work on all supported hardware types (including both CPUs and GPUs) and perform well on all of them. In many cases they require minimal coding, just a mathematical description of the desired function. They also require no modification to OpenMM itself and can be distributed independently of OpenMM. This makes it an ideal tool for researchers developing new simulation methods, and also allows those new methods to be immediately available to the larger community.</p>
</abstract>
<funding-group>
<award-group id="award001">
<funding-source>
<institution>National Institutes of Health (US)</institution>
</funding-source>
<award-id>U54 GM072970</award-id>
</award-group>
<award-group id="award002">
<funding-source>
<institution>National Institutes of Health (US)</institution>
</funding-source>
<award-id>R01-GM062868</award-id>
<principal-award-recipient>
<name name-style="western">
<surname>Pande</surname>
<given-names>Vijay S.</given-names>
</name>
</principal-award-recipient>
</award-group>
<award-group id="award003">
<funding-source>
<institution-wrap>
<institution-id institution-id-type="funder-id">http://dx.doi.org/10.13039/100000002</institution-id>
<institution>National Institutes of Health</institution>
</institution-wrap>
</funding-source>
<award-id>P30 CA008748</award-id>
<principal-award-recipient>
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-0542-119X</contrib-id>
<name name-style="western">
<surname>Chodera</surname>
<given-names>John D.</given-names>
</name>
</principal-award-recipient>
</award-group>
<award-group id="award004">
<funding-source>
<institution>Starr Foundation (US)</institution>
</funding-source>
<award-id>I8-A8-058</award-id>
<principal-award-recipient>
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0003-0542-119X</contrib-id>
<name name-style="western">
<surname>Chodera</surname>
<given-names>John D.</given-names>
</name>
</principal-award-recipient>
</award-group>
<funding-statement>PE, YZ, and VSP were supported by Simbios via the National Institutes of Health Roadmap for Medical Research Grant U54 GM072970, and by National Institutes of Health grant R01-GM062868. JDC, KAB, RPW, and CDS acknowledge support from the Sloan Kettering Institute, National Science Foundation grant P30 CA008748, and Starr Foundation grant I8-A8-058. ACS was supported by the intramural research program of the National Heart, Lung and Blood Institute. CDS was supported by National Science Foundation Graduate Research Fellowship Program grant DGE-1257284. RPW was supported by the Tri-Institutional PhD Program in Chemical Biology of Memorial Sloan Kettering Cancer Center. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
</funding-group>
<counts>
<fig-count count="1"/>
<table-count count="11"/>
<page-count count="17"/>
</counts>
<custom-meta-group>
<custom-meta>
<meta-name>PLOS Publication Stage</meta-name>
<meta-value>vor-update-to-uncorrected-proof</meta-value>
</custom-meta>
<custom-meta>
<meta-name>Publication Update</meta-name>
<meta-value>2017-08-09</meta-value>
</custom-meta>
<custom-meta id="data-availability">
<meta-name>Data Availability</meta-name>
<meta-value>All relevant data are within the paper and its Supporting Information files.</meta-value>
</custom-meta>
</custom-meta-group>
</article-meta>
</front>
<body>
<disp-quote>
<p>This is a <italic>PLOS Computational Biology Software</italic> paper.</p>
</disp-quote>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<sec id="sec002" sec-type="intro">
<title>Background</title>
<p>Molecular dynamics simulation is a rapidly advancing field. Many aspects of it are subjects of current research and development. Some of the more important examples include the development of new force fields [<xref ref-type="bibr" rid="pcbi.1005659.ref001">1</xref>,<xref ref-type="bibr" rid="pcbi.1005659.ref002">2</xref>], sometimes involving novel functional forms for the interactions [<xref ref-type="bibr" rid="pcbi.1005659.ref003">3</xref>,<xref ref-type="bibr" rid="pcbi.1005659.ref004">4</xref>]; new integration algorithms [<xref ref-type="bibr" rid="pcbi.1005659.ref005">5</xref>–<xref ref-type="bibr" rid="pcbi.1005659.ref007">7</xref>]; new sampling methods [<xref ref-type="bibr" rid="pcbi.1005659.ref008">8</xref>–<xref ref-type="bibr" rid="pcbi.1005659.ref010">10</xref>]; and support for new types of hardware [<xref ref-type="bibr" rid="pcbi.1005659.ref011">11</xref>–<xref ref-type="bibr" rid="pcbi.1005659.ref013">13</xref>].</p>
<p>There are many popular software packages for conducting molecular dynamics simulations. They vary considerably in their capabilities and feature sets. This is especially true when it comes to cutting edge, recently developed simulation techniques. The inventor of a new method will typically implement it in a single package, whichever one they are most comfortable working with. From that point, it may take years to be implemented in other packages, depending on the interests and priorities of the development team behind each one. In many cases, it may never get implemented. Even the initial implementation may not be accepted into an official release of the package it was created in. Or it may have limited usefulness, for example because it executes slowly or cannot be used on advanced hardware such as graphics processing units (GPUs).</p>
<p>The main reason for this problem is that most molecular dynamics packages were not designed with extensibility in mind. Adding new features, even very simple ones, is often labor intensive and requires a deep understanding of the code. Once a prototype implementation is complete, it may be even more difficult to turn that into a well optimized version that works on all hardware types. In most cases the simulation engines are also monolithic, so the only way to add features to them is to directly modify their source code. There is no plugin interface or other mechanism for allowing new features to be implemented and distributed independently. This turns the core development team into gatekeepers, restricting what features can be added to the package.</p>
<p>A complete molecular dynamics package is, of course, much more than just a simulation engine. Each one typically has its own collection of tools for preparing molecular systems to simulate, its own file formats, and sometimes even its own force fields. This makes it difficult for users to switch back and forth between them, or to combine features from different packages.</p>
</sec>
<sec id="sec003">
<title>OpenMM</title>
<p>OpenMM is a molecular dynamics package designed to address these problems. It began as simply a library for performing certain types of calculations on GPUs, but in recent versions has grown into a complete simulation package with unique and powerful features. This article describes OpenMM 7.0, which is the latest release at the time of writing. An earlier version (OpenMM 4.1) was described in a previous publication [<xref ref-type="bibr" rid="pcbi.1005659.ref014">14</xref>]. This article focuses primarily on what has changed since that version, but for completeness there is some overlap between the two.</p>
<p>OpenMM is based on a layered architecture which (see <xref ref-type="fig" rid="pcbi.1005659.g001">Fig 1</xref>), to the best of our knowledge, is unique among molecular dynamics packages. This allows it to be used in several different ways by users with varying needs and interests. Depending on how a particular user chooses to interact with it, OpenMM can act as:</p>
<list list-type="order">
<list-item><p><bold>A high-performance library</bold>, callable from other programs, for performing a wide range of calculations used in molecular modelling and simulation on a range of advanced hardware platforms (both CPUs and GPUs).</p></list-item>
<list-item><p><bold>A domain specific language</bold> for easily implementing new algorithms for molecular modelling and simulation.</p></list-item>
<list-item><p><bold>A complete package</bold> for running molecular simulations.</p></list-item>
</list>
<fig id="pcbi.1005659.g001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005659.g001</object-id>
<label>Fig 1</label>
<caption>
<title>Architecture of OpenMM.</title>
</caption>
<graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005659.g001" xlink:type="simple"/>
</fig>
<p>Extensibility is built into every layer of the architecture as a fundamental design goal. A guiding philosophy is that users should be able to implement new features as easily as possible, by writing as little code as possible. Those features should then work on all types of hardware, including both CPUs and GPUs, and have good performance on all of them. Finally, the developer of a feature should be able to package and distribute their code independently, without needing the approval or participation of the core OpenMM development team.</p>
<p>The highest layer of the architecture is based on the Python scripting language. Users can easily extend it by writing their own Python code to implement the algorithms of their choice. A wide range of simulation protocols, sampling methods, etc. can be implemented in this way, often with only a few lines of code.</p>
<p>The next layer down defines the calculations that are tied together through Python scripting. This layer includes many classes for creating “custom” forces and integrators. These classes provide a simple but powerful mechanism for extensibility. The user provides one or more mathematical expressions to describe the calculation to be done. For example, they might give an expression for the interaction energy of a pair of particles as a function of the distance between them. The expression is parsed and analyzed, and just-in-time compilation is used to generate an efficient implementation of the code for calculating that interaction [<xref ref-type="bibr" rid="pcbi.1005659.ref015">15</xref>]. This allows users to easily define a huge variety of interactions and integration algorithms. They can then be used on any supported type of hardware, and involve little or no loss in performance.</p>
<p>At the lowest layer, OpenMM is based on a plugin mechanism. Calculations are defined by “computational kernels”. A plugin may define new kernels for doing new types of calculations, or alternatively it may provide new implementations of existing kernels, for example to support a new type of hardware. Plugins are dynamically discovered and loaded at runtime. Each one is packaged as a file that can be distributed separately from the rest of OpenMM and installed by any user.</p>
<p>Another unique feature of OpenMM is its support for multiple input pipelines. Before a molecular system can be simulated, it first must be modelled. This is sometimes a complex process involving such steps as combining multiple molecules into a single file, building missing loops, selecting a force field, and parametrizing small molecules. Typically, each simulation package provides its own tools for doing this. They often differ in significant ways, such as what force fields are available.</p>
<p>OpenMM does include modelling tools, but it also can directly read the file formats used by Amber [<xref ref-type="bibr" rid="pcbi.1005659.ref016">16</xref>], CHARMM [<xref ref-type="bibr" rid="pcbi.1005659.ref017">17</xref>], Gromacs [<xref ref-type="bibr" rid="pcbi.1005659.ref018">18</xref>], and Desmond [<xref ref-type="bibr" rid="pcbi.1005659.ref019">19</xref>]. A user can prepare their system with the tools from any of those packages, or with other tools that are designed to work with them, then simulate it in OpenMM. This gives great flexibility, since the user can use whatever tools are best suited to the system they want to simulate. It also lets OpenMM easily fit into their existing workflow. A user who is accustomed to a particular tool can continue to use it, but still run their simulation in OpenMM.</p>
</sec>
</sec>
<sec id="sec004" sec-type="materials|methods">
<title>Design and implementation</title>
<sec id="sec005">
<title>Extensibility</title>
<sec id="sec006">
<title>Python scripting</title>
<p>The highest level of the architecture consists of a set of Python classes and functions. They may be chained together to create simple scripts that run simulations, or more complicated ones that implement a variety of advanced algorithms. These are some of the functions provided by OpenMM that may be used by Python scripts:</p>
<list list-type="bullet">
<list-item><p>Reading input files, including standard formats like PDB or PDBx/mmCIF, as well as the proprietary formats used by applications such as Amber, CHARMM, Gromacs, and Desmond.</p></list-item>
<list-item><p>Editing molecular models, such as by combining molecules together, adding or deleting atoms, building solvent boxes, etc.</p></list-item>
<list-item><p>Defining the forces acting on a molecular system, either by specifying them explicitly or by loading a force field definition from a file.</p></list-item>
<list-item><p>Computing forces and energies.</p></list-item>
<list-item><p>Running simulations.</p></list-item>
<list-item><p>Outputting results.</p></list-item>
</list>
<p>An example of a script to run a simulation is shown in Listing 1. It loads a PDB file, models the forces with the AMBER99SB-ILDN force field [<xref ref-type="bibr" rid="pcbi.1005659.ref020">20</xref>] and TIP-3P water model [<xref ref-type="bibr" rid="pcbi.1005659.ref021">21</xref>], performs a local energy minimization to eliminate clashes, and then simulates 1 million steps of Verlet dynamics. Every 1000 steps, it writes the current structure to a DCD file, and the current time, potential energy, and temperature to a log file.</p>
<p>Listing 1: A Python script executing a complete molecular simulation from a PDB file.</p>
<p><monospace>from simtk.openmm.app import *</monospace></p>
<p><monospace>from simtk.openmm import *</monospace></p>
<p><monospace>from simtk.unit import *</monospace></p>
<p><monospace>pdb = PDBFile('input.pdb')</monospace></p>
<p><monospace>forcefield = ForceField('amber99sbildn.xml', 'tip3p.xml')</monospace></p>
<p><monospace>system = forcefield.createSystem(pdb.topology, nonbondedMethod = PME, nonbondedCutoff = 1*nanometer, constraints = HBonds)</monospace></p>
<p><monospace>integrator = VerletIntegrator(0.002*picoseconds)</monospace></p>
<p><monospace>simulation = Simulation(pdb.topology, system, integrator)</monospace></p>
<p><monospace>simulation.context.setPositions(pdb.positions)</monospace></p>
<p><monospace>simulation.context.setVelocitiesToTemperature(300*kelvin)</monospace></p>
<p><monospace>simulation.minimizeEnergy()</monospace></p>
<p><monospace>simulation.reporters.append(DCDReporter('output.pdb', 1000))</monospace></p>
<p><monospace>simulation.reporters.append(StateDataReporter('output.log', 1000, time = True, potentialEnergy = True, temperature = True))</monospace></p>
<p><monospace>simulation.step(1000000)</monospace></p>
<p>This script runs a simple simulation, much like one might run in any molecular dynamics package. More sophisticated or exotic algorithms and protocols can be implemented in exactly the same way. Here are some examples of features or applications that use or extend OpenMM’s Python scripting features:</p>
<list list-type="bullet">
<list-item><p>A class for simulated tempering [<xref ref-type="bibr" rid="pcbi.1005659.ref010">10</xref>], an accelerated sampling method that varies the temperature of a simulation to accelerate barrier crossings. The entire algorithm was implemented in roughly 200 lines of code.</p></list-item>
<list-item><p>PDBFixer, an application for cleaning up molecular models in preparation for simulating them. It includes such features as building missing loops, replacing nonstandard amino acids with standard ones, adding hydrogens, and building solvent boxes. By using the features provided by OpenMM, all of these algorithms were implemented in only about 1000 lines of code.</p></list-item>
<list-item><p>YANK [<xref ref-type="bibr" rid="pcbi.1005659.ref022">22</xref>] a sophisticated application and toolkit for alchemical free energy calculations. It implements Hamiltonian exchange molecular dynamics simulations to efficiently sample multiple alchemical states, and utilizes the “custom” forces provided by OpenMM to allow exploration of many different alchemical intermediate functional forms.</p></list-item>
</list>
<p>Although these tools are written in Python, all expensive calculations are done by OpenMM and take full advantage of the available hardware, including GPUs and multicore CPUs. Because they interact with OpenMM only through well-defined public interfaces, they can be packaged and distributed independently. No changes to OpenMM itself are required to use them.</p>
<p>A set of advanced examples is included in the supporting information. They demonstrate more complex simulation techniques, and show how to use OpenMM in combination with other programs.</p>
</sec>
<sec id="sec007">
<title>Custom forces</title>
<p>In addition to the standard forces provided by OpenMM (such as Lennard-Jones forces, PME and reaction field electrostatics, and generalized Born models), custom forces are a mechanism for creating interactions between particles with entirely novel functional forms. There are many different custom force classes, each supporting a particular category of interactions. They are listed in <xref ref-type="table" rid="pcbi.1005659.t001">Table 1</xref>. Since OpenMM 4.1 was described in an earlier publication, several new custom force classes have been added, including CustomCompoundBondForce (added in OpenMM 5.0), CustomManyParticleForce (added in OpenMM 6.2), and CustomCentroidBondForce (added in OpenMM 7.0).</p>
<table-wrap id="pcbi.1005659.t001" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005659.t001</object-id>
<label>Table 1</label> <caption><title>Custom forces supported by OpenMM 7.0.</title></caption>
<alternatives>
<graphic id="pcbi.1005659.t001g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005659.t001" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left">Custom Force Class</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">CustomBondForce</td>
<td align="left">Applies forces to pairs of bonded atoms based on the distance between them.</td>
</tr>
<tr>
<td align="left">CustomAngleForce</td>
<td align="left">Applies forces to triplets of bonded atoms based on the angle between them.</td>
</tr>
<tr>
<td align="left">CustomTorsionForce</td>
<td align="left">Applies forces to sets of four bonded atoms based on the dihedral between them.</td>
</tr>
<tr>
<td align="left">CustomExternalForce</td>
<td align="left">Applies forces to individual atoms based on their positions.</td>
</tr>
<tr>
<td align="left">CustomCompoundBondForce</td>
<td align="left">Applies forces to sets of arbitrarily many bonded atoms based on any combination of their positions, distances, angles, and dihedrals.</td>
</tr>
<tr>
<td align="left">CustomNonbondedForce</td>
<td align="left">Applies forces to pairs of non-bonded atoms based on the distance between them.</td>
</tr>
<tr>
<td align="left">CustomGBForce</td>
<td align="left">Supports multi-stage computations of non-bonded interactions, such as generalized Born implicit solvent models.</td>
</tr>
<tr>
<td align="left">CustomCentroidBondForce</td>
<td align="left">Similar to CustomCompoundBondForce, but the interaction is based on the centroids of groups of atoms rather than individual atoms.</td>
</tr>
<tr>
<td align="left">CustomManyParticleForce</td>
<td align="left">Supports non-bonded interactions that depend on the positions of arbitrarily many atoms at once.</td>
</tr>
<tr>
<td align="left">CustomHbondForce</td>
<td align="left">Supports a variety of hydrogen bonding models.</td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
<p>In each case, the user provides an algebraic expression for the interaction energy as a function of the relevant variables. OpenMM analytically differentiates the expression to determine the corresponding force, then uses just-in-time compilation to generate machine code for efficiently computing the force and energy on the current hardware (either CPU or GPU).</p>
<p>As an example, Listing 2 defines a harmonic restraint that can be applied to the angles formed by triplets of atoms. It specifies that the energy of each triplet is given by <italic>k</italic>(<italic>θ</italic>-<italic>θ</italic><sub>0</sub>)<sup>2</sup>. It also specifies that <italic>k</italic> and <italic>θ</italic><sub>0</sub> are per-angle parameters: each triplet can have different values for them.</p>
<p>Listing 2: Implementation of a harmonic angle restraint using a CustomAngleForce.</p>
<p><monospace>force = CustomAngleForce('k*(theta-theta0)^2')</monospace></p>
<p><monospace>force.addPerAngleParameter('k')</monospace></p>
<p><monospace>force.addPerAngleParameter('theta0')</monospace></p>
<p>Custom forces are designed to achieve several goals that usually conflict with each other. First, it should be exceptionally easy to implement completely new functional forms for interactions. As seen in Listing 2, it often requires no more than a few lines of Python code. Second, a single implementation should work on all types of hardware. The exact same code can be used whether the program is being run on a CPU or GPU. Third, the user should not need to sacrifice performance. Because the expression is converted to machine code before the simulation is run, there often is little or no difference in speed between a custom force and a hand-written implementation of the same interaction.</p>
</sec>
<sec id="sec008">
<title>Custom integrators</title>
<p>Just as custom forces allow users to implement novel interactions, custom integrators allow them to implement novel integration algorithms. The algorithm is defined by a sequence of operations, each defining a calculation to be done. Various types of operations are supported. Examples include:</p>
<list list-type="bullet">
<list-item><p>Evaluating a mathematical expression for each degree of freedom, then assigning the result to a variable for each one.</p></list-item>
<list-item><p>Evaluating a mathematical expression once and assigning the result to a global variable.</p></list-item>
<list-item><p>Summing an expression over all degrees of freedom and assigning the result to a global variable.</p></list-item>
<list-item><p>Applying constraints to positions or velocities.</p></list-item>
</list>
<p>In the simplest case, all operations are executed in order to take a single integration time step. In addition, OpenMM 7.0 added support for more complex flow control through <italic>if</italic> and <italic>while</italic> blocks.</p>
<p>Listing 3 shows Python code that uses a custom integrator to implement the leapfrog Verlet algorithm. The function <monospace>addPerDofVariable()</monospace> defines a new variable that has a different value for each degree of freedom. The function <monospace>addComputePerDof()</monospace> defines a calculation to be performed independently for each degree of freedom. In the absence of constraints, each time step of this algorithm consists of the operations
<disp-formula id="pcbi.1005659.e001">
<alternatives>
<graphic id="pcbi.1005659.e001g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005659.e001" xlink:type="simple"/>
<mml:math display="block" id="M1">
<mml:mrow><mml:mi>v</mml:mi><mml:mo>←</mml:mo><mml:mi>v</mml:mi><mml:mo>+</mml:mo><mml:mi>d</mml:mi><mml:mi>t</mml:mi><mml:mo>·</mml:mo><mml:mi>f</mml:mi><mml:mo>/</mml:mo><mml:mi>m</mml:mi></mml:mrow>
</mml:math>
</alternatives>
</disp-formula>
<disp-formula id="pcbi.1005659.e002">
<alternatives>
<graphic id="pcbi.1005659.e002g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005659.e002" xlink:type="simple"/>
<mml:math display="block" id="M2">
<mml:mrow><mml:mi>x</mml:mi><mml:mo>←</mml:mo><mml:mi>x</mml:mi><mml:mo>+</mml:mo><mml:mi>d</mml:mi><mml:mi>t</mml:mi><mml:mo>·</mml:mo><mml:mi>v</mml:mi></mml:mrow>
</mml:math>
</alternatives>
</disp-formula>
where <italic>x</italic> is the position at time <italic>t</italic>, <italic>v</italic> is the velocity at time <italic>t</italic>-<italic>dt</italic>/2, <italic>dt</italic> is the step size, <italic>f</italic> is the force, and <italic>m</italic> is the particle mass. When constraints are present, the positions must then be adjusted to satisfy them, and finally the velocities are recalculated as
<disp-formula id="pcbi.1005659.e003">
<alternatives>
<graphic id="pcbi.1005659.e003g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005659.e003" xlink:type="simple"/>
<mml:math display="block" id="M3">
<mml:mrow><mml:mi>v</mml:mi><mml:mo>←</mml:mo><mml:mtext> </mml:mtext><mml:mo stretchy="false">(</mml:mo><mml:mi>x</mml:mi><mml:mo>−</mml:mo><mml:msub><mml:mi>x</mml:mi><mml:mn>0</mml:mn></mml:msub><mml:mo stretchy="false">)</mml:mo><mml:mo>/</mml:mo><mml:mi>d</mml:mi><mml:mi>t</mml:mi></mml:mrow>
</mml:math>
</alternatives>
</disp-formula>
where <italic>x</italic><sub>0</sub> is the position at the start of the step.</p>
<p>Listing 3: Leapfrog Verlet algorithm implemented as a CustomIntegrator.</p>
<p><monospace>integrator = CustomIntegrator(dt)</monospace></p>
<p><monospace>integrator.addPerDofVariable('x0', 0)</monospace></p>
<p><monospace>integrator.addComputePerDof('x0', 'x')</monospace></p>
<p><monospace>integrator.addComputePerDof('v', 'v+dt*f/m')</monospace></p>
<p><monospace>integrator.addComputePerDof('x', 'x+dt*v')</monospace></p>
<p><monospace>integrator.addConstrainPositions()</monospace></p>
<p><monospace>integrator.addComputePerDof('v', '(x-x0)/dt')</monospace></p>
<p>Far more complicated and sophisticated algorithms can be implemented in the same way. Here are some examples of integrators that have been created with this mechanism.</p>
<list list-type="bullet">
<list-item><p>The rRESPA multiple time step integration algorithm [<xref ref-type="bibr" rid="pcbi.1005659.ref023">23</xref>].</p></list-item>
<list-item><p>The aMD accelerated sampling algorithm [<xref ref-type="bibr" rid="pcbi.1005659.ref009">9</xref>].</p></list-item>
<list-item><p>Metropolis-Hastings Monte Carlo [<xref ref-type="bibr" rid="pcbi.1005659.ref024">24</xref>] with Gaussian displacement proposals.</p></list-item>
<list-item><p>Hybrid Monte Carlo and variants, such as Generalized hybrid Monte Carlo (GHMC) [<xref ref-type="bibr" rid="pcbi.1005659.ref025">25</xref>], a Metropolized form of Langevin dynamics.</p></list-item>
<list-item><p>Nonequilibrium candidate Monte Carlo (NCMC) [<xref ref-type="bibr" rid="pcbi.1005659.ref026">26</xref>], where an external field is changed during the course of dynamics and the resulting nonequilibrium proposal accepted or rejected to preserve the equilibrium distribution.</p></list-item>
</list>
<p>As with custom forces, a single implementation works on all types of hardware. Because just-in-time compilation is used to generate efficient machine code for the algorithm, there usually is little or no performance cost relative to using hand-written GPU code.</p>
</sec>
<sec id="sec009">
<title>Plugins</title>
<p>The lowest layer of the OpenMM architecture is based around plugins. This allows new features to be packaged as libraries, distributed independently, and loaded dynamically at runtime. For example, a plugin can implement a new type of interaction or a new integration algorithm, or it can add support for a new type of hardware. In fact, many of the core features of OpenMM are actually implemented as plugins, including its implementations of the AMOEBA force field [<xref ref-type="bibr" rid="pcbi.1005659.ref027">27</xref>], ring polymer molecular dynamics (RPMD) [<xref ref-type="bibr" rid="pcbi.1005659.ref028">28</xref>], and polarizable Drude particles [<xref ref-type="bibr" rid="pcbi.1005659.ref029">29</xref>].</p>
<p>This provides nearly unlimited extensibility, allowing users to implement any feature they might want. Writing a plugin involves far more work than the other extensibility features described above. For example, it is up to the user to write whatever code is necessary to make it work on each type of hardware, such as CUDA or OpenCL code for GPUs. When possible, it is therefore usually preferable to use one of the other mechanisms. Nevertheless, plugins are an important option when extreme extensibility and performance is needed. Like the other mechanisms, they allow a developer to create an extension and distribute it directly to users. No modifications to OpenMM itself are needed.</p>
</sec>
</sec>
<sec id="sec010">
<title>Advanced features</title>
<p>OpenMM has many other features beyond those discussed above, some of which are themselves unique or noteworthy. The following are some of the more significant ones.</p>
<sec id="sec011">
<title>AMOEBA</title>
<p>OpenMM has an implementation of the AMOEBA polarizable force field which is, to the best of our knowledge, the fastest available in any code [<xref ref-type="bibr" rid="pcbi.1005659.ref003">3</xref>]. AMOEBA is designed to transcend the limitations of conventional point charge force fields and achieve much higher accuracy in force and energy computations. It uses two main mechanisms to achieve this. First, instead of approximating atoms as point charges, it assigns each one a multipole moment up to the level of quadrupoles. Second, it explicitly models atomic polarization by assigning an induced dipole to each atom. Because the induced dipoles interact with each other, they must be computed at each time step using an iterative self-consistent field calculation. Both of these features make AMOEBA far slower to simulate than conventional force fields.</p>
<p>Much research has been done recently on ways to reduce this cost, and new versions of OpenMM have incorporated several of the most recent algorithms. Interactions between multipoles are computed using spherical harmonics in a quasi-internal coordinate system [<xref ref-type="bibr" rid="pcbi.1005659.ref030">30</xref>,<xref ref-type="bibr" rid="pcbi.1005659.ref031">31</xref>] (added in OpenMM 7.0). The iterative solver for induced dipoles uses the Direct Inversion in the Iterative Subspace (DIIS) algorithm [<xref ref-type="bibr" rid="pcbi.1005659.ref032">32</xref>] (added in OpenMM 6.1). Alternatively, it can use the recently developed extrapolated polarization approximation [<xref ref-type="bibr" rid="pcbi.1005659.ref033">33</xref>] (added in OpenMM 7.0). In this method, only a few iterations are performed, and then an analytic approximation is used to extrapolate to the limit of infinite iterations. This can give a large improvement in speed with only a very small loss in accuracy.</p>
</sec>
<sec id="sec012">
<title>Drude particles</title>
<p>A new feature introduced in OpenMM 5.2 is support for Drude particles [<xref ref-type="bibr" rid="pcbi.1005659.ref029">29</xref>] as an alternative way of modelling polarizability. In this method, each polarizable atom is modelled as a pair of charges connected by an anisotropic harmonic force. When an electric field is applied, the two particles are displaced from each other, creating a dipole moment. The strength of the force connecting them determines the atomic polarizability. The particle positions can be determined using a self-consistent field calculation or, more commonly, a dual-thermostat Langevin integrator that couples the center of mass of each pair to a high temperature heat bath (e.g. 300K), but the internal motion of each pair to a low temperature heat bath (e.g. 1K).</p>
<p>Polarizable force fields based on Drude particles are included with OpenMM. This includes the SWM4-NDP water model [<xref ref-type="bibr" rid="pcbi.1005659.ref034">34</xref>], and the CHARMM polarizable force field for proteins [<xref ref-type="bibr" rid="pcbi.1005659.ref004">4</xref>]. They aim to incorporate some of the same physical effects as AMOEBA at a lower computational cost.</p>
</sec>
<sec id="sec013">
<title>Virtual sites</title>
<p>Virtual sites are interaction sites within a molecule whose positions are not integrated directly. Instead, they are calculated at each time step based on the positions of other particles. They are often used to provide a more detailed charge distribution than would be possible using only a single point charge for each atom. For example, they appear in many multisite water models (such as TIP-4P and TIP-5P), and also in the CHARMM polarizable protein force field.</p>
<p>There are a multitude of possible ways a virtual site position can be specified based on the positions of other mobile atoms. Typically, a simulation package will provide a limited choice of rules, covering only those cases needed for the particular force fields that package supports. For example, Gromacs 5 offers a choice of four methods for calculating a virtual site position based on the positions of three atoms. Each one covers one very specific case that occurs in a supported force field. One can easily imagine other cases that would be impossible to construct with any of the current rules, and would therefore require adding a fifth rule.</p>
<p>OpenMM also offers a few specialized rules for positioning virtual sites, but in addition, it has a very general method designed to cover all cases that are ever likely to occur in which a virtual site depends on the positions of three atoms. This method, added in OpenMM 6.1, can reproduce all four of the rules provided by Gromacs, as well as supporting many other situations they could not.</p>
<p>In this method, three vectors are first calculated as weighted averages of the positions of the three atoms:
<disp-formula id="pcbi.1005659.e004">
<alternatives>
<graphic id="pcbi.1005659.e004g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005659.e004" xlink:type="simple"/>
<mml:math display="block" id="M4">
<mml:mrow><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>o</mml:mi></mml:mstyle><mml:mtext> </mml:mtext><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mtext> w</mml:mtext></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:msup><mml:mrow/><mml:mtext>o</mml:mtext></mml:msup><mml:msub><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>r</mml:mi></mml:mstyle><mml:mn>1</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mtext> w</mml:mtext></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:msup><mml:mrow/><mml:mtext>o</mml:mtext></mml:msup><mml:msub><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>r</mml:mi></mml:mstyle><mml:mn>2</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mtext> w</mml:mtext></mml:mrow><mml:mn>3</mml:mn></mml:msub><mml:msup><mml:mrow/><mml:mtext>o</mml:mtext></mml:msup><mml:msub><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>r</mml:mi></mml:mstyle><mml:mn>3</mml:mn></mml:msub></mml:mrow>
</mml:math>
</alternatives>
</disp-formula>
<disp-formula id="pcbi.1005659.e005">
<alternatives>
<graphic id="pcbi.1005659.e005g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005659.e005" xlink:type="simple"/>
<mml:math display="block" id="M5">
<mml:mrow><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>d</mml:mi><mml:mi>x</mml:mi></mml:mstyle><mml:mtext> </mml:mtext><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mtext> w</mml:mtext></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:msup><mml:mrow/><mml:mtext>x</mml:mtext></mml:msup><mml:msub><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>r</mml:mi></mml:mstyle><mml:mn>1</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mtext> w</mml:mtext></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:msup><mml:mrow/><mml:mtext>x</mml:mtext></mml:msup><mml:msub><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>r</mml:mi></mml:mstyle><mml:mn>2</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mtext> w</mml:mtext></mml:mrow><mml:mn>3</mml:mn></mml:msub><mml:msup><mml:mrow/><mml:mtext>x</mml:mtext></mml:msup><mml:msub><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>r</mml:mi></mml:mstyle><mml:mn>3</mml:mn></mml:msub></mml:mrow>
</mml:math>
</alternatives>
</disp-formula>
<disp-formula id="pcbi.1005659.e006">
<alternatives>
<graphic id="pcbi.1005659.e006g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005659.e006" xlink:type="simple"/>
<mml:math display="block" id="M6">
<mml:mrow><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>d</mml:mi><mml:mi>y</mml:mi></mml:mstyle><mml:mtext> </mml:mtext><mml:mo>=</mml:mo><mml:msub><mml:mrow><mml:mtext> w</mml:mtext></mml:mrow><mml:mn>1</mml:mn></mml:msub><mml:msup><mml:mrow/><mml:mtext>y</mml:mtext></mml:msup><mml:msub><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>r</mml:mi></mml:mstyle><mml:mn>1</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mtext> w</mml:mtext></mml:mrow><mml:mn>2</mml:mn></mml:msub><mml:msup><mml:mrow/><mml:mtext>y</mml:mtext></mml:msup><mml:msub><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>r</mml:mi></mml:mstyle><mml:mn>2</mml:mn></mml:msub><mml:mo>+</mml:mo><mml:msub><mml:mrow><mml:mtext> w</mml:mtext></mml:mrow><mml:mn>3</mml:mn></mml:msub><mml:msup><mml:mrow/><mml:mtext>y</mml:mtext></mml:msup><mml:msub><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>r</mml:mi></mml:mstyle><mml:mn>3</mml:mn></mml:msub></mml:mrow>
</mml:math>
</alternatives>
</disp-formula>
where <bold>r</bold><sub>1</sub>, <bold>r</bold><sub>2</sub>, and <bold>r</bold><sub>3</sub> are the atom positions, and the coefficients are user-defined. They are then used to construct a set of orthonormal coordinate axes (<inline-formula id="pcbi.1005659.e007"><alternatives><graphic id="pcbi.1005659.e007g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005659.e007" xlink:type="simple"/><mml:math display="inline" id="M7"><mml:mover accent="true"><mml:mi mathvariant="bold">x</mml:mi><mml:mo>^</mml:mo></mml:mover></mml:math></alternatives></inline-formula>, <inline-formula id="pcbi.1005659.e008"><alternatives><graphic id="pcbi.1005659.e008g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005659.e008" xlink:type="simple"/><mml:math display="inline" id="M8"><mml:mover accent="true"><mml:mi mathvariant="bold">y</mml:mi><mml:mo>^</mml:mo></mml:mover></mml:math></alternatives></inline-formula>, <inline-formula id="pcbi.1005659.e009"><alternatives><graphic id="pcbi.1005659.e009g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005659.e009" xlink:type="simple"/><mml:math display="inline" id="M9"><mml:mover accent="true"><mml:mi mathvariant="bold">z</mml:mi><mml:mo>^</mml:mo></mml:mover></mml:math></alternatives></inline-formula>):
<disp-formula id="pcbi.1005659.e010">
<alternatives>
<graphic id="pcbi.1005659.e010g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005659.e010" xlink:type="simple"/>
<mml:math display="block" id="M10">
<mml:mrow><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>d</mml:mi><mml:mi>z</mml:mi></mml:mstyle><mml:mo>=</mml:mo><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>d</mml:mi><mml:mi>x</mml:mi></mml:mstyle><mml:mo>×</mml:mo><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>d</mml:mi><mml:mi>y</mml:mi></mml:mstyle></mml:mrow>
</mml:math>
</alternatives>
</disp-formula>
<disp-formula id="pcbi.1005659.e011">
<alternatives>
<graphic id="pcbi.1005659.e011g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005659.e011" xlink:type="simple"/>
<mml:math display="block" id="M11">
<mml:mrow><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mover accent="true"><mml:mi>x</mml:mi><mml:mo>^</mml:mo></mml:mover></mml:mstyle><mml:mo>=</mml:mo><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>d</mml:mi><mml:mi>x</mml:mi></mml:mstyle><mml:mo>/</mml:mo><mml:mrow><mml:mo>|</mml:mo><mml:mrow><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>d</mml:mi><mml:mi>x</mml:mi></mml:mstyle></mml:mrow><mml:mo>|</mml:mo></mml:mrow></mml:mrow>
</mml:math>
</alternatives>
</disp-formula>
<disp-formula id="pcbi.1005659.e012">
<alternatives>
<graphic id="pcbi.1005659.e012g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005659.e012" xlink:type="simple"/>
<mml:math display="block" id="M12">
<mml:mrow><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mover accent="true"><mml:mi>z</mml:mi><mml:mo>^</mml:mo></mml:mover></mml:mstyle><mml:mo>=</mml:mo><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>d</mml:mi><mml:mi>z</mml:mi></mml:mstyle><mml:mo>/</mml:mo><mml:mrow><mml:mo>|</mml:mo><mml:mrow><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>d</mml:mi><mml:mi>z</mml:mi></mml:mstyle></mml:mrow><mml:mo>|</mml:mo></mml:mrow></mml:mrow>
</mml:math>
</alternatives>
</disp-formula>
<disp-formula id="pcbi.1005659.e013">
<alternatives>
<graphic id="pcbi.1005659.e013g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005659.e013" xlink:type="simple"/>
<mml:math display="block" id="M13">
<mml:mrow><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mover accent="true"><mml:mi>y</mml:mi><mml:mo>^</mml:mo></mml:mover></mml:mstyle><mml:mo>=</mml:mo><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mover accent="true"><mml:mi>z</mml:mi><mml:mo>^</mml:mo></mml:mover></mml:mstyle><mml:mo>×</mml:mo><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mover accent="true"><mml:mi>x</mml:mi><mml:mo>^</mml:mo></mml:mover></mml:mstyle></mml:mrow>
</mml:math>
</alternatives>
</disp-formula></p>
<p>Finally, the virtual site position is set to an arbitrary user-defined location within this coordinate system:
<disp-formula id="pcbi.1005659.e014">
<alternatives>
<graphic id="pcbi.1005659.e014g" mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.1005659.e014" xlink:type="simple"/>
<mml:math display="block" id="M14">
<mml:mrow><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>r</mml:mi></mml:mstyle><mml:mo>=</mml:mo><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mi>o</mml:mi></mml:mstyle><mml:mo>+</mml:mo><mml:msub><mml:mi>p</mml:mi><mml:mn>1</mml:mn></mml:msub><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mover accent="true"><mml:mi>x</mml:mi><mml:mo>^</mml:mo></mml:mover></mml:mstyle><mml:mo>+</mml:mo><mml:msub><mml:mi>p</mml:mi><mml:mn>2</mml:mn></mml:msub><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mover accent="true"><mml:mi>y</mml:mi><mml:mo>^</mml:mo></mml:mover></mml:mstyle><mml:mo>+</mml:mo><mml:msub><mml:mi>p</mml:mi><mml:mn>3</mml:mn></mml:msub><mml:mstyle mathsize="normal" mathvariant="bold"><mml:mover accent="true"><mml:mi>z</mml:mi><mml:mo>^</mml:mo></mml:mover></mml:mstyle></mml:mrow>
</mml:math>
</alternatives>
</disp-formula></p>
<p>This method is another example of how flexibility and extensibility are core design goals of OpenMM. Instead of supporting only a limited set of specialized virtual site types, it tries to provide a very general type that can cover as wide a range of cases as possible, thus giving maximum flexibility to users in designing their models and force fields.</p>
</sec>
<sec id="sec014">
<title>Triclinic periodic boxes</title>
<p>Earlier versions of OpenMM supported only rectangular periodic boxes. In OpenMM 6.3 it was extended to support triclinic boxes as well: ones formed by combinations of three arbitrary lattice vectors. It can be shown that this formulation is extremely general; all standard periodic box shapes, including the popular rhombic dodecahedron and truncated octahedron, can be represented as triclinic boxes [<xref ref-type="bibr" rid="pcbi.1005659.ref035">35</xref>].</p>
<p>This feature serves two important functions. First, it allows one to simulate crystals, which very often have non-rectangular unit cells. Second, it is useful when simulating freely rotating molecules in solvent. One needs to include a certain amount of padding around the molecule to ensure that no two periodic copies ever come too close together. Because the molecule can freely rotate, the same padding is required along all directions, so one wants the periodic box to be as close as possible to spherical. For a given padding distance, the rhombic dodecahedron has only about 71% the volume of a rectangular unit cell. It therefore requires less solvent and reduces the cost of the simulation.</p>
</sec>
<sec id="sec015">
<title>Multiple precision modes</title>
<p>Many aspects of a molecular dynamics code involve tradeoffs between speed and accuracy. This is especially true when executing on a GPU, since they often have very poor double precision performance. To optimize execution speed, it is preferable to use single precision whenever possible, resorting to double precision only when absolutely necessary. Unfortunately, there is no unique standard for when it is "necessary". The minimum acceptable level of error can vary widely depending on the details of a simulation and the type of information one wishes to obtain from it.</p>
<p>OpenMM 5.0 introduced support for multiple precision modes. When running on a GPU, the user has a choice of three modes:</p>
<list list-type="bullet">
<list-item><p><italic>Single Precision</italic>: Nearly all calculations are done in single precision. Double is used in only a handful of places where it has negligible impact on performance and is most important for accuracy.</p></list-item>
<list-item><p><italic>Mixed Precision</italic>: Forces are computed in single precision, but integration and energy accumulation are done in double precision. This gives a large improvement in the accuracy of some quantities, while only having a small impact in performance.</p></list-item>
<list-item><p><italic>Double Precision</italic>: All calculations are done in double precision. This gives the best accuracy, but often has a very large effect on performance.</p></list-item>
</list>
<p>The effects of the different modes are illustrated below in Results.</p>
<p>Regardless of the precision mode, forces are accumulated as 64 bit fixed point values. This improves accuracy when working in single or mixed precision modes, and ensures that force accumulation is deterministic. It also allows force accumulation to be done with integer atomic operations, which substantially improves performance. OpenMM has used this method since version 4.0, released in January 2012. Since that time, it has found its way into other GPU accelerated MD codes, such as AMBER [<xref ref-type="bibr" rid="pcbi.1005659.ref036">36</xref>].</p>
</sec>
</sec>
</sec>
<sec id="sec016" sec-type="results">
<title>Results</title>
<sec id="sec017">
<title>Performance</title>
<p>To evaluate the speed of OpenMM, we benchmarked its performance with three molecular systems of varying size:</p>
<list list-type="order">
<list-item><p>Dihydrofolate reductase (DHFR), a 2489 atom protein solvated with 7023 water molecules to give a total of 23,558 atoms.</p></list-item>
<list-item><p>Abl kinase (ABL1), a 4067 atom protein solvated with 13,692 water molecules to give a total of 45,143 atoms</p></list-item>
<list-item><p>The mechanistic target of rapamycin (MTOR), a 19,019 atom protein solvated with 56,733 water molecules to give a total of 189,218 atoms.</p></list-item>
</list>
<p>Benchmarks were run on the following types of hardware:</p>
<list list-type="order">
<list-item><p>An NVIDIA Titan X Pascal GPU.</p></list-item>
<list-item><p>An NVIDIA Tesla K80 GPU.</p></list-item>
<list-item><p>A 4 core, 3.5 GHz Intel Core i7-2700K CPU.</p></list-item>
</list>
<p>All GPU simulations used CUDA 7.5. The K80 consists of two independent GPUs on a single board. OpenMM can parallelize a single simulation across multiple GPUs, or alternatively run a different simulation on each one at the same time. We therefore included benchmarks using only one of the GPUs (thus leaving the other free for a different simulation), as well as ones using both GPUs for a single simulation.</p>
<p>In the discussion below, we summarize the most important parameters for each set of simulations. Full details can be found in the scripts used to run the simulations, which are included in the Supplemental Information.</p>
<sec id="sec018">
<title>Amber</title>
<p>We first benchmarked the performance using the AMBER99SB-ILDN force field and TIP3P water model. All simulations used a Langevin integrator with a temperature of 300 K and a friction coefficient of 1 ps<sup>-1</sup>. Long range Coulomb interactions were computed with the Particle Mesh Ewald (PME) method.</p>
<p>Simulations were run using integration time steps of both 2 fs and 5 fs. For the 2 fs simulations, covalent bonds involving a hydrogen atom were modelled as rigid constraints. For the 5 fs simulations, all covalent bonds were modelled as rigid constraints and hydrogen mass repartitioning was used to increase the mass of hydrogen atoms to 4 amu (while decreasing the masses of the atoms they were bonded to so as to keep the total system mass constant). In all cases, water molecules were kept rigid. All of the GPU simulations used single precision.</p>
<p>The results are shown in <xref ref-type="table" rid="pcbi.1005659.t002">Table 2</xref>.</p>
<table-wrap id="pcbi.1005659.t002" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005659.t002</object-id>
<label>Table 2</label> <caption><title>Benchmark results for various protein systems in explicit solvent simulated with PME.</title></caption>
<alternatives>
<graphic id="pcbi.1005659.t002g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005659.t002" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="center" rowspan="2">Molecule</th>
<th align="center" rowspan="2">Atoms</th>
<th align="center" rowspan="2">Step Size (fs)</th>
<th align="center" colspan="4">Speed in ns/day</th>
</tr>
<tr>
<th align="center">Titan X</th>
<th align="center">1x K80</th>
<th align="center">2x K80</th>
<th align="center">Core i7</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center" rowspan="2">DHFR</td>
<td align="center" rowspan="2">23,558</td>
<td align="center">2</td>
<td align="right">367</td>
<td align="right">81</td>
<td align="right">109</td>
<td align="char" char=".">13.0</td>
</tr>
<tr>
<td align="center">5</td>
<td align="right">706</td>
<td align="right">174</td>
<td align="right">213</td>
<td align="char" char=".">30.5</td>
</tr>
<tr>
<td align="center" rowspan="2">ABL1</td>
<td align="center" rowspan="2">13,692</td>
<td align="center">2</td>
<td align="right">210</td>
<td align="right">44</td>
<td align="right">64</td>
<td align="char" char=".">6.3</td>
</tr>
<tr>
<td align="center">5</td>
<td align="right">450</td>
<td align="right">98</td>
<td align="right">135</td>
<td align="char" char=".">15.2</td>
</tr>
<tr>
<td align="center" rowspan="2">MTOR</td>
<td align="center" rowspan="2">189,218</td>
<td align="center">2</td>
<td align="right">41.5</td>
<td align="right">9.8</td>
<td align="right">15.9</td>
<td align="char" char=".">1.5</td>
</tr>
<tr>
<td align="center">5</td>
<td align="right">92.3</td>
<td align="right">22.3</td>
<td align="right">32.3</td>
<td align="char" char=".">3.4</td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
<p>Depending on the molecule and settings, using two GPUs is anywhere from 22% to 62% faster than a single GPU, with the larger molecules generally having the higher speedups. If the goal is to run a single simulation as quickly as possible, using multiple GPUs is therefore quite useful. On the other hand, if the goal is to generate as much total simulation time as possible, it is more efficient to run a separate simulation on each one.</p>
</sec>
<sec id="sec019">
<title>AMOEBA</title>
<p>We next benchmarked performance using the AMOEBA2013 force field. The AMOEBA water model is designed to be flexible rather than rigid, which requires a smaller step size. We therefore used a rRESPA multiple time step integrator, in which bonded forces were evaluated every 1 fs and nonbonded forces every 2 fs. No degrees of freedom were constrained. As above, we used PME for long range Coulomb interactions and single precision.</p>
<p>Simulations were run with two different methods of calculating the induced dipoles:</p>
<list list-type="order">
<list-item><p>Full mutual polarization with a tolerance of 10<sup>−5</sup> for the induced dipoles.</p></list-item>
<list-item><p>The extrapolated polarization approximation.</p></list-item>
</list>
<p>The CPU implementation of AMOEBA in OpenMM is not well optimized, so we only ran benchmarks on GPUs. Using multiple GPUs for a single simulation is not supported with AMOEBA. Because AMOEBA is a very expensive force field and is normally only used for modest sized systems, we only ran benchmarks for DHFR.</p>
<p>The results are shown in <xref ref-type="table" rid="pcbi.1005659.t003">Table 3</xref>.</p>
<table-wrap id="pcbi.1005659.t003" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005659.t003</object-id>
<label>Table 3</label> <caption><title>Benchmark results for DHFR in explicit solvent using AMOEBA2013.</title></caption>
<alternatives>
<graphic id="pcbi.1005659.t003g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005659.t003" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="center" rowspan="2">Polarization</th>
<th align="center" colspan="2">Speed in ns/day</th>
</tr>
<tr>
<th align="center">Titan X</th>
<th align="center">K80</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Mutual</td>
<td align="char" char=".">10.09</td>
<td align="char" char=".">2.84</td>
</tr>
<tr>
<td align="center">Extrapolated</td>
<td align="char" char=".">20.90</td>
<td align="char" char=".">4.58</td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
</sec>
<sec id="sec020">
<title>Effect of precision</title>
<p>When running on a GPU, OpenMM gives a choice of three precision modes: single, mixed, and double. To measure the effect of this choice on performance, we repeated the 2 fs time step DHFR simulations in mixed and double modes. The results are shown in <xref ref-type="table" rid="pcbi.1005659.t004">Table 4</xref>.</p>
<table-wrap id="pcbi.1005659.t004" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005659.t004</object-id>
<label>Table 4</label> <caption><title>Effect of precision model on performance.</title></caption>
<alternatives>
<graphic id="pcbi.1005659.t004g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005659.t004" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="center" rowspan="2">Precision</th>
<th align="center" colspan="2">Speed in ns/day</th>
</tr>
<tr>
<th align="center">Titan X</th>
<th align="center">K80</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Single</td>
<td align="right">367</td>
<td align="right">81</td>
</tr>
<tr>
<td align="center">Mixed</td>
<td align="right">332</td>
<td align="right">78</td>
</tr>
<tr>
<td align="center">Double</td>
<td align="right">18.1</td>
<td align="right">30.2</td>
</tr>
</tbody>
</table>
</alternatives>
</table-wrap>
<p>The speed difference between single and mixed precision is quite small, whereas double precision is much slower. This is especially true on the Titan X, a GPU primarily targeted at consumers that has very poor double precision performance. The Tesla K80, which is targeted at high performance computing, does much better, although there is still a large decrease in performance. Overall, the Titan X is far faster in single or mixed precision modes, while the K80 is faster in double precision mode.</p>
<p>To see the benefits of higher precision, we performed additional simulations of DHFR. Because a thermostat tends to mask the effect of error, these simulations used a leapfrog Verlet integrator to simulate constant energy. All simulations used the AMBER99SB-ILDN force field, a 2 fs time step, rigid water, and constraints on bonds involving hydrogen.</p>
<p>Each simulation was 1 ns in length. The total energy was recorded every 1 ps, and a linear regression was used to estimate the rate of energy change. Ten independent simulations were performed for each precision mode, giving ten estimates of the rate. <xref ref-type="table" rid="pcbi.1005659.t005">Table 5</xref> reports the mean and standard error of those ten rates for each mode.</p>
<table-wrap id="pcbi.1005659.t005" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005659.t005</object-id>
<label>Table 5</label> <caption><title>Energy drift for different precision models for the DHFR explicit solvent system.</title></caption>
<alternatives>
<graphic id="pcbi.1005659.t005g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005659.t005" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="center">Precision</th>
<th align="center">Energy drift in (kJ/mol)/ps</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Single</td>
<td align="center">1.557 ± 0.003</td>
</tr>
<tr>
<td align="center">Mixed</td>
<td align="center">-0.0047 ± 0.0008</td>
</tr>
<tr>
<td align="center">Double</td>
<td align="center">-0.0062 ± 0.0002</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t005fn001"><p>The reported uncertainty in each value is the standard error of the drift rates from ten independent simulations.</p></fn>
</table-wrap-foot>
</table-wrap>
<p>The energy drift in single precision is more than two orders of magnitude larger than in mixed or double precision. When accurate energy conservation is important, using mixed precision has a very large benefit at low cost. The average drift rates in mixed and double precision are not significantly different from each other, indicating that numeric precision is no longer the dominant source of error. In other cases, such as when using a smaller step size or when simulating a larger molecule, statistically significant differences between them might emerge.</p>
</sec>
</sec>
<sec id="sec021">
<title>Input pipelines</title>
<p>A key feature of OpenMM is its support for multiple input pipelines. This allows users to prepare molecular systems with the tools of their choice, then simulate them in OpenMM. Support for Gromacs input files was added in OpenMM 5.1, Desmond file support was added in OpenMM 6.0, and CHARMM file support was added in OpenMM 6.1.</p>
<p>The code in Listing 1 began from a PDB file and force field definition, using those to construct a description of the molecular system. Listing 4 shows the changes needed to instead construct it from an Amber prmtop file, as created by the AmberTools suite of software. More complete examples of using Amber and CHARMM input files are included in the supporting information.</p>
<p>Listing 4: Loading a system from Amber prmtop/inpcrd files.</p>
<p><monospace>prmtop = AmberPrmtopFile('input.prmtop')</monospace></p>
<p><monospace>system = prmtop.createSystem(nonbondedMethod = PME, nonbondedCutoff = 1*nanometer, constraints = HBonds)</monospace></p>
<p>To validate the accuracy of the input pipelines, we constructed systems using the setup tools from other packages, then loaded them into those packages and into OpenMM and compared the forces and energies. We performed these tests on two systems: DHFR, a 159 residue protein, and 2KOC, a 14-mer hairpin RNA. Comparisons were made to Amber 16, Gromacs 4.6.5, and CHARMM-LITE c40b1. For Amber, we performed comparisons in both explicit solvent and OBC1 implicit solvent. For Gromacs and CHARMM, we compared only explicit solvent.</p>
<p>To create the Amber input files, ParmEd [<xref ref-type="bibr" rid="pcbi.1005659.ref037">37</xref>] was used to download PDB files 4M6J (DHFR) and 2KOC (RNA hairpin), which were then stripped of water molecules and adjusted to standard amino acids. In the case of 2KOC, the first model was used. Cofactors and phosphates were deleted. Amber prmtop and inpcrd files were created with LEaP from the AmberTools 16 distribution. For implicit solvent simulations, mbondi3 GB radii were used; for explicit solvent simulations, the system was solvated with TIP3P waters in an octahedral box with 15 Å of clearance, and 20 Na+ and 20 Cl- counterions were added.</p>
<p>To create the Gromacs input files, ParmEd was used to convert the Amber prmtop and inpcrd files into Gromacs top and gro files.</p>
<p>To create the CHARMM input files, CHARMM-GUI [<xref ref-type="bibr" rid="pcbi.1005659.ref038">38</xref>] was used to download the 4M6J and 2KOC PDB files. Crystallographic water molecules were deleted, and the system was solvated with a rectangular water box with 15 Å of padding. Default values were accepted for all other options, including replacing nonstandard amino acids and patching terminal residues.</p>
<p>All of the input files, as well as scripts needed to run the comparisons, are included in the Supplemental Information.</p>
<p>Results are shown for Amber in Tables <xref ref-type="table" rid="pcbi.1005659.t006">6</xref> and <xref ref-type="table" rid="pcbi.1005659.t007">7</xref>, for Gromacs in Tables <xref ref-type="table" rid="pcbi.1005659.t008">8</xref> and <xref ref-type="table" rid="pcbi.1005659.t009">9</xref>, and for CHARMM in Tables <xref ref-type="table" rid="pcbi.1005659.t010">10</xref> and <xref ref-type="table" rid="pcbi.1005659.t011">11</xref>. In all cases the agreement is excellent, with all energy components matching to at least four significant digits. In systems that use PME, the nonbonded energies have somewhat larger differences than other energy components. This is partly because of the larger magnitude of this interaction, and partly because of the fact that different applications compute nonbonded interactions in slightly different ways. For example, Amber uses 4th order splines for charge spreading, while OpenMM uses 5th order splines. Nonetheless, they both compute the forces and energy to similar overall accuracy.</p>
<table-wrap id="pcbi.1005659.t006" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005659.t006</object-id>
<label>Table 6</label> <caption><title>Comparison of energy components, as calculated by Amber and OpenMM.</title></caption>
<alternatives>
<graphic id="pcbi.1005659.t006g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005659.t006" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left"/>
<th align="center" colspan="2">2KOC, OBC</th>
<th align="center" colspan="2">2KOC, PME</th>
<th align="center" colspan="2">DHFR, OBC</th>
<th align="center" colspan="2">DHFR, PME</th>
</tr>
<tr>
<th align="left">Term</th>
<th align="center">Amber</th>
<th align="center">OpenMM</th>
<th align="center">Amber</th>
<th align="center">OpenMM</th>
<th align="center">Amber</th>
<th align="center">OpenMM</th>
<th align="center">Amber</th>
<th align="center">OpenMM</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Bond</td>
<td align="char" char=".">7876.38</td>
<td align="char" char=".">7876.38</td>
<td align="char" char=".">7877.63</td>
<td align="char" char=".">7877.63</td>
<td align="char" char=".">611.05</td>
<td align="char" char=".">611.05</td>
<td align="char" char=".">613.34</td>
<td align="char" char=".">613.34</td>
</tr>
<tr>
<td align="left">Angle</td>
<td align="char" char=".">274.19</td>
<td align="char" char=".">274.19</td>
<td align="char" char=".">274.19</td>
<td align="char" char=".">274.19</td>
<td align="char" char=".">1611.89</td>
<td align="char" char=".">1611.89</td>
<td align="char" char=".">1611.89</td>
<td align="char" char=".">1611.89</td>
</tr>
<tr>
<td align="left">Dihedral</td>
<td align="char" char=".">1416.68</td>
<td align="char" char=".">1416.68</td>
<td align="char" char=".">1416.68</td>
<td align="char" char=".">1416.68</td>
<td align="char" char=".">8844.32</td>
<td align="char" char=".">8844.32</td>
<td align="char" char=".">8844.32</td>
<td align="char" char=".">8844.32</td>
</tr>
<tr>
<td align="left">Nonbonded</td>
<td align="char" char=".">-3316.70</td>
<td align="char" char=".">-3316.81</td>
<td align="char" char=".">-235740.76</td>
<td align="char" char=".">-235750.52</td>
<td align="char" char=".">-21806.02</td>
<td align="char" char=".">-21806.70</td>
<td align="char" char=".">-433365.84</td>
<td align="char" char=".">-433410.31</td>
</tr>
<tr>
<td align="left">OBC</td>
<td align="char" char=".">-11607.17</td>
<td align="char" char=".">-11607.57</td>
<td align="left"/>
<td align="left"/>
<td align="char" char=".">-13766.56</td>
<td align="char" char=".">-13767.04</td>
<td align="left"/>
<td align="left"/>
</tr>
<tr>
<td align="left">Total</td>
<td align="char" char=".">-5356.62</td>
<td align="char" char=".">-5357.13</td>
<td align="char" char=".">-226172.26</td>
<td align="char" char=".">-226182.02</td>
<td align="char" char=".">-24505.32</td>
<td align="char" char=".">-24506.48</td>
<td align="char" char=".">-422296.30</td>
<td align="char" char=".">-422340.77</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t006fn001"><p>All values are in kJ/mol.</p></fn>
</table-wrap-foot>
</table-wrap>
<table-wrap id="pcbi.1005659.t007" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005659.t007</object-id>
<label>Table 7</label> <caption><title>Comparison of forces as computed by Amber and OpenMM.</title></caption>
<alternatives>
<graphic id="pcbi.1005659.t007g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005659.t007" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left"/>
<th align="left">2KOC, OBC</th>
<th align="left">2KOC, PME</th>
<th align="left">DHFR, OBC</th>
<th align="left">DHFR, PME</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Mean</td>
<td align="char" char=".">0.99999</td>
<td align="char" char=".">0.99996</td>
<td align="char" char=".">1.00000</td>
<td align="char" char=".">0.99997</td>
</tr>
<tr>
<td align="left">Minimum</td>
<td align="char" char=".">0.99987</td>
<td align="char" char=".">0.99149</td>
<td align="char" char=".">0.99981</td>
<td align="char" char=".">0.96374</td>
</tr>
<tr>
<td align="left">Maximum</td>
<td align="char" char=".">1.00012</td>
<td align="char" char=".">1.00530</td>
<td align="char" char=".">1.00021</td>
<td align="char" char=".">1.00997</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t007fn001"><p>Values are the normalized projection of the Amber forces (<bold>F</bold><sub>A</sub>) onto the OpenMM forces (<bold>F</bold><sub>O</sub>): (<bold>F</bold><sub>A</sub>∙<bold>F</bold><sub>O</sub>)/(<bold>F</bold><sub>O</sub>∙<bold>F</bold><sub>O</sub>).</p></fn>
<fn id="t007fn002"><p>The mean, minimum, and maximum are taken over all atoms.</p></fn>
</table-wrap-foot>
</table-wrap>
<table-wrap id="pcbi.1005659.t008" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005659.t008</object-id>
<label>Table 8</label> <caption><title>Comparison of energy components, as calculated by Gromacs and OpenMM.</title></caption>
<alternatives>
<graphic id="pcbi.1005659.t008g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005659.t008" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left"/>
<th align="center" colspan="2">2KOC</th>
<th align="center" colspan="2">DHFR</th>
</tr>
<tr>
<th align="left">Term</th>
<th align="center">Gromacs</th>
<th align="center">OpenMM</th>
<th align="center">Gromacs</th>
<th align="center">OpenMM</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Bond</td>
<td align="char" char=".">7976.96</td>
<td align="char" char=".">7976.95</td>
<td align="char" char=".">682.27</td>
<td align="char" char=".">682.27</td>
</tr>
<tr>
<td align="left">Angle</td>
<td align="char" char=".">277.21</td>
<td align="char" char=".">277.21</td>
<td align="char" char=".">1646.32</td>
<td align="char" char=".">1646.32</td>
</tr>
<tr>
<td align="left">Dihedral</td>
<td align="char" char=".">1416.77</td>
<td align="char" char=".">1416.76</td>
<td align="char" char=".">8847.34</td>
<td align="char" char=".">8847.38</td>
</tr>
<tr>
<td align="left">Nonbonded</td>
<td align="char" char=".">-235817.06</td>
<td align="char" char=".">-235793.81</td>
<td align="char" char=".">-433422.38</td>
<td align="char" char=".">-433449.40</td>
</tr>
<tr>
<td align="left">Total</td>
<td align="char" char=".">-226146.12</td>
<td align="char" char=".">-226122.89</td>
<td align="char" char=".">-422246.45</td>
<td align="char" char=".">-422273.43</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t008fn001"><p>All values are in kJ/mol.</p></fn>
</table-wrap-foot>
</table-wrap>
<table-wrap id="pcbi.1005659.t009" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005659.t009</object-id>
<label>Table 9</label> <caption><title>Comparison of forces as computed by Gromacs and OpenMM.</title></caption>
<alternatives>
<graphic id="pcbi.1005659.t009g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005659.t009" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left"/>
<th align="center">2KOC</th>
<th align="center">DHFR</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Mean</td>
<td align="char" char=".">1.00000</td>
<td align="char" char=".">1.00000</td>
</tr>
<tr>
<td align="left">Minimum</td>
<td align="char" char=".">0.99807</td>
<td align="char" char=".">0.99785</td>
</tr>
<tr>
<td align="left">Maximum</td>
<td align="char" char=".">1.00041</td>
<td align="char" char=".">1.00230</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t009fn001"><p>Values are the normalized projection of the Gromacs forces (<bold>F</bold><sub>G</sub>) onto the OpenMM forces (<bold>F</bold><sub>O</sub>): (<bold>F</bold><sub>G</sub>∙<bold>F</bold><sub>O</sub>)/(<bold>F</bold><sub>O</sub>∙<bold>F</bold><sub>O</sub>).</p></fn>
<fn id="t009fn002"><p>The mean, minimum, and maximum are taken over all atoms.</p></fn>
</table-wrap-foot>
</table-wrap>
<table-wrap id="pcbi.1005659.t010" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005659.t010</object-id>
<label>Table 10</label> <caption><title>Comparison of energy components, as calculated by CHARMM and OpenMM.</title></caption>
<alternatives>
<graphic id="pcbi.1005659.t010g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005659.t010" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left"/>
<th align="center" colspan="2">2KOC</th>
<th align="center" colspan="2">DHFR</th>
</tr>
<tr>
<th align="left">Term</th>
<th align="center">CHARMM</th>
<th align="center">OpenMM</th>
<th align="center">CHARMM</th>
<th align="center">OpenMM</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Bond</td>
<td align="char" char=".">13475.55</td>
<td align="char" char=".">13475.55</td>
<td align="char" char=".">26518.18</td>
<td align="char" char=".">26518.18</td>
</tr>
<tr>
<td align="left">Angle</td>
<td align="char" char=".">9374.95</td>
<td align="char" char=".">9374.95</td>
<td align="char" char=".">17951.15</td>
<td align="char" char=".">17951.15</td>
</tr>
<tr>
<td align="left">Dihedral</td>
<td align="char" char=".">1985.85</td>
<td align="char" char=".">1985.98</td>
<td align="char" char=".">7225.94</td>
<td align="char" char=".">7226.35</td>
</tr>
<tr>
<td align="left">Nonbonded</td>
<td align="char" char=".">-366308.03</td>
<td align="char" char=".">-366291.41</td>
<td align="char" char=".">-733871.37</td>
<td align="char" char=".">-733836.68</td>
</tr>
<tr>
<td align="left">Total</td>
<td align="char" char=".">-341471.67</td>
<td align="char" char=".">-341454.92</td>
<td align="char" char=".">-682176.09</td>
<td align="char" char=".">-682140.99</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t010fn001"><p>These tests use the CHARMM36 force field.</p></fn>
<fn id="t010fn002"><p>All values are in kJ/mol.</p></fn>
</table-wrap-foot>
</table-wrap>
<table-wrap id="pcbi.1005659.t011" position="float">
<object-id pub-id-type="doi">10.1371/journal.pcbi.1005659.t011</object-id>
<label>Table 11</label> <caption><title>Comparison of forces as computed by CHARMM and OpenMM.</title></caption>
<alternatives>
<graphic id="pcbi.1005659.t011g" mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005659.t011" xlink:type="simple"/>
<table>
<colgroup>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
<col align="left" valign="middle"/>
</colgroup>
<thead>
<tr>
<th align="left"/>
<th align="center">2KOC</th>
<th align="center">DHFR</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">Mean</td>
<td align="char" char=".">1.00007</td>
<td align="char" char=".">1.00000</td>
</tr>
<tr>
<td align="left">Minimum</td>
<td align="char" char=".">0.86599</td>
<td align="char" char=".">0.98183</td>
</tr>
<tr>
<td align="left">Maximum</td>
<td align="char" char=".">1.03607</td>
<td align="char" char=".">1.01141</td>
</tr>
</tbody>
</table>
</alternatives>
<table-wrap-foot>
<fn id="t011fn001"><p>Values are the normalized projection of the CHARMM forces (<bold>F</bold><sub>C</sub>) onto the OpenMM forces (<bold>F</bold><sub>O</sub>): (<bold>F</bold><sub>C</sub>∙<bold>F</bold><sub>O</sub>)/(<bold>F</bold><sub>O</sub>∙<bold>F</bold><sub>O</sub>).</p></fn>
<fn id="t011fn002"><p>The mean, minimum, and maximum are taken over all atoms.</p></fn>
</table-wrap-foot>
</table-wrap>
</sec>
</sec>
<sec id="sec022">
<title>Availability and future directions</title>
<p>OpenMM is available from <ext-link ext-link-type="uri" xlink:href="http://openmm.org" xlink:type="simple">http://openmm.org</ext-link>. Ongoing development is conducted through the Github community at <ext-link ext-link-type="uri" xlink:href="https://github.com/pandegroup/openmm" xlink:type="simple">https://github.com/pandegroup/openmm</ext-link>. Detailed instructions on how to compile it from source are found in the OpenMM User Guide at <ext-link ext-link-type="uri" xlink:href="http://openmm.org/documentation.html" xlink:type="simple">http://openmm.org/documentation.html</ext-link>.</p>
</sec>
<sec id="sec023">
<title>Supporting information</title>
<supplementary-material id="pcbi.1005659.s001" mimetype="application/zip" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005659.s001" xlink:type="simple">
<label>S1 Supporting Information</label>
<caption>
<title>Scripts and data files to reproduce the results described in Results.</title>
<p>(ZIP)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1005659.s002" mimetype="application/zip" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005659.s002" xlink:type="simple">
<label>S1 Source Code</label>
<caption>
<title>Source code and documentation for OpenMM 7.0.1.</title>
<p>(ZIP)</p>
</caption>
</supplementary-material>
<supplementary-material id="pcbi.1005659.s003" mimetype="application/vnd.openxmlformats-officedocument.wordprocessingml.document" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1005659.s003" xlink:type="simple">
<label>S1 Examples</label>
<caption>
<title>Examples and tutorials demonstrating more advanced usage of OpenMM.</title>
<p>(DOCX)</p>
</caption>
</supplementary-material>
</sec>
</body>
<back>
<ack>
<p>The authors thank Daniel L. Parton (MSKCC) for providing input files for the ABL1 and MTOR benchmarks.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pcbi.1005659.ref001"><label>1</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Best</surname> <given-names>RB</given-names></name>, <name name-style="western"><surname>Zhu</surname> <given-names>X</given-names></name>, <name name-style="western"><surname>Shim</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Lopes</surname> <given-names>PEM</given-names></name>, <name name-style="western"><surname>Mittal</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Feig</surname> <given-names>M</given-names></name>, <etal>et al</etal>. <article-title>Optimization of the Additive CHARMM All-Atom Protein Force Field Targeting Improved Sampling of the Backbone ϕ, ψ and Side-Chain χ 1 and χ 2 Dihedral Angles</article-title>. <source>J Chem Theory Comput</source>. <year>2012</year>;<volume>8</volume>: <fpage>3257</fpage>–<lpage>3273</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1021/ct300400x" xlink:type="simple">10.1021/ct300400x</ext-link></comment> <object-id pub-id-type="pmid">23341755</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref002"><label>2</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Wang</surname> <given-names>L-P</given-names></name>, <name name-style="western"><surname>Martinez</surname> <given-names>TJ</given-names></name>, <name name-style="western"><surname>Pande</surname> <given-names>VS</given-names></name>. <article-title>Building Force Fields: An Automatic, Systematic, and Reproducible Approach</article-title>. <source>J Phys Chem Lett</source>. <year>2014</year>;<volume>5</volume>: <fpage>1885</fpage>–<lpage>1891</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1021/jz500737m" xlink:type="simple">10.1021/jz500737m</ext-link></comment> <object-id pub-id-type="pmid">26273869</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref003"><label>3</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Albaugh</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Boateng</surname> <given-names>HA</given-names></name>, <name name-style="western"><surname>Bradshaw</surname> <given-names>RT</given-names></name>, <name name-style="western"><surname>Demerdash</surname> <given-names>ON</given-names></name>, <name name-style="western"><surname>Dziedzic</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Mao</surname> <given-names>Y</given-names></name>, <etal>et al</etal>. <article-title>Advanced Potential Energy Surfaces for Molecular Simulation</article-title>. <source>J Phys Chem B</source>. <year>2016</year>;<volume>120</volume>: <fpage>9811</fpage>–<lpage>9832</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1021/acs.jpcb.6b06414" xlink:type="simple">10.1021/acs.jpcb.6b06414</ext-link></comment> <object-id pub-id-type="pmid">27513316</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref004"><label>4</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Lopes</surname> <given-names>PEM</given-names></name>, <name name-style="western"><surname>Huang</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Shim</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Luo</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Li</surname> <given-names>H</given-names></name>, <name name-style="western"><surname>Roux</surname> <given-names>B</given-names></name>, <etal>et al</etal>. <article-title>Polarizable Force Field for Peptides and Proteins Based on the Classical Drude Oscillator</article-title>. <source>J Chem Theory Comput</source>. <year>2013</year>;<volume>9</volume>: <fpage>5430</fpage>–<lpage>5449</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1021/ct400781b" xlink:type="simple">10.1021/ct400781b</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1005659.ref005"><label>5</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Leimkuhler</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Margul</surname> <given-names>DT</given-names></name>, <name name-style="western"><surname>Tuckerman</surname> <given-names>ME</given-names></name>. <article-title>Stochastic, resonance-free multiple time-step algorithm for molecular dynamics with very large time steps</article-title>. <source>Mol Phys</source>. <year>2013</year>;<volume>111</volume>: <fpage>3579</fpage>–<lpage>3594</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1080/00268976.2013.844369" xlink:type="simple">10.1080/00268976.2013.844369</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1005659.ref006"><label>6</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Leimkuhler</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Matthews</surname> <given-names>C</given-names></name>. <article-title>Efficient molecular dynamics using geodesic integration and solvent–solute splitting</article-title>. <source>Proc R Soc A</source>. <year>2016</year>;<volume>472</volume>: <fpage>20160138</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1098/rspa.2016.0138" xlink:type="simple">10.1098/rspa.2016.0138</ext-link></comment> <object-id pub-id-type="pmid">27279779</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref007"><label>7</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Chen</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Kale</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Weare</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Dinner</surname> <given-names>AR</given-names></name>, <name name-style="western"><surname>Roux</surname> <given-names>B</given-names></name>. <article-title>Multiple Time-Step Dual-Hamiltonian Hybrid Molecular Dynamics—Monte Carlo Canonical Propagation Algorithm</article-title>. <source>J Chem Theory Comput</source>. <year>2016</year>;<volume>12</volume>: <fpage>1449</fpage>–<lpage>1458</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1021/acs.jctc.5b00706" xlink:type="simple">10.1021/acs.jctc.5b00706</ext-link></comment> <object-id pub-id-type="pmid">26918826</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref008"><label>8</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Abrams</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Bussi</surname> <given-names>G</given-names></name>. <article-title>Enhanced Sampling in Molecular Dynamics Using Metadynamics, Replica-Exchange, and Temperature-Acceleration</article-title>. <source>Entropy</source>. <year>2013</year>;<volume>16</volume>: <fpage>163</fpage>–<lpage>199</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.3390/e16010163" xlink:type="simple">10.3390/e16010163</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1005659.ref009"><label>9</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Hamelberg</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>de Oliveira</surname> <given-names>CAF</given-names></name>, <name name-style="western"><surname>McCammon</surname> <given-names>JA</given-names></name>. <article-title>Sampling of slow diffusive conformational transitions with accelerated molecular dynamics</article-title>. <source>J Chem Phys</source>. <year>2007</year>;<volume>127</volume>: <fpage>155102</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1063/1.2789432" xlink:type="simple">10.1063/1.2789432</ext-link></comment> <object-id pub-id-type="pmid">17949218</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref010"><label>10</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Chodera</surname> <given-names>JD</given-names></name>, <name name-style="western"><surname>Shirts</surname> <given-names>MR</given-names></name>. <article-title>Replica exchange and expanded ensemble simulations as Gibbs sampling: Simple improvements for enhanced mixing</article-title>. <source>J Chem Phys</source>. <year>2011</year>;<volume>135</volume>: <fpage>194110</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1063/1.3660669" xlink:type="simple">10.1063/1.3660669</ext-link></comment> <object-id pub-id-type="pmid">22112069</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref011"><label>11</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Eastman</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Pande</surname> <given-names>VS</given-names></name>. <article-title>Efficient nonbonded interactions for molecular dynamics on a graphics processing unit</article-title>. <source>J Comput Chem</source>. <year>2009</year>; <fpage>NA</fpage>–<lpage>NA</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1002/jcc.21413" xlink:type="simple">10.1002/jcc.21413</ext-link></comment> <object-id pub-id-type="pmid">19847780</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref012"><label>12</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Götz</surname> <given-names>AW</given-names></name>, <name name-style="western"><surname>Williamson</surname> <given-names>MJ</given-names></name>, <name name-style="western"><surname>Xu</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Poole</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Le Grand</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Walker</surname> <given-names>RC</given-names></name>. <article-title>Routine Microsecond Molecular Dynamics Simulations with AMBER on GPUs. 1. Generalized Born</article-title>. <source>J Chem Theory Comput</source>. <year>2012</year>;<volume>8</volume>: <fpage>1542</fpage>–<lpage>1555</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1021/ct200909j" xlink:type="simple">10.1021/ct200909j</ext-link></comment> <object-id pub-id-type="pmid">22582031</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref013"><label>13</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Shaw</surname> <given-names>DE</given-names></name>, <name name-style="western"><surname>Grossman</surname> <given-names>JP</given-names></name>, <name name-style="western"><surname>Bank</surname> <given-names>JA</given-names></name>, <name name-style="western"><surname>Batson</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Butts</surname> <given-names>JA</given-names></name>, <name name-style="western"><surname>Chao</surname> <given-names>JC</given-names></name>, <etal>et al</etal>. <article-title>Anton 2: Raising the Bar for Performance and Programmability in a Special-Purpose Molecular Dynamics Supercomputer</article-title>. <source>IEEE</source>; <year>2014</year>. pp. <fpage>41</fpage>–<lpage>53</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1109/SC.2014.9" xlink:type="simple">10.1109/SC.2014.9</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1005659.ref014"><label>14</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Eastman</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Friedrichs</surname> <given-names>MS</given-names></name>, <name name-style="western"><surname>Chodera</surname> <given-names>JD</given-names></name>, <name name-style="western"><surname>Radmer</surname> <given-names>RJ</given-names></name>, <name name-style="western"><surname>Bruns</surname> <given-names>CM</given-names></name>, <name name-style="western"><surname>Ku</surname> <given-names>JP</given-names></name>, <etal>et al</etal>. <article-title>OpenMM 4: A Reusable, Extensible, Hardware Independent Library for High Performance Molecular Simulation</article-title>. <source>J Chem Theory Comput</source>. <year>2013</year>;<volume>9</volume>: <fpage>461</fpage>–<lpage>469</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1021/ct300857j" xlink:type="simple">10.1021/ct300857j</ext-link></comment> <object-id pub-id-type="pmid">23316124</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref015"><label>15</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Eastman</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Pande</surname> <given-names>V</given-names></name>. <chapter-title>Accelerating Development and Execution Speed with Just-in-Time GPU Code Generation</chapter-title>. <source>GPU Computing Gems Jade Edition</source>. <publisher-loc>Boston</publisher-loc>: <publisher-name>Morgan Kaufmann</publisher-name>; <year>2012</year>. pp. <fpage>399</fpage>–<lpage>407</lpage>. <ext-link ext-link-type="uri" xlink:href="http://www.sciencedirect.com/science/article/pii/B9780123859631000290" xlink:type="simple">http://www.sciencedirect.com/science/article/pii/B9780123859631000290</ext-link></mixed-citation></ref>
<ref id="pcbi.1005659.ref016"><label>16</label><mixed-citation publication-type="other" xlink:type="simple">Case DA, Betz RM, Botello-Smith W, Cerutti DS, Cheatham TE, Darden TA, et al. AMBER 2016 [Internet]. University of California, San Francisco; <ext-link ext-link-type="uri" xlink:href="http://ambermd.org" xlink:type="simple">http://ambermd.org</ext-link></mixed-citation></ref>
<ref id="pcbi.1005659.ref017"><label>17</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Brooks</surname> <given-names>BR</given-names></name>, <name name-style="western"><surname>Brooks</surname> <given-names>CL</given-names></name>, <name name-style="western"><surname>Mackerell</surname> <given-names>AD</given-names></name>, <name name-style="western"><surname>Nilsson</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Petrella</surname> <given-names>RJ</given-names></name>, <name name-style="western"><surname>Roux</surname> <given-names>B</given-names></name>, <etal>et al</etal>. <article-title>CHARMM: The biomolecular simulation program</article-title>. <source>J Comput Chem</source>. <year>2009</year>;<volume>30</volume>: <fpage>1545</fpage>–<lpage>1614</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1002/jcc.21287" xlink:type="simple">10.1002/jcc.21287</ext-link></comment> <object-id pub-id-type="pmid">19444816</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref018"><label>18</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Abraham</surname> <given-names>MJ</given-names></name>, <name name-style="western"><surname>Murtola</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Schulz</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Páll</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Smith</surname> <given-names>JC</given-names></name>, <name name-style="western"><surname>Hess</surname> <given-names>B</given-names></name>, <etal>et al</etal>. <article-title>GROMACS: High performance molecular simulations through multi-level parallelism from laptops to supercomputers</article-title>. <source>SoftwareX</source>. <year>2015</year>;<volume>1–2</volume>: <fpage>19</fpage>–<lpage>25</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.softx.2015.06.001" xlink:type="simple">10.1016/j.softx.2015.06.001</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1005659.ref019"><label>19</label><mixed-citation publication-type="other" xlink:type="simple">Bowers KJ, Chow E, Xu H, Dror RO, Eastwood MP, Gregersen BA, et al. Scalable Algorithms for Molecular Dynamics Simulations on Commodity Clusters. Proceedings of the 2006 ACM/IEEE Conference on Supercomputing. New York, NY, USA: ACM; 2006. 10.1145/1188455.1188544</mixed-citation></ref>
<ref id="pcbi.1005659.ref020"><label>20</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Lindorff-Larsen</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Piana</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Palmo</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Maragakis</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Klepeis</surname> <given-names>JL</given-names></name>, <name name-style="western"><surname>Dror</surname> <given-names>RO</given-names></name>, <etal>et al</etal>. <article-title>Improved side-chain torsion potentials for the Amber ff99SB protein force field</article-title>. <source>Proteins Struct Funct Bioinforma</source>. <year>2010</year>; <fpage>NA</fpage>–<lpage>NA</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1002/prot.22711" xlink:type="simple">10.1002/prot.22711</ext-link></comment> <object-id pub-id-type="pmid">20408171</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref021"><label>21</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Jorgensen</surname> <given-names>WL</given-names></name>, <name name-style="western"><surname>Chandrasekhar</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Madura</surname> <given-names>JD</given-names></name>, <name name-style="western"><surname>Impey</surname> <given-names>RW</given-names></name>, <name name-style="western"><surname>Klein</surname> <given-names>ML</given-names></name>. <article-title>Comparison of simple potential functions for simulating liquid water</article-title>. <source>J Chem Phys</source>. <year>1983</year>;<volume>79</volume>: <fpage>926</fpage>–<lpage>935</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1063/1.445869" xlink:type="simple">10.1063/1.445869</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1005659.ref022"><label>22</label><mixed-citation publication-type="other" xlink:type="simple">Rizzi A, Grinaway PB, Parton DL, Shirts MR, Wang K, Eastman P, et al. YANK: A GPU-accelerated platform for alchemical free energy calculations [Internet]. <ext-link ext-link-type="uri" xlink:href="http://getyank.org" xlink:type="simple">http://getyank.org</ext-link></mixed-citation></ref>
<ref id="pcbi.1005659.ref023"><label>23</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Tuckerman</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Berne</surname> <given-names>BJ</given-names></name>, <name name-style="western"><surname>Martyna</surname> <given-names>GJ</given-names></name>. <article-title>Reversible multiple time scale molecular dynamics</article-title>. <source>J Chem Phys</source>. <year>1992</year>;<volume>97</volume>: <fpage>1990</fpage>–<lpage>2001</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1063/1.463137" xlink:type="simple">10.1063/1.463137</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1005659.ref024"><label>24</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Metropolis</surname> <given-names>N</given-names></name>, <name name-style="western"><surname>Rosenbluth</surname> <given-names>AW</given-names></name>, <name name-style="western"><surname>Rosenbluth</surname> <given-names>MN</given-names></name>, <name name-style="western"><surname>Teller</surname> <given-names>AH</given-names></name>, <name name-style="western"><surname>Teller</surname> <given-names>E</given-names></name>. <article-title>Equation of State Calculations by Fast Computing Machines</article-title>. <source>J Chem Phys</source>. <year>1953</year>;<volume>21</volume>: <fpage>1087</fpage>–<lpage>1092</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1063/1.1699114" xlink:type="simple">10.1063/1.1699114</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1005659.ref025"><label>25</label><mixed-citation publication-type="book" xlink:type="simple"><name name-style="western"><surname>Lelievre</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Stoltz</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Rousset</surname> <given-names>M</given-names></name>. <source>Free Energy Computations: A Mathematical Perspective</source>. <edition>1 edition</edition>. <publisher-loc>London; Hackensack, N.J</publisher-loc>: <publisher-name>Imperial College Press</publisher-name>; <year>2010</year>.</mixed-citation></ref>
<ref id="pcbi.1005659.ref026"><label>26</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Nilmeier</surname> <given-names>JP</given-names></name>, <name name-style="western"><surname>Crooks</surname> <given-names>GE</given-names></name>, <name name-style="western"><surname>Minh</surname> <given-names>DDL</given-names></name>, <name name-style="western"><surname>Chodera</surname> <given-names>JD</given-names></name>. <article-title>Nonequilibrium candidate Monte Carlo is an efficient tool for equilibrium simulation</article-title>. <source>Proc Natl Acad Sci</source>. <year>2011</year>;<volume>108</volume>: <fpage>E1009</fpage>–<lpage>E1018</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1073/pnas.1106094108" xlink:type="simple">10.1073/pnas.1106094108</ext-link></comment> <object-id pub-id-type="pmid">22025687</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref027"><label>27</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Shi</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Xia</surname> <given-names>Z</given-names></name>, <name name-style="western"><surname>Zhang</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Best</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Wu</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Ponder</surname> <given-names>JW</given-names></name>, <etal>et al</etal>. <article-title>Polarizable Atomic Multipole-Based AMOEBA Force Field for Proteins</article-title>. <source>J Chem Theory Comput</source>. <year>2013</year>;<volume>9</volume>: <fpage>4046</fpage>–<lpage>4063</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1021/ct4003702" xlink:type="simple">10.1021/ct4003702</ext-link></comment> <object-id pub-id-type="pmid">24163642</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref028"><label>28</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Craig</surname> <given-names>IR</given-names></name>, <name name-style="western"><surname>Manolopoulos</surname> <given-names>DE</given-names></name>. <article-title>Quantum statistics and classical mechanics: Real time correlation functions from ring polymer molecular dynamics</article-title>. <source>J Chem Phys</source>. <year>2004</year>;<volume>121</volume>: <fpage>3368</fpage>–<lpage>3373</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1063/1.1777575" xlink:type="simple">10.1063/1.1777575</ext-link></comment> <object-id pub-id-type="pmid">15303899</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref029"><label>29</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Lamoureux</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Roux</surname> <given-names>B</given-names></name>. <article-title>Modeling induced polarization with classical Drude oscillators: Theory and molecular dynamics simulation algorithm</article-title>. <source>J Chem Phys</source>. <year>2003</year>;<volume>119</volume>: <fpage>3025</fpage>–<lpage>3039</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1063/1.1589749" xlink:type="simple">10.1063/1.1589749</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1005659.ref030"><label>30</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Simmonett</surname> <given-names>AC</given-names></name>, <name name-style="western"><surname>Pickard</surname> <given-names>FC</given-names></name>, <name name-style="western"><surname>Schaefer</surname> <given-names>HF</given-names></name>, <name name-style="western"><surname>Brooks</surname> <given-names>BR</given-names></name>. <article-title>An efficient algorithm for multipole energies and derivatives based on spherical harmonics and extensions to particle mesh Ewald</article-title>. <source>J Chem Phys</source>. <year>2014</year>;<volume>140</volume>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1063/1.4873920" xlink:type="simple">10.1063/1.4873920</ext-link></comment> <object-id pub-id-type="pmid">24832247</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref031"><label>31</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Hättig</surname> <given-names>C</given-names></name>. <article-title>Recurrence relations for the direct calculation of spherical multipole interaction tensors and Coulomb-type interaction energies</article-title>. <source>Chem Phys Lett</source>. <year>1996</year>;<volume>260</volume>: <fpage>341</fpage>–<lpage>351</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/0009-2614(96)00952-9" xlink:type="simple">10.1016/0009-2614(96)00952-9</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1005659.ref032"><label>32</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Pulay</surname> <given-names>P</given-names></name>. <article-title>Convergence acceleration of iterative sequences. the case of scf iteration</article-title>. <source>Chem Phys Lett</source>. <year>1980</year>;<volume>73</volume>: <fpage>393</fpage>–<lpage>398</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/0009-2614(80)80396-4" xlink:type="simple">10.1016/0009-2614(80)80396-4</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1005659.ref033"><label>33</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Simmonett</surname> <given-names>AC</given-names></name>, <name name-style="western"><surname>Iv</surname> <given-names>FCP</given-names></name>, <name name-style="western"><surname>Shao</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Iii</surname> <given-names>TEC</given-names></name>, <name name-style="western"><surname>Brooks</surname> <given-names>BR</given-names></name>. <article-title>Efficient treatment of induced dipoles</article-title>. <source>J Chem Phys</source>. <year>2015</year>;<volume>143</volume>: <fpage>74115</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1063/1.4928530" xlink:type="simple">10.1063/1.4928530</ext-link></comment> <object-id pub-id-type="pmid">26298123</object-id></mixed-citation></ref>
<ref id="pcbi.1005659.ref034"><label>34</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Lamoureux</surname> <given-names>G</given-names></name>, <name name-style="western"><surname>Harder</surname> <given-names>E</given-names></name>, <name name-style="western"><surname>Vorobyov</surname> <given-names>IV</given-names></name>, <name name-style="western"><surname>Roux</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>MacKerell</surname> <given-names>AD</given-names> <suffix>Jr.</suffix></name>. <article-title>A polarizable model of water for molecular dynamics simulations of biomolecules</article-title>. <source>Chem Phys Lett</source>. <year>2006</year>;<volume>418</volume>: <fpage>245</fpage>–<lpage>249</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.cplett.2005.10.135" xlink:type="simple">10.1016/j.cplett.2005.10.135</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1005659.ref035"><label>35</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Bekker</surname> <given-names>H</given-names></name>. <article-title>Unification of box shapes in molecular simulations</article-title>. <source>J Comput Chem</source>. <year>1997</year>;<volume>18</volume>: <fpage>1930</fpage>–<lpage>1942</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1002/(SICI)1096-987X(19971130)18:15&lt;1930::AID-JCC8&gt;3.0.CO;2-P" xlink:type="simple">10.1002/(SICI)1096-987X(19971130)18:15&lt;1930::AID-JCC8&gt;3.0.CO;2-P</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1005659.ref036"><label>36</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Le Grand</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Götz</surname> <given-names>AW</given-names></name>, <name name-style="western"><surname>Walker</surname> <given-names>RC</given-names></name>. <article-title>SPFP: Speed without compromise—A mixed precision model for GPU accelerated molecular dynamics simulations</article-title>. <source>Comput Phys Commun</source>. <year>2013</year>;<volume>184</volume>: <fpage>374</fpage>–<lpage>380</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1016/j.cpc.2012.09.022" xlink:type="simple">10.1016/j.cpc.2012.09.022</ext-link></comment></mixed-citation></ref>
<ref id="pcbi.1005659.ref037"><label>37</label><mixed-citation publication-type="other" xlink:type="simple">Swails J. ParmEd [Internet]. <ext-link ext-link-type="uri" xlink:href="https://github.com/ParmEd/ParmEd" xlink:type="simple">https://github.com/ParmEd/ParmEd</ext-link></mixed-citation></ref>
<ref id="pcbi.1005659.ref038"><label>38</label><mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Lee</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Cheng</surname> <given-names>X</given-names></name>, <name name-style="western"><surname>Swails</surname> <given-names>JM</given-names></name>, <name name-style="western"><surname>Yeom</surname> <given-names>MS</given-names></name>, <name name-style="western"><surname>Eastman</surname> <given-names>PK</given-names></name>, <name name-style="western"><surname>Lemkul</surname> <given-names>JA</given-names></name>, <etal>et al</etal>. <article-title>CHARMM-GUI Input Generator for NAMD, GROMACS, AMBER, OpenMM, and CHARMM/OpenMM Simulations Using the CHARMM36 Additive Force Field</article-title>. <source>J Chem Theory Comput</source>. <year>2016</year>;<volume>12</volume>: <fpage>405</fpage>–<lpage>413</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="https://doi.org/10.1021/acs.jctc.5b00935" xlink:type="simple">10.1021/acs.jctc.5b00935</ext-link></comment> <object-id pub-id-type="pmid">26631602</object-id></mixed-citation></ref>
</ref-list>
</back>
</article>