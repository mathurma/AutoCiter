<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="discussion" dtd-version="3.0" xml:lang="EN">
  <front>
    <journal-meta><journal-id journal-id-type="publisher-id">plos</journal-id><journal-id journal-id-type="publisher">pcbi</journal-id><journal-id journal-id-type="allenpress-id">plcb</journal-id><journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id><journal-id journal-id-type="pmc">ploscomp</journal-id><!--===== Grouping journal title elements =====--><journal-title-group><journal-title>PLoS Computational Biology</journal-title></journal-title-group><issn pub-type="ppub">1553-734X</issn><issn pub-type="epub">1553-7358</issn><publisher>
        <publisher-name>Public Library of Science</publisher-name>
        <publisher-loc>San Francisco, USA</publisher-loc>
      </publisher></journal-meta>
    <article-meta><article-id pub-id-type="doi">10.1371/journal.pcbi.0030199</article-id><article-id pub-id-type="publisher-id">06-PLCB-EN-0505R5</article-id><article-id pub-id-type="sici">plcb-03-11-06</article-id><article-categories>
        <subj-group subj-group-type="heading">
          <subject>Education</subject>
        </subj-group>
        <subj-group subj-group-type="Discipline">
          <subject>Computer Science</subject>
          <subject>Genetics and Genomics</subject>
        </subj-group>
        <subj-group subj-group-type="System Taxonomy">
          <subject>None</subject>
        </subj-group>
      </article-categories><title-group><article-title>A Primer on Python for Life Science Researchers</article-title><alt-title alt-title-type="running-head">N/A</alt-title></title-group><contrib-group>
        <contrib contrib-type="author" xlink:type="simple">
          <name name-style="western">
            <surname>Bassi</surname>
            <given-names>Sebastian</given-names>
          </name>
          <xref ref-type="corresp" rid="cor1"/>
        </contrib>
      </contrib-group><contrib-group>
        <contrib contrib-type="editor" xlink:type="simple">
          <name name-style="western">
            <surname>Lewitter</surname>
            <given-names>Fran</given-names>
          </name>
          <role>Editor</role>
          <xref ref-type="aff" rid="edit1"/>
        </contrib>
      </contrib-group><aff id="edit1">Whitehead Institute, United States of America</aff><author-notes>
        <corresp id="cor1">Sebastian Bassi is with the Universidad Nacional de Quilmes, Buenos Aires, Argentina. E-mail: <email xlink:type="simple">sbassi@genes.unq.edu.ar</email></corresp>
      <fn fn-type="conflict" id="ack3">
        <p> The author has declared that no competing interests exist.</p>
      </fn></author-notes><pub-date pub-type="ppub">
        <month>11</month>
        <year>2007</year>
      </pub-date><pub-date pub-type="epub">
        <day>30</day>
        <month>11</month>
        <year>2007</year>
      </pub-date><volume>3</volume><issue>11</issue><elocation-id>e199</elocation-id><!--===== Grouping copyright info into permissions =====--><permissions><copyright-year>2007</copyright-year><copyright-holder> Sebastian Bassi</copyright-holder><license><license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p></license></permissions><funding-group><funding-statement> The author received no specific funding for this article.</funding-statement></funding-group><counts>
        <page-count count="6"/>
      </counts><!--===== Restructure custom-meta-wrap to custom-meta-group =====--><custom-meta-group>
        <custom-meta>
          <meta-name>citation</meta-name>
          <meta-value>Bassi S (2007) A primer on Python for life science researchers. PLoS Comput Biol 3(11): e199. doi:<ext-link ext-link-type="doi" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.0030199" xlink:type="simple">10.1371/journal.pcbi.0030199</ext-link></meta-value>
        </custom-meta>
        <custom-meta>
          <meta-name>article-logo</meta-name>
          <meta-value>tutorial_logo.jpg</meta-value>
        </custom-meta>
      </custom-meta-group></article-meta>
  </front>
  <body>
    <p><graphic mimetype="image" position="anchor" xlink:href="info:doi/10.1371/journal.pcbi.0030199.tutorial_logo" xlink:type="simple"/></p>
    <sec id="s1">
      <title>Introduction</title>
      <p>This article introduces the world of the Python computer language. It is assumed that readers have some previous programming experience in at least one computer language and are familiar with basic concepts such as data types, flow control, and functions.</p>
      <p>Python can be used to solve several problems that research laboratories face almost everyday. Data manipulation, biological data retrieval and parsing, automation, and simulation of biological problems are some of the tasks that can be performed in an effective way with computers and a suitable programming language.</p>
      <p>The purpose of this tutorial is to provide a bird's-eye view of the Python language, showing the basics of the language and the capabilities it offers. Main data structures and flow control statements are presented. After these basic concepts, topics such as file access, functions, and modules are covered in more detail. Finally, Biopython, a collection of tools for computational molecular biology, is introduced and its use shown with two scripts. For more advanced topics in Python, there are references at the end.</p>
    </sec>
    <sec id="s2">
      <title>Features of Python</title>
      <p>Python is a modern programming language developed in the early 1990s by Guido van Rossum [<xref ref-type="bibr" rid="pcbi-0030199-b001">1</xref>]. It is a dynamic high-level language with an easily readable syntax. Python programs are interpreted, meaning that there is no need for compilation into a binary form before executing the programs. This makes Python programs a little slower than programs written in a compiled language, but at current computer speeds and for most tasks this is not an issue and the portability that Python gains as a result of being interpreted is a worthwhile tradeoff.</p>
      <p>The more important and relevant features of Python for our use are that: it is easy to learn, easy to read, interpreted, and multiplatform (Python programs run on most operating systems); it offers free access to source code; internal and external libraries are available; and it has a supportive Internet community.</p>
      <p>Python is an excellent choice as a learning language [<xref ref-type="bibr" rid="pcbi-0030199-b002">2</xref>]. The language's simple syntax uses mandatory indentation and looks similar to the pseudocode found in textbooks that are oriented to non-programming students. Its simplicity is a design choice, made in order to facilitate the learning and use of the language. Another advantage well-suited to newcomers is the optional interactive mode that gives immediate feedback of each statement, which certainly encourages experimentation.</p>
      <p>There are also some drawbacks to Python that must be noted. First, execution time is slower than for compiled languages. Second, there are fewer numerical and statistical functions available than in specialized tools like R or MATLAB. (However, Numpy module [<xref ref-type="bibr" rid="pcbi-0030199-b003">3</xref>] provides several numeric and matrix manipulation functions for Python.) And third, Python is not as widely used as JAVA, C, or Perl.</p>
    </sec>
    <sec id="s3">
      <title>Tutorial</title>
      <sec id="s3a">
        <title/>
        <sec id="s3a1">
          <title>Notations.</title>
          <p>Program functions and reserved words are written in <bold>bold</bold> type, while user-defined names are in <italic>italics.</italic> For computer code, a monospaced font is used. Three angle braces (&gt;&gt;&gt;) are used to indicate that a command should be executed in the Python interactive console. The line shown after the user-typed command is the result of that command.</p>
        </sec>
        <sec id="s3b">
          <title>The absolute basics.</title>
          <p>Python can be run in script mode (like C and Perl), or using its built-in interactive console (like R and Ruby). The interactive console provides command-line editing and command history, although some implementations vary in features. In the interactive mode, there is a command prompt consisting of three angle braces (&gt;&gt;&gt;).</p>
          <p>Script mode is a reliable and repeatable approach to running most tasks. Input file names, parameter values, and code version numbers should be included within a script, allowing a task to be repeated. Output can be directed to a log file for storage. The interactive console is used mostly for small tasks and testing.</p>
          <p>Python programs can be written using any general purpose text editor, such as Emacs or Kate. The latter provides color-cued syntax and access to Python's interactive mode through an integrated shell. There are also specialized editors such as PythonWin, Eclipse, and IDLE, the built-in Python text editor.</p>
          <p>When running a Python script under a Unix operating system, the first line should start with “#!” plus the path to the Python interpreter, such as “#!/usr/bin/python”, to indicate to the UNIX shell which interpreter to employ for the script. Without this line, the program will not run from the command line and must be called by using the interpreter (for example, “python myprogram.py”).</p>
          <table-wrap content-type="1col" id="pcbi-0030199-t001" position="float"><object-id pub-id-type="doi">10.1371/journal.pcbi.0030199.t001</object-id><label>Table 1</label><caption>
              <p>Numeric Data Types</p>
            </caption><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.0030199.t001" xlink:type="simple"/><!-- <table frame="hsides" rules="none"><colgroup><col id="tb1col1" align="left" charoff="0" char=""/><col id="tb1col2" align="left" charoff="0" char=""/><col id="tb1col3" align="left" charoff="0" char=""/></colgroup><thead><tr><td align="left"><hr/>Numeric Data Type</td><td><hr/>Description</td><td><hr/>Example</td></tr></thead><tbody><tr><td>Integer</td><td>Holds integer numbers without any limit (besides your hardware). Some texts still refers to a &ldquo;long integer&rdquo; type since there were differences in usage for numbers higher than 2<sup>32</sup> &minus; 1. These differences are now reserved for language internal use.</td><td>42, 0, &minus;77</td></tr><tr><td>Float</td><td>Handles the floating point arithmetic as defined in ANSI/IEE Standard 754 &lsqb;<xref ref-type="bibr" rid="pcbi-0030199-b043">43</xref>&rsqb;, known as &ldquo;double precision.&rdquo; Internal representation of float numbers is not exact, but accurate enough for most applications. The &ldquo;decimal&rdquo; module &lsqb;<xref ref-type="bibr" rid="pcbi-0030199-b044">44</xref>&rsqb; has more precision at the expense of computing time.</td><td>424.323334, 0.00000009, 3.4e-49</td></tr><tr><td>Complex</td><td>Complex numbers are the sum of a real and an imaginary number and is represented with a &ldquo;j&rdquo; next to the real part. This real part can be an integer or a float number. j is the notation for imaginary number, equal to the square root of &minus;1.</td><td>3 &plus; 12j, j 9j</td></tr><tr><td>Boolean</td><td>True and False are defined as values of the Boolean type. Empty objects, None, and numeric zero are considered False. Objects are considered True.</td><td>False, True</td></tr></tbody></table> --><!-- <table-wrap-foot><fn id="nt101"><p>http://dx.doi.org/10.1371/journal.pcbi.0030199.t001</p></fn></table-wrap-foot> --></table-wrap>
          <p>Computer languages can be characterized by their data structures (or types) and flow control statements. Data structures in Python are diverse and versatile. There are numeric data types that hold “primitive” data (integer, float, Boolean, and complex) and there are “collection” types that can handle several objects at once (string, list, tuple, set, and dictionary). Descriptions and examples of numeric data types are summarized in <xref ref-type="table" rid="pcbi-0030199-t001">Table 1</xref>. Container types can be divided according to how their elements are accessed. When ordered, they are sequence types (string, list, and tuple being the most prominent). Sequence types can be accessed in a given order, using an index. Their differences, methods, and properties are summarized in <xref ref-type="boxed-text" rid="pcbi-0030199-box001">Box 1</xref>. There are also unordered types (sets and dictionaries). Both unordered types are described in <xref ref-type="boxed-text" rid="pcbi-0030199-box002">Box 2</xref>.</p>
          <boxed-text id="pcbi-0030199-box001" position="float">
            <sec id="sb1">
              <title>Box 1. Most-Used Sequence Data Types</title>
              <sec id="sb1a">
                <title>String:</title>
                <p>Usually enclosed by quotes (') or double quotes ("). Triple quotes (''') are used to delimit multiline strings. Strings are immutable. Once created they can't be modified. String methods are available at <ext-link ext-link-type="uri" xlink:href="http://www.python.org/doc/2.5/lib/string-methods.html" xlink:type="simple">http://www.python.org/doc/2.5/lib/string-methods.html</ext-link>.</p>
                <p>For example:</p>
                <p>&gt;&gt;&gt; s0='A regular string'</p>
              </sec>
              <sec id="sb1b">
                <title>List:</title>
                <p>Defined as an ordered collection of objects; a versatile and useful data type. C programmers will find lists similar to vectors. Lists are created by enclosing their comma-separated items in square brackets, and can contain different objects.</p>
                <p>For example:</p>
                <p>&gt;&gt;&gt; MyList=[3,99,12,"one","five"]</p>
                <p>This statement creates a list with five elements (three numbers and two strings) and binds it to the name “MyList”. Each element of the list can be referred to by an integer index enclosed between square brackets. The index starts from 0, therefore MyList[<xref ref-type="bibr" rid="pcbi-0030199-b003">3</xref>] returns “one”. All list operations are available at <ext-link ext-link-type="uri" xlink:href="http://www.python.org/doc/2.5/lib/typesseq-mutable.html" xlink:type="simple">http://www.python.org/doc/2.5/lib/typesseq-mutable.html</ext-link>.</p>
              </sec>
              <sec id="sb1c">
                <title>Tuple:</title>
                <p>Also an ordered collection of objects, but tuples, unlike lists, are immutable. They share most methods with lists, but only those that don't change the elements inside the tuple. Attempting to change a tuple raises an exception. Tuples are created by enclosing their comma-separated items between parentheses. Tuples are similar to Pascal records or C structs; they are small collections of related data that are operated on as a group. They are used mostly for encapsulating function arguments, or any data that are tightly coupled.</p>
                <p>For example:</p>
                <p>&gt;&gt;&gt; MyTuple=(2,3,10)</p>
                <p>Tuple operations are available at <ext-link ext-link-type="uri" xlink:href="http://www.python.org/doc/2.5/lib/typesseq.html" xlink:type="simple">http://www.python.org/doc/2.5/lib/typesseq.html</ext-link>.</p>
              </sec>
            </sec>
          </boxed-text>
          <boxed-text id="pcbi-0030199-box002" position="float">
            <sec id="sb2">
              <title>Box 2. Unordered Types</title>
              <sec id="sb2a">
                <title>Set:</title>
                <p>An unordered collection of immutable values. It is mostly used for membership testing and removing duplicates from a sequence. Sets are created by passing any sequential object to the set constructor, such as: set([<xref ref-type="bibr" rid="pcbi-0030199-b001">1</xref>,<xref ref-type="bibr" rid="pcbi-0030199-b002">2</xref>,<xref ref-type="bibr" rid="pcbi-0030199-b003">3</xref>])</p>
                <p>For more information on sets, please refer to <ext-link ext-link-type="uri" xlink:href="http://www.python.org/doc/2.5/lib/types-set.html" xlink:type="simple">http://www.python.org/doc/2.5/lib/types-set.html</ext-link>.</p>
                <p>For example:</p>
                <p>&gt;&gt;&gt; ResEzSet1=set(['BamH1', 'HindIII', 'EcoR1', 'SalI'])</p>
                <p>&gt;&gt;&gt; ResEzSet2=set(['PlaA', 'EcoR1', 'Eco143'])</p>
                <p>&gt;&gt;&gt; ResEzSet1&amp;ResEzSet2</p>
                <p>set(['EcoR1'])</p>
              </sec>
              <sec id="sb2b">
                <title>Dictionary:</title>
                <p>A data type that stores unordered one-to-one relationships between keys and values. Unordered in this context means that each key–value pair is stored without any particular order in the dictionary. It is analogous to a hash in Perl or a Hashtable class in Java. Dictionaries are created by placing a comma-separated list of key–value pairs within braces.</p>
                <p>For example:</p>
                <p>Set Translate as a dictionary with codon triplets as keys and the corresponding amino acids as values:</p>
                <p>&gt;&gt;&gt; Translate={"cca":"P","cag":"Q","agg":"R"}</p>
                <p>Creating a new entry:</p>
                <p>&gt;&gt;&gt; Translate["gat"]="D"</p>
                <p>To see what is inside the dictionary:</p>
                <p>&gt;&gt;&gt; Translate</p>
                <p>{'agg': 'R', 'cag': 'Q', 'gat': 'D', 'cca': 'P'}</p>
                <p>Dictionaries share some methods with lists. A complete list of methods on can be seen at: <ext-link ext-link-type="uri" xlink:href="http://www.python.org/doc/2.5/lib/typesmapping.html" xlink:type="simple">http://www.python.org/doc/2.5/lib/typesmapping.html</ext-link>.</p>
              </sec>
            </sec>
          </boxed-text>
          <p>Flow control statements control whether program code is executed or not, or executed many times in a loop based on a conditional. Conditional execution (<bold>if</bold>, <bold>elif</bold>, <bold>else</bold>) and looping (<bold>for</bold> and <bold>while</bold>) are explained in <xref ref-type="boxed-text" rid="pcbi-0030199-box003">Box 3</xref>.</p>
          <boxed-text id="pcbi-0030199-box003" position="float">
            <sec id="sb3">
              <title>Box 3. Control Structures</title>
              <sec id="sb3a">
                <title>If statement:</title>
                <p>Tests for a condition and acts upon the result of that condition. If the condition is true, the block of code after the “if condition” will be executed. If it is false, the program will skip that block and will test for the next condition (if any). Several conditions can be tested using <bold>elif</bold>. If all conditions are false, the block under <bold>else</bold> will be executed. <bold>Elif</bold> can be used to emulate a C “switch-case” statement.</p>
                <p>Scheme of an if statement:</p>
                <p><bold>if</bold> condition1:</p>
                <p> block1</p>
                <p><bold>elif</bold> condition2:</p>
                <p> block2</p>
                <p><bold>else</bold>:</p>
                <p> block3</p>
              </sec>
              <sec id="sb3b">
                <title>For loop:</title>
                <p>Iterates over all the members of a sequence of values (as in Perl's “foreach”). It is different from C and VB because there isn't a variable that increments or decrements on each cycle. This sequence could be any type of iterable object like a list, string, tuple, or dictionary. The code inside a for loop will be executed once for each item in the sequence, and at the same time the variable will take the value of each item in the sequence. There could be an optional <bold>else</bold> clause. If it is present, the block under the else clause is executed when the loop terminates through exhaustion of the list, but not when the loop is terminated by a <bold>break</bold> statement.</p>
                <p>The structure of a for loop is:</p>
                <p><bold>for</bold> variable <bold>in</bold> sequence:</p>
                <p> block1</p>
                <p><bold>else</bold>:</p>
                <p> block2</p>
              </sec>
              <sec id="sb3c">
                <title>while loop:</title>
                <p>Executes a block of code as long as a condition is true. As the for loop, there could be an optional <bold>else</bold> clause. When present, the block under the else clause is executed when the condition becomes false but not when the loop is terminated by a <bold>break</bold> statement.</p>
                <p>The general form is:</p>
                <p><bold>while</bold> condition:</p>
                <p> block1</p>
                <p><bold>else</bold>:</p>
                <p> block2</p>
              </sec>
            </sec>
          </boxed-text>
        </sec>
        <sec id="s3X0X3">
          <title>Functions.</title>
          <p>Python allows programmers to define their own functions. The <bold>def</bold> keyword is used followed by the name of the function and a list of comma-separated arguments between parentheses. Parentheses are mandatory, even for functions without arguments.</p>
          <p>Python's function structure is:</p>
          <p><bold>def</bold> FunctionName(argument1, argument2, ...):</p>
          <p> <italic>function_block</italic></p>
          <p> <bold>return</bold> <italic>value</italic></p>
          <p>Arguments are passed by reference and without specifying data types. It is up the programmer to check data types. When a function is called, the arguments must be supplied in the same order as defined, unless arguments are provided by using keyword–value pairs (<italic>keyword=value</italic>). Default arguments can be defined by using keyword–value pairs in the function definition. This way a function can be called without supplying arguments. To deal with an arbitrary number of arguments, the last argument in the function definition must be preceded with an asterisk in the form <italic>*name</italic>. This specifies that the last value is set to a tuple for all remaining parameters.</p>
          <p>The return statement terminates the execution of the function and returns a single value. To return multiple values, a list or a tuple must be used.</p>
        </sec>
        <sec id="s3X0X4">
          <title>Modules.</title>
          <p>In Python, functions, classes and constants can be saved in a file, called a “module,” for later use. Modules can be called from a program or in interactive mode using the “import” statement, such as:</p>
          <p><bold>import</bold> ModuleName</p>
          <p>where ModuleName is the name of the file without an extension. When a module is imported for the first time, its code is interpreted and executed. Execution upon import of certain code can be prevented by putting the code into an import executable conditional statement (if __name__ == __main__). The '__name__' attribute of the module is the name of the module and is '__main__' only when the module is run as a standalone program. Successive imports of the same module have no effect.</p>
          <p>Python provides several modules and there are many more that can be downloaded from the Internet (like SciPy [<xref ref-type="bibr" rid="pcbi-0030199-b004">4</xref>], which provides scientific and numeric tools for Python, Matplotlib [<xref ref-type="bibr" rid="pcbi-0030199-b005">5</xref>] for plotting, and so on).</p>
          <p>An example:</p>
          <p>&gt;&gt;&gt; <bold>import</bold> math</p>
          <p>&gt;&gt;&gt; <bold>dir</bold>(math)</p>
          <p>['__doc__', '__file__', '__name__', 'acos', 'asin', 'atan', 'atan2', 'ceil', 'cos', 'cosh', 'degrees', 'e', 'exp', 'fabs', 'floor', 'fmod', 'frexp', 'hypot', 'ldexp', 'log', 'log10', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh']</p>
          <p>No error message returned by the interpreter means that the module was successfully imported. <bold>dir()</bold> is a built-in function that returns a list of the attributes and methods of any chosen object. To access an object from a module, the syntax is module.object, since importing a module creates a namespace.</p>
          <p>For example:</p>
          <p>&gt;&gt;&gt; math.log(2)</p>
          <p>0.69314718055994529</p>
        </sec>
      </sec>
    </sec>
    <sec id="s4">
      <title>Python in Action: Net Charge from an Amino Acid Sequence</title>
      <p>To show Python syntax and data structures in action, it is instructive to look at solving a real problem using this language, such as the calculation of the net charge of a protein. Given a protein sequence, this is performed by adding up the charges of each charged amino acid at pH = 7. This calculation gives a rough value because it doesn't consider whether the residues are exposed, partly exposed, buried, or deeply buried. This example shows functions, data types (numbers, strings, and dictionaries) and flow control (<bold>if</bold> and <bold>for</bold>).</p>
      <sec id="s4a">
        <title/>
        <sec id="s4a1">
          <title>Code explained.</title>
          <p>This script defines a function (<italic>netcharge</italic>) that takes a peptide sequence as an input (<italic>seq</italic>) and calculates the net charge by adding up all the individual charged amino acids. The main data structure is a dictionary (<italic>AACharge</italic>) with the values of each charged amino acid. There is also a numeric type (<italic>charge</italic>) that holds the partial charge values and is initialized with −0.002 since this is the value of the net charge of the amino and carboxy-terminus of the peptide. For each amino acid, the program checks whether it is inside the list of the keys in the dictionary and, if it is, adds its charge values. After the function definition, a protein sequence is called as an argument. The commented source code is shown in <xref ref-type="supplementary-material" rid="pcbi-0030199-sd001">Protocol S1</xref>.</p>
        </sec>
        <sec id="s4X0X2">
          <title>Biopython.</title>
          <p>Biopython is a distributed, collaborative effort to develop Python libraries and applications that address the needs of current and future work in bioinformatics [<xref ref-type="bibr" rid="pcbi-0030199-b006">6</xref>]. It provides tools for working with biological sequences, parsers of popular file formats used in bioinformatics (FASTA, COMPASS [<xref ref-type="bibr" rid="pcbi-0030199-b007">7</xref>], GenBank, PIR [<xref ref-type="bibr" rid="pcbi-0030199-b008">8</xref>], PDB [<xref ref-type="bibr" rid="pcbi-0030199-b009">9</xref>], BLAST output [<xref ref-type="bibr" rid="pcbi-0030199-b010">10</xref>], InterPro [<xref ref-type="bibr" rid="pcbi-0030199-b011">11</xref>], LocusLink [<xref ref-type="bibr" rid="pcbi-0030199-b012">12</xref>], PROSITE [<xref ref-type="bibr" rid="pcbi-0030199-b013">13</xref>], Phred [<xref ref-type="bibr" rid="pcbi-0030199-b014">14</xref>], Phrap [<xref ref-type="bibr" rid="pcbi-0030199-b015">15</xref>]), data retrieval from biological databases (Swiss-Prot [<xref ref-type="bibr" rid="pcbi-0030199-b016">16</xref>], PubMed [<xref ref-type="bibr" rid="pcbi-0030199-b017">17</xref>], GenBank [<xref ref-type="bibr" rid="pcbi-0030199-b018">18</xref>]), a wrapper for bioinformatics programs (BLAST, ClustalW [<xref ref-type="bibr" rid="pcbi-0030199-b019">19</xref>], EMBOSS [<xref ref-type="bibr" rid="pcbi-0030199-b020">20</xref>], Primer3 [<xref ref-type="bibr" rid="pcbi-0030199-b021">21</xref>], and more), functions to estimate DNA and protein properties such as isoelectric points [<xref ref-type="bibr" rid="pcbi-0030199-b022">22</xref>,<xref ref-type="bibr" rid="pcbi-0030199-b023">23</xref>], restriction enzymes cutting, and many more.</p>
          <p>A review of Biopython functions would require a far more considerable amount of space; therefore this paper shows only a small portion of the bigger picture. The first example shows how to parse a BLAST output to extract and report only required features. Since BLAST is the most commonly used application in bioinformatics, writing a BLAST report parser is a basic exercise in bioinformatics [<xref ref-type="bibr" rid="pcbi-0030199-b024">24</xref>]. Other functions like massive file processing and file format conversion are also shown.</p>
        </sec>
      </sec>
    </sec>
    <sec id="s5">
      <title>Parsing BLAST Files</title>
      <p>The program below extracts the title and sequence from some high-scoring pairs (HSP), but there are many more features to extract from a BLAST output, if needed. Biopython provides the Blast Record class under Bio.Blast.NCBIXML.Record. Internal documentation for this object can be accessed with <bold>help</bold>(NCBIXML.Record) after importing NCBIXML from Bio.Blast.</p>
      <sec id="s5a">
        <title/>
        <sec id="s5a1">
          <title>Code explained.</title>
          <p>For this program, the user has to perform a BLAST search and save the result in XML mode because this format tends to be more stable than HTML or text versions (and hence the Biopython parser should be able to handle it without any problem [<xref ref-type="bibr" rid="pcbi-0030199-b025">25</xref>]). The BLAST search can be performed using the NCBI Web server (<ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/BLAST/" xlink:type="simple">http://www.ncbi.nlm.nih.gov/BLAST/</ext-link>). To generate XML output, select XML as the format option on the BLAST page. When using the standalone version of BLAST, the <italic>m</italic> parameter in the blastall command should be set to 7. Biopython can also be used to run the BLAST program; in this case the output defaults to XML. A sample XML BLAST output (Blast2.xml) is provided in <xref ref-type="supplementary-material" rid="pcbi-0030199-sd004">Protocol S4</xref>. The objective is to print out only the sequences with an HSP larger than 80 base pairs in a specific chromosome.</p>
          <p>This program, blastparser2.py, takes a BLAST output in XML format and shows the sequence of hits in Chromosome 5 that are larger than 80 base pairs long. A file handle named bout with the BLAST output in XML format is created, and then the file is parsed using the <bold>Bio.Blast.NCBIXML.parse</bold> function. To parse another type of BLAST output, the parser should be changed. Instead of using NCBIXML, use NCBIStandalone. All BLAST records are stored in an iterator called <italic>b_records</italic>. Using a <bold>for</bold> loop, the program steps through all the BLAST records. For each hit, the program checks all HSP for the presence of the “chromosome 5” string and a length of the hit sequence (without gaps) greater than 80 base pairs. The source code is shown in <xref ref-type="supplementary-material" rid="pcbi-0030199-sd002">Protocol S2</xref>.</p>
        </sec>
      </sec>
    </sec>
    <sec id="s6">
      <title>Consolidate Several Sequence Files into One FASTA File</title>
      <p>In this example we use a simulated output provided by an external sequencing service. It consists of more than 6,000 directories (one for each clone), and there are three files per directory (a formatted report with a pdf extension, the sequencing machine output with an ab1 extension, and a plain text file with the sequence). This directory structure and its files are available as <xref ref-type="supplementary-material" rid="pcbi-0030199-sd004">Protocol S4</xref>. The program retrieves all the sequences and writes them into a FASTA-formatted file for further analysis.</p>
      <p>The program fromdir2fasta.py to scan a directory (mydir) where the output of the sequencing service is downloaded. The names of all the directories under that directory are obtained with the <bold>os.listdir</bold> function and stored into a list (<italic>lsdir</italic>). For each directory (<italic>x</italic>), the list of files are stored into a list (<italic>fs</italic>). For each file (<italic>curfile</italic>), the program checks if it ends in “txt,” and if it does the script retrieves the sequence from the file as a Seq object (<italic>dna</italic>). Using the title from the filename and the seq object, it creates a SeqRecord object (seq_rec) and adds it to a list (<italic>sequences</italic>). After the directory had been scanned and the sequences list filled with SeqRecord objects corresponding to all the files, the sequences are written to a file in FASTA format. This is done with the <bold>SeqIO.write</bold> function. For an explanation of file handling, see <xref ref-type="boxed-text" rid="pcbi-0030199-box004">Box 4</xref>. To get the output in another format, the third parameter of this function should be changed. For more information on SeqIO, including a table with supported formats, see <ext-link ext-link-type="uri" xlink:href="http://biopython.org/wiki/SeqIO" xlink:type="simple">http://biopython.org/wiki/SeqIO</ext-link>. The commented source code is shown in <xref ref-type="supplementary-material" rid="pcbi-0030199-sd003">Protocol S3</xref>.</p>
      <boxed-text id="pcbi-0030199-box004" position="float">
        <sec id="sb4">
          <title>Box 4. Dealing with Text Files</title>
          <sec id="sb4a">
            <title/>
            <p>Reading a text file in Python is a three-step process.</p>
            <p>1: Open the file, creating a handle.</p>
            <p>handle=<bold>open</bold>('PathToFile','r')</p>
            <p>The first parameter is the filename location. The second parameter is the first letter of the open mode, that is, r, w, and a, corresponding to read, write, and append. This function returns a file object (handle).</p>
          </sec>
          <sec id="sb4b">
            <title/>
            <p>2: Read the file. There are several methods to gain access to the contents of a file:</p>
            <p>handle.<bold>read</bold>(n): Reads the first <italic>n</italic> bytes of a file and returns a string. Without arguments, reads the file until the end of file (EOF).</p>
            <p>handle.<bold>readline</bold>(n): Reads a line of the file and returns a string. When it reaches the EOF, it returns an empty string.</p>
            <p>handle.<bold>readlines</bold>(): Reads all the lines and returns a list of strings. The “end of line” (EOL) is determined based on host operating system.</p>
            <p>For efficient iteration over a file, use “<bold>for</bold> line <bold>in</bold> handle”.</p>
          </sec>
          <sec id="sb4c">
            <title/>
            <p>3: Close the file:</p>
            <p>handle.<bold>close</bold>(): Closes the file.</p>
          </sec>
          <sec id="sb4d">
            <title/>
            <p>Writing a file is very similar to reading a file. Steps 1 and 3 are the same as reading a file. The main difference is in step 2, where the file's contents are written with the <bold>write</bold> method, as:</p>
            <p>handle.write(“This text will make it into a text file\n”)</p>
            <p>There is also a writelines method that writes each member of the list to a file.</p>
          </sec>
        </sec>
      </boxed-text>
    </sec>
    <sec id="s7">
      <title>Summary</title>
      <p>Python's capabilities include scientific plotting [<xref ref-type="bibr" rid="pcbi-0030199-b005">5</xref>,<xref ref-type="bibr" rid="pcbi-0030199-b026">26</xref>–<xref ref-type="bibr" rid="pcbi-0030199-b029">29</xref>], GUI building [<xref ref-type="bibr" rid="pcbi-0030199-b030">30</xref>–<xref ref-type="bibr" rid="pcbi-0030199-b032">32</xref>], automatic Web page generation [<xref ref-type="bibr" rid="pcbi-0030199-b033">33</xref>–<xref ref-type="bibr" rid="pcbi-0030199-b035">35</xref>], and interfacing with Windows components [<xref ref-type="bibr" rid="pcbi-0030199-b036">36</xref>,<xref ref-type="bibr" rid="pcbi-0030199-b037">37</xref>] and with external programs like R [<xref ref-type="bibr" rid="pcbi-0030199-b038">38</xref>] and Matlab [<xref ref-type="bibr" rid="pcbi-0030199-b039">39</xref>]. As hardware becomes faster, a computer's raw processing time is less relevant than scientist's time [<xref ref-type="bibr" rid="pcbi-0030199-b040">40</xref>]. Scripting languages allow the programmer to do more in less time, making Python an excellent choice for bioinformatics data analysis.</p>
    </sec>
    <sec id="s8">
      <title>Additional Reading</title>
      <p>One common problem for non-computer science researchers who start programming is that they usually stick to basic concepts and don't take advantage of many modern tools that are available [<xref ref-type="bibr" rid="pcbi-0030199-b041">41</xref>]. Version control, project management, and automatic unit testing are only a handful of useful software engineering techniques that are virtually unknown to most researchers [<xref ref-type="bibr" rid="pcbi-0030199-b042">42</xref>].</p>
      <p>There are many good quality resources for learning Python. Some of these have already been mentioned and a summary of resources is presented in <xref ref-type="table" rid="pcbi-0030199-t002">Table 2</xref>. Since code written in Python is easy to read, modifying other people's code to suit your needs is a recommended path for learning. For this reason, the table also includes code search engines and bioinformatics software repositories.</p>
      <table-wrap content-type="2col" id="pcbi-0030199-t002" position="float"><object-id pub-id-type="doi">10.1371/journal.pcbi.0030199.t002</object-id><label>Table 2</label><caption>
          <p>Resources for Learning Python and Biopython</p>
        </caption><graphic mimetype="image" position="float" xlink:href="info:doi/10.1371/journal.pcbi.0030199.t002" xlink:type="simple"/><!-- <table frame="hsides" rules="none"><colgroup><col id="tb2col1" align="left" charoff="0" char=""/><col id="tb2col2" align="left" charoff="0" char=""/><col id="tb2col3" align="left" charoff="0" char=""/></colgroup><thead><tr><td align="left"><hr/>Source Type</td><td><hr/>Address</td><td><hr/>Description</td></tr></thead><tbody><tr><td><bold>Python</bold></td><td>www.python.org</td><td>Official site of Python. Documentation and last program version can be downloaded from here.</td></tr><tr><td>www.ibiblio.org/obp/thinkCSpy</td><td>Online book <italic>How to Think Like a Computer Scientist. Learning with Python</italic>. Recommended as a first book on Python.</td></tr><tr><td>www.diveintopython.org</td><td>Book for intermediate and advanced programmers.</td></tr><tr><td>www.rgruet.free.fr/&num;QuickRef</td><td>Complete Python reference with color highlighting of differences between Python versions.</td></tr><tr><td>www.awaretek.com/tutorials.html</td><td>More than 300 Python tutorials carefully sorted by topic and category.</td></tr><tr><td>&num;python channel on the irc.freenode.net IRC server</td><td>Real-time chat about Python with an average of 200 users at any time. An ICR client is required.</td></tr><tr><td>www.python.org/mailman/listinfo/python-list</td><td>High volume mailing list where everyone can ask for help on Python.</td></tr><tr><td>www.scipy.org</td><td>Resources for Python in science.</td></tr><tr><td>wiki.python.org/moin/PythonSpeed/PerformanceTips</td><td>Tips for enhance the speed of you Python programs.</td></tr><tr><td><bold>Biopython</bold></td><td>www.biopython.org</td><td>Official site of Biopython.</td></tr><tr><td>www.biopython.org/DIST/docs/tutorial/Tutorial.html</td><td>Biopython cookbook. Best place to start for biopython.</td></tr><tr><td>www.pasteur.fr/recherche/unites/sis/formation/python/</td><td>Bioinformatics course in Python at the Pasteur Institute. Full of samples.</td></tr><tr><td><bold>Code search engines and repositories</bold></td><td>www.bioinformatics.org</td><td>Bioinformatics organization that host python projects.</td></tr><tr><td>www.koders.com</td><td>A search engine for source code. Biopython project is included.</td></tr><tr><td>www.krugle.com</td><td>Another search engine for source code. Same features as Koders with a more rich interface.</td></tr><tr><td>www.google.com/codesearch</td><td>Less features than Koders and Krugle, but with a bigger database and a simpler interface.</td></tr></tbody></table> --><!-- <table-wrap-foot><fn id="nt201"><p><ext-link ext-link-type="doi" xlink:href="10.1371/journal.pcbi.0030199.2001">doi:1011371/journal.pcbi.0030199.t002</ext-link></p></fn></table-wrap-foot> --></table-wrap>
    </sec>
    <sec id="s9">
      <title>Supporting Information</title>
      <supplementary-material id="pcbi-0030199-sd001" mimetype="application/msword" position="float" xlink:href="info:doi/10.1371/journal.pcbi.0030199.sd001" xlink:type="simple">
        <label>Protocol S1</label>
        <caption>
          <title>This Program Defines a Function To Calculate the Net Charge of a Protein Based on the Charges of Its Amino Acids</title>
          <p>On the last line of the code the function is called.</p>
          <p>(107 KB DOC)</p>
        </caption>
      </supplementary-material>
      <supplementary-material id="pcbi-0030199-sd002" mimetype="application/msword" position="float" xlink:href="info:doi/10.1371/journal.pcbi.0030199.sd002" xlink:type="simple">
        <label>Protocol S2</label>
        <caption>
          <title>This Program Reads the Output of a BLAST Run Using the Parse Function on the NCBIXML Module</title>
          <p>(107 KB DOC)</p>
        </caption>
      </supplementary-material>
      <supplementary-material id="pcbi-0030199-sd003" mimetype="application/msword" position="float" xlink:href="info:doi/10.1371/journal.pcbi.0030199.sd003" xlink:type="simple">
        <label>Protocol S3</label>
        <caption>
          <title>This Program Shows How To Use Python to Mass-Convert Sequence Files from Plain Text to FASTA Format with Biopython SeqIO Module</title>
          <p>(48 KB DOC)</p>
        </caption>
      </supplementary-material>
      <supplementary-material id="pcbi-0030199-sd004" mimetype="application/x-gzip" position="float" xlink:href="info:doi/10.1371/journal.pcbi.0030199.sd004" xlink:type="simple">
        <label>Protocol S4</label>
        <caption>
          <title>Python Code and Needed Files To Run Programs</title>
          <p>(172 KB GZ).</p>
        </caption>
      </supplementary-material>
    </sec>
  </body>
  <back>
    <ack>
      <p>The author wishes to thank Virginia C. Gonzalez for her help, Dr. Diego Golombek, the anonymous reviewers for helpful comments, all the Biopython team for their work, and the local Python community (PyAR) for their support.</p>
    </ack>
    
    <glossary>
      <title>Abbreviations</title>
      <def-list>
        <def-item>
          <term>HSP</term>
          <def>
            <p>high-scoring pairs</p>
          </def>
        </def-item>
      </def-list>
    </glossary>
    <ref-list>
      <title>References</title>
      <ref id="pcbi-0030199-b001">
        <label>1</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Van Rossum</surname><given-names>G</given-names></name><name name-style="western"><surname>de Boer</surname><given-names>J</given-names></name></person-group>
					<year>1991</year>
					<article-title>Interactively testing remote servers using the Python programming language.</article-title>
					<source>CWI Quarterly</source>
					<volume>4</volume>
					<fpage>283</fpage>
					<lpage>303</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b002">
        <label>2</label>
        <element-citation publication-type="other" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Chou</surname><given-names>PH</given-names></name></person-group>
					<year>2002</year>
					<source>Algorithm education in Python</source>
					<conf-name>10th International Python Conference;</conf-name>
					<conf-date>4–7 February 2002;</conf-date>
					<conf-loc>Alexandria, Virginia, United States of America.</conf-loc>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.python10.org/p10-papers/index.htm" xlink:type="simple">http://www.python10.org/p10-papers/index.htm</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b003">
        <label>3</label>
        <element-citation publication-type="other" xlink:type="simple">
					<year>2007</year>
					<source>NumPy</source>
					<publisher-name>Trelgol Publishing</publisher-name>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://numpy.scipy.org/" xlink:type="simple">http://numpy.scipy.org/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b004">
        <label>4</label>
        <element-citation publication-type="other" xlink:type="simple">
					<collab xlink:type="simple">SciPy</collab>
					<year>2007</year>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.scipy.org/" xlink:type="simple">http://www.scipy.org/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b005">
        <label>5</label>
        <element-citation publication-type="other" xlink:type="simple">
					<year>2007</year>
					<source>Mathplotlib</source>
					<publisher-name>The Mathworks</publisher-name>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://matplotlib.sourceforge.net/" xlink:type="simple">http://matplotlib.sourceforge.net/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b006">
        <label>6</label>
        <element-citation publication-type="other" xlink:type="simple">
					<year>2007</year>
					<source>Biopyton Version 1.43</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.biopython.org/" xlink:type="simple">http://www.biopython.org/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b007">
        <label>7</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Sadreyev</surname><given-names>R</given-names></name><name name-style="western"><surname>Grishin</surname><given-names>N</given-names></name></person-group>
					<year>2003</year>
					<article-title>COMPASS: A tool for comparison of multiple protein alignments with assessment of statistical significance.</article-title>
					<source>J Mol Biol</source>
					<volume>326</volume>
					<fpage>317</fpage>
					<lpage>336</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b008">
        <label>8</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Wu</surname><given-names>CH</given-names></name><name name-style="western"><surname>Yeh</surname><given-names>LS</given-names></name><name name-style="western"><surname>Huang</surname><given-names>H</given-names></name><name name-style="western"><surname>Arminski</surname><given-names>L</given-names></name><name name-style="western"><surname>Castro-Alvear</surname><given-names>J</given-names></name><etal/></person-group>
					<year>2003</year>
					<article-title>The Protein Information Resource.</article-title>
					<source>Nucleic Acids Res</source>
					<volume>31</volume>
					<fpage>345</fpage>
					<lpage>347</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b009">
        <label>9</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Hamelryck</surname><given-names>T</given-names></name><name name-style="western"><surname>Manderick</surname><given-names>B</given-names></name></person-group>
					<year>2003</year>
					<article-title>PDB file parser and structure class implemented in Python.</article-title>
					<source>Bioinformatics</source>
					<volume>19</volume>
					<fpage>2308</fpage>
					<lpage>2310</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b010">
        <label>10</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Altschul</surname><given-names>SF</given-names></name><name name-style="western"><surname>Madden</surname><given-names>TL</given-names></name><name name-style="western"><surname>Schäffer</surname><given-names>AA</given-names></name><name name-style="western"><surname>Zhang</surname><given-names>J</given-names></name><name name-style="western"><surname>Zhang</surname><given-names>Z</given-names></name><etal/></person-group>
					<year>1997</year>
					<article-title>Gapped BLAST and PSI-BLAST: A new generation of protein database search programs.</article-title>
					<source>Nucleic Acids Res</source>
					<volume>25</volume>
					<fpage>3389</fpage>
					<lpage>3402</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b011">
        <label>11</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Mulder</surname><given-names>NJ</given-names></name><name name-style="western"><surname>Apweiler</surname><given-names>R</given-names></name><name name-style="western"><surname>Attwood</surname><given-names>TK</given-names></name><name name-style="western"><surname>Bairoch</surname><given-names>A</given-names></name><name name-style="western"><surname>Bateman</surname><given-names>A</given-names></name><etal/></person-group>
					<year>2005</year>
					<article-title>InterPro, progress and status in 2005.</article-title>
					<source>Nucleic Acids Res</source>
					<volume>33</volume>
					<fpage>D201</fpage>
					<lpage>D205</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b012">
        <label>12</label>
        <element-citation publication-type="other" xlink:type="simple">
					<collab xlink:type="simple">The Centre for Applied Genomics</collab>
					<year>2007</year>
					<source>NCBI Locus Link in BioXRT Database</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://projects.tcag.ca/bioxrt/locuslink/" xlink:type="simple">http://projects.tcag.ca/bioxrt/locuslink/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b013">
        <label>13</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Hulo</surname><given-names>N</given-names></name><name name-style="western"><surname>Bairoch</surname><given-names>A</given-names></name><name name-style="western"><surname>Bulliard</surname><given-names>V</given-names></name><name name-style="western"><surname>Cerutti</surname><given-names>L</given-names></name><name name-style="western"><surname>De Castro</surname><given-names>E</given-names></name><etal/></person-group>
					<year>2006</year>
					<article-title>The PROSITE database.</article-title>
					<source>Nucleic Acids Res</source>
					<volume>34</volume>
					<fpage>D227</fpage>
					<lpage>D230</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b014">
        <label>14</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Ewing</surname><given-names>B</given-names></name><name name-style="western"><surname>Hillier</surname><given-names>L</given-names></name><name name-style="western"><surname>Wendl</surname><given-names>M</given-names></name><name name-style="western"><surname>Green</surname><given-names>P</given-names></name></person-group>
					<year>1998</year>
					<article-title>Basecalling of automated sequencer traces using phred. I. Accuracy assessment.</article-title>
					<source>Genome Res</source>
					<volume>8</volume>
					<fpage>175</fpage>
					<lpage>185</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b015">
        <label>15</label>
        <element-citation publication-type="other" xlink:type="simple">
					<collab xlink:type="simple">Laboratory of Phil Green</collab>
					<year>2007</year>
					<source>Phred, Phrap, Consed</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.phrap.org/phredphrapconsed.html#block_phrap" xlink:type="simple">http://www.phrap.org/phredphrapconsed.html#block_phrap</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b016">
        <label>16</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Bairoch</surname><given-names>A</given-names></name><name name-style="western"><surname>Boeckmann</surname><given-names>B</given-names></name><name name-style="western"><surname>Ferro</surname><given-names>S</given-names></name><name name-style="western"><surname>Gasteiger</surname><given-names>E</given-names></name></person-group>
					<year>2004</year>
					<article-title>Swiss-Prot: Juggling between evolution and stability.</article-title>
					<source>Brief Bioinform</source>
					<volume>5</volume>
					<fpage>39</fpage>
					<lpage>55</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b017">
        <label>17</label>
        <element-citation publication-type="other" xlink:type="simple">
					<collab xlink:type="simple">PubMed</collab>
					<year>2007</year>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.ncbi.nlm.nih.gov/entrez/query.fcgi" xlink:type="simple">http://www.ncbi.nlm.nih.gov/entrez/query.fcgi</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b018">
        <label>18</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Benson</surname><given-names>DA</given-names></name><name name-style="western"><surname>Karsch-Mizrachi</surname><given-names>I</given-names></name><name name-style="western"><surname>Lipman</surname><given-names>DJ</given-names></name><name name-style="western"><surname>Ostell</surname><given-names>J</given-names></name><name name-style="western"><surname>Wheeler</surname><given-names>DL</given-names></name></person-group>
					<year>2006</year>
					<article-title>GenBank.</article-title>
					<source>Nucleic Acids Res</source>
					<volume>34</volume>
					<fpage>D16</fpage>
					<lpage>D20</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b019">
        <label>19</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Higgins</surname><given-names>DG</given-names></name><name name-style="western"><surname>Thompson</surname><given-names>JD</given-names></name><name name-style="western"><surname>Gibson</surname><given-names>TJ</given-names></name></person-group>
					<year>1996</year>
					<article-title>Using CLUSTAL for multiple sequence alignments.</article-title>
					<source>Methods Enzymol</source>
					<volume>266</volume>
					<fpage>383</fpage>
					<lpage>402</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b020">
        <label>20</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Rice</surname><given-names>P</given-names></name><name name-style="western"><surname>Longden</surname><given-names>I</given-names></name><name name-style="western"><surname>Bleasby</surname><given-names>A</given-names></name></person-group>
					<year>2000</year>
					<article-title>EMBOSS: The European Molecular Biology Open Software Suite.</article-title>
					<source>Trends Genet</source>
					<volume>16</volume>
					<fpage>276</fpage>
					<lpage>277</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b021">
        <label>21</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Rozen</surname><given-names>S</given-names></name><name name-style="western"><surname>Skaletsky</surname><given-names>H</given-names></name></person-group>
					<year>2000</year>
					<article-title>Primer3 on the WWW for general users and for biologist programmers.</article-title>
					<source>Methods Mol Biol</source>
					<volume>132</volume>
					<fpage>365</fpage>
					<lpage>386</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b022">
        <label>22</label>
        <element-citation publication-type="other" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Toldo</surname><given-names>L</given-names></name></person-group>
					<year>2007</year>
					<source>PI EMBL WWW Gateway to Isoelectric Point Service</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.embl-heidelberg.de/cgi/pi-wrapper.pl" xlink:type="simple">http://www.embl-heidelberg.de/cgi/pi-wrapper.pl</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b023">
        <label>23</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Bjellqvist</surname><given-names>B</given-names></name><name name-style="western"><surname>Hughes</surname><given-names>GJ</given-names></name><name name-style="western"><surname>Pasquali</surname><given-names>C</given-names></name><name name-style="western"><surname>Paquet</surname><given-names>N</given-names></name><name name-style="western"><surname>Ravier</surname><given-names>F</given-names></name><etal/></person-group>
					<year>1993</year>
					<article-title>The focusing positions of polypeptides in inmobilized pH gradients can be predicted from their amino acid sequences.</article-title>
					<source>Electrophoresis</source>
					<volume>14</volume>
					<fpage>1023</fpage>
					<lpage>1031</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b024">
        <label>24</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Stajich</surname><given-names>JE</given-names></name><name name-style="western"><surname>Lapp</surname><given-names>H</given-names></name></person-group>
					<year>2006</year>
					<article-title>Open source tools and toolkits for bioinformatics: Significance, and where are we?</article-title>
					<source>Brief Bioinform</source>
					<volume>7</volume>
					<fpage>287</fpage>
					<lpage>296</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b025">
        <label>25</label>
        <element-citation publication-type="other" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>McGinnis</surname><given-names>S</given-names></name></person-group>
					<year>2005</year>
					<source>NCBI communication to BioPerl Team</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.bioperl.org/w/index.php?title=NCBI_Blast_email&amp;oldid=5114" xlink:type="simple">http://www.bioperl.org/w/index.php?title=NCBI_Blast_email&amp;oldid=5114</ext-link>. Accessed 14 June 2007</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b026">
        <label>26</label>
        <element-citation publication-type="other" xlink:type="simple">
					<collab xlink:type="simple">Enthought</collab>
					<year>2007</year>
					<source>Chaco</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://code.enthought.com/chaco/" xlink:type="simple">http://code.enthought.com/chaco/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b027">
        <label>27</label>
        <element-citation publication-type="other" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Ramachandran</surname><given-names>P</given-names></name></person-group>
					<year>2007</year>
					<source>MayaVi</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://mayavi.sourceforge.net/" xlink:type="simple">http://mayavi.sourceforge.net/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b028">
        <label>28</label>
        <element-citation publication-type="other" xlink:type="simple">
					<collab xlink:type="simple">Computational and Information Systems Laboratory</collab>
					<year>2007</year>
					<source>PyNGL: A Python interface. National Center for Atmospheric Research</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.pyngl.ucar.edu/" xlink:type="simple">http://www.pyngl.ucar.edu/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b029">
        <label>29</label>
        <element-citation publication-type="other" xlink:type="simple">
					<collab xlink:type="simple">Max Planck Institute for Solar Research</collab>
					<year>2007</year>
					<source>DISLIN scientific plotting software</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.dislin.de/" xlink:type="simple">http://www.dislin.de/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b030">
        <label>30</label>
        <element-citation publication-type="other" xlink:type="simple">
					<collab xlink:type="simple">Python Software Foundation</collab>
					<year>2007</year>
					<source>PythonCard 0.8.2</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://pythoncard.sourceforge.net/" xlink:type="simple">http://pythoncard.sourceforge.net/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b031">
        <label>31</label>
        <element-citation publication-type="other" xlink:type="simple">
					<year>2007</year>
					<source>EasyGUI 0.72</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.ferg.org/easygui/" xlink:type="simple">http://www.ferg.org/easygui/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b032">
        <label>32</label>
        <element-citation publication-type="other" xlink:type="simple">
					<year>2007</year>
					<source>Tkinter Wiki</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://tkinter.unpythonic.net/wiki/" xlink:type="simple">http://tkinter.unpythonic.net/wiki/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b033">
        <label>33</label>
        <element-citation publication-type="other" xlink:type="simple">
					<collab xlink:type="simple">Lawrence Journal-World</collab>
					<year>2007</year>
					<source>Django</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.djangoproject.com/" xlink:type="simple">http://www.djangoproject.com/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b034">
        <label>34</label>
        <element-citation publication-type="other" xlink:type="simple">
					<collab xlink:type="simple">Zope Community</collab>
					<year>2007</year>
					<source>Zope</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.zope.org/" xlink:type="simple">http://www.zope.org/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b035">
        <label>35</label>
        <element-citation publication-type="other" xlink:type="simple">
					<year>2007</year>
					<source>CherryPy</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.cherrypy.org/" xlink:type="simple">http://www.cherrypy.org/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b036">
        <label>36</label>
        <element-citation publication-type="other" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Hammond</surname><given-names>M</given-names></name></person-group>
					<year>2007</year>
					<article-title>Python programming on Win32 using PythonWin.</article-title>
					<comment>In:</comment>
					<person-group person-group-type="editor"><name name-style="western"><surname>Hammond</surname><given-names>M</given-names></name><name name-style="western"><surname>Robinson</surname><given-names>A</given-names></name></person-group>
					<source>Python programming on Win32</source>
					<publisher-name>O'Reilly Network</publisher-name>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.onlamp.com/pub/a/python/excerpts/chpt20/pythonwin.html" xlink:type="simple">http://www.onlamp.com/pub/a/python/excerpts/chpt20/pythonwin.html</ext-link>. Accessed 4 October 2007</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b037">
        <label>37</label>
        <element-citation publication-type="other" xlink:type="simple">
					<collab xlink:type="simple">Codeplex Microsoft.net</collab>
					<year>2007</year>
					<source>IronPython</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython" xlink:type="simple">http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b038">
        <label>38</label>
        <element-citation publication-type="other" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Moreira</surname><given-names>W</given-names></name><name name-style="western"><surname>Warnes</surname><given-names>GR</given-names></name></person-group>
					<year>2007</year>
					<source>Rpy</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://rpy.sourceforge.net/" xlink:type="simple">http://rpy.sourceforge.net/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b039">
        <label>39</label>
        <element-citation publication-type="other" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Smolck</surname><given-names>A</given-names></name></person-group>
					<year>2007</year>
					<source>mlabwrap 1.0. The MathWorks</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://mlabwrap.sourceforge.net/" xlink:type="simple">http://mlabwrap.sourceforge.net/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b040">
        <label>40</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Perez</surname><given-names>F</given-names></name><name name-style="western"><surname>Granger</surname><given-names>BE</given-names></name></person-group>
					<year>2007</year>
					<article-title>Ipython: A system for interactive scientific computing.</article-title>
					<source>CiSE</source>
					<volume>9</volume>
					<fpage>21</fpage>
					<lpage>29</lpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b041">
        <label>41</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Wilson</surname><given-names>GV</given-names></name></person-group>
					<year>2005</year>
					<article-title>Recruiters and academia.</article-title>
					<source>Nature</source>
					<volume>436</volume>
					<fpage>600</fpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b042">
        <label>42</label>
        <element-citation publication-type="journal" xlink:type="simple">
					<person-group person-group-type="author"><name name-style="western"><surname>Wilson</surname><given-names>GV</given-names></name></person-group>
					<year>2005</year>
					<article-title>Where's the real bottleneck in scientific computing?</article-title>
					<source>Am Sci</source>
					<volume>94</volume>
					<fpage>5</fpage>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b043">
        <label>43</label>
        <element-citation publication-type="other" xlink:type="simple">
					<collab xlink:type="simple">Institute of Electrical and Electronics Engineers</collab>
					<year>1985</year>
					<source>Binary Floating-Point Arithmetic. IEEE standard 754</source>
					<publisher-loc>Piscataway (New Jersey)</publisher-loc>
					<publisher-name>Institute of Electrical and Electronics Engineers</publisher-name>
				</element-citation>
      </ref>
      <ref id="pcbi-0030199-b044">
        <label>44</label>
        <element-citation publication-type="other" xlink:type="simple">
					<collab xlink:type="simple">Python Software Foundation</collab>
					<year>2003</year>
					<source>Decimal Data Type</source>
					<comment>Available: <ext-link ext-link-type="uri" xlink:href="http://www.python.org/dev/peps/pep-0327/" xlink:type="simple">http://www.python.org/dev/peps/pep-0327/</ext-link>. Accessed 4 October 2007.</comment>
				</element-citation>
      </ref>
    </ref-list>
  </back>
</article>