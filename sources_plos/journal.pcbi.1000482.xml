<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="discussion" dtd-version="3.0" xml:lang="EN">
<front>
<journal-meta><journal-id journal-id-type="publisher-id">plos</journal-id><journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id><journal-id journal-id-type="pmc">ploscomp</journal-id><!--===== Grouping journal title elements =====--><journal-title-group><journal-title>PLoS Computational Biology</journal-title></journal-title-group><issn pub-type="ppub">1553-734X</issn><issn pub-type="epub">1553-7358</issn><publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, USA</publisher-loc></publisher></journal-meta>
<article-meta><article-id pub-id-type="publisher-id">09-PLCB-EN-0469R3</article-id><article-id pub-id-type="doi">10.1371/journal.pcbi.1000482</article-id><article-categories><subj-group subj-group-type="heading"><subject>Education</subject></subj-group><subj-group subj-group-type="Discipline"><subject>Computational Biology</subject></subj-group></article-categories><title-group><article-title>A Quick Guide to Teaching R Programming to Computational Biology Students</article-title></title-group><contrib-group>
<contrib contrib-type="author" xlink:type="simple"><name name-style="western"><surname>Eglen</surname><given-names>Stephen J.</given-names></name><xref ref-type="aff" rid="aff1"/><xref ref-type="corresp" rid="cor1"><sup>*</sup></xref></contrib>
</contrib-group><aff id="aff1">          <addr-line>Cambridge Computational Biology Institute, Department of Applied Mathematics and Theoretical Physics, University of Cambridge, Cambridge, United Kingdom</addr-line>       </aff><contrib-group>
<contrib contrib-type="editor" xlink:type="simple"><name name-style="western"><surname>Lewitter</surname><given-names>Fran</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/></contrib>
</contrib-group><aff id="edit1">Whitehead Institute, United States of America</aff><author-notes>
<corresp id="cor1">* E-mail: <email xlink:type="simple">S.J.Eglen@damtp.cam.ac.uk</email></corresp>
<fn fn-type="conflict"><p>The author has declared that no competing interests exist.</p></fn></author-notes><pub-date pub-type="collection"><month>8</month><year>2009</year></pub-date><pub-date pub-type="epub"><day>28</day><month>8</month><year>2009</year></pub-date><volume>5</volume><issue>8</issue><elocation-id>e1000482</elocation-id><!--===== Grouping copyright info into permissions =====--><permissions><copyright-year>2009</copyright-year><copyright-holder>Eglen</copyright-holder><license><license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p></license></permissions><funding-group><funding-statement>No specific grant was needed for the work in this paper; the paper summarises work performed as part of my regular teaching duties. The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement></funding-group><counts><page-count count="4"/></counts></article-meta>
</front>
<body><sec id="s1">
<title>Introduction: Why Use R in Computational Biology?</title>
<p>The name “R” refers to the computational environment initially created by Robert Gentleman and Robert Ihaka, similar in nature to the “S” statistical environment developed at Bell Laboratories (<ext-link ext-link-type="uri" xlink:href="http://www.r-project.org/about.html" xlink:type="simple">http://www.r-project.org/about.html</ext-link>) <xref ref-type="bibr" rid="pcbi.1000482-R1">[1]</xref>. It has since been developed and maintained by a strong team of core developers (R-core), who are renowned researchers in computational disciplines. R has gained wide acceptance as a reliable and powerful modern computational environment for statistical computing and visualisation, and is now used in many areas of scientific computation. R is free software, released under the GNU General Public License; this means anyone can see all its source code, and there are no restrictive, costly licensing arrangements. One of the main reasons that computational biologists use R is the Bioconductor project (<ext-link ext-link-type="uri" xlink:href="http://www.bioconductor.org" xlink:type="simple">http://www.bioconductor.org</ext-link>), which is a set of packages for R to analyse genomic data. These packages have, in many cases, been provided by researchers to complement descriptions of algorithms in journal articles. Many computational biologists regard R and Bioconductor as fundamental tools for their research. R is a modern, functional programming language that allows for rapid development of ideas, together with object-oriented features for rigorous software development. The rich set of inbuilt functions makes it ideal for high-volume analysis or statistical simulations, and the packaging system means that code provided by others can easily be shared. Finally, it generates high-quality graphical output so that all stages of a study, from modelling/analysis to publication, can be undertaken within R. For detailed discussion of the merits of R in computational biology, see <xref ref-type="bibr" rid="pcbi.1000482-Gentleman1">[2]</xref>.</p>
</sec><sec id="s2">
<title>How to Teach R to Students</title>
<p>This brief article is an introduction to teaching R, based on my experience in teaching computational biology graduate students. R is a powerful environment for teaching many aspects of computational biology, including functional genomics, computational neuroscience, dynamical systems, statistical genetics, and network biology. I provide resources and suggestions for teaching R and describe common difficulties faced by students when learning R.</p>
<sec id="s2a">
<title>Lecture material</title>
<p>Most students starting our master's programme have not previously seen R; at first, we assumed that students would self-learn R during the course. However, this proved to be unsatisfactory, as students often said that R was too difficult to learn on their own on top of their assigned coursework. In response to this problem, we created an intensive set of lectures and lab sessions covering both an introduction to programming in R and a refresher in statistics (the introductory statistics material is not covered here).</p>
<p>Given that students come from different backgrounds, some with experiences of programming in other languages and others without any prior programming experience, it is difficult to know at exactly which level to aim a lecture course. Our approach has been to provide lecture material containing concepts that may not immediately be understood by novice programmers, but will serve as a reference for them later in the year. Instead, the lectures contain advanced material that can challenge students who have programming experience. Our lecture notes are available in <xref ref-type="supplementary-material" rid="pcbi.1000482.s001">Text S1</xref>. The Bioconductor project also offers useful teaching material (<ext-link ext-link-type="uri" xlink:href="http://www.bioconductor.org/workshops" xlink:type="simple">http://www.bioconductor.org/workshops</ext-link>). A key aim when writing these lecture notes was to focus on teaching R as a general programming language, rather than to focus on issues specific to computational biology. Other lecture courses on our master's programme provide additional R material relevant to particular topics in computational biology.</p>
</sec><sec id="s2b">
<title>Assignments/lab sessions</title>
<p>The best way that the students learn a programming language is by actually using the language on problem sets. We therefore arrange lab sessions during which students work through introductory material on R. After becoming familiar with R, we then suggest they work on some problems in computational biology. Good sources for such problems include <xref ref-type="bibr" rid="pcbi.1000482-Deonier1">[3]</xref>, as well as the R guide to accompany <xref ref-type="bibr" rid="pcbi.1000482-Ellner1">[4]</xref>, described below. We also suggest that students read descriptions of various popular problems and then implement them in R. These include:</p>
<list list-type="bullet"><list-item>
<p>Sequence alignment. A basic algorithm is concisely described by <xref ref-type="bibr" rid="pcbi.1000482-Eddy1">[5]</xref>.</p>
</list-item><list-item>
<p>The discrete logistic equation <xref ref-type="bibr" rid="pcbi.1000482-May1">[6]</xref>. Students are asked to generate a bifurcation diagram showing how the steady state of the logistic equation varies as a key parameter varies.</p>
</list-item><list-item>
<p>Cellular automata. Conway's game of life <xref ref-type="bibr" rid="pcbi.1000482-Gardner1">[7]</xref> provides a nice example of studying cellular automata.</p>
</list-item></list>
<p>As well as learning about particular concepts useful in computational biology (e.g., difference equations, dynamic programming), these exercises test students' abilities in vector and matrix manipulation, looping, conditionals, file input/output, and plotting.</p>
</sec><sec id="s2c">
<title>Using R for generating graphs</title>
<p>R generates high-quality graphical output. It is worth providing simple examples for generating graphs that can be used as templates (as given in the lecture notes) for their work. Students often fail to realise the difference between vector and bitmap formats, and this is worth discussing in class to suggest they generate graphs using either PDF or Postscript devices, rather than bitmap formats. R currently has two systems for generating graphs: “base” and “grid”. The base system is much simpler and easier to use, and so we recommend students learn this system (and most introductory books and resources also use base graphics). However, students should be made aware of the grid package, which allows for much more flexibility over generating graphics. In particular, the lattice package <xref ref-type="bibr" rid="pcbi.1000482-Sarkar1">[8]</xref> uses the grid package to allow the user to quickly generate sophisticated and flexible graphics.</p>
</sec><sec id="s2d">
<title>Reproducible research</title>
<p>The idea of reproducible research is quite simple: to provide not only a brief description of, e.g., how some data has been analysed, but also to provide the code and data to allow someone else to recreate exactly the same sequence of steps <xref ref-type="bibr" rid="pcbi.1000482-Schwab1">[9]</xref>. R provides infrastructure for this in the form of Sweave documents. Sweave documents contain R code surrounded by documentation written in either LaTeX, HTML, or OpenOffice Writer. The document is processed to extract and run the R code; output (either textual or graphical) is then inserted back into the document which is then typeset. An example of this is shown in Supporting Information files <xref ref-type="supplementary-material" rid="pcbi.1000482.s002">Text S2</xref> and <xref ref-type="supplementary-material" rid="pcbi.1000482.s003">Text S3</xref> (estimating the value of <inline-formula><inline-graphic mimetype="image" xlink:href="info:doi/10.1371/journal.pcbi.1000482.e001" xlink:type="simple"/></inline-formula>). Students should be taught about the idea of reproducible research, and the idea should be reinforced by asking them to submit their coursework in the form of Sweave documents. Reproducible research also encourages students to run their code in batch mode (whereas most students initially prefer working interactively with R). As students need to know LaTeX to write Sweave documents, we also provide a separate lab session on LaTeX. Larger pieces of reproducible research are likely to be released in an R package (containing both data and code), but teaching students how to build packages is beyond the scope of our current course. Writing Sweave documents takes much longer than writing R scripts, but it leads to self-documenting work that is likely to be understandable by many researchers long after it has been written.</p>
</sec><sec id="s2e">
<title>Textbooks</title>
<p>The R website currently lists over 80 books, together with short descriptions that may help the reader decide which books to select (<ext-link ext-link-type="uri" xlink:href="http://www.r-project.org/doc/bib/R-books.html" xlink:type="simple">http://www.r-project.org/doc/bib/R-books.html</ext-link>). Here I give a short, non-exhaustive list of books that I recommend to students to complement lecture notes and to show applications of R in computational biology. Some of the books are quite advanced and are likely to be useful for students only after they have gained sufficient experience. I also take these books to lab sessions so that students can see which book would be most useful for them.</p>
<p>For a general introduction to R, <italic>Introductory Statistics with R</italic> <xref ref-type="bibr" rid="pcbi.1000482-Dalgaard1">[10]</xref> provides a nice balance of introducing R and showing its application to classical statistical testing; <italic>Introduction to Probability with R</italic> <xref ref-type="bibr" rid="pcbi.1000482-Baclawski1">[11]</xref> goes further into aspects of probability. <italic>A First Course in Statistical Programming with R</italic> <xref ref-type="bibr" rid="pcbi.1000482-Braun1">[12]</xref> introduces R as a programming language; those already familiar with programming may wish to consult <italic>S Programming</italic> <xref ref-type="bibr" rid="pcbi.1000482-Venables1">[13]</xref>. Finally, for students wishing to explore the graphing facilities of R, <italic>R Graphics</italic> <xref ref-type="bibr" rid="pcbi.1000482-Murrell1">[14]</xref> is recommended.</p>
<p>Several texts focus on aspects of computational biology. First, the introductory text on <italic>Computational Genome Analysis</italic> <xref ref-type="bibr" rid="pcbi.1000482-Deonier1">[3]</xref> provides worked examples in R throughout the book. <italic>Stochastic Modelling for Systems Biology</italic> <xref ref-type="bibr" rid="pcbi.1000482-Wilkinson1">[15]</xref> uses R to demonstrate modelling in systems biology. An advanced book for those already familiar with R is <italic>R Programming for Bioinformatics</italic> <xref ref-type="bibr" rid="pcbi.1000482-Gentleman2">[16]</xref>. Finally, a general text for biological modelling is <italic>Dynamical Models in Biology</italic> <xref ref-type="bibr" rid="pcbi.1000482-Ellner1">[4]</xref>. Although the book does not describe R, the online supplementary information provides a comprehensive introduction to R and shows how to use R to simulate the models discussed in the book, along with numerous exercises (<ext-link ext-link-type="uri" xlink:href="http://www.cam.cornell.edu/~dmb/DMBsupplements.html" xlink:type="simple">http://www.cam.cornell.edu/~dmb/DMBsupplements.html</ext-link>).</p>
</sec><sec id="s2f">
<title>Useful web sites</title>
<p>R has numerous online resources that students should be encouraged to explore. Here are some additional sites that we have found useful:</p>
<p><ext-link ext-link-type="uri" xlink:href="http://www.rseek.org" xlink:type="simple">http://www.rseek.org</ext-link>. Powered by Google, this site searches numerous online R resources, including documentation, source code, and books. It also searches the numerous email lists hosted by the R project; R-help in particular is a useful list for people to learn about R.</p>
<p><ext-link ext-link-type="uri" xlink:href="http://germain.its.maine.edu/~hiebeler/comp/matlabR.html" xlink:type="simple">http://germain.its.maine.edu/~hiebeler/comp/matlabR.html</ext-link>. A very useful guide for students who know Matlab; it provides a comprehensive list of Matlab functions and the corresponding functions in R.</p>
<p><ext-link ext-link-type="uri" xlink:href="http://addictedtor.free.fr/graphiques/" xlink:type="simple">http://addictedtor.free.fr/graphiques/</ext-link>. This site provides a gallery of advanced graphic examples, along with the R code used to generate those plots.</p>
</sec><sec id="s2g">
<title>Common problems encountered when learning R</title>
<p>Students with previous programming experience usually find learning R quite straightforward. It has a rich set of online documentation for each function, complete with examples, to help learn the language. However, there are some common problems that occur when learning R, described briefly below, along with suggestions for helping students.</p>
<sec id="s2g1">
<title>Syntax errors and getting started</title>
<p>The syntax of R can be difficult for students to acquire, and students often report that they spend many hours debugging simple problems. We encourage students to ask a colleague for help, as often these errors are simple, yet frustrating to spot. We use a wiki to allow students to post questions or exchange tips and example code. Furthermore, although R has a rich set of documentation for inbuilt functions, students often report that it is hard to discover these functions, as they do not know what to search for. With this in mind, our introductory lecture notes were written to describe most core R functions with which we would expect a student eventually to become familiar during the year. Of course, it is infeasible to provide a complete list, especially given the vast number of numerical routines that come with R, and for this we suggest using the Rseek internet search tool, described above. Lecturers should also give hints as to which functions might be of use for particular assignments.</p>
</sec><sec id="s2g2">
<title>Pre-allocation of variables</title>
<p>In R, variables do not need to be defined before use; they are simply created when required. A common problem with this is demonstrated in the following code:</p>
<p>npts &lt;− 100</p>
<p>x &lt;− runif(n = npts)</p>
<p>y &lt;− 0</p>
<p>for (i in 1:npts) {</p>
<p> if (x[i]&gt;0.5)</p>
<p>  y[i] &lt;− 1</p>
<p> else</p>
<p>  y[i] &lt;− 0</p>
<p>}</p>
<p>A vector x of 100 random values is generated from a uniform distribution; each element of the vector y should be “one” if the corresponding element of x is greater than 0.5, and “zero” otherwise. A key problem here is that on line 3, y has been initialised to be the value zero, which is a vector of length one. Within each cycle of the loop, the length of y needs to increase by one, and so R silently reallocates the vector y to be long enough to store the new result. The code works, but is inefficient, especially when looping over many values. A simple solution is to pre-allocate the vector when the length of the vector is known in advance. In this case, we can change line 3 to read:</p>
<p>y &lt;− rep(0, npts)</p>
</sec><sec id="s2g3">
<title>Vectorization</title>
<p>Many operations in R process entire vectors at once. For example, if x and y are vectors of the same length, then z = x+y will create a vector z, where for each element i, z[i] &lt;− x[i]+y[i]. This is called vectorization, and students familiar with other programming languages, such as C, often use slow and inefficient for loops to perform these calculations. It is worth reminding students at several stages while they are learning R that they should try to think about how to vectorize their code. Sometimes this requires them to learn new R functions, such as the apply family of commands. For example, if we wish to compute the mean of each column of a matrix mat, rather than writing an explicit loop over each column, we can do:</p>
<p>x &lt;− apply(mat, 2, mean)</p>
<p>The apply family of functions are powerful, but require careful explanation of how they work. In particular, it should be explained that R is a functional language and hence “everything is an object”, which is why functions, such as mean above, can be passed as arguments to other functions.</p>
<p>Continuing the example in the previous section, at first glance it may not seem suitable for vectorizing, given the if-then test operating on each element. However, R has the function ifelse, which simplifies the threshold example to:</p>
<p>npts &lt;− 100</p>
<p>x &lt;− runif(n = npts)</p>
<p>y &lt;− ifelse(x&gt;0.5, 1, 0)</p>
<p>In this case, as well as avoiding the for loop, the problem about allocating the size of the resulting vector y has gone. Vectorized solutions are often shorter, too, implying that there is less code to maintain.</p>
<p>Even when students are familiar with vectorization, a common question asked is how to recognise which code might benefit from vectorization. The answer, unfortunately, is that it requires accumulating experience at applying various tricks. Students can be helped by giving them examples, such as the one in the following paragraph, and asked to study it so that they understand exactly how it works. Warnings should be given, however, that even simple problems, such as computing the Fibonacci series, are impossible to vectorize. It is better to get the code working correctly and then worry about efficiency later: “…premature optimization is the root of all evil (or at least most of it) in programming… <xref ref-type="bibr" rid="pcbi.1000482-Knuth1">[17]</xref>” (on the other hand, even when a correct R program is optimised, it may still be too slow, in which case the compute-intensive parts can be rewritten in C and called from R).</p>
</sec><sec id="s2g4">
<title>Example vectorization problem</title>
<p>Given a vector of event times e, write a function to return the interval between successive events, e.g., interval[i] &lt;− e[i+1]−e[i]. Solution: Given that the vector e and the result are of different lengths, it may seem that vectorized solutions are not possible. However, by using the “minus indexing” notation (e[−j] returns a vector with everything except element j of e), we can easily vectorize the problem:</p>
<p>diff1 &lt;− function(e) {</p>
<p> ## Explicit loop</p>
<p> n &lt;− length(e)</p>
<p> interval &lt;− rep(0, n−1) ## pre-allocate result</p>
<p> for (i in 1:(n−1)) {</p>
<p>  interval[i] &lt;− e[i+1]−e[i]</p>
<p> }</p>
<p> interval</p>
<p>}</p>
<p>diff2 &lt;− function(e) {</p>
<p> ## Vectorized solution</p>
<p> n &lt;− length(e)</p>
<p> e[−1]−e[−n]</p>
<p> }</p>
<p>x &lt;− c(5.9, 10.2, 12.4, 18.8)</p>
<p>all.equal(diff1(x), diff2(x))</p>
</sec><sec id="s2g5">
<title>Data types</title>
<p>A common concern raised by students is that they are not sure when to use the different data types (e.g., list, data frame, matrix) to store their data or how to convert from one type to another. Part of the problem is caused by the flexibility in R for functions to transparently handle different data types. Again, such issues normally resolve themselves by continued exposure to R, but instructors can help by showing how the type of an object can be determined and how objects can be converted from one type to another. Relationships among data types should also be highlighted (e.g., a matrix being a particular kind of vector, and a data frame being a particular kind of list).</p>
</sec></sec></sec><sec id="s3">
<title>Closing Comments</title>
<p>In this article I have summarised our experience to date on teaching R. As the last section has shown, there are several difficulties with learning R, but I believe that they are fairly minor compared to the benefits in using such a powerful environment. Learning R is an ongoing process, and once students have mastered the basics, they should be encouraged to explore the wealth of contributed packages on the Comprehensive R Archive Network (CRAN) (<ext-link ext-link-type="uri" xlink:href="http://cran.r-project.org" xlink:type="simple">http://cran.r-project.org</ext-link>) and Bioconductor (<ext-link ext-link-type="uri" xlink:href="http://www.bioconductor.org" xlink:type="simple">http://www.bioconductor.org</ext-link>).</p>
</sec><sec id="s4">
<title>Supporting Information</title>
<supplementary-material id="pcbi.1000482.s001" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000482.s001" xlink:type="simple"><label>Text S1</label><caption>
<p>Lecture notes for programming in R.</p>
<p>(0.48 MB PDF)</p>
</caption></supplementary-material><supplementary-material id="pcbi.1000482.s002" mimetype="text/plain" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000482.s002" xlink:type="simple"><label>Text S2</label><caption>
<p>Example Sweave document demonstrating how R code and LaTeX code can be combined.</p>
<p>(0.00 MB TXT)</p>
</caption></supplementary-material><supplementary-material id="pcbi.1000482.s003" mimetype="application/pdf" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1000482.s003" xlink:type="simple"><label>Text S3</label><caption>
<p>PDF output from the example Sweave document.</p>
<p>(0.11 MB PDF)</p>
</caption></supplementary-material></sec></body>
<back>
<ack>
<p>Thanks to Jonathan Cairns, Thomas Gurry, Philip Maybank, Richard Parker, Tom Skelly, Simon Tavaré, and Quin Wills for feedback. Thanks also to the R core team of developers for their ongoing work in maintaining and developing R.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pcbi.1000482-R1"><label>1</label><element-citation publication-type="other" xlink:type="simple">             <collab xlink:type="simple">R Development Core Team</collab>             <year>2009</year>             <source>R: A Language and Environment for Statistical Computing</source>             <publisher-loc>Vienna, Austria</publisher-loc>             <publisher-name>R Foundation for Statistical Computing</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000482-Gentleman1"><label>2</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Gentleman</surname><given-names>RC</given-names></name>
<name name-style="western"><surname>Carey</surname><given-names>VJ</given-names></name>
<name name-style="western"><surname>Bates</surname><given-names>DM</given-names></name>
<name name-style="western"><surname>Bolstad</surname><given-names>B</given-names></name>
<name name-style="western"><surname>Dettling</surname><given-names>M</given-names></name>
<etal/></person-group>             <year>2004</year>             <article-title>Bioconductor: open software development for computational biology and bioinformatics.</article-title>             <source>Genome Biology</source>             <volume>5</volume>             <fpage>R80</fpage>          </element-citation></ref>
<ref id="pcbi.1000482-Deonier1"><label>3</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Deonier</surname><given-names>RC</given-names></name>
<name name-style="western"><surname>Tavaré</surname><given-names>S</given-names></name>
<name name-style="western"><surname>Waterman</surname><given-names>MS</given-names></name>
</person-group>             <year>2005</year>             <source>Computational Genome Analysis: An Introduction</source>             <publisher-loc>New York</publisher-loc>             <publisher-name>Springer</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000482-Ellner1"><label>4</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Ellner</surname><given-names>SP</given-names></name>
<name name-style="western"><surname>Guckenheimer</surname><given-names>J</given-names></name>
</person-group>             <year>2006</year>             <source>Dynamic Models in Biology</source>             <publisher-name>Princeton University Press</publisher-name>             <comment>URL <ext-link ext-link-type="uri" xlink:href="http://www.cam.cornell.edu/~dmb/DMBsupplements.html" xlink:type="simple">http://www.cam.cornell.edu/~dmb/DMBsupplements.html</ext-link></comment>          </element-citation></ref>
<ref id="pcbi.1000482-Eddy1"><label>5</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Eddy</surname><given-names>SR</given-names></name>
</person-group>             <year>2004</year>             <article-title>What is dynamic programming?</article-title>             <source>Nature Biotechnology</source>             <volume>22</volume>             <fpage>909</fpage>             <lpage>910</lpage>          </element-citation></ref>
<ref id="pcbi.1000482-May1"><label>6</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>May</surname><given-names>R</given-names></name>
</person-group>             <year>1976</year>             <article-title>Simple mathematical models with very complicated dynamics.</article-title>             <source>Nature</source>             <volume>261</volume>             <fpage>459</fpage>             <lpage>467</lpage>          </element-citation></ref>
<ref id="pcbi.1000482-Gardner1"><label>7</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Gardner</surname><given-names>M</given-names></name>
</person-group>             <year>1970</year>             <article-title>Mathematical games: The fantastic combinations of John Conway's new solitaire game ‘Life’.</article-title>             <source>Scientific American</source>             <volume>223</volume>             <fpage>120</fpage>             <lpage>123</lpage>          </element-citation></ref>
<ref id="pcbi.1000482-Sarkar1"><label>8</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Sarkar</surname><given-names>D</given-names></name>
</person-group>             <year>2008</year>             <source>Lattice: Multivariate Data Visualization with R</source>             <publisher-loc>New York</publisher-loc>             <publisher-name>Springer</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000482-Schwab1"><label>9</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Schwab</surname><given-names>M</given-names></name>
<name name-style="western"><surname>Karrenbach</surname><given-names>M</given-names></name>
<name name-style="western"><surname>Claerbout</surname><given-names>J</given-names></name>
</person-group>             <year>2000</year>             <article-title>Making scientific computations reproducible.</article-title>             <source>Computing in Science and Engineering</source>             <volume>2</volume>             <fpage>61</fpage>             <lpage>67</lpage>          </element-citation></ref>
<ref id="pcbi.1000482-Dalgaard1"><label>10</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Dalgaard</surname><given-names>P</given-names></name>
</person-group>             <year>2008</year>             <source>Introductory Statistics with R</source>             <publisher-loc>New York</publisher-loc>             <publisher-name>Springer, 2nd edition</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000482-Baclawski1"><label>11</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Baclawski</surname><given-names>K</given-names></name>
</person-group>             <year>2008</year>             <source>Introduction to Probability with R</source>             <publisher-loc>Boca Raton, FL</publisher-loc>             <publisher-name>Chapman &amp; Hall/CRC</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000482-Braun1"><label>12</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Braun</surname><given-names>WJ</given-names></name>
<name name-style="western"><surname>Murdoch</surname><given-names>DJ</given-names></name>
</person-group>             <year>2007</year>             <source>A First Course in Statistical Programming with R</source>             <publisher-loc>Cambridge</publisher-loc>             <publisher-name>Cambridge University Press</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000482-Venables1"><label>13</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Venables</surname><given-names>WN</given-names></name>
<name name-style="western"><surname>Ripley</surname><given-names>BD</given-names></name>
</person-group>             <year>2000</year>             <source>S Programming</source>             <publisher-loc>New York</publisher-loc>             <publisher-name>Springer</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000482-Murrell1"><label>14</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Murrell</surname><given-names>P</given-names></name>
</person-group>             <year>2005</year>             <source>R Graphics</source>             <publisher-loc>Boca Raton, FL</publisher-loc>             <publisher-name>Chapman &amp; Hall/CRC</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000482-Wilkinson1"><label>15</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Wilkinson</surname><given-names>DJ</given-names></name>
</person-group>             <year>2006</year>             <source>Stochastic Modelling for Systems Biology</source>             <publisher-loc>Boca Raton, FL</publisher-loc>             <publisher-name>Chapman &amp; Hall/CRC</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000482-Gentleman2"><label>16</label><element-citation publication-type="other" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Gentleman</surname><given-names>R</given-names></name>
</person-group>             <year>2008</year>             <source>R Programming for Bioinformatics</source>             <publisher-loc>Boca Raton, FL</publisher-loc>             <publisher-name>Chapman &amp; Hall/CRC</publisher-name>          </element-citation></ref>
<ref id="pcbi.1000482-Knuth1"><label>17</label><element-citation publication-type="journal" xlink:type="simple">             <person-group person-group-type="author">
<name name-style="western"><surname>Knuth</surname><given-names>DE</given-names></name>
</person-group>             <year>1974</year>             <article-title>Computer programming as an art.</article-title>             <source>Communications of the ACM</source>             <volume>17</volume>             <fpage>667</fpage>             <lpage>673</lpage>          </element-citation></ref>
</ref-list>

</back>
</article>