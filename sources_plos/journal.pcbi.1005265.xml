<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Publishing DTD v1.1d3 20150301//EN" "http://jats.nlm.nih.gov/publishing/1.1d3/JATS-journalpublishing1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="editorial" dtd-version="1.1d3" xml:lang="en">
<front>
<journal-meta>
<journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id>
<journal-id journal-id-type="publisher-id">plos</journal-id>
<journal-id journal-id-type="pmc">ploscomp</journal-id>
<journal-title-group>
<journal-title>PLOS Computational Biology</journal-title>
</journal-title-group>
<issn pub-type="ppub">1553-734X</issn>
<issn pub-type="epub">1553-7358</issn>
<publisher>
<publisher-name>Public Library of Science</publisher-name>
<publisher-loc>San Francisco, CA USA</publisher-loc>
</publisher>
</journal-meta>
<article-meta>
<article-id pub-id-type="publisher-id">PCOMPBIOL-D-16-01347</article-id>
<article-id pub-id-type="doi">10.1371/journal.pcbi.1005265</article-id>
<article-categories>
<subj-group subj-group-type="heading">
<subject>Editorial</subject>
</subj-group>
<subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software tools</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software tools</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software development</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software development</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Computer software</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software design</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Software engineering</subject><subj-group><subject>Software design</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Engineering and technology</subject><subj-group><subject>Technology development</subject><subj-group><subject>Prototypes</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Computer and information sciences</subject><subj-group><subject>Computer architecture</subject><subj-group><subject>User interfaces</subject></subj-group></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Computational biology</subject></subj-group></subj-group><subj-group subj-group-type="Discipline-v3"><subject>Biology and life sciences</subject><subj-group><subject>Molecular biology</subject></subj-group></subj-group></article-categories>
<title-group>
<article-title>Ten Simple Rules for Developing Usable Software in Computational Biology</article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author" corresp="yes" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-0941-4168</contrib-id>
<name name-style="western">
<surname>List</surname> <given-names>Markus</given-names></name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
<contrib contrib-type="author" corresp="yes" equal-contrib="yes" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0001-7441-532X</contrib-id>
<name name-style="western">
<surname>Ebert</surname> <given-names>Peter</given-names></name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
<xref ref-type="corresp" rid="cor001">*</xref>
</contrib>
<contrib contrib-type="author" xlink:type="simple">
<contrib-id authenticated="true" contrib-id-type="orcid">http://orcid.org/0000-0002-5737-8405</contrib-id>
<name name-style="western">
<surname>Albrecht</surname> <given-names>Felipe</given-names></name>
<xref ref-type="aff" rid="aff001"><sup>1</sup></xref>
<xref ref-type="aff" rid="aff002"><sup>2</sup></xref>
</contrib>
</contrib-group>
<aff id="aff001">
<label>1</label>
<addr-line>Computational Biology and Applied Algorithmics, Max Planck Institute for Informatics, Saarland Informatics Campus, Saarbrücken, Germany</addr-line>
</aff>
<aff id="aff002">
<label>2</label>
<addr-line>Graduate School of Computer Science, Saarland Informatics Campus, Saarbrücken, Germany</addr-line>
</aff>
<contrib-group>
<contrib contrib-type="editor" xlink:type="simple">
<name name-style="western">
<surname>Markel</surname> <given-names>Scott</given-names></name>
<role>Editor</role>
<xref ref-type="aff" rid="edit1"/>
</contrib>
</contrib-group>
<aff id="edit1">
<addr-line>Dassault Systemes BIOVIA, UNITED STATES</addr-line>
</aff>
<author-notes>
<fn fn-type="conflict" id="coi001">
<p>The authors have declared that no competing interests exist.</p>
</fn>
<corresp id="cor001">* E-mail: <email xlink:type="simple">markus.list@mpi-inf.mpg.de</email> (ML); <email xlink:type="simple">pebert@mpi-inf.mpg.de</email> (PE)</corresp>
</author-notes>
<pub-date pub-type="collection">
<month>1</month>
<year>2017</year>
</pub-date>
<pub-date pub-type="epub">
<day>5</day>
<month>1</month>
<year>2017</year>
</pub-date>
<volume>13</volume>
<issue>1</issue>
<elocation-id>e1005265</elocation-id>
<permissions>
<copyright-year>2017</copyright-year>
<copyright-holder>List et al</copyright-holder>
<license xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">
<license-p>This is an open access article distributed under the terms of the <ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/" xlink:type="simple">Creative Commons Attribution License</ext-link>, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
</license>
</permissions>
<self-uri content-type="pdf" xlink:href="info:doi/10.1371/journal.pcbi.1005265"/>
<funding-group>
<funding-statement>FA and PE acknowledge the support of the German Federal Ministry of Education and Research grant no. 01KU1216A (DEEP project). The funders had no role in study design, data collection and analysis, decision to publish, or preparation of the manuscript.</funding-statement>
</funding-group>
<counts>
<fig-count count="0"/>
<table-count count="0"/>
<page-count count="5"/>
</counts>
</article-meta>
</front>
<body>
<sec id="sec001" sec-type="intro">
<title>Introduction</title>
<p>The rise of high-throughput technologies in molecular biology has led to a massive amount of publicly available data. While computational method development has been a cornerstone of biomedical research for decades, the rapid technological progress in the wet lab makes it difficult for software development to keep pace. Wet lab scientists rely heavily on computational methods, especially since more research is now performed in silico. However, suitable tools do not always exist, and not everyone has the skills to write complex software. Computational biologists are required to close this gap, but they often lack formal training in software engineering. To alleviate this, several related challenges have been previously addressed in the Ten Simple Rules series, including reproducibility [<xref ref-type="bibr" rid="pcbi.1005265.ref001">1</xref>], effectiveness [<xref ref-type="bibr" rid="pcbi.1005265.ref002">2</xref>], and open-source development of software [<xref ref-type="bibr" rid="pcbi.1005265.ref003">3</xref>, <xref ref-type="bibr" rid="pcbi.1005265.ref004">4</xref>].</p>
<p>Here, we want to shed light on issues concerning software usability. Usability is commonly defined as “a measure of interface quality that refers to the effectiveness, efficiency, and satisfaction with which users can perform tasks with a tool” [<xref ref-type="bibr" rid="pcbi.1005265.ref005">5</xref>]. Considering the subjective nature of this topic, a broad consensus may be hard to achieve. Nevertheless, good usability is imperative for achieving wide acceptance of a software tool in the community. In many cases, academic software starts out as a prototype that solves one specific task and is not geared for a larger user group. As soon as the developer realizes that the complexity of the problems solved by the software could make it widely applicable, the software will grow to meet the new demands. At least by this point, if not sooner, usability should become a priority. Unfortunately, efforts in scientific software development are constrained by limited funding, time, and rapid turnover of group members. As a result, scientific software is often poorly documented, non-intuitive, non-robust with regards to input data and parameters, and hard to install. For many use cases, there is a plethora of tools that appear very similar and make it difficult for the user to select the one that best fits their needs. Not surprisingly, a substantial fraction of these tools are probably abandonware; i.e., these are no longer actively developed or supported in spite of their potential value to the scientific community.</p>
<p>To our knowledge, software development as part of scientific research is usually carried out by individuals or small teams with no more than two or three members. Hence, the responsibility of designing, implementing, testing, and documenting the code rests on few shoulders. Additionally, there is pressure to produce publishable results or, at least, to contribute analysis work to ongoing projects. Consequently, academic software is typically released as a prototype. We acknowledge that such a tool cannot adhere to and should not be judged by the standards that we take for granted for production grade software. However, widespread use of a tool is typically in the interest of a researcher. To this end, we propose ten simple rules that, in our experience, have a considerable impact on improving usability of scientific software.</p>
</sec>
<sec id="sec002">
<title>Rule 1: Identify the Missing Pieces</title>
<p>Unless you are a pioneer, and few of us are, the problem you are working on is likely addressed by existing tools. As a professional, you are aware of this software but may consider it cumbersome, non-functional, or otherwise unacceptable for your demands. Make sure that your judgment is shared by a substantial fraction of the prospective users before you start developing a new tool. Usable software should offer the features needed and behave as expected by the community. Moreover, a new tool needs to provide substantial novelty over existing solutions. For this purpose, list the requirements on the software and create a comparison table to set the new tool against existing solutions. This allows you to carve out the selling points of your tool in a systematic fashion.</p>
</sec>
<sec id="sec003">
<title>Rule 2: Collect Feedback from Prospective Users</title>
<p>Software can be regarded as providing the interface between wet lab science and data analysis. A lack of communication between both sides will lead to misunderstandings that need to be rectified by substantially changing the code base in a late phase of the project. Avoid this pitfall by exposing potential users to a prototype. Discussions on data formats or on the design of the user interface will reveal unforeseen challenges and help to determine if a tool is sufficiently intuitive [<xref ref-type="bibr" rid="pcbi.1005265.ref006">6</xref>]. To plan your progress, keep a record of suggested improvements and existing issues.</p>
</sec>
<sec id="sec004">
<title>Rule 3: Be Ready for Data Growth</title>
<p>First estimate the expected data growth in your field and then design your software accordingly. To this end, consider parallelization and make sure your tool can be integrated seamlessly in workflow management systems (e.g., GALAXY [<xref ref-type="bibr" rid="pcbi.1005265.ref007">7</xref>] and Taverna [<xref ref-type="bibr" rid="pcbi.1005265.ref008">8</xref>]), pipeline frameworks (e.g., Ruffus [<xref ref-type="bibr" rid="pcbi.1005265.ref009">9</xref>] and SnakeMake [<xref ref-type="bibr" rid="pcbi.1005265.ref010">10</xref>]), or a cluster framework (e.g., Hadoop, <ext-link ext-link-type="uri" xlink:href="http://hadoop.apache.org/" xlink:type="simple">http://hadoop.apache.org/</ext-link>). Moreover, make sure that the user interface can scale to growing data volumes. For example, consider that the visualizations should still be comprehensible for larger datasets, e.g., by displaying only parts of the data or through aggregation of results.</p>
</sec>
<sec id="sec005">
<title>Rule 4: Use Standard Data Formats for Input and Output</title>
<p>As an expert in your research domain, you know the established data standards and related programming libraries for reading and writing commonly used data formats. Make sure that your tool’s output follows standard specifications to the letter, but be as lenient as possible when users provide non-standard input. Tools that follow this rule are more likely to become successful. If you are working in an emerging field with no prevalent model for data exchange, provide data in a structured text file (e.g., tab-separated tables, XML/XSD, or JSON) and aim for self-documenting output by including header lines and data type descriptions. In this case, document how users can derive suitable input data for your tool.</p>
</sec>
<sec id="sec006">
<title>Rule 5: Expose Only Mandatory Parameters</title>
<p>Exposing all (possible) parameters to a user can be confusing and carries the risk of nonsensical parameters settings. When possible, users will thus rely on default parameters. The same applies to benchmark studies comparing your tool against the state-of-the-art competitors. This has three important implications: (i) expose only a small set of parameters by default whose effects on results can be easily understood by any user, (ii) offer advanced parameters only in an expert section and describe them thoroughly in the documentation, and (iii) choose conservatively (and if possible, justify) the default values for parameters such that the tool can operate in a wide range of scenarios and within reasonable run time.</p>
</sec>
<sec id="sec007">
<title>Rule 6: Expect Users to Make Mistakes</title>
<p>You should never assume that your tool is self-explanatory, that requirements concerning the input data are obvious, or that the user will immediately grasp all details of the problem at hand. Ideally, your tool supports the user in using it appropriately, e.g., by checking that data remain inside required ranges or that identifiers are unique, and provides descriptive error messages in case of unexpected values. If performance penalties due to such checks are a real concern (which should be tested), make the checks optional and enabled by default. Finally, allow users to stop ongoing operations in case they realize they made a mistake.</p>
</sec>
<sec id="sec008">
<title>Rule 7: Provide Logging Information</title>
<p>Two types of logs improve usability and also support the user in making their research more reproducible. Configuration logs keep track of basic information, such as the time stamp of the analysis, the version of your tool and of third-party libraries, as well as the parameter settings and input data. Archiving this information is particularly important in long-running research projects in order to trace irregularities in the results at any later point in time [<xref ref-type="bibr" rid="pcbi.1005265.ref001">1</xref>]. Technical logs, on the other hand, contain progress messages that help users to pinpoint errors in the execution flow and allow clear communication of these issues to the developer. As much as possible, avoid exposing potentially sensitive user information in the logs.</p>
</sec>
<sec id="sec009">
<title>Rule 8: Get Users Started Quickly</title>
<p>Complex setup routines introduce dependency [<xref ref-type="bibr" rid="pcbi.1005265.ref011">11</xref>] or configuration debt [<xref ref-type="bibr" rid="pcbi.1005265.ref012">12</xref>]; i.e., the user has to spend substantial time installing software and learning about the execution parameters of a tool. These raise the bar for unhindered exploration of software features. Such issues can be solved by implementing a web application (if feasible with respect to resource demands), by providing a standalone executable, or by providing a system-specific software package. Alternatively, issues of a program’s dependence on third-party libraries can be avoided by encapsulating your tool in a virtual machine image or, e.g., a Docker container (<ext-link ext-link-type="uri" xlink:href="https://docker.com" xlink:type="simple">https://docker.com</ext-link>). Finally, it is imperative to provide demo data that enable users to immediately interact with the software. A successful test run proves to the user that your software works as expected and will be essential if you want your tool to be published.</p>
</sec>
<sec id="sec010">
<title>Rule 9: Offer Tutorial Material</title>
<p>Researchers can seldom afford the time to thoroughly read complex user manuals. They will thus appreciate a number of clearly written code examples, illustrations, or video screen casts to get started. Most importantly, documented use cases enable users to quickly assess if your tool is suited for the problem at hand and allow fast learning by doing. Keep in mind that these materials have to be updated together with your tool.</p>
</sec>
<sec id="sec011">
<title>Rule 10: Consider the Future of Your Tool</title>
<p>For long-term availability of your software, use suitable repositories such as github (<ext-link ext-link-type="uri" xlink:href="https://github.com" xlink:type="simple">https://github.com</ext-link>) or bitbucket (<ext-link ext-link-type="uri" xlink:href="https://bitbucket.com" xlink:type="simple">https://bitbucket.com</ext-link>) throughout the development process. Explicitly state under which software license you release your code for third parties (see <ext-link ext-link-type="uri" xlink:href="https://opensource.org/licenses" xlink:type="simple">https://opensource.org/licenses</ext-link>). Without such a license, using your software might be prohibitive for many organizations or companies. More importantly, keeping your code in a public repository will also allow you to engage with the users through issue tracking (e.g., bugs, suggestions). After releasing your tool, expect support requests and take them seriously. See them as an opportunity to continuously improve the usability of your tool.</p>
</sec>
<sec id="sec012" sec-type="conclusions">
<title>Conclusions</title>
<p>Usability is an important topic in software design, and we would like to provide a few starting points for further reading [<xref ref-type="bibr" rid="pcbi.1005265.ref013">13</xref>–<xref ref-type="bibr" rid="pcbi.1005265.ref018">18</xref>]. In the above ten simple rules, we highlight that software should not only be scientifically sound but also be perceived as usable for widespread and effective application. To these ends, developers should also be the first to apply their tool, to reveal usability issues as early as possible. However, effort is required from both users and developers to further improve a tool. Even engaging with only a few users (<xref ref-type="sec" rid="sec003">Rule 2</xref>) is likely to have a large impact on usability, since, as Jakob Nielsen put it, “Zero users give zero insights” [<xref ref-type="bibr" rid="pcbi.1005265.ref019">19</xref>].</p>
</sec>
</body>
<back>
<ack>
<p>We would like to thank Thomas Lengauer, Nico Pfeifer, and Fabian Müller for their critical reading of the manuscript and insightful comments.</p>
</ack>
<ref-list>
<title>References</title>
<ref id="pcbi.1005265.ref001">
<label>1</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Sandve</surname> <given-names>GK</given-names></name>, <name name-style="western"><surname>Nekrutenko</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Taylor</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Hovig</surname> <given-names>E</given-names></name>. <article-title>Ten simple rules for reproducible computational research</article-title>. <source>PLoS Comp Biol</source>. <year>2013</year>;. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1003285" xlink:type="simple">10.1371/journal.pcbi.1003285</ext-link></comment> <object-id pub-id-type="pmid">24204232</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005265.ref002">
<label>2</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Osborne</surname> <given-names>JM</given-names></name>, <name name-style="western"><surname>Bernabeu</surname> <given-names>MO</given-names></name>, <name name-style="western"><surname>Bruna</surname> <given-names>M</given-names></name>, <name name-style="western"><surname>Calderhead</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Cooper</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Dalchau</surname> <given-names>N</given-names></name>, <etal>et al</etal>. <article-title>Ten simple rules for effective computational research</article-title>. <source>PLoS Comput Biol</source>. <year>2014</year>;<volume>10</volume>(<issue>3</issue>):<fpage>e1003506</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1003506" xlink:type="simple">10.1371/journal.pcbi.1003506</ext-link></comment> <object-id pub-id-type="pmid">24675742</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005265.ref003">
<label>3</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Prlić</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Procter</surname> <given-names>JB</given-names></name>. <article-title>Ten simple rules for the open development of scientific software</article-title>. <source>PLoS Comput Biol</source>. <year>2012</year>;<volume>8</volume>(<issue>12</issue>):<fpage>e1002802</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1002802" xlink:type="simple">10.1371/journal.pcbi.1002802</ext-link></comment> <object-id pub-id-type="pmid">23236269</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005265.ref004">
<label>4</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Perez-Riverol</surname> <given-names>Y</given-names></name>, <name name-style="western"><surname>Gatto</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Wang</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Sachsenberg</surname> <given-names>T</given-names></name>, <name name-style="western"><surname>Uszkoreit</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Leprevost</surname> <given-names>FdV</given-names></name>, <etal>et al</etal>. <article-title>Ten Simple Rules for Taking Advantage of Git and GitHub</article-title>. <source>PLOS Computational Biology</source>. <year>2016</year> <month>jul</month>;<volume>12</volume>(<issue>7</issue>):<fpage>e1004947</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.1004947" xlink:type="simple">10.1371/journal.pcbi.1004947</ext-link></comment> <object-id pub-id-type="pmid">27415786</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005265.ref005">
<label>5</label>
<mixed-citation publication-type="book" xlink:type="simple">
<name name-style="western"><surname>Dillon</surname> <given-names>A</given-names></name>. <source>Encyclopedia of Human Factors and Ergonomic</source>. Ed. <publisher-loc>London</publisher-loc>: <publisher-name>Taylor and Francis, ch. User Acceptance of Information Technology</publisher-name>; <year>2001</year>.</mixed-citation>
</ref>
<ref id="pcbi.1005265.ref006">
<label>6</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Thielsch</surname> <given-names>MT</given-names></name>, <name name-style="western"><surname>Engel</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Hirschfeld</surname> <given-names>G</given-names></name>. <article-title>Expected usability is not a valid indicator of experienced usability</article-title>. <source>PeerJ Computer Science</source>. <year>2015</year>;<volume>1</volume>:<fpage>e19</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.7717/peerj-cs.19" xlink:type="simple">10.7717/peerj-cs.19</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005265.ref007">
<label>7</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Giardine</surname> <given-names>B</given-names></name>, <name name-style="western"><surname>Riemer</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Hardison</surname> <given-names>RC</given-names></name>, <name name-style="western"><surname>Burhans</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Elnitski</surname> <given-names>L</given-names></name>, <name name-style="western"><surname>Shah</surname> <given-names>P</given-names></name>, <etal>et al</etal>. <article-title>Galaxy: a platform for interactive large-scale genome analysis</article-title>. <source>Genome research</source>. <year>2005</year>;<volume>15</volume>(<issue>10</issue>):<fpage>1451</fpage>–<lpage>1455</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1101/gr.4086505" xlink:type="simple">10.1101/gr.4086505</ext-link></comment> <object-id pub-id-type="pmid">16169926</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005265.ref008">
<label>8</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Wolstencroft</surname> <given-names>K</given-names></name>, <name name-style="western"><surname>Haines</surname> <given-names>R</given-names></name>, <name name-style="western"><surname>Fellows</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Williams</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Withers</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Owen</surname> <given-names>S</given-names></name>, <etal>et al</etal>. <article-title>The Taverna workflow suite: designing and executing workflows of Web Services on the desktop, web or in the cloud</article-title>. <source>Nucleic acids research</source>. <year>2013</year>;p. gkt328. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1093/nar/gkt328" xlink:type="simple">10.1093/nar/gkt328</ext-link></comment> <object-id pub-id-type="pmid">23640334</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005265.ref009">
<label>9</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Goodstadt</surname> <given-names>L</given-names></name>. <article-title>Ruffus: a lightweight Python library for computational pipelines</article-title>. <source>Bioinformatics</source>. <year>2010</year>;<volume>26</volume>(<issue>21</issue>):<fpage>2778</fpage>–<lpage>2779</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1093/bioinformatics/btq524" xlink:type="simple">10.1093/bioinformatics/btq524</ext-link></comment> <object-id pub-id-type="pmid">20847218</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005265.ref010">
<label>10</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Köster</surname> <given-names>J</given-names></name>, <name name-style="western"><surname>Rahmann</surname> <given-names>S</given-names></name>. <article-title>Snakemake—a scalable bioinformatics workflow engine</article-title>. <source>Bioinformatics</source>. <year>2012</year>;<volume>28</volume>(<issue>19</issue>):<fpage>2520</fpage>–<lpage>2522</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1093/bioinformatics/bts480" xlink:type="simple">10.1093/bioinformatics/bts480</ext-link></comment> <object-id pub-id-type="pmid">22908215</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005265.ref011">
<label>11</label>
<mixed-citation publication-type="other" xlink:type="simple">Morgenthaler JD, Gridnev M, Sauciuc R, Bhansali S. Searching for build debt: Experiences managing technical debt at Google. In: Proceedings of the Third International Workshop on Managing Technical Debt. IEEE Press; 2012. p. 1–6.</mixed-citation>
</ref>
<ref id="pcbi.1005265.ref012">
<label>12</label>
<mixed-citation publication-type="other" xlink:type="simple">Sculley D, Holt G, Golovin D, Davydov E, Phillips T, Ebner D, et al. Machine Learning: The High Interest Credit Card of Technical Debt. In: SE4ML: Software Engineering for Machine Learning (NIPS 2014 Workshop); 2014.</mixed-citation>
</ref>
<ref id="pcbi.1005265.ref013">
<label>13</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Nichols</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Twidale</surname> <given-names>M</given-names></name>. <article-title>The Usability of Open Source Software</article-title>. <source>First Monday</source>. <year>2003</year>;<volume>8</volume>(<issue>1</issue>). Available from: <ext-link ext-link-type="uri" xlink:href="http://firstmonday.org/ojs/index.php/fm/article/view/1018" xlink:type="simple">http://firstmonday.org/ojs/index.php/fm/article/view/1018</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1005265.ref014">
<label>14</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Seffah</surname> <given-names>A</given-names></name>, <name name-style="western"><surname>Metzker</surname> <given-names>E</given-names></name>. <article-title>The obstacles and myths of usability and software engineering</article-title>. <source>Communications of the ACM</source>. <year>2004</year>;<volume>47</volume>(<issue>12</issue>):<fpage>71</fpage>–<lpage>76</lpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1145/1035134.1035136" xlink:type="simple">10.1145/1035134.1035136</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005265.ref015">
<label>15</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Macaulay</surname> <given-names>C</given-names></name>, <name name-style="western"><surname>Sloan</surname> <given-names>D</given-names></name>, <name name-style="western"><surname>Jiang</surname> <given-names>X</given-names></name>, <name name-style="western"><surname>Forbes</surname> <given-names>P</given-names></name>, <name name-style="western"><surname>Loynton</surname> <given-names>S</given-names></name>, <name name-style="western"><surname>Swedlow</surname> <given-names>JR</given-names></name>, <etal>et al</etal>. <article-title>Usability and User-Centered Design in Scientific Software Development</article-title>. <source>IEEE Software</source>. <year>2009</year> <month>Jan</month>;<volume>26</volume>(<issue>1</issue>):<fpage>96</fpage>–<lpage>102</lpage>. Copyright—Copyright IEEE Computer Society Jan/Feb 2009; Document feature—; Last updated—2012-07-19; CODEN—IESOEG. Available from: <ext-link ext-link-type="uri" xlink:href="http://search.proquest.com/docview/215838611?accountid=104681" xlink:type="simple">http://search.proquest.com/docview/215838611?accountid=104681</ext-link>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1109/MS.2009.27" xlink:type="simple">10.1109/MS.2009.27</ext-link></comment></mixed-citation>
</ref>
<ref id="pcbi.1005265.ref016">
<label>16</label>
<mixed-citation publication-type="other" xlink:type="simple">Sloan D, Macaulay C, Forbes P, Loynton S. User research in a scientific software development project. In: Proceedings of the 23rd British HCI Group Annual Conference on People and Computers: Celebrating People and Technology. British Computer Society; 2009. p. 423–429.</mixed-citation>
</ref>
<ref id="pcbi.1005265.ref017">
<label>17</label>
<mixed-citation publication-type="journal" xlink:type="simple">
<name name-style="western"><surname>Baxter</surname> <given-names>SM</given-names></name>, <name name-style="western"><surname>Day</surname> <given-names>SW</given-names></name>, <name name-style="western"><surname>Fetrow</surname> <given-names>JS</given-names></name>, <name name-style="western"><surname>Reisinger</surname> <given-names>SJ</given-names></name>. <article-title>Scientific software development is not an oxymoron</article-title>. <source>PLoS Comput Biol</source>. <year>2006</year>;<volume>2</volume>(<issue>9</issue>):<fpage>e87</fpage>. <comment>doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1371/journal.pcbi.0020087" xlink:type="simple">10.1371/journal.pcbi.0020087</ext-link></comment> <object-id pub-id-type="pmid">16965174</object-id></mixed-citation>
</ref>
<ref id="pcbi.1005265.ref018">
<label>18</label>
<mixed-citation publication-type="other" xlink:type="simple">Borchardt JC. Usability in free software;. Last access: 2016-09-30. Available from: <ext-link ext-link-type="uri" xlink:href="http://jancborchardt.net/usability-in-free-software" xlink:type="simple">http://jancborchardt.net/usability-in-free-software</ext-link>.</mixed-citation>
</ref>
<ref id="pcbi.1005265.ref019">
<label>19</label>
<mixed-citation publication-type="other" xlink:type="simple">Nielsen J. Why you only need to test with 5 users;. Last access: 2016-09-30. Available from: <ext-link ext-link-type="uri" xlink:href="https://www.nngroup.com/articles/why-you-only-need-to-test-with-5-users/" xlink:type="simple">https://www.nngroup.com/articles/why-you-only-need-to-test-with-5-users/</ext-link>.</mixed-citation>
</ref>
</ref-list>
</back>
</article>