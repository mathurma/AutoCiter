<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//NLM//DTD Journal Publishing DTD v3.0 20080202//EN" "http://dtd.nlm.nih.gov/publishing/3.0/journalpublishing3.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" article-type="research-article" dtd-version="3.0" xml:lang="en">
  <front>
    <journal-meta><journal-id journal-id-type="publisher-id">plos</journal-id><journal-id journal-id-type="nlm-ta">PLoS Comput Biol</journal-id><journal-id journal-id-type="pmc">ploscomp</journal-id><issn pub-type="ppub">1553-734X</issn><issn pub-type="epub">1553-7358</issn><publisher>
        <publisher-name>Public Library of Science</publisher-name>
        <publisher-loc>San Francisco, USA</publisher-loc>
      </publisher></journal-meta>
    <article-meta><article-id pub-id-type="publisher-id">PCOMPBIOL-D-12-00054</article-id><article-id pub-id-type="doi">10.1371/journal.pcbi.1002598</article-id><article-categories>
        <subj-group subj-group-type="heading">
          <subject>Education</subject>
        </subj-group>
        <subj-group subj-group-type="Discipline-v2">
          <subject>Biology</subject>
          <subj-group>
            <subject>Computational biology</subject>
          </subj-group>
        </subj-group>
        <subj-group subj-group-type="Discipline-v2">
          <subject>Computer science</subject>
          <subj-group>
            <subject>Software engineering</subject>
            <subj-group>
              <subject>Software design</subject>
              <subject>Software tools</subject>
            </subj-group>
          </subj-group>
        </subj-group>
        <subj-group subj-group-type="Discipline-v2">
          <subject>Engineering</subject>
          <subj-group>
            <subject>Software engineering</subject>
            <subj-group>
              <subject>Software design</subject>
              <subject>Software tools</subject>
            </subj-group>
          </subj-group>
        </subj-group>
        <subj-group subj-group-type="Discipline-v2">
          <subject>Science policy</subject>
          <subj-group>
            <subject>Science education</subject>
          </subj-group>
          <subj-group>
            <subject>Technology development</subject>
            <subj-group>
              <subject>Intellectual property</subject>
            </subj-group>
          </subj-group>
        </subj-group>
        <subj-group subj-group-type="Discipline">
          <subject>Computational Biology</subject>
          <subject>Computer Science</subject>
          <subject>Science Policy</subject>
        </subj-group>
      </article-categories><title-group><article-title>A Quick Guide to Software Licensing for the Scientist-Programmer</article-title></title-group><contrib-group>
        <contrib contrib-type="author" xlink:type="simple">
          <name name-style="western">
            <surname>Morin</surname>
            <given-names>Andrew</given-names>
          </name>
          <xref ref-type="aff" rid="aff1">
            <sup>1</sup>
          </xref>
        </contrib>
        <contrib contrib-type="author" xlink:type="simple">
          <name name-style="western">
            <surname>Urban</surname>
            <given-names>Jennifer</given-names>
          </name>
          <xref ref-type="aff" rid="aff2">
            <sup>2</sup>
          </xref>
        </contrib>
        <contrib contrib-type="author" xlink:type="simple">
          <name name-style="western">
            <surname>Sliz</surname>
            <given-names>Piotr</given-names>
          </name>
          <xref ref-type="aff" rid="aff1">
            <sup>1</sup>
          </xref>
          <xref ref-type="corresp" rid="cor1">
            <sup>*</sup>
          </xref>
        </contrib>
      </contrib-group><aff id="aff1"><label>1</label><addr-line>Department of Biological Chemistry and Molecular Pharmacology, Harvard Medical School, Boston, Massachusetts, United States of America</addr-line> </aff><aff id="aff2"><label>2</label><addr-line>Samuelson Law, Technology &amp; Public Policy Clinic, School of Law, University of California Berkeley, Berkeley, California, United States of America</addr-line> </aff><contrib-group>
        <contrib contrib-type="editor" xlink:type="simple">
          <name name-style="western">
            <surname>Lewitter</surname>
            <given-names>Fran</given-names>
          </name>
          <role>Editor</role>
          <xref ref-type="aff" rid="edit1"/>
        </contrib>
      </contrib-group><aff id="edit1">Whitehead Institute, United States of America</aff><author-notes>
        <corresp id="cor1">* E-mail: <email xlink:type="simple">piotr_sliz@hms.harvard.edu</email></corresp>
        <fn fn-type="conflict">
          <p>The authors have declared that no competing interests exist.</p>
        </fn>
      </author-notes><pub-date pub-type="collection">
        <month>7</month>
        <year>2012</year>
      </pub-date><pub-date pub-type="epub">
        <day>26</day>
        <month>7</month>
        <year>2012</year>
      </pub-date><volume>8</volume><issue>7</issue><elocation-id>e1002598</elocation-id><permissions>
        
        <copyright-holder>Morin et al</copyright-holder>
        <license xlink:type="simple">
          <license-p>This is an open-access article distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use, distribution, and reproduction in any medium, provided the original author and source are credited.</license-p>
        </license>
      </permissions><funding-group>
        <funding-statement>The work was supported by the National Science Foundation grant 0639193 (PS). The funders had no role in the preparation of the manuscript.</funding-statement>
      </funding-group><counts>
        <page-count count="7"/>
      </counts></article-meta>
  </front>
  <body>
    <sec id="s1">
      <title/>
      <p>Computing is ubiquitous in every domain of scientific research. Software is the means by which scientists harness the power of computers, and much scientific computing relies on software conceived and developed by other practicing researchers. The task of creating scientific software, however, does not end with the publication of computed results. Making the developed software available for inspection and use by other scientists is essential to reproducibility, peer-review, and the ability to build upon others' work <xref ref-type="bibr" rid="pcbi.1002598-Peng1">[1]</xref>, <xref ref-type="bibr" rid="pcbi.1002598-Stodden1">[2]</xref>. In fulfilling expectations to distribute and disseminate their software, scientist-programmers are required to be not only proficient scientists and coders, but also knowledgeable in legal strategies for licensing their software. Navigating the often complex legal landscape of software licensing can be overwhelming, even for sophisticated programmers. Institutional technology transfer offices (TTOs) exist to help address this need, but due to mismatches in expectations or specific domain knowledge, interactions between scientists and TTO staff can result in suboptimal outcomes.</p>
      <p>As practitioners in the scientific computing and technology law fields, we have witnessed firsthand the confusion and difficulties associated with licensing scientifically generated software. SBGrid.org is a consortium of scientific software developers and users in hundreds of biomedical research laboratories worldwide. As facilitator and middleman between developers and end-users, we commonly assist in the dissemination and use of scientifically generated software. Through research and advocacy, the Samuelson Law, Technology and Public Policy Clinic works with software developers and other creators on licensing issues, particularly issues related to facilitating “open access” to scientific, technical, or creative materials. Together, we offer a primer on software licensing with a focus on the particular needs of the scientist software developer. The aim of this guide is to help scientists better engage with their institutional TTO when choosing software licenses.</p>
    </sec>
    <sec id="s2">
      <title>Why Software Licenses Are Important</title>
      <p>Licenses are important tools for setting specific terms on which software may be used, modified, or distributed. Based on the copyright protection automatically granted to all original works, a software license—essentially, a set of formal permissions from the copyright holder—may include specific “conditions” of use, and are an important part of the legally binding contract between program author (or rights owner) and end-user.</p>
      <p>Without a license agreement, software may be left in a state of legal uncertainty in which potential users may not know which limitations owners may want to enforce, and owners may leave themselves vulnerable to legal claims or have difficulty controlling how their work is used. This is equally true for software that is commercialized and offered for a fee, and software that is made available without cost to others. While end-users often balk at overly restrictive software licenses, the uncertainty caused when no license is given can also discourage those wishing to make use of a piece of code. It is important to note that licenses can be used to facilitate access to software as well as restrict it.</p>
    </sec>
    <sec id="s3">
      <title>Software Licensing in Academic and Research Environments</title>
      <p>For a license to be valid it must be granted by the owner of the work's intellectual property (IP) rights. Under the policies of most academic and research institutions, researchers who have created a piece of software are unlikely to own full rights to their works. Instead, the institution generally holds or shares legal right to developed software. Institutions' policies on IP ownership vary, but in most cases your institution will be the legal “rights owner,” and will be the entity that actually grants the license you choose for your software. Although many types of licenses, especially of the “free and open source” variety, are simple enough for the non-legal expert to understand and apply (<xref ref-type="fig" rid="pcbi-1002598-g001">Figure 1</xref>), it is generally necessary to consult your institutions' TTO before imposing a license. See below for more information about working with your institution in applying a license.</p>
      <fig id="pcbi-1002598-g001" orientation="portrait" position="float">
        <object-id pub-id-type="doi">10.1371/journal.pcbi.1002598.g001</object-id>
        <label>Figure 1</label>
        <caption>
          <title>Example of FOSS license with “academic” style copyright statement.</title>
          <p>The example shown is the entirety of a 2-Clause BSD <xref ref-type="bibr" rid="pcbi.1002598-The1">[8]</xref> license with copyright statement (at top, within quotes). The text of the license is in black. Red highlighted text is where the copyright holder applying the license inserts their specific information. Application of this and many FOSS licenses simply require that the text of the license be included (usually as “License.txt”) in the directory containing the distributed program binary and or source code.</p>
        </caption>
        <graphic mimetype="image" orientation="portrait" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1002598.g001" xlink:type="simple"/>
      </fig>
    </sec>
    <sec id="s4">
      <title>Types of Software Licenses</title>
      <p>Colloquially speaking, the spectrum of software licensing strategies can be divided into three categories: “proprietary,” “free and open source,” or a hybrid of the two.</p>
      <sec id="s4a">
        <title>Proprietary Licensing</title>
        <p>This strategy is familiar from the “click-thru” agreements that govern commercial software packages. The primary purpose of a proprietary software license is to limit the use of software according to the rights owner's business strategy. As a result, proprietary licenses are often very restrictive for end-users. They typically allow use of the software only for its stated purpose, often only on a single computer, forbid users from copying, redistributing, or altering the work, and specifically prohibit the creation of derivatives using parts of the work. Importantly, programs under proprietary licenses are typically distributed only in binary form and forbid examination of the program code or reverse engineering of any part of the program. In academic settings, proprietary software may occasionally release source code “for inspection purposes only” due to scientific publishing and peer-review requirements (<xref ref-type="table" rid="pcbi-1002598-t001">Table 1</xref>).</p>
        <table-wrap id="pcbi-1002598-t001" orientation="portrait" position="float"><object-id pub-id-type="doi">10.1371/journal.pcbi.1002598.t001</object-id><label>Table 1</label><caption>
            <title>Summary of select attributes of cited licenses types.</title>
          </caption><alternatives>
            <graphic id="pcbi-1002598-t001-1" mimetype="image" orientation="portrait" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1002598.t001" xlink:type="simple"/>
            <table>
              <colgroup span="1">
                <col align="left" span="1"/>
                <col align="center" span="1"/>
                <col align="center" span="1"/>
                <col align="center" span="1"/>
                <col align="center" span="1"/>
                <col align="center" span="1"/>
                <col align="center" span="1"/>
              </colgroup>
              <thead>
                <tr>
                  <td align="left" colspan="1" rowspan="1"/>
                  <td align="left" colspan="1" rowspan="1">Name</td>
                  <td align="left" colspan="1" rowspan="1">Latest Version</td>
                  <td align="left" colspan="1" rowspan="1">Copyleft</td>
                  <td align="left" colspan="1" rowspan="1">Patent Grant<xref ref-type="table-fn" rid="nt102">a</xref></td>
                  <td align="left" colspan="1" rowspan="1">Permits<xref ref-type="table-fn" rid="nt103">b</xref> Code Linking</td>
                  <td align="left" colspan="1" rowspan="1">Used by<xref ref-type="table-fn" rid="nt104">c</xref></td>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left" colspan="1" rowspan="1">
                    <bold>FOSS</bold>
                  </td>
                  <td align="left" colspan="1" rowspan="1">BSDMITECLApacheMPLLGPLGPL</td>
                  <td align="left" colspan="1" rowspan="1">2-Clause1.02.02.02.03.03.0</td>
                  <td align="left" colspan="1" rowspan="1">NoNoNoNoPartialWeakStrong</td>
                  <td align="left" colspan="1" rowspan="1">NoNoYesYesYesYesYes</td>
                  <td align="left" colspan="1" rowspan="1">YesYesYesYesYesYesNo</td>
                  <td align="left" colspan="1" rowspan="1">Gabedit, Chemkit, SciPyWeblogo, APBSRCrane, Sakai ProjectImagemagick, Autodock Vina, GenMAPPFirefox, ThunderbirdClustalW/X, IMP, BioJava, Taverna WorkbenchR Project, Perl, Coot, OpenBabel, GROMACS</td>
                </tr>
                <tr>
                  <td align="left" colspan="1" rowspan="1">
                    <bold>Proprietary</bold>
                  </td>
                  <td align="left" colspan="2" rowspan="1">Traditional “bespoke”<xref ref-type="table-fn" rid="nt105">d</xref>“Inspection only”<xref ref-type="table-fn" rid="nt106">e</xref>Commercial</td>
                  <td align="left" colspan="1" rowspan="1">NoNoNo</td>
                  <td align="left" colspan="1" rowspan="1">VariesVariesNo</td>
                  <td align="left" colspan="1" rowspan="1">VariesVariesNo</td>
                  <td align="left" colspan="1" rowspan="1"><italic>Majority of scientist-created software</italic><italic>Satisfies minimum publishing &amp; peer-review requirement</italic>MS Windows, iTunes, Acrobat</td>
                </tr>
                <tr>
                  <td align="left" colspan="1" rowspan="1">
                    <bold>Hybrid</bold>
                  </td>
                  <td align="left" colspan="2" rowspan="1">Any combination</td>
                  <td align="left" colspan="1" rowspan="1">Varies</td>
                  <td align="left" colspan="1" rowspan="1">Varies</td>
                  <td align="left" colspan="1" rowspan="1">Varies</td>
                  <td align="left" colspan="1" rowspan="1">Pymol, MySQL, BDB, Phenix</td>
                </tr>
              </tbody>
            </table>
          </alternatives><table-wrap-foot>
            <fn id="nt101">
              <p>Note that the values assigned in the table are only a general summary of each license attribute and may not fully reflect the specific details of each license.</p>
            </fn>
            <fn id="nt102">
              <label>a</label>
              <p>License text explicitly describes the treatment of patents related to the software.</p>
            </fn>
            <fn id="nt103">
              <label>b</label>
              <p>Allows the linking of computer code under different licenses.</p>
            </fn>
            <fn id="nt104">
              <label>c</label>
              <p>Select examples of popular software employing these licenses.</p>
            </fn>
            <fn id="nt105">
              <label>d</label>
              <p>Refers to a range of custom-tailored licenses traditionally used by academic and research institutions.</p>
            </fn>
            <fn id="nt106">
              <label>e</label>
              <p>Traditional “bespoke” license that also makes source code available for inspection purposes only.</p>
            </fn>
          </table-wrap-foot></table-wrap>
      </sec>
      <sec id="s4b">
        <title>Free and Open Source Software (FOSS) Licensing</title>
        <p>Free and open source software (FOSS) represents a fundamentally different approach to software licensing. The primary intent of FOSS is to maximize openness and minimize barriers to software use, dissemination, and follow-on innovation. There are a wide variety of popular FOSS licenses <xref ref-type="bibr" rid="pcbi.1002598-Open1">[3]</xref>, each of which vary in some important ways, but all grant free (as in freedom), open, and non-discriminatory access and rights to modify licensed software and associated source code. A common misconception is that FOSS is synonymous with “noncommercial.” In fact, as described by the two most influential definitions of FOSS <xref ref-type="bibr" rid="pcbi.1002598-Open1">[3]</xref>, <xref ref-type="bibr" rid="pcbi.1002598-Free1">[4]</xref>, “non-discriminatory” means that no category of user or distributor can be prohibited, including for-profit commercial entities. As such, FOSS-licensed software can be, and regularly is, commercially exploited. Some cited benefits of a FOSS strategy include widespread adoption, user contributions, and ease of collaboration <xref ref-type="bibr" rid="pcbi.1002598-Scacchi1">[5]</xref>. Additionally, because of their open and non-discriminatory nature, FOSS licenses can simplify continued development and collaboration when researchers switch institutions, and when they collaborate across institutions. FOSS can also help to extend the useful lifetime of a piece of software beyond the direct involvement of the creators. We discuss some important differences in FOSS licenses below.</p>
      </sec>
      <sec id="s4c">
        <title>Hybrid Software Licensing</title>
        <p>Some software developers find that their needs are not well met by using either proprietary or FOSS licensing models exclusively. In these cases, “hybrid” (also called dual- or multi-licensing) approaches—combining a FOSS license with a proprietary “closed” license—are sometimes used. Under this strategy, the rights owner chooses which license to apply on a case-by-case basis. When ownership and licensing rights are clear, these licensing schemes can maintain some of the benefits of FOSS while also permitting creators to employ multiple business models <xref ref-type="bibr" rid="pcbi.1002598-Hecker1">[6]</xref>. The downside can be a significant added burden for the rights owner in applying, administering, and enforcing multiple licenses. This has generally limited the adoption of hybrid license models to large software development initiatives.</p>
      </sec>
    </sec>
    <sec id="s5">
      <title>Terms, Concepts, and Examples Useful in Understanding Software Licenses</title>
      <sec id="s5a">
        <title>Open Source versus Closed Source</title>
        <p>Source code is the human readable form of a computer programming language. “Open source” refers to licenses that require the source code be available to users, and that users be able to reuse, modify, and distribute the code <xref ref-type="bibr" rid="pcbi.1002598-Open1">[3]</xref>. Without access to source code, researchers cannot effectively inspect, understand, or manipulate the inner workings of a program. Source code availability is of increased importance in the context of scientific research, where peer review, reproducibility, and building upon prior work are integral to the advancement of science. Source code access helps researchers quickly identify and remedy bugs that might lead to spurious results and adapt programs or pieces of code to suit individual needs, and allows expert users to contribute to code development on an informal basis. An active open source user community participating in maintaining and improving the code base can free the original developer to concentrate on major enhancements or move on to other projects without sacrificing continued utility of the software.</p>
      </sec>
      <sec id="s5b">
        <title>Permissive versus Copyleft</title>
        <p>“Permissive” and “copyleft” are terms used to compare legal philosophies and attributes of FOSS licenses to traditional proprietary licenses.</p>
        <p><italic>Permissive</italic> licenses are those that place the fewest restrictions on users and adopters, often only requiring that the original creators be attributed in any distribution or derivative of the software or source code. For example, permissively licensed software may be incorporated into “closed” proprietary programs with no requirement that the source code be disclosed if the combined software is distributed. Permissive open source licenses are also sometimes called “research” or “academic” style licenses because of their origins in, and frequent use by, academic institutions <xref ref-type="bibr" rid="pcbi.1002598-Bretthauer1">[7]</xref>.</p>
        <p>Examples of popular permissive FOSS licenses include the Berkeley Software Distribution (BSD) <xref ref-type="bibr" rid="pcbi.1002598-The1">[8]</xref>, MIT <xref ref-type="bibr" rid="pcbi.1002598-The2">[9]</xref>, Apache <xref ref-type="bibr" rid="pcbi.1002598-Apache1">[10]</xref>, and Educational Community License (ECL) <xref ref-type="bibr" rid="pcbi.1002598-Educational1">[11]</xref> licenses. The BSD and MIT licenses are often mentioned interchangeably due to very similar language and terms that accomplish largely identical goals. The primary intent of these licenses is to allow the use, distribution, and modification of your code for any purpose, while making sure that you as the creator receive credit for your work (see <xref ref-type="fig" rid="pcbi-1002598-g001">Figure 1</xref> for an example of an FOSS license with an academic style attribution/citation copyright statement). The Apache and ECL licenses are similar in effect to the BSD/MIT, but include a license for patents related to the software (this can be desirable or not, depending on the situation—see below). The ECL differs from Apache in a slightly weakened patent grant to accommodate the often complex IP environments of academic institutions.</p>
        <p>For developers who want to guarantee perpetual open source access to their work, some licenses employ the concept of <italic>copyleft</italic>, a punning reference to “copyright.” Copyleft uses copyright's legal framework to guarantee continued open access to a software and its source code. This is done by requiring, as a condition of the license, that any derivative works also be distributed under the same licensing terms as the original. These copyleft licensing terms are also sometimes referred to as reciprocity or “share-alike” provisions. Because of these reciprocity requirements, copyleft licenses are considered “restrictive” licenses, though these restrictions guarantee perpetual open access.</p>
        <p>Examples of popular copyleft FOSS licenses include the GNU General Public License (GPL) <xref ref-type="bibr" rid="pcbi.1002598-Free2">[12]</xref>, GNU Lesser General Public License (LGPL) <xref ref-type="bibr" rid="pcbi.1002598-Free3">[13]</xref>, and the Mozilla Public License (MPL) <xref ref-type="bibr" rid="pcbi.1002598-Mozilla1">[14]</xref>. The GNU Licenses are the most well known of all the FOSS licenses and have a strong community of supporters and advocates. Of these, the GPL has the strongest reciprocity requirements and is considered a “strong” copyleft license. The LGPL (the “Lesser GPL,” denoting its weaker copyleft requirements) is very similar to the GPL from which it is derived, but allows for linking to proprietary code under certain circumstances. Similarly, the MPL allows copyleft to be applied to some parts of the code and not others. The LGPL and MPL are considered a compromise between the strong copyleft of GPL and permissive licenses such as the BSD/MIT.</p>
      </sec>
      <sec id="s5c">
        <title>Compatibility, Proliferation, Fragmentation, and Directionality</title>
        <p>A fundamental goal of FOSS is to promote the free exchange of ideas and technology without fear of infringing the rights of others. Ideally, code licensed under like-minded FOSS terms should be freely combinable to create new products. <italic>Compatibility</italic> is the attribute of software licenses that allows combining of program code. To be compatible, license terms must be free of contradictory or mutually exclusive requirements. Alas, some FOSS licenses contain terms “incompatible” with other FOSS licenses, thereby diluting the ability to easily combine code.</p>
        <p>This unfortunate situation has been exacerbated by the <italic>proliferation</italic> of incompatible FOSS licenses, many of which differ in only trivial ways. The Open Source Initiative (OSI) <xref ref-type="bibr" rid="pcbi.1002598-Open2">[15]</xref> was created in part to reduce the <italic>fragmentation</italic> of the FOSS license space cause by incompatible and redundant licenses. OSI thus strongly encourages using an existing FOSS license instead of creating a new, “bespoke” license, and offers a categorization of licenses to help developers avoid redundancy <xref ref-type="bibr" rid="pcbi.1002598-Open3">[16]</xref>.</p>
        <p>In general, the more restrictive the license, the less compatible it is with other licenses. Proprietary licensed software, by design, cannot be incorporated into other codebases absent a separately negotiated licensing agreement.</p>
        <p>License compatibility is further complicated, however, in that it is <italic>directional</italic>. License <italic>directionality</italic> refers to how a license behaves differently with code feeding into it (upstream, or backward-compatible) or out of it (downstream, or forward-compatible) (<xref ref-type="fig" rid="pcbi-1002598-g002">Figure 2</xref>). For example, a permissive license like the BSD is forward-compatible with nearly any other kind of license, but backward-compatible only with other permissive licenses. Likewise, a copyleft license like the GPL can incorporate (upstream) both permissive and other GPL'd code, but the resulting software may only be licensed (downstream) under the GPL.</p>
        <fig id="pcbi-1002598-g002" orientation="portrait" position="float">
          <object-id pub-id-type="doi">10.1371/journal.pcbi.1002598.g002</object-id>
          <label>Figure 2</label>
          <caption>
            <title>Schematic representation of license directionality.</title>
            <p>In general, permissively licensed code is forward compatible with any other license type. However, only permissive licenses, such as the BSD and MIT, can feed into other permissive licenses. Restrictive licenses like the GPL are backward compatible with themselves and permissive licenses, but must adopt the restrictive license from then on. Proprietary licenses can incorporate upstream permissively licensed code, but by definition are incompatible with any other downstream license. Grey represents actions that are not permitted without negotiating a separate license agreement with the rights owner.</p>
          </caption>
          <graphic mimetype="image" orientation="portrait" position="float" xlink:href="info:doi/10.1371/journal.pcbi.1002598.g002" xlink:type="simple"/>
        </fig>
        <p>Directionality is an important reason why, if you're trying to integrate code written by others with your own, you'll want to be aware of what license the code you are incorporating carries. When attempting to combine code from multiple projects each under different license types, issues of compatibility can become very complex.</p>
      </sec>
      <sec id="s5d">
        <title>“Form” versus “Bespoke” Licenses</title>
        <p>FOSS license are generally <italic>form</italic> licenses, meaning that their terms are standardized and a developer need only apply them (<xref ref-type="fig" rid="pcbi-1002598-g001">Figure 1</xref>). This standardization is critical to the success of FOSS strategies because it maximizes license compatibility and minimizes the cost of administering and understanding the terms of a given license. Conversely, <italic>bespoke</italic> licenses are custom-tailored for each individual project. Tailored licenses allow for greater control, but require more resources to develop and administer and are highly likely to be incompatible with other licensing schemes. Nearly all proprietary licenses are bespoke.</p>
      </sec>
      <sec id="s5e">
        <title>Hybrid and Multi-Licensed Software</title>
        <p>These license schemes differ from single licensing in allowing rights owners to choose which licenses best serve their needs on a case-by-case basis. One form of multi-licensing permits users and contributors to select among multiple licenses offered by the rights owner. Another example is when owners enter into separate “side” agreements not to enforce certain provisions of FOSS licenses, often for a fee. Limiting the reach of FOSS licenses in this manner is controversial within the open source community due to the partial circumvention of share-alike principles.</p>
        <p>MySQL <xref ref-type="bibr" rid="pcbi.1002598-MySQL1">[17]</xref> and Oracle Berkeley DB <xref ref-type="bibr" rid="pcbi.1002598-Oracle1">[18]</xref> (BDB) are two well-known examples of multi-licensed software and are both made freely available for use, distribution, and modification under open source licenses. However, each of these programs is additionally offered for a fee under alternative licenses more amenable to proprietary business strategies.</p>
      </sec>
    </sec>
    <sec id="s6">
      <title>FOSS Licenses and Commercialization</title>
      <p>It is a common misconception that FOSS licensing strategies preclude commercialization. In fact, OSI-approved <xref ref-type="bibr" rid="pcbi.1002598-Open1">[3]</xref> FOSS licenses cannot discriminate against commercial use. (This is one reason why institutional TTOs have sometimes preferred a bespoke “non-profit-use-only” license.) Though FOSS licenses preclude charging for the license rights themselves, developers are free to charge a fee for additional services such as technical support, priority feature development, consultation, etc. Hybrid licensing schemes (see above) offer further avenues for FOSS commercialization.</p>
    </sec>
    <sec id="s7">
      <title>Choosing a Software License</title>
      <p>Determining which license will work best for you can require some thought, and depends not only on specific attributes of your software, but also on your particular goals. While both FOSS and proprietary licenses generally require attribution and include standard protections such as disclaimers of warranty, they differ in key aspects both philosophical and practical.</p>
      <p>
        <italic>If you want…</italic>
      </p>
      <p>…<italic>the widest possible distribution and adoption, fewest restrictions on users, open and transparent source code, peer review, community contributions to the codebase, and easy incorporation of your code by others…</italic> then a <bold>permissive FOSS license</bold> such as the BSD/MIT, Apache, or ECL licenses may work well. Because of the few requirements on users, these licenses are amongst the easiest to apply and administer, and promote unfettered incorporation of your code into other software—including copyleft or commercial software. Despite their general permissiveness, they do assure continued author attribution in any and all redistributions or derivative works.</p>
      <p>…<italic>to assure the benefits and openness of FOSS in all future derivatives of your work, open and transparent source code, peer review, community contributions to the codebase, and the potential incorporation of your code into other copyleft-licensed works…</italic> then you should consider a <bold>copyleft FOSS license</bold> like the GPL, LGPL, or MPL. These licenses, by requiring anyone who distributes the unmodified or modified code to do so under the same license, guarantee perpetual open source of your work. Some copyleft licenses, such as the GPL, have particularly strong developer communities, encouraging community contributions to your software. The copyleft requirements of these licenses can sometimes, however, dissuade others from adopting or incorporating your code.</p>
      <p>…<italic>the ability to separately pursue proprietary models while leveraging the wide distribution, adoption, community contributions, and other benefits of open source software…</italic> then a <bold>hybrid or multi-license scheme</bold> may be appropriate. Hybrid or multi-licensing can achieve the benefits of both open source and proprietary software licenses. However, as in everything, there is no free lunch. The legal, administrative, and organizational complexity of managing multiple licenses, as well as other administrative costs, often limits multi-license schemes to large software projects whose anticipated revenue stream justify the cost of dedicated licensing personnel. As noted above, this strategy is sometimes also controversial within FOSS developer communities.</p>
      <p>…<italic>protect the confidentiality of your source code, reserve maximum control over the distribution and use of your software, and derive licensing revenue…</italic> then you should consider a <bold>proprietary license</bold>. Institutional TTOs sometimes default towards applying proprietary licenses due to staff's greater familiarity with them and a desire to preserve what is perceived (sometimes inaccurately) as the maximum potential for commercial exploitation. Institutions receiving public funds will typically license proprietary software to other academic or non-profit users at no charge but require a fee for licensing to for-profit and industry users.</p>
    </sec>
    <sec id="s8">
      <title>Applying a License to Your Software</title>
      <p>Once you have chosen a license strategy for your software, the usual first step in applying it is to contact your institutional TTO. Although many FOSS licenses are easy to apply even by the non-legal-expert, as researchers and academics it is unlikely you personally own all of the rights to your work. Instead, these rights typically belong to, or are at least shared with, your institution. Therefore it is usually necessary to work with your institution when applying a license.</p>
      <p>TTOs exist to help you make and execute these types of decisions. Nonetheless, coming with a clear idea of what kinds of licenses are available, which one you want, and why, will likely be both appreciated by your TTO staff and result in a more favorable outcome for you.</p>
      <p>Once you've contacted your TTO, the process generally begins by helping the staff understand the “who, what, why, where, and how” of your work: how it works, who would be interested in it, what the innovation is, why you made it, where the funding came from, and other similar facts. Once TTO staff have this general understanding, they will discuss with you possible IP schemes—everything from placing the work in the public domain to creating a company to commercialize it. Most of the time, some form of license arrangement will be preferred. Be prepared, however. Some institutions' philosophies on protecting and exploiting IP are more aggressive than others. You may need to explain, for example, why using a FOSS license does not preclude commercialization (see above), why you think commercialization is not the most appropriate goal for your work, or why broad dissemination is an important goal for you. If you wish to propose a license that limits or forgoes the potential for generating revenue, you may first have to convince your TTO staff that your work lacks commercial value. While the process can sometimes be a bit of a negotiation, most institutions care a great deal about the scientific and societal impact of their IP, and we find that it is rare for an institution to act contrary to the express wishes of the creator of a work. Knowing what you want and why you want it should go far in making the licensing process as painless as possible.</p>
    </sec>
    <sec id="s9">
      <title>The Complication of Software Patents</title>
      <p>An additional reason to contact your TTO before applying a license is software patents. Modern TTOs arose following the Bayh-Dole Act of 1980, which allows US research institutions to patent inventions developed using public funds and to license those patents <xref ref-type="bibr" rid="pcbi.1002598-US1">[19]</xref>, <xref ref-type="bibr" rid="pcbi.1002598-Sampat1">[20]</xref>. Because the vast majority of academic and research inventions are unlikely to have significant commercial value, most are never patented, but institutions typically require the disclosure of any patentable invention to the TTO. Many FOSS licenses (like the BSD or MIT licenses) are agnostic regarding patents, while some explicitly include patent grants in the license text (like the Apache or GPL licenses) (<xref ref-type="table" rid="pcbi-1002598-t001">Table 1</xref>). Software patents are highly complex and generally outside the scope of this guide, but be aware that your TTO will want to discuss patent strategy, as well as copyright.</p>
    </sec>
    <sec id="s10">
      <title>Software Licensing and the Open Culture of Science</title>
      <p>The needs and obligations of academic and publically funded research create unique considerations for scientist-programmers choosing a software license. Unlike in the software industry, where licensing strategy is primarily a matter of business strategy, it can be highly beneficial for scientists to publish, disseminate, and share the fruits of their work as widely as possible, independent of commercial potential. In addition, academic ethics encourage the wide sharing of research materials and information, including code. For programmers, this generally means sharing not just the binary executable, but also the source code so that others may use, validate, reproduce, and extend the work.</p>
      <p>FOSS licenses such as those listed above are consistent with the open culture and obligations of scientific research, as well as the attribution and citation benefits academics have come to rely on. Permissive licenses may be preferred due to their ease of application and universal downstream compatibility. Copyleft licenses may be useful in accommodating upstream encumbered code or preferred by researchers seeking to assure perpetual open access, but their reciprocity requirements can limit downstream options. Hybrid licensing schemes, due to their added complexity, are more limited in their utility, but if appropriate, can offer many of the benefits of both proprietary and open source models.</p>
      <p>Due to their closed and restrictive nature, proprietary software licensing schemes should probably be avoided whenever possible. As with other restrictive license models, the administrative burden of managing compliance and collecting revenues can be significant. For this reason, if anticipated total revenues are not high, it can often be more beneficial for scientists to take advantage of the reputational benefits and increased influence that come with the wide adoption and dissemination open licensing models encourage.</p>
      <p>More broadly, especially in the context of scientific openness, collaboration, and peer review, the lack of available source code is a substantial drawback. In contrast to open source code, closed-source programs are essentially “black boxes” in the research workflow <xref ref-type="bibr" rid="pcbi.1002598-Morin1">[21]</xref>, opaque to both reviewers and users. The failure to release source code can be detrimental to the validation and acceptance of scientific results derived using the software. Although some traditional “bespoke” academic licenses attempt to mitigate the negative effects of proprietary licensing by offering software “free for non-profit use” or by publishing source code “for inspection only”, this nullifies the many significant benefits of community contribution, collaboration, and increased adoption that come with open source licensing.</p>
      <boxed-text id="pcbi-1002598-box001" orientation="portrait" position="float">
        <sec id="s11a">
          <title>Editorial Comment</title>
          <sec id="s11a1">
            <title>Andreas Prlić, Hilmar Lapp, Software Editors <italic>PLoS Computational Biology</italic></title>
            <p>Scientists are “dwarfs, standing on the shoulders of giants” (<ext-link ext-link-type="uri" xlink:href="http://en.wikipedia.org/wiki/Bernard_of_Chartres" xlink:type="simple">Bernard of Chartres</ext-link>). That is, in their pursuit to acquire new knowledge, they are building on the work of others. For this to be possible, already established scientific information must be widely accessible and reusable. This need for access to information is in conflict with a desire, the one to protect the value of intellectual innovation.</p>
            <p>Copyright laws have been created with the goal of protecting the rights of copyright holders for a certain amount of time. In fact, in our software-dependent information age, few laws are influencing our professional (and personal) pursuits more than these. For example, at the time of writing this article, the two software giants Oracle and Google are facing each other in court over the question of whether Google's use of the Java programming language's application programming interface (API) infringed on Oracle's copyright. The outcome of the trial could have an impact on the freedom of software developers to use APIs and thus potentially hinder software interoperability.</p>
            <p>Clearly, when developing software, choosing the terms under which the software can be reused, distributed, and built upon is an important consideration. Yet, many scientists and scientific developers have little training in or knowledge of the consequences of the choices they can make. Depending on how licenses are used they can either protect individuals' ability to capitalize on their creative works or ensure the public's ability to reuse. Licenses differ where in this spectrum they are positioned. This article, the “Quick Guide to Software Licensing for the Scientist-Programmer,” provides a summary of a variety of licenses and discusses their benefits and disadvantages. We hope that this guide helps in illuminating the seemingly complex jungle of licensing choices and their consequences, and that it serves as counsel to scientists and developers for what license is best suited in a particular situation.</p>
            <p><italic>PLoS Computational Biology</italic> supports open and unrestricted access to scientific publication and software. To foster a culture of open exchange and reuse of software, we have recently created a new category of <ext-link ext-link-type="uri" xlink:href="http://www.ploscompbiol.org/static/guidelines.action#software" xlink:type="simple">Software Articles.</ext-link> For a manuscript to be published under this category in <italic>PLoS Computational Biology</italic>, we require that all software uses a license that is approved as open source by the Open Source Initiative (OSI). The approval criteria (<ext-link ext-link-type="uri" xlink:href="http://www.opensource.org/docs/osd" xlink:type="simple">http://www.opensource.org/docs/osd</ext-link>) set forth by OSI emphasize that the distribution terms must allow the software to be freely re-used, re-distributed, or modified. These requirements ensure transparency and reproducibility and, if applied to scientific software, push science forward by allowing researchers to build on existing work.</p>
          </sec>
        </sec>
      </boxed-text>
    </sec>
  </body>
  <back>
    <ref-list>
      <title>References</title>
      <ref id="pcbi.1002598-Peng1">
        <label>1</label>
        <mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Peng</surname><given-names>RD</given-names></name> (<year>2011</year>) <article-title>Reproducible research in computational science</article-title>. <source>Science</source> <volume>334</volume>: <fpage>1226</fpage>–<lpage>1227</lpage> doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1126/science.1213847" xlink:type="simple">10.1126/science.1213847</ext-link>.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Stodden1">
        <label>2</label>
        <mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Stodden</surname><given-names>V</given-names></name> (<year>2009</year>) <article-title>The legal framework for reproducible scientific research: licensing and copyright</article-title>. <source>Comput Sci Eng</source> <volume>11</volume>: <fpage>35</fpage>–<lpage>40</lpage> doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1109/MCSE.2009.19" xlink:type="simple">10.1109/MCSE.2009.19</ext-link>.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Open1">
        <label>3</label>
        <mixed-citation publication-type="other" xlink:type="simple">Open Source Initiative (n.d.) Open Source Initiative. Available: <ext-link ext-link-type="uri" xlink:href="http://www.opensource.org/" xlink:type="simple">http://www.opensource.org/</ext-link>. Accessed 10 November 2011.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Free1">
        <label>4</label>
        <mixed-citation publication-type="other" xlink:type="simple">Free Software Foundation (n.d.) Free Software Foundation website. Available: <ext-link ext-link-type="uri" xlink:href="http://www.fsf.org/" xlink:type="simple">http://www.fsf.org/</ext-link>. Accessed 5 January 2012.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Scacchi1">
        <label>5</label>
        <mixed-citation publication-type="other" xlink:type="simple">Scacchi W (2007) Free/open source software development: recent research results and emerging opportunities. Proceedings of the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering; 3–7 September 2007; Dubrovnik, Croatia. New York: ACM Press. pp 459–468 doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1145/1287624.1287689" xlink:type="simple">10.1145/1287624.1287689</ext-link>.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Hecker1">
        <label>6</label>
        <mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Hecker</surname><given-names>F</given-names></name> (<year>1999</year>) <article-title>Setting up shop: the business of open-source software</article-title>. <source>IEEE Softw</source> <volume>16</volume>: <fpage>45</fpage>–<lpage>51</lpage> doi: <ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1109/52.744568" xlink:type="simple">10.1109/52.744568</ext-link>.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Bretthauer1">
        <label>7</label>
        <mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Bretthauer</surname><given-names>D</given-names></name> (<year>2001</year>) <article-title>Open source software: a history. UConn Libraries Published Works</article-title>. <source>Paper</source> <volume>7</volume>: <fpage>1</fpage>–<lpage>22</lpage> Available: <ext-link ext-link-type="uri" xlink:href="http://digitalcommons.uconn.edu/libr_pubs/7" xlink:type="simple">http://digitalcommons.uconn.edu/libr_pubs/7</ext-link>. Accessed 22 June 2012.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-The1">
        <label>8</label>
        <mixed-citation publication-type="other" xlink:type="simple">The BSD License (n.d.) The BSD license. Available: <ext-link ext-link-type="uri" xlink:href="http://www.opensource.org/licenses/bsd-license.php" xlink:type="simple">http://www.opensource.org/licenses/bsd-license.php</ext-link>. Accessed 12 December 2011.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-The2">
        <label>9</label>
        <mixed-citation publication-type="other" xlink:type="simple">The MIT License (n.d.) The MIT license. Available: <ext-link ext-link-type="uri" xlink:href="http://www.opensource.org/licenses/MIT" xlink:type="simple">http://www.opensource.org/licenses/MIT</ext-link>. Accessed 12 December 2011.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Apache1">
        <label>10</label>
        <mixed-citation publication-type="other" xlink:type="simple">Apache License, version 2.0 (n.d.) Apache license, version 2.0. Available: <ext-link ext-link-type="uri" xlink:href="http://opensource.org/licenses/apache2.0" xlink:type="simple">http://opensource.org/licenses/apache2.0</ext-link>. Accessed 12 December 2011.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Educational1">
        <label>11</label>
        <mixed-citation publication-type="other" xlink:type="simple">Educational Community License, version 2.0 (ECL-2.0) (n.d.) Educational Community License, version 2.0 (ECL-2.0). Available: <ext-link ext-link-type="uri" xlink:href="http://opensource.org/licenses/ECL-2.0" xlink:type="simple">http://opensource.org/licenses/ECL-2.0</ext-link>. Accessed 12 December 2011.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Free2">
        <label>12</label>
        <mixed-citation publication-type="other" xlink:type="simple">Free Software Foundation (FSF) (n.d.) The GNU general public license (GPL) v3.0. Available: <ext-link ext-link-type="uri" xlink:href="http://www.gnu.org/licenses/gpl.html" xlink:type="simple">http://www.gnu.org/licenses/gpl.html</ext-link>. Accessed 12 December 2011.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Free3">
        <label>13</label>
        <mixed-citation publication-type="other" xlink:type="simple">Free Software Foundation (FSF) (n.d.) GNU lesser general public license (LGPL) v3.0. Available: <ext-link ext-link-type="uri" xlink:href="http://www.gnu.org/licenses/lgpl.html" xlink:type="simple">http://www.gnu.org/licenses/lgpl.html</ext-link>. Accessed 12 December 2011.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Mozilla1">
        <label>14</label>
        <mixed-citation publication-type="other" xlink:type="simple">Mozilla (n.d.) Mozilla public license, version 2.0. Available: <ext-link ext-link-type="uri" xlink:href="http://www.mozilla.org/MPL/2.0/" xlink:type="simple">http://www.mozilla.org/MPL/2.0/</ext-link>. Accessed 5 January 2012.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Open2">
        <label>15</label>
        <mixed-citation publication-type="other" xlink:type="simple">Open Source Initiative (n.d.) Open Source Initiative website. Available: <ext-link ext-link-type="uri" xlink:href="http://www.opensource.org" xlink:type="simple">http://www.opensource.org</ext-link>. Accessed 10 November 2011.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Open3">
        <label>16</label>
        <mixed-citation publication-type="other" xlink:type="simple">Open Source Initiative (n.d.) Open source licenses by category. Available: <ext-link ext-link-type="uri" xlink:href="http://www.opensource.org/licenses/category" xlink:type="simple">http://www.opensource.org/licenses/category</ext-link>. Accessed 2 April 2012.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-MySQL1">
        <label>17</label>
        <mixed-citation publication-type="other" xlink:type="simple">MySQL (n.d.) MySQL licensing policy. Available: <ext-link ext-link-type="uri" xlink:href="http://www.mysql.com/about/legal/licensing/index.html" xlink:type="simple">http://www.mysql.com/about/legal/licensing/index.html</ext-link>. Accessed 12 December 2011.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Oracle1">
        <label>18</label>
        <mixed-citation publication-type="other" xlink:type="simple">Oracle (n.d.) Oracle Berkeley DB licensing information. Available: <ext-link ext-link-type="uri" xlink:href="http://www.oracle.com/technetwork/database/berkeleydb/downloads/licensing-098979.html" xlink:type="simple">http://www.oracle.com/technetwork/database/berkeleydb/downloads/licensing-098979.html</ext-link>. Accessed 12 December 2011.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-US1">
        <label>19</label>
        <mixed-citation publication-type="other" xlink:type="simple">US House of Representatives (1980) Bayh-Dole Act, 35 U.S.C. § 200–212. Available: <ext-link ext-link-type="uri" xlink:href="http://uscode.house.gov/download/pls/35C18.txt" xlink:type="simple">http://uscode.house.gov/download/pls/35C18.txt</ext-link>. Accessed 29 May 2012.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Sampat1">
        <label>20</label>
        <mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Sampat</surname><given-names>BN</given-names></name> (<year>2010</year>) <article-title>Lessons from Bayh-Dole</article-title>. <source>Nature</source> <volume>468</volume>: <fpage>755</fpage>–<lpage>756</lpage> doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1038/468755a" xlink:type="simple">10.1038/468755a</ext-link>.</mixed-citation>
      </ref>
      <ref id="pcbi.1002598-Morin1">
        <label>21</label>
        <mixed-citation publication-type="journal" xlink:type="simple"><name name-style="western"><surname>Morin</surname><given-names>A</given-names></name>, <name name-style="western"><surname>Urban</surname><given-names>JM</given-names></name>, <name name-style="western"><surname>Adams</surname><given-names>PD</given-names></name>, <name name-style="western"><surname>Foster</surname><given-names>I</given-names></name>, <name name-style="western"><surname>Sali</surname><given-names>A</given-names></name>, <etal>et al</etal>. (<year>2012</year>) <article-title>Shining light into black boxes</article-title>. <source>Science</source> <volume>336</volume>: <fpage>155</fpage>–<lpage>156</lpage> doi:<ext-link ext-link-type="uri" xlink:href="http://dx.doi.org/10.1126/science.1218263" xlink:type="simple">10.1126/science.1218263</ext-link>.</mixed-citation>
      </ref>
    </ref-list>
  </back>
</article>